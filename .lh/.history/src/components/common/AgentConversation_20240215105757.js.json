{
    "sourceFile": ".history/src/components/common/AgentConversation_20240215105757.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710503309483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710503309483,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport MessageList from \"./MessageList\";\nimport { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\nimport AddNotesConversation from \"../forms/admin/AddNotesConversation\";\nimport useValidation from \"./useValidation\";\nimport moment from \"moment\";\nimport { toast } from \"react-toastify\";\nexport default function AgentConversation({\n  userId,\n  userEmail,\n  userName,\n  assignusertype,\n}) {\n  const [allData, setAllData] = useState([]);\n  const [apicall, setApiCall] = useState([]);\n  // INITIAL STATE ASSIGNMENT\n  const initialFormState = {\n    name: \"\",\n    status: \"normal\",\n    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n    subject: \"\",\n    message: \"\",\n    DocUrl: \"\",\n  };\n  // VALIDATION CONDITIONS\n  const validators = {\n    message: [\n      (value) =>\n        value === \"\" || value.trim() === \"\"\n          ? \"message is required\"\n          : /[-]?\\d+(\\.\\d+)?/.test(value)\n          ? \"message can not have a number.\"\n          : value.length < 2\n          ? \"message should have 2 or more letters\"\n          : /[^A-Za-z 0-9]/g.test(value)\n          ? \"Cannot use special character \"\n          : \"\",\n    ],\n    status: [\n      (value) =>\n        value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n    ],\n    // subject: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n    // ],\n    // nxtfollowupdate: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\"\n    //       ? \"Next follow Up Date is required\"\n    //       : null,\n    // ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n    useValidation(initialFormState, validators);\n\n  // Admin details\n  let admin_id = localStorage.getItem(\"admin_id\");\n  let admin_type = localStorage.getItem(\"admin_type\");\n  let admin_name = localStorage.getItem(\"admin\");\n\n  // User details\n  let user_type = localStorage.getItem(\"userType\");\n  let user_name = localStorage.getItem(\"name\");\n  let employee_id = localStorage.getItem(\"employee_id\");\n\n  //Agent details\n  let agent_id = localStorage.getItem(\"agent_id\");\n  // task_creator_user_id: id,\n  // task_creator_user_name: senderName,\n  // doc_id: docId,\n  // assined_to_user_id: assineduserid,\n  // assigned_to: email,\n  // assigned_to_type: adminType,\n  // assigned_to_name: assignName,\n  // assigned_user_type: AssignUserType,\n  // document_url: \"\",\n  // next_followup_date: nextFollowupDate,\n  // followup_status: satus,\n  // subject: subject,\n  // subject_description: comment,\n  // x_axis: x,\n  // y_axis: y,\n  // type: type,\n  //   Render data\n  useEffect(() => {\n    GetNotesData();\n    if (apicall === true) {\n      setApiCall(false);\n    }\n  }, [apicall]);\n  //   Get the notes list\n  const GetNotesData = async () => {\n    try {\n      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"notes\");\n      if (res.data.status === (1 || \"1\")) {\n        setAllData(res.data.data);\n      } else if (res.data.message === \"Task data not found\") {\n        setAllData([]);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  // Submit function to add notes conversation\n  const handleMessageSubmit = async (e) => {\n    e.preventDefault();\n    if (validate()) {\n      try {\n        let res = await ADocAnnotation(\n          user_type === \"admin\"\n            ? admin_id\n            : user_type === \"agent\"\n            ? agent_id\n            : employee_id,\n          \"\", //doc id\n          userId, //assigne dUserId\n          userEmail,\n          state.subject, //subject\n          state.message, //Comment\n          0, //x_axis\n          0, //y_axis\n          \"notes\",\n          user_type === \"admin\" ? admin_type : user_type,\n          user_type === \"admin\" || user_type === \"agent\"\n            ? admin_name\n            : user_name, //sender,\n          userName, //assigned Admin or user Name,\n          state.status, //follow up status\n          state.nxtfollowupdate, //Next follow up date\n          assignusertype, //Assign user type,\n          state.DocUrl\n        );\n        if (res.data.message === \"task inserted successfully!\") {\n          toast.success(\"Message sent Successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          setApiCall(true);\n          setState(initialFormState);\n        }\n        //   console.log(res, \"This is the response\");\n      } catch (err) {\n        console.log(err);\n        if (err.response.data.message === \"required fields cannot be blank\") {\n          toast.error(\" Please try again later.\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          setState(initialFormState);\n        }\n      }\n    }\n  };\n  /*Function to convert file to base64 */\n  const convertToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.addEventListener(\"load\", () => {\n        resolve({ base64: fileReader.result });\n      });\n      fileReader.readAsDataURL(file);\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n  /*On change fnction to upload bulk document in 1 array*/\n  const handleBulkFileChange = async (event, id) => {\n    const files = event.target.files;\n    {\n      // Check the number of files selected\n      if (files.length > 15) {\n        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        return;\n      }\n\n      // Continue with file validation and processing\n      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n      const maxSize = 1024 * 8000; // 8 MB\n\n      const fileList = [];\n      let DocRealName;\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n\n        // Check file type\n        const fileType = `.${file.name.split(\".\").pop()}`;\n        if (!allowedTypes.includes(fileType.toLowerCase())) {\n          toast.error(\n            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            }\n          );\n          return;\n        }\n\n        // Check file size\n        if (file.size > maxSize) {\n          toast.error(\n            `Document size can't be more than 8 MB for file '${file.name}'`,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            }\n          );\n          return;\n        }\n\n        // Read file as data URL\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        const encoded = await convertToBase64(file);\n        const base64Name = encoded.base64;\n\n        // Construct file object with base64 data\n        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n          base64Name.split(\";\")[1]\n        }`;\n\n        // Use DocRealName as the key for DocFile\n        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n        fileList.push({\n          // type: \"notes\",\n          docName: DocRealName,\n          docUrl: DocFile,\n        });\n      }\n      // Store the object of files\n      setState({ ...state, DocUrl: fileList });\n      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n      // setShowSaveDoc(true);\n    }\n  };\n  return (\n    <div className=\"chat_box_container bg-white row m-0\">\n      <div className=\"chat-container col-md-6\">\n        <MessageList data={allData} />\n        <AddNotesConversation\n          handleMessageSubmit={handleMessageSubmit}\n          onInputChange={onInputChange}\n          state={state}\n          errors={errors}\n          handleBulkFileChange={handleBulkFileChange}\n        />\n      </div>\n      <div className=\"chat-container col-md-6\">\n        \n        <MessageList data={allData} />\n      </div>\n    </div>\n  );\n}\n"
        }
    ]
}