{
    "sourceFile": ".history/src/components/common/anotation_20240221125849.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710503309483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710503309483,
            "name": "Commit-0",
            "content": "// import React, { useState, useEffect } from \"react\";\n// import { FaFlag } from \"react-icons/fa\";\n\n// /**\n//  * Component for text annotation and image annotation.\n//  */\n// const Annotation = () => {\n//   //  Annotation State\n//   const [imageAnnotations, setImageAnnotations] = useState([]);\n//   const [comments, setComments] = useState({});\n//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n\n//   // Handle mouse down event to set current annotation for image annotation\n//   const handleMouseDown = (e) => {\n//     if (isAnnotationMode) {\n//       const imageRect = e.target.getBoundingClientRect();\n//       setCurrentAnnotation({\n//         x: e.clientX - imageRect.left,\n//         y: e.clientY - imageRect.top,\n//       });\n//     }\n//   };\n\n//   // Handle mouse up event to save the current annotation for image annotation\n//   const handleMouseUp = () => {\n//     if (isAnnotationMode) {\n//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n//       setCurrentAnnotation({ x: 0, y: 0 });\n//     }\n//   };\n\n//   // Toggle annotation mode for image annotation\n//   const toggleAnnotationMode = () => {\n//     setAnnotationMode(!isAnnotationMode);\n//     setSelectedAnnotation(null);\n//   };\n\n//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n//   const handleFlagClick = (annotation) => {\n//     if (\n//       selectedAnnotation &&\n//       selectedAnnotation.x === annotation.x &&\n//       selectedAnnotation.y === annotation.y\n//     ) {\n//       setSelectedAnnotation(null);\n//     } else {\n//       setSelectedAnnotation(annotation);\n//     }\n//   };\n\n//   // Generate a list of comments from the state for image annotation\n//   const getCommentsList = () => {\n//     const commentsList = [];\n//     for (const key in comments) {\n//       if (comments.hasOwnProperty(key)) {\n//         commentsList.push({ coordinates: key, comment: comments[key] });\n//       }\n//     }\n//     return commentsList;\n//   };\n\n//   // Effect to add the current annotation to the annotations array for image annotation\n//   useEffect(() => {\n//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n//       setCurrentAnnotation({ x: 0, y: 0 });\n//     }\n//   }, [currentAnnotation]);\n\n//   return (\n//     <div>\n//       {/* Annotation */}\n//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n//         <img\n//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n//           alt=\"Annotated Image\"\n//           style={{ height: \"50%\", width: \"50%\" }}\n//           onMouseDown={handleMouseDown}\n//           onMouseUp={handleMouseUp}\n//         />\n\n//         {imageAnnotations.map((annotation, index) => (\n//           <div\n//             key={index}\n//             style={{\n//               position: \"absolute\",\n//               left: annotation.x - 5,\n//               top: annotation.y - 5,\n//               cursor: \"pointer\",\n//             }}\n//             onClick={() => handleFlagClick(annotation)}\n//           >\n//             <FaFlag\n//               style={{\n//                 color:\n//                   selectedAnnotation &&\n//                   selectedAnnotation.x === annotation.x &&\n//                   selectedAnnotation.y === annotation.y\n//                     ? \"pink\"\n//                     : \"red\",\n//               }}\n//             />\n//           </div>\n//         ))}\n\n//         {selectedAnnotation && (\n//           <div\n//             style={{\n//               position: \"absolute\",\n//               left: selectedAnnotation.x + 10,\n//               top: selectedAnnotation.y + 20,\n//               zIndex: 1,\n//             }}\n//           >\n//             <form>\n//               <input\n//                 type=\"text\"\n//                 value={\n//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n//                   \"\"\n//                 }\n//                 onChange={(e) =>\n//                   setComments({\n//                     ...comments,\n//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n//                       e.target.value,\n//                   })\n//                 }\n//               />\n//               <button\n//                 type=\"button\"\n//                 onClick={() => {\n//                   setSelectedAnnotation(null);\n//                 }}\n//               >\n//                 Save Comment\n//               </button>\n//             </form>\n//           </div>\n//         )}\n\n//         <div style={{ marginTop: \"20px\" }}>\n//           <button onClick={toggleAnnotationMode}>\n//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n//           </button>\n//           <h2>List of Comments:</h2>\n//           <ul>\n//             {getCommentsList().map((commentItem, index) => (\n//               <li key={index} className=\"text-break\">\n//                 <strong>{commentItem.coordinates}:</strong>\n//                 {commentItem.comment}\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Annotation;\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { FaFlag } from \"react-icons/fa\";\n// import FileViewer from \"react-file-viewer\";\n// import { MdAddComment } from \"react-icons/md\";\n// import { FcCancel } from \"react-icons/fc\";\n// import { Link } from \"react-router-dom\";\n// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n\n// const Annotation = () => {\n//   // State for image annotations, comments, selected annotation, and annotation mode\n//   const [imageAnnotations, setImageAnnotations] = useState([]);\n//   const [comments, setComments] = useState({});\n//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n//   const [assignments, setAssignments] = useState([]);\n\n//   const fileViewerRef = useRef(null);\n\n//   // Function to handle click events on the FileViewer to capture annotations\n//   const handleFileViewerClick = (e) => {\n//     if (isAnnotationMode) {\n//       const rect = fileViewerRef.current.getBoundingClientRect();\n//       const x = e.clientX - rect.left;\n//       const y = e.clientY - rect.top;\n\n//       // Add annotation\n//       addAnnotation({ x, y });\n//     }\n//   };\n\n//   // Function to add annotation based on conditions\n//   const addAnnotation = ({ x, y }) => {\n//     // Retrieve data from local storage\n//     const id = localStorage.getItem(\"adminId\");\n//     const docId = 111; //props.docId;\n//     const assignedUserId = id;\n//     const email = isEmailConditionMet() ? comments : null;\n//     const subject = \"\";\n//     const comment = isEmailConditionMet() ? null : comments;\n\n//     // Perform any other conditions or checks required for adding annotations\n\n//     // Send data to the API\n//     let res = ADocAnnotation(\n//       id,\n//       docId,\n//       assignedUserId,\n//       email,\n//       subject,\n//       comment,\n//       x,\n//       y\n//     );\n//     console.log(res);\n//     // Update state to include the new annotation\n//     setImageAnnotations([...imageAnnotations, { x, y }]);\n//   };\n\n//   // Function to check if the email condition is met\n//   const isEmailConditionMet = (comment) => {\n//     // Regular expression to match a simple email format\n//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n\n//     // Trim the comment and check if it starts with \"@\" and matches the email format\n//     return (\n//       comment.trim().startsWith(\"@\") &&\n//       emailRegex.test(comment.trim().substring(1))\n//     );\n//   };\n\n//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n//   const handleFlagClick = (annotation) => {\n//     if (\n//       selectedAnnotation &&\n//       selectedAnnotation.x === annotation.x &&\n//       selectedAnnotation.y === annotation.y\n//     ) {\n//       setSelectedAnnotation(null);\n//     } else {\n//       setSelectedAnnotation(annotation);\n//     }\n//   };\n\n//   // Function to get comments and assignments from the API\n//   const getCommentsAndAssign = () => {\n//     GetCommentsAndAssign()\n//       .then((response) => {\n//         // Handle successful API response\n//         console.log(\"Comments and Assignments:\", response);\n//         // Update the state with comments and assignments\n//         setAssignments(response.assignments);\n//         setComments(response.comments);\n//       })\n//       .catch((error) => {\n//         // Handle API error\n//         console.error(\"Error getting comments and assignments:\", error);\n//       });\n//   };\n\n//   // Effect to clear selected annotation when the annotation mode is toggled\n//   useEffect(() => {\n//     setSelectedAnnotation(null);\n//     // Fetch comments and assignments when the component mounts\n//     getCommentsAndAssign();\n//   }, [isAnnotationMode]);\n\n//   return (\n//     <div>\n//       {/* Annotation */}\n//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n//         <div className=\"d-flex justify-content-center\">\n//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n//             <FileViewer\n//               alt=\"Annotated Image\"\n//               style={{\n//                 height: \"100%\",\n//                 width: \"100%\",\n//                 position: \"relative\",\n//                 overflow: \"scroll\",\n//               }}\n//               fileType={\"png\"}\n//               filePath={\n//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n//               }\n//               errorComponent={() => <div>Error loading document</div>}\n//             />\n//           </di>\n//           <Link\n//             className={`btn-sm mt-7 ${\n//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n//             }`}\n//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n//           >\n//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n//           </Link>\n//         </div>\n//         {isAnnotationMode && (\n//           <div\n//             style={{\n//               position: \"absolute\",\n//               top: 0,\n//               left: 0,\n//               width: \"100%\",\n//               height: \"100%\",\n//               pointerEvents: \"none\",\n//             }}\n//           />\n//         )}\n\n//         {imageAnnotations.map((annotation, index) => (\n//           <div\n//             key={index}\n//             style={{\n//               position: \"absolute\",\n//               left: annotation.x - 5,\n//               top: annotation.y - 5,\n//               cursor: \"pointer\",\n//             }}\n//             onClick={() => handleFlagClick(annotation)}\n//           >\n//             <FaFlag\n//               style={{\n//                 color:\n//                   selectedAnnotation &&\n//                   selectedAnnotation.x === annotation.x &&\n//                   selectedAnnotation.y === annotation.y\n//                     ? \"pink\"\n//                     : \"red\",\n//               }}\n//             />\n//           </div>\n//         ))}\n\n//         {selectedAnnotation && (\n//           <div\n//             style={{\n//               position: \"absolute\",\n//               left: selectedAnnotation.x + 10,\n//               top: selectedAnnotation.y + 20,\n//               zIndex: 1,\n//             }}\n//           >\n//             <form>\n//               <input\n//                 type=\"text\"\n//                 value={\n//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n//                   \"\"\n//                 }\n//                 onChange={(e) =>\n//                   setComments({\n//                     ...comments,\n//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n//                       e.target.value,\n//                   })\n//                 }\n//               />\n//               <button\n//                 type=\"button\"\n//                 onClick={() => {\n//                   setSelectedAnnotation(null);\n//                 }}\n//               >\n//                 Save Comment\n//               </button>\n//             </form>\n//           </div>\n//         )}\n\n//         <div style={{ marginTop: \"20px\" }}>\n//           <h2>List of Comments:</h2>\n//           <ul>\n//             {/* {(comments || []).map((commentItem, index) => (\n//               <li key={index} className=\"text-break\">\n//                 <strong>{commentItem.coordinates}:</strong>\n//                 {commentItem.comment}\n//               </li>\n//             ))} */}\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Annotation;\n// import React, { useState } from \"react\";\n\n// const Annotation = () => {\n//   const adminEmails = [\n//     \"admin1@example.com\",\n//     \"admin2@example.com\",\n//     \"admin3@example.com\",\n//   ];\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [filteredEmails, setFilteredEmails] = useState([]);\n\n//   const handleInputChange = (event) => {\n//     const value = event.target.value;\n\n//     // Check if the input starts with '@'\n//     if (value.startsWith(\"@\")) {\n//       // Filter admin emails based on input\n//       const filteredAdminEmails = adminEmails.filter((email) =>\n//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n//       );\n\n//       // Update the filtered emails\n//       setFilteredEmails(filteredAdminEmails);\n//     } else {\n//       // Reset filtered emails if input doesn't start with '@'\n//       setFilteredEmails([]);\n//     }\n\n//     // Update the input value\n//     setInputValue(value);\n//   };\n\n//   const handleEmailClick = (email) => {\n//     // Set the selected email as the input value\n//     setInputValue(email);\n\n//     // Clear the filtered emails\n//     setFilteredEmails([]);\n//   };\n\n//   const handleEmailMouseOver = (email) => {\n//     // Highlight the email on mouseover\n//     setInputValue(email);\n//   };\n\n//   return (\n//     <div style={{ position: \"relative\", width: \"250px\" }}>\n//       <label>Email:</label>\n//       <input\n//         type=\"text\"\n//         value={inputValue}\n//         onChange={handleInputChange}\n//         placeholder=\"Comments or add others with @\"\n//         style={{ fontSize: \"16px\", width: \"100%\" }}\n//       />\n//       {filteredEmails.length > 0 && (\n//         <ul\n//           style={{\n//             listStyle: \"none\",\n//             padding: 0,\n//             margin: 0,\n//             position: \"absolute\",\n//             top: \"100%\",\n//             left: 0,\n//             width: \"100%\",\n//             border: \"1px solid #ccc\",\n//             borderTop: \"none\",\n//             borderRadius: \"0 0 5px 5px\",\n//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n//             backgroundColor: \"#fff\",\n//             zIndex: 1,\n//           }}\n//         >\n//           {filteredEmails.map((email) => (\n//             <li\n//               key={email}\n//               onClick={() => handleEmailClick(email)}\n//               onMouseOver={() => handleEmailMouseOver(email)}\n//               style={{\n//                 padding: \"8px\",\n//                 cursor: \"pointer\",\n//               }}\n//             >\n//               {email}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Annotation;\n//latest\nimport React, { useState } from \"react\";\n\nconst Annotation = () => {\n  const [text, setText] = useState(\"\");\n  const [emails, setEmails] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n\n  const handleInputChange = (e) => {\n    setText(e.target.value);\n    const words = e.target.value.split(/\\s/);\n    const lastWord = words[words.length - 1];\n    if (lastWord.includes(\"@\")) {\n      const email = lastWord.slice(1); // Exclude \"@\"\n      // You can fetch the list of emails based on the entered characters\n      // For simplicity, I'm just providing a static list of emails\n      setEmails([\n        \"example1@example.com\",\n        \"example2@example.com\",\n        \"example3@example.com\",\n      ]);\n    } else {\n      setEmails([]);\n    }\n  };\n\n  const handleEmailSelect = (email) => {\n    setText(text.replace(/@\\S*$/, `@${email} `));\n    setSelectedEmailIndex(null);\n  };\n\n  const handleCommentChange = (e, index) => {\n    const newComments = [...comments];\n    newComments[index] = e.target.value;\n    setComments(newComments);\n  };\n\n  const handleAddComment = () => {\n    setComments([...comments, \"\"]);\n  };\n\n  const handleAnnotationSubmit = () => {\n    // Implement logic to handle annotation submission\n    const newAnnotation = {\n      emails,\n      comments,\n    };\n    console.log(newAnnotation);\n    // Reset states\n    setText(\"\");\n    setEmails([]);\n    setComments([]);\n  };\n\n  const renderEmailList = () => {\n    return (\n      <ul className=\"email-list\">\n        {emails.map((email, index) => (\n          <li key={index} onClick={() => handleEmailSelect(email)}>\n            {email}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  const renderComments = () => {\n    return comments.map((comment, index) => (\n      <div key={index}>\n        <input\n          value={comment || \"\"}\n          onChange={(e) => handleCommentChange(e, index)}\n          placeholder=\"Add comment...\"\n        />\n      </div>\n    ));\n  };\n\n  return (\n    <div>\n      <textarea\n        value={text}\n        onChange={handleInputChange}\n        placeholder=\"Add annotation here...\"\n      />\n      {emails.length > 0 && renderEmailList()}\n      {renderComments()}\n      <button onClick={handleAddComment}>Add Comment</button>\n      <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n    </div>\n  );\n};\n\nexport default Annotation;\n"
        }
    ]
}