{
    "sourceFile": ".history/src/components/common/employeeDocumrentContainer_20240203154547.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710503309604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710503309604,
            "name": "Commit-0",
            "content": "import React, { useState, useRef } from \"react\";\n// import { Form } from \"react-bootstrap\";\nimport Loader from \"./loader\";\nimport {\n  // UploadDocument,\n  UploadBulkDocument,\n  GetEmployeeDocumentList,\n  VarifyDocument,\n  ADocAnnotation,\n  GetCommentsAndAssign,\n  getallAdminData,\n  UpdateDocuentcommentAssign,\n  // DeleteCommentsAndAssign,\n  DeleteDocument,\n  SendReplyCommit,\n  GetReplyCommit,\n} from \"../../api/api\";\nimport LazyLoad from \"react-lazy-load\";\nimport { toast } from \"react-toastify\";\nimport FileViewer from \"react-file-viewer\";\nimport { useEffect } from \"react\";\nimport Verified from \"../../media/verified.png\";\nimport { AiOutlineCloudUpload } from \"react-icons/ai\";\nimport { CiTrash } from \"react-icons/ci\";\n/*Annotation */\nimport { FaFlag } from \"react-icons/fa\";\nimport { MdAddComment } from \"react-icons/md\";\nimport { RxCrossCircled } from \"react-icons/rx\";\nimport { Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport CommentBox from \"./CommentBox\";\nexport default function DocumrentContainer(props) {\n  const [otherDoc, setOtherDoc] = useState(false);\n  const [docName, setDocName] = useState(\"\");\n  const [editName, setEditName] = useState(false);\n  const [docData, setDocData] = useState([]);\n  const [docTypData, setDocTypData] = useState(\"\");\n  const [apiCall, setApiCall] = useState(\"\");\n  const [docFile, setDocFile] = useState(\"\");\n  const [docFileBase, setDocFileBase] = useState(\"\");\n  const [docFileExt, setDocFileExt] = useState(\"\");\n  const [docId, setDocId] = useState(\"\");\n  // const [documentName, setDocumentName] = useState(\"\");\n  const [showMoreDocType, setShowMoreDocType] = useState(false);\n  const [showSaveDoc, setShowSaveDoc] = useState(false);\n  const [hide, setHide] = useState(false);\n  const [bulkUpload, setBulkUpload] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  // let encoded;\n  let user_type = localStorage.getItem(\"userType\");\n  let admin_id = localStorage.getItem(\"admin_id\");\n  // Annotation State\n  const [commenAapiCall, setCommentApiCall] = useState(\"\");\n  const [imageAnnotations, setImageAnnotations] = useState([]);\n  const [comments, setComments] = useState(\"\");\n  const [replyComment, setReplyComment] = useState(\"\");\n  const [commentsList, setCommentsList] = useState([]);\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n  const [isAnnotationMode, setAnnotationMode] = useState(false);\n  let [allAdmin, setAllAdmin] = useState([]);\n  let [adminid, setAdminId] = useState();\n  const [selectedAdmin, setSelectedAdmin] = useState(\"\");\n  const [selectedAdminReply, setSelectedAdminReplye] = useState(\"\");\n  const [addCommentFlag, setAddCommentFlag] = useState(false);\n  const [filteredEmails, setFilteredEmails] = useState([]);\n  const fileViewerRef = useRef(null);\n  let [annotationStatus, setAnnotationStatus] = useState();\n  let [replyCommentClick, setReplyCommentClick] = useState();\n  const [commentsReplyList, setCommentsReplyList] = useState([]);\n  /*Function to get admin list */\n  const AdminData = async () => {\n    try {\n      const userData = await getallAdminData();\n      if (userData.data.length === 0) {\n        setAllAdmin([]);\n      } else {\n        // const filteredData = userData.data.filter(item => item.admin_type === \"manager\");\n        setAllAdmin(userData.data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  /*onchange Function to set email or any other comment  */\n  const handleInputChange = (event, type) => {\n    const value = event.target.value;\n    if (value.startsWith(\"@\")) {\n      AdminData();\n      if (allAdmin) {\n        // Filter admin emails based on input\n        const filteredAdminEmails = allAdmin.filter((admin) =>\n          admin.email.toLowerCase().includes(value.slice(1).toLowerCase())\n        );\n\n        // Update the filtered emails\n        setFilteredEmails(filteredAdminEmails);\n      }\n    } else {\n      // Reset filtered emails if input doesn't start with '@'\n      setFilteredEmails([]);\n    }\n\n    // Update the input value\n    if (type === \"reply\") {\n      setReplyComment(value);\n    } else {\n      setComments(value);\n    }\n  };\n  /*Function to get the email to assign */\n  const handleEmailClick = (email, type) => {\n    // Set the selected admin and update the input value\n    if (type === \"reply\") {\n      setSelectedAdminReplye(email);\n      setReplyComment(replyComment);\n    } else {\n      setSelectedAdmin(email);\n      setComments(comments);\n    }\n    setFilteredEmails([]);\n  };\n  /*Function to get the email to input on hover */\n  const handleEmailMouseOver = (email, type) => {\n    // Highlight the email on mouseover\n    if (type === \"reply\") {\n      setReplyComment(email);\n    } else {\n      setComments(email);\n    }\n  };\n  // Handle click event on the FileViewer to capture annotations\n  const handleFileViewerClick = (e) => {\n    if (isAnnotationMode) {\n      const rect = fileViewerRef.current.getBoundingClientRect();\n      const x_axis = e.clientX - rect.left;\n      const y_axis = e.clientY - rect.top;\n      handleFlagClick({ x_axis, y_axis });\n      setImageAnnotations([...imageAnnotations, { x_axis, y_axis }]);\n      setAddCommentFlag(true);\n    }\n  };\n\n  // Handle flag click to select the annotation and toggle the form visibility for image annotation\n  const handleFlagClick = (annotation) => {\n    // if (\n    //   selectedAnnotation &&\n    //   selectedAnnotation.x === annotation.x &&\n    //   selectedAnnotation.y === annotation.y\n    // ) {\n    //   setSelectedAnnotation(null);\n    // } else {\n    setSelectedAnnotation(annotation);\n    // }\n  };\n  // Generate a list of comments from the state for image annotation\n  const getCommentsList = async () => {\n    if (docId || (docData && docData.find((item) => item.type === docName))) {\n      try {\n        let res = await GetCommentsAndAssign(\n          docId ? docId : docData.find((item) => item.type === docName).id,\n          adminid,\n          annotationStatus\n        );\n        if (res.data.status === (1 || \"1\")) {\n          setCommentsList(res.data.data.reverse());\n          setImageAnnotations(res.data.data);\n        } else if (res.data.message === \"Task data not found\") {\n          setCommentsList([]);\n          setImageAnnotations([]);\n        }\n      } catch (err) {\n        console.log(err);\n        setCommentsList([]);\n        setImageAnnotations([]);\n      }\n    } else {\n      setCommentsList([]);\n      setImageAnnotations([]);\n    }\n  };\n\n  // Generate a list of comments reply\n  const getCommentsReplyList = async () => {\n    if (docId || docData.find((item) => item.type === docName)) {\n      try {\n        let res = await GetReplyCommit(\n          docId ? docId : docData.find((item) => item.type === docName).id,\n          adminid,\n          annotationStatus\n        );\n        if (res.data.status === (1 || \"1\")) {\n          setCommentsReplyList(res.data.data.reverse());\n        }\n      } catch (err) {\n        console.log(err);\n        setCommentsReplyList([]);\n      }\n    } else {\n      setCommentsReplyList([]);\n    }\n  };\n  /*Annotaton functionalites close */\n  /*Functo get Applicants Document */\n  const GetDocument = async () => {\n    try {\n      let response = await GetEmployeeDocumentList(props.employee_id);\n      if (\n        response.data.data === undefined ||\n        response.data.data === \"\" ||\n        response.data.data === null ||\n        response.data.data.length === 0 ||\n        response.data.message === \"No data found\"\n      ) {\n        setDocData([]);\n        setLoading(false);\n      } else {\n        setDocData(response.data.data);\n        setLoading(false);\n        // eslint-disable-next-line\n        if (\n          docTypData === undefined ||\n          docTypData === \"undefined\" ||\n          (docTypData === \"\" && docName === \"\" && otherDoc === false)\n        ) {\n          setDocTypData(response.data.data[0]);\n          setDocFile(\n            response.data.data[0].document_url +\n              `?v=${new Date().getMinutes() + new Date().getSeconds()}`\n          );\n          setDocName(response.data.data[0].type);\n          setDocId(response.data.data[0].id);\n        } else if (\n          showMoreDocType === false &&\n          response.data.data.find((item) => item.type === docName)\n        ) {\n          if (\n            response.data.data.find((item) => item.type === docName).type ===\n            docName\n          ) {\n            setDocTypData(\n              response.data.data.find((item) => item.type === docName)\n            );\n            setDocName(\n              response.data.data.find((item) => item.type === docName).type\n            );\n            setDocId(\n              response.data.data.find((item) => item.type === docName).id\n            );\n            setDocFile(\n              response.data.data.find((item) => item.type === docName)\n                .document_url +\n                `?v=${new Date().getMinutes() + new Date().getSeconds()}`\n            );\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  /*Function to convert file to base64 */\n  const convertToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.addEventListener(\"load\", () => {\n        resolve({ base64: fileReader.result });\n      });\n      fileReader.readAsDataURL(file);\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n\n  /*Onchange function of SIngle update document */\n  // const handleFileChange = async (event, id) => {\n  //   const file = event.target.files[0];\n  //   if (!file) {\n  //     toast.error(\"No file selected\", {\n  //       position: toast.POSITION.TOP_RIGHT,\n  //       autoClose: 1000,\n  //     });\n  //     return;\n  //   }\n  //   // Check file type\n  //   const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n  //   const fileType = `.${file.name.split(\".\").pop()}`;\n  //   if (!allowedTypes.includes(fileType.toLowerCase())) {\n  //     toast.error(\n  //       \"Invalid document type. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG\",\n  //       {\n  //         position: toast.POSITION.TOP_RIGHT,\n  //         autoClose: 1000,\n  //       }\n  //     );\n  //     return;\n  //   }\n  //   // Check file size\n  //   else if (file.size > 1024 * 8000) {\n  //     toast.error(\"Document size can't be more than 8 mb\", {\n  //       position: toast.POSITION.TOP_RIGHT,\n  //       autoClose: 1000,\n  //     });\n  //     return;\n  //   } else {\n  //     const reader = new FileReader();\n  //     // Read the file as a data URL\n  //     reader.readAsDataURL(file);\n  //     encoded = await convertToBase64(file);\n  //     let base64Name = encoded.base64;\n  //     let DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n  //       base64Name.split(\";\")[1]\n  //     }`;\n  // setDocFile(base64Name);\n  // setDocFileExt(fileType.slice(1));\n  // setDocumentName(file.name.split(\".\")[0].replace(/ /g, \"_\"));\n  // setDocFileBase(DocFile);\n  //     setShowSaveDoc(true);\n  //     // if (window.confirm(\"Are you sure you want to upload this document?\")) {\n  //     //   let DocFile =\n  //     //     `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]}`\n  //     //   //Api to upload document\n  //     //   let response = await UploadDocument(props.employee_id, docName, DocFile, id)\n  //     //   if (response.data.message === \"inserted successfully\") {\n  //     //     toast.success(\"Document uploaded Successfully\", {\n  //     //       position: toast.POSITION.TOP_RIGHT,\n  //     //       autoClose: 1000,\n  //     //     });\n  //     //     setShowMoreDocType(false)\n  //     //     setDocName(docName)\n  //     //     setApiCall(true)\n  //     //   }\n  //     //   if (response.data.message === \"updated successfully\") {\n  //     //     toast.success(\"Document Updated Successfully\", {\n  //     //       position: toast.POSITION.TOP_RIGHT,\n  //     //       autoClose: 1000,\n  //     //     });\n  //     //     setShowMoreDocType(false)\n  //     //     setApiCall(true)\n  //     //     setDocTypData(docData.find((item) => item.type === docName))\n  //     //     setDocFile(docData.find((item) => item.type === docName).document_url + `?v=${new Date().getMinutes() + new Date().getSeconds()}`)\n  //     //   }\n  //     //   if (response.data.message === \"Invalid base64-encoded data !\") {\n  //     //     toast.error(\"Document type is not valid\", {\n  //     //       position: toast.POSITION.TOP_RIGHT,\n  //     //       autoClose: 1000,\n  //     //     });\n  //     //     setApiCall(true)\n  //     //   }\n  //     // } else {\n  //     //   toast.error(\"Document update denied.\", {\n  //     //     position: toast.POSITION.TOP_RIGHT,\n  //     //     autoClose: 1000,\n  //     //   });\n  //     //   setApiCall(true);\n  //     // }\n  //   }\n  // };\n\n  /*On change fnction to upload bulk document in 1 array*/\n  const handleBulkFileChange = async (event, id) => {\n    const files = event.target.files;\n\n    // Check the number of files selected\n    if (files.length > 15) {\n      toast.error(\"You can only upload a maximum of 15 files at a time\", {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 1000,\n      });\n      return;\n    }\n\n    // Continue with file validation and processing\n    const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n    const maxSize = 1024 * 8000; // 8 MB\n\n    const fileList = {};\n    let DocRealName;\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n\n      // Check file type\n      const fileType = `.${file.name.split(\".\").pop()}`;\n      if (!allowedTypes.includes(fileType.toLowerCase())) {\n        toast.error(\n          `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n          {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          }\n        );\n        return;\n      }\n\n      // Check file size\n      if (file.size > maxSize) {\n        toast.error(\n          `Document size can't be more than 8 MB for file '${file.name}'`,\n          {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          }\n        );\n        return;\n      }\n\n      // Read file as data URL\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      const encoded = await convertToBase64(file);\n      const base64Name = encoded.base64;\n\n      // Construct file object with base64 data\n      const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n        base64Name.split(\";\")[1]\n      }`;\n\n      // Use DocRealName as the key for DocFile\n      DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n      fileList[DocRealName] = DocFile;\n    }\n\n    // Store the object of files\n    setDocFileBase(fileList);\n    bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n    setShowSaveDoc(true);\n  };\n\n  /*Function to save document */\n  // const SaveDocument = async () => {\n  //   try {\n  //     let response = await UploadDocument(\n  //       props.employee_id,\n  //       docData[0] === docTypData ? docTypData.type : docName,\n  //       docFileBase,\n  //       docData[0] === docTypData ? docTypData.id : docId,\n  //       documentName\n  //     );\n  //     if (response.data.message === \"inserted successfully\") {\n  //       toast.success(\"Document uploaded Successfully\", {\n  //         position: toast.POSITION.TOP_RIGHT,\n  //         autoClose: 1000,\n  //       });\n  //       setShowMoreDocType(false);\n  //       setOtherDoc(false);\n  //       setDocName(docName);\n  //       setDocFileBase(\"\");\n  //       setDocFileExt(\"\");\n  //       setDocId(\"\");\n  //       setShowSaveDoc(false);\n  //       setApiCall(true);\n  //       setCommentApiCall(true);\n  //       setHide(false);\n  //     }\n  // if (response.data.message === \"updated successfully\") {\n  //   toast.success(\"Document Updated Successfully\", {\n  //     position: toast.POSITION.TOP_RIGHT,\n  //     autoClose: 1000,\n  //   });\n  //   if (commentsList.length > 0) {\n  //     OnHandleUpdateComment(\n  //       docData[0] === docTypData ? docTypData.id : docId\n  //     );\n  //     // OnDeleteComment(docData[0] === docTypData ? docTypData.id : docId);\n  //   }\n  //   setShowMoreDocType(false);\n  //   setApiCall(true);\n  //   setCommentApiCall(true);\n  //   setHide(false);\n  //   setDocTypData(\n  //     docData.find(\n  //       (item) =>\n  //         item.type ===\n  //         (docData[0] === docTypData ? docTypData.type : docName)\n  //     )\n  //   );\n  //   setDocFile(\n  //     docData.find(\n  //       (item) =>\n  //         item.type ===\n  //         (docData[0] === docTypData ? docTypData.type : docName)\n  //     ).document_url +\n  //       `?v=${new Date().getMinutes() + new Date().getSeconds()}`\n  //   );\n  // }\n  //     if (response.data.message === \"fields must not be empty !\") {\n  //       toast.error(\"Document type is requried\", {\n  //         position: toast.POSITION.TOP_RIGHT,\n  //         autoClose: 1000,\n  //       });\n  //       setApiCall(true);\n  //       setHide(false);\n  //     }\n\n  //     if (\n  //       response.data.message === \"Invalid base64-encoded data !\" ||\n  //       response.data.message === \"Unsupported file type !\"\n  //     ) {\n  //       toast.error(\"Document type is not valid\", {\n  //         position: toast.POSITION.TOP_RIGHT,\n  //         autoClose: 1000,\n  //       });\n  //       setApiCall(true);\n  //       setHide(false);\n  //     }\n  //   } catch (err) {\n  //     console.log(err);\n  //     setHide(false);\n  //   }\n  // };\n  /* Upload documents in bulk*/\n  let SaveBulkDocument = async () => {\n    try {\n      let response = await UploadBulkDocument(\n        props.employee_id,\n        docFileBase,\n        bulkUpload === \"no\"\n          ? docData[0] === docTypData\n            ? docTypData.id\n            : docId\n          : \"\"\n      );\n\n      if (response.data.message === \"inserted successfully\") {\n        // Condition: If some file types are not supported and some are supported, then those that are supported will be uploaded while those that are not supported won't.\n        if (response.data.data.length > 0) {\n          toast.success(\" Documents uploaded successfully.\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 2000,\n          });\n          toast.error(\n            <>\n              Unsupported Files:\n              <ul>\n                {response.data.data.map((item, index) => (\n                  <li key={index}>{item.type}</li>\n                ))}\n              </ul>\n            </>,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 2000,\n            }\n          );\n        } else {\n          toast.success(\"Documents uploaded Successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 2000,\n          });\n        }\n        setShowMoreDocType(false);\n        setOtherDoc(false);\n        setDocName(docName);\n        setBulkUpload(\"\");\n        setDocFileBase(\"\");\n        setDocFileExt(\"\");\n        setDocId(\"\");\n        setShowSaveDoc(false);\n        setApiCall(true);\n        setCommentApiCall(true);\n        setHide(false);\n      }\n      if (response.data.message === \"updated successfully\") {\n        toast.success(\"Document Updated Successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setDocId(docData[0] === docTypData ? docTypData.id : docId);\n        setShowMoreDocType(false);\n        setOtherDoc(false);\n        setApiCall(true);\n        setCommentApiCall(true);\n        setBulkUpload(\"\");\n        setHide(false);\n        setDocName(docName);\n        setShowSaveDoc(false);\n        // setDocTypData(docData.find((item) => item.type === docName));\n        // console.log(\n        //   docData.find((item) => item.type === docName),\n        //   docName,\n        //   docData\n        // );\n        // setDocFile(\n        //   docData.find((item) => item.type === docName).document_url +\n        //     `?v=${new Date().getMinutes() + new Date().getSeconds()}`\n        // );\n        // if (commentsList.length > 0) {\n        //   OnHandleUpdateComment(\n        //     docData[0] === docTypData ? docTypData.id : docId\n        //   );\n        //   // OnDeleteComment(docData[0] === docTypData ? docTypData.id : docId);\n        // }\n      }\n\n      if (\n        response.data.message === \"Invalid base64-encoded data !\" ||\n        response.data.message === \"Unsupported file type !\"\n      ) {\n        toast.error(\"Document type is not valid\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setApiCall(true);\n        setHide(false);\n        setBulkUpload(\"\");\n        setShowSaveDoc(false);\n      }\n      if (\n        response.data.message === \"all fields required !\" ||\n        response.data.message === \"fields must not be empty !\"\n      ) {\n        toast.error(\"All fields are required !\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setApiCall(true);\n        setShowSaveDoc(false);\n        setHide(false);\n        setBulkUpload(\"\");\n      }\n      if (response.error === \"Unauthorized\") {\n        toast.error(\"Token expires, please log in again.\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setApiCall(true);\n        setHide(false);\n        setShowSaveDoc(false);\n        setBulkUpload(\"\");\n      }\n    } catch (err) {\n      console.log(err);\n      toast.error(\"Something went wrong try again later!\", {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 1000,\n      });\n      setApiCall(true);\n      setShowSaveDoc(false);\n      setHide(false);\n      setBulkUpload(\"\");\n    }\n  };\n  /*Fuinction to render image */\n  const RenderNewDocFile = () => {\n    return (\n      <React.Fragment>\n        {docFile ? (\n          <>\n            <div\n              className=\"w-100\"\n              ref={fileViewerRef}\n              onClick={handleFileViewerClick}\n            >\n              <LazyLoad\n                height={\"100%\"}\n                offsetVertical={\"100%\"}\n                debounce={false}\n              >\n                {docTypData.document_name &&\n                docTypData.document_name.toLowerCase().includes(\"imm\") ? (\n                  <iframe\n                    src={docFile}\n                    height={\"768px\"}\n                    width={\"768px\"}\n                    title={docTypData.document_name}\n                  ></iframe>\n                ) : (\n                  <FileViewer\n                    key={docTypData.id}\n                    fileType={\n                      docFileExt\n                        ? docFileExt\n                        : docTypData.extension_type ===\n                          \"vnd.openxmlformats-officedocument.wordprocessingml.document\"\n                        ? \"docx\"\n                        : docTypData.extension_type\n                    }\n                    filePath={docFile}\n                    errorComponent={() => <div>Error loading document</div>}\n                  />\n                )}\n              </LazyLoad>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-center mt-5\">No document found</div>\n        )}\n      </React.Fragment>\n    );\n  };\n  /* Function to replace the _ and correct the document type */\n  const textReplaceFunction = (e) => {\n    let new_text = e.replaceAll(\"_\", \" \");\n    return new_text;\n  };\n  /*Function to verify the applicants documents */\n  const onVerifyDocuments = async (id, verify) => {\n    try {\n      let response = await VarifyDocument(id, verify);\n      if (response.data.message === \"successfully\") {\n        toast.success(\"Document Verify Successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setApiCall(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  /*Function to delete document  */\n  const OnDeleteDoc = async (id) => {\n    try {\n      let res = await DeleteDocument(id, \"employee\");\n      if (res.data.message === \"document deleted successfully!\") {\n        toast.success(\"Document deleted Successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setDocFile(\"\");\n        setDocId(\"\");\n        setDocData(\"\");\n        setDocTypData(\"\");\n        setDocName(\"\");\n        setApiCall(true);\n        GetDocument();\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  /*Type array */\n  // let DocTypeData = [\n  //   \"passport\",\n  //   \"drivers_license\",\n  //   \"photograph\",\n  //   \"immigration_status\",\n  //   \"lmia\",\n  //   \"job_offer_letter\",\n  //   \"provincial_nominee_letter\",\n  //   \"proof_of_funds\",\n  //   \"proof_of_employment\",\n  //   \"marriage_certificate\",\n  //   \"education_metric\",\n  //   \"education_higher_secondary\",\n  //   \"education_graduation\",\n  //   \"education_post_graduation\",\n  //   \"resume_or_cv\",\n  //   \"ielts\",\n  //   \"medical\",\n  //   \"police_clearance\",\n  //   \"refusal_letter\",\n  //   \"Employment Contract\",\n  //   \"Reference Letters\",\n  //   \"Client Info\",\n  //   \"Representative Submission Letter\",\n  //   \"Bank Statement\",\n  // ];\n  //UseEfect for document\n  useEffect(() => {\n    GetDocument();\n    RenderNewDocFile();\n    if (apiCall === true) {\n      setApiCall(false);\n    }\n    setAnnotationMode(false);\n  }, [docId, apiCall, docName]);\n  //USeEffect foe commet replies list\n  useEffect(() => {\n    // getCommentsReplyList();\n    if (user_type === \"admin\") {\n      AdminData();\n    }\n  }, [replyCommentClick]);\n  //USeEffect foe commet list\n  useEffect(() => {\n    setSelectedAnnotation(null);\n    getCommentsList();\n    if (commenAapiCall === true) {\n      setCommentApiCall(false);\n    }\n  }, [docId, commenAapiCall, adminid, annotationStatus]);\n\n  // const handleDocTypeChange = (e) => {\n  //   const selectedValue = e.target.value;\n  //   if (selectedValue === \"other\") {\n  //     setOtherDoc(true);\n  //     setShowMoreDocType(false);\n  //     setDocTypData(\"\");\n  //     setDocId(\"\");\n  //     setDocName(\"\");\n  //   } else {\n  //     setOtherDoc(false);\n  //     setDocName(selectedValue);\n  //   }\n  // };\n  /*Function to download Document */\n  const DownloadDocument = async () => {\n    const response = await fetch(docFile);\n    const blob = await response.blob();\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = docTypData.document_name + \".\" + docTypData.extension_type;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Clean up the temporary URL\n    URL.revokeObjectURL(url);\n  };\n  /*Function to Print Document  */\n  const PrintDocument = () => {\n    const printWindow = window.open(\"\", \"_blank\");\n    const content = `\n      <html>\n        <head>\n          <title>Print Document</title>\n        </head>\n        <body>\n          <embed src=\"${docFile}\" width=\"100%\" height=\"100%\">\n        </body>\n      </html>\n    `;\n\n    printWindow.document.open();\n    printWindow.document.write(content);\n    printWindow.document.close();\n    printWindow.onload = () => {\n      printWindow.print();\n    };\n  };\n\n  /*Major api's for annotations */\n  // Function to add annotation based on conditions\n  const addAnnotation = async (annotation) => {\n    setAddCommentFlag(false);\n    // Retrieve data from local storage\n    const assignedUserId = allAdmin.find((item) => item.email === selectedAdmin)\n      ? allAdmin.find((item) => item.email === selectedAdmin).admin_id\n      : admin_id;\n    const AdminType = allAdmin.find((item) => item.email === selectedAdmin)\n      ? allAdmin.find((item) => item.email === selectedAdmin).admin_type\n      : \"admin\";\n    const email = selectedAdmin || \"\"; ///\\S+@\\S+\\.\\S+/.test(comments) ? comments : \"\";\n    const subject = \"\";\n    const comment = /\\S+@\\S+\\.\\S+/.test(comments)\n      ? comments.replace(/\\S+@\\S+\\.\\S+/g, \"\")\n      : comments; ///\\S+@\\S+\\.\\S+/.test(comments) ? \"\" : comments;\n    let DocId = docId\n      ? docId\n      : docData.find((item) => item.type === docName).id;\n    // Send data to the API\n    try {\n      let res = await ADocAnnotation(\n        admin_id,\n        DocId,\n        assignedUserId,\n        email,\n        subject,\n        comment,\n        annotation.x_axis,\n        annotation.y_axis,\n        \"employee\",\n        AdminType\n      );\n      if (res.data.message === \"task inserted successfully!\") {\n        toast.success(\"Comment uploaded Successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setSelectedAnnotation(null);\n        setComments(\"\");\n        setCommentApiCall(true);\n        setSelectedAdmin(\"\");\n        setAnnotationMode(!isAnnotationMode);\n        setFilteredEmails([]);\n      }\n    } catch (err) {\n      console.log(err);\n      if (err.response.data.message === \"required fields cannot be blank\") {\n        toast.error(\" Please try again later.\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setSelectedAnnotation(null);\n        setComments(\"\");\n        setSelectedAdmin(\"\");\n        setCommentApiCall(true);\n        setAnnotationMode(!isAnnotationMode);\n        setAddCommentFlag();\n        setFilteredEmails([]);\n      }\n    }\n    // Update state to include the new annotation\n    // setImageAnnotations([...imageAnnotations, { x, y }]);\n  };\n  /* Function to update comment and assign */\n  const OnHandleUpdateComment = async (originalData) => {\n    let updatedData;\n    //Condtion to update x and y axis on documet update\n    if (originalData === (docData[0] === docTypData ? docTypData.id : docId)) {\n      updatedData = { doc_id: originalData, x_axis: 0, y_axis: 0 };\n    } else {\n      updatedData = { ...originalData };\n      updatedData.status = originalData.status === \"1\" ? \"0\" : \"1\";\n    }\n    try {\n      // Call the API with the updated data\n      let res = await UpdateDocuentcommentAssign(updatedData);\n      if (res.message === \"Task updated successfully!\") {\n        toast.success(\"Task completed Successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setSelectedAnnotation(null);\n        setComments(\"\");\n        setCommentApiCall(true);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  /*Function to delete document comments*/\n  // const OnDeleteComment = async (docId) => {\n  //   try {\n  //     let res = await DeleteCommentsAndAssign(docId);\n  //     console.log(res);\n  //   } catch (err) {\n  //     console.log(err);\n  //   }\n  // };\n  /*Function to set the color code to the background of the user name */\n  const determineBackgroundColor = (commentItem) => {\n    const colorClasses = [\n      \"bg-primary-opacity-7\",\n      \"bg-warning-opacity-7\",\n      \"bg-orange-opacity-6\",\n      \"bg-info-opacity-7\",\n      \"bg-secondary-opacity-7\",\n      \"bg-danger-opacity-6\",\n      \"bg-info-opacity-visible\",\n    ];\n\n    const assignedUserId = commentItem.assigned_to_user_id;\n\n    // Create a mapping dynamically based on assignedUserId\n    const userColorMap = {};\n\n    // Check if assignedUserId is present in the mapping\n    if (assignedUserId && userColorMap.hasOwnProperty(assignedUserId)) {\n      return userColorMap[assignedUserId];\n    }\n\n    // If not found in the mapping, use the colorClasses logic\n    const id = commentItem.id;\n    const hashCode = (str) => {\n      let hash = 0;\n      for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n      }\n      return hash;\n    };\n\n    const hash = Math.abs(hashCode(id.toString()));\n    const index = hash % colorClasses.length;\n\n    return colorClasses[index];\n  };\n  /*Function to reply for the comment */\n  const ReplyAnnotation = async (data) => {\n    let emailrejex = /\\S+@\\S+\\.\\S+/;\n    let id = emailrejex.test(selectedAdminReply)\n      ? allAdmin.find((item) => item.email === selectedAdminReply).admin_id\n      : data.assined_to_user_id;\n    let adminType = emailrejex.test(selectedAdminReply)\n      ? allAdmin.find((item) => item.email === selectedAdminReply).admin_type\n      : \"admin\";\n    try {\n      let res = await SendReplyCommit(\n        data,\n        selectedAdminReply || \"\", //emailrejex.test(replyComment) ? replyComment : \"\",\n        /\\S+@\\S+\\.\\S+/.test(replyComment)\n          ? replyComment.replace(/\\S+@\\S+\\.\\S+/g, \"\")\n          : replyComment, //!emailrejex.test(replyComment) ? replyComment : \"\",\n        id,\n        adminType\n      );\n      if (res.data.message === \"message sent successfully!\") {\n        toast.success(\"Replied Successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setReplyComment(\"\");\n        getCommentsReplyList();\n        setSelectedAdminReplye(\"\");\n        setFilteredEmails([]);\n      }\n    } catch (err) {\n      console.log(err);\n      setSelectedAdminReplye(\"\");\n      setFilteredEmails([]);\n    }\n  };\n  return (\n    <div\n      className={\n        // props.page === \"company_profile\"\n        //\n        \"document_container bg-white mb-10\"\n        // : \"container document_container bg-white p-5 mb-10\"\n      }\n    >\n      <div className=\"row m-0\">\n        <div\n          className={`${\n            user_type === \"admin\" ? \"col-md-2\" : \"col-md-4\"\n          } p-0 border-right pb-7`}\n        >\n          <h5 className=\"pl-5 pt-5 d-flex justify-content-between align-items-center\">\n            Document List\n          </h5>\n          {/* Documents type list */}\n          <table className=\"table font-size-3\">\n            <thead>\n              <tr>\n                <th className=\"p-3\" scope=\"col\">\n                  Document\n                </th>\n                {/* <th className=\"p-3\" scope=\"col\">\n                  Date\n                </th> */}\n                <th className=\"p-3\" scope=\"col\"></th>\n                <th className=\"p-3\" scope=\"col\"></th>\n              </tr>\n            </thead>\n            <tbody className=\"doc_list\">\n              {docData.length === 0 ? (\n                <tr>\n                  <th className=\"bg-white text-center\" colSpan={5}>\n                    No Data Found\n                  </th>\n                </tr>\n              ) : (\n                (docData || []).map((item, index) => (\n                  <tr\n                    key={index}\n                    action\n                    // active={\n                    //   docTypData.type === item.type ||\n                    //   (showMoreDocType === false && item.type === docName)\n                    // }\n                    active={item.type === docName}\n                    onClick={() => {\n                      setShowMoreDocType(false);\n                      setDocTypData(item);\n                      setDocName(item.type);\n                      setDocId(item.id);\n                      setOtherDoc(false);\n                      setHide(false);\n                      setShowSaveDoc(false);\n                      setFilteredEmails([]);\n                      setAnnotationMode(!isAnnotationMode);\n                      setReplyCommentClick();\n                      setDocFile(\n                        item.document_url +\n                          `?v=${\n                            new Date().getMinutes() + new Date().getSeconds()\n                          }`\n                      );\n                    }}\n                    className={\n                      item.type === docName\n                        ? \"text-capitalize bg-primary text-white\"\n                        : \"text-capitalize\"\n                    }\n                  >\n                    <td className=\"p-3\">\n                      {editName === true && docName === item.type ? (\n                        <div className=\"reply_box position-relative\">\n                          \n                          <input\n                            type=\"text\"\n                            value={docName}\n                            className=\"font-size-2 m-3 bg-primary border-0 border-none\"\n                            onChange={(e) => {\n                              docName(e.target.value);\n                              docFileBase(docName);\n                            }}\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => {\n                              SaveBulkDocument();\n                            }}\n                            className=\"btn btn-primary border-0 rounded reply_btn\"\n                          >\n                            {\">>\"}\n                          </button>\n                        </div>\n                      ) : (\n                        <Link\n                          onClick={() => setEditName(true)}\n                          className=\"text-dark\"\n                        >\n                          {textReplaceFunction(item.type)}\n                          <p className=\"font-size-2 m-0\">\n                            {moment(item.updated_at).format(\"DD-MMM-YYYY\")}\n                          </p>\n                        </Link>\n                      )}\n                    </td>\n                    {/* <td className=\"p-3\">\n                      {item.updated_by_name\n                        ? item.updated_by_name\n                        : item.created_by_name}\n                    </td> */}\n                    <td className=\"p-3\"></td>\n                    <td className=\"p-3\">\n                      {item.is_varify === \"1\" ? (\n                        // <span className=\"verified_doc\">\n                        //   <img className=\"w-100\" src={Verified} alt=\"\" />\n                        // </span>\n                        <span>&#x2713;</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </td>\n                    <td className=\"p-3\">\n                      <Link onClick={() => OnDeleteDoc(item.id)}>\n                        <CiTrash\n                          style={{\n                            color: item.type === docName ? \"white\" : \"black\",\n                            fontSize: \"18px\",\n                          }}\n                        />\n                      </Link>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n          {/* <ListGroup defaultActiveKey=\"#link1\">\n          {(docData || []).map((item, index) => (\n            <ListGroup.Item\n              key={index}\n              action\n              // active={\n              //   docTypData.type === item.type ||\n              //   (showMoreDocType === false && item.type === docName)\n              // }\n              active={item.type === docName}\n              onClick={() => {\n                setShowMoreDocType(false);\n                setDocTypData(item);\n                setDocName(item.type);\n                setDocId(item.id);\n                setOtherDoc(false);\n                setHide(false);\n                setShowSaveDoc(false);\n                setDocFile(\n                  item.document_url +\n                    `?v=${new Date().getMinutes() + new Date().getSeconds()}`\n                );\n              }}\n              className=\"text-capitalize\"\n            >\n              {textReplaceFunction(item.type)}\n              {item.is_varify === \"1\" ? (\n                <span className=\"verified_doc\">\n                  <img className=\"w-100\" src={Verified} alt=\"\" />\n                </span>\n              ) : null}\n            </ListGroup.Item>\n          ))}\n          <ListGroup.Item\n            className={\n              user_type === \"company\" || user_type === \"admin\"\n                ? \"bg-secondary text-white\"\n                : \"d-none\"\n            }\n            onClick={() => {\n              setShowMoreDocType(true);\n              setDocTypData(\"\");\n              setDocId(\"\");\n              setOtherDoc(false);\n              setDocFile(\"\");\n              setHide(false);\n              setShowSaveDoc(false);\n            }}\n          >\n            <b>+ Add New Documents</b>\n          </ListGroup.Item>\n        </ListGroup> */}\n        </div>\n        <div\n          className={`${user_type === \"admin\" ? \"col-md-7\" : \"col-md-8\"} py-7`}\n        >\n          <div className=\"row px-0 pt-0 pb-5 doc_upload_row m-0\">\n            {/* {showMoreDocType ? (\n              <div className=\"doc_upload_col\">\n                <Form.Select\n                  className=\"form-control select_document_type\"\n                  value={docName}\n                  onChange={(e) => handleDocTypeChange(e)}\n                >\n                  <option value={\"\"}>Select document</option>\n                  {(DocTypeData || []).map((item, index) => {\n                    return (\n                      <option value={item} key={index}>\n                        {textReplaceFunction(item)}\n                      </option>\n                    );\n                  })}\n                  <option value={\"other\"}>Other</option>\n                </Form.Select>\n              </div>\n            ) : (\n              <button\n                className={\n                  user_type === \"user\" ||\n                  user_type === \"admin\" ||\n                  user_type === \"agent\"\n                    ? \"btn btn-secondary btn-sm text-white mr-0\"\n                    : \"d-none\"\n                }\n                onClick={() => {\n                  setShowMoreDocType(true);\n                  setDocTypData(\"\");\n                  setDocId(\"\");\n                  setOtherDoc(false);\n                  setDocFile(\"\");\n                  setHide(false);\n                  setShowSaveDoc(false);\n                }}\n              >\n                + Add New Documents\n              </button>\n            )} */}\n            {otherDoc === true ? (\n              <div className=\"doc_upload_col\">\n                <input\n                  className=\"form-control\"\n                  value={docName}\n                  onChange={(e) => setDocName(e.target.value)}\n                  placeholder=\"Document Name\"\n                />\n              </div>\n            ) : null}\n            <div className=\"\">\n              <label className=\"btn btn-secondary\">\n                <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\n                <input\n                  type=\"file\"\n                  accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                  style={{ display: \"none\" }}\n                  onChange={(e) => {\n                    handleBulkFileChange(e, docTypData.id);\n                    setHide(true);\n                  }}\n                />\n                Upload New Documents\n              </label>\n            </div>\n            {docTypData.id && (\n              <div className=\"\">\n                <label className=\"btn btn-light\">\n                  <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\n                  <input\n                    type=\"file\"\n                    accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                    style={{ display: \"none\" }}\n                    onChange={(e) => {\n                      handleBulkFileChange(e, docTypData.id);\n                      setHide(true);\n                      setBulkUpload(\"no\");\n                    }}\n                  />\n                  Update Current Document\n                </label>\n              </div>\n            )}\n            {showSaveDoc ? (\n              <div className=\"doc_upload_col\">\n                <button className=\"btn btn-primary\" onClick={SaveBulkDocument}>\n                  Save Documents\n                </button>\n              </div>\n            ) : null}\n            {hide === true ? (\n              <div className=\"doc_upload_col\">\n                <button\n                  className=\"btn btn-light\"\n                  onClick={() => {\n                    setHide(false);\n                    setApiCall(true);\n                    setShowSaveDoc(false);\n                    setDocFile(\"\");\n                    setDocFileExt(\"\");\n                    setFilteredEmails([]);\n                  }}\n                >\n                  Cancel\n                </button>\n              </div>\n            ) : null}\n          </div>\n          <div className=\"doc_preview_box p-5 bg-light rounded position-relative\">\n            {/* {docTypData ? ( */}\n            <div className=\"doc_action_div\">\n              {docFile ? (\n                hide === false && docTypData && user_type === \"admin\" ? (\n                  <div className=\"doc_upload_col\">\n                    {docTypData.is_varify === \"1\" ? (\n                      <img className=\"verified_doc_img\" src={Verified} alt=\"\" />\n                    ) : (\n                      <button\n                        className=\"btn btn-info\"\n                        disabled={docTypData.is_varify === \"0\" ? false : true}\n                        onClick={() => onVerifyDocuments(docTypData.id, 1)}\n                      >\n                        Verify document\n                      </button>\n                    )}\n                  </div>\n                ) : null\n              ) : null}\n              {hide === false && docFile && docName && user_type === \"admin\" ? (\n                <div className=\"doc_upload_col flex-end\">\n                  <button\n                    className=\"p-1 rounded-3 btn-warning mx-3 w-auto\"\n                    onClick={PrintDocument}\n                    title=\"Print Document\"\n                  >\n                    <i className=\"fa fa-print\" aria-hidden=\"true\"></i>\n                  </button>\n                  <button\n                    className=\"p-1 rounded-3 btn-info w-auto\"\n                    onClick={DownloadDocument}\n                    title=\"Download Document\"\n                  >\n                    <i className=\"fa fa-download\" aria-hidden=\"true\"></i>\n                  </button>\n                </div>\n              ) : null}\n            </div>\n            {/* Annotation */}\n            {loading === true ? (\n              <Loader />\n            ) : docFile ? (\n              <div>\n                <div\n                  id=\"annotation-container\"\n                  style={{\n                    position: \"relative\",\n                    overflow: \"scroll\",\n                    width: \"100%\",\n                    height: \"100vh\",\n                  }}\n                >\n                  <div className=\"d-flex justify-content-center position-relative\">\n                    {/* <RenderNewDocFile /> */}\n                    {RenderNewDocFile()}\n                    <Link\n                      className={` ${\n                        hide === false &&\n                        docFile &&\n                        docName &&\n                        user_type === \"admin\"\n                          ? `btn-sm mt-7 ${\n                              isAnnotationMode\n                                ? \"btn-primary \"\n                                : \"btn-secondary\"\n                            }`\n                          : \"d-none\"\n                      }`}\n                      style={{\n                        position: \"fixed\",\n                        bottom: \"285px\",\n                        right: \"24%\",\n                        zIndex: \"99\",\n                      }}\n                      onClick={() => {\n                        setAnnotationMode(!isAnnotationMode);\n                        setComments(\"\");\n                        setReplyCommentClick();\n                        setAddCommentFlag(false);\n                        //condition if the pdf is of imm\n                        if (\n                          docTypData.document_name &&\n                          !isAnnotationMode &&\n                          docTypData.document_name.toLowerCase().includes(\"imm\")\n                        ) {\n                          handleFlagClick({ x_axis: 1, y_axis: 1 });\n                        } else setSelectedAnnotation(null);\n                      }}\n                    >\n                      {isAnnotationMode ? <RxCrossCircled /> : <MdAddComment />}\n                    </Link>\n                  </div>\n                  {/* Transparent overlay for capturing click events */}\n                  {!hide && docFile && docName && user_type === \"admin\" && (\n                    <>\n                      {isAnnotationMode && (\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            top: 0,\n                            left: 0,\n                            width: \"100%\",\n                            height: \"100%\",\n                            pointerEvents: \"none\",\n                          }}\n                        />\n                      )}\n\n                      {imageAnnotations.map((annotation, index) => (\n                        <div\n                          key={index}\n                          style={{\n                            position: \"absolute\",\n                            left: annotation.x_axis - 5,\n                            top: annotation.y_axis - 5,\n                            cursor: \"pointer\",\n                          }}\n                          onClick={() => handleFlagClick(annotation)}\n                        >\n                          <FaFlag\n                            className=\"\"\n                            style={{\n                              color:\n                                selectedAnnotation &&\n                                selectedAnnotation.x_axis ===\n                                  annotation.x_axis &&\n                                selectedAnnotation.y_axis === annotation.y_axis\n                                  ? \"blue\"\n                                  : annotation.status === \"1\"\n                                  ? \"green\"\n                                  : \"red\",\n                              display:\n                                annotation.status === \"1\" ? \"none\" : \"block\",\n                            }}\n                          />\n                        </div>\n                      ))}\n\n                      {/* {selectedAnnotation && addCommentFlag === true && (\n                        <div\n                          style={{\n                            position: \"absolute\",\n                            left: selectedAnnotation.x_axis + 10,\n                            top: selectedAnnotation.y_axis + 20,\n                            zIndex: 1,\n                          }}\n                        >\n                          <form\n                            className=\"comment-form\"\n                            onSubmit={(e) => {\n                              e.preventDefault();\n                              addAnnotation(selectedAnnotation);\n                            }}\n                          >\n                            <div className=\"comment-input-container\">\n                              <input\n                                type=\"text\"\n                                value={comments || \"\"}\n                                onChange={handleInputChange}\n                                placeholder=\"Comments or add others with @\"\n                                className=\"rounded-pill comment-input\"\n                              />\n                              {filteredEmails.length > 0 && (\n                                <ul className=\"email-suggestions\">\n                                  {filteredEmails.map((email) => (\n                                    <li\n                                      key={email.email}\n                                      onClick={() =>\n                                        handleEmailClick(email.email)\n                                      }\n                                      onMouseOver={() =>\n                                        handleEmailMouseOver(email.email)\n                                      }\n                                      className=\"email-suggestion-item\"\n                                    >\n                                      <strong>{email.name}</strong>\n                                    </li>\n                                  ))}\n                                </ul>\n                              )}\n                            </div>\n                            <div className=\"button-container mx-4\">\n                              <button\n                                type=\"submit\"\n                                // onClick={(e) => {\n                                //   e.preventDefault();\n                                //   addAnnotation(selectedAnnotation);\n\n                                // }}\n                                className=\"btn-sm btn-primary rounded-pill save-comment-btn\"\n                              >\n                                Save Comment\n                              </button>\n                              <button\n                                className=\"btn-sm btn-info rounded-pill cancel-btn\"\n                                onClick={() => {\n                                  setAddCommentFlag();\n                                  setSelectedAnnotation(null);\n                                  setComments(\"\");\n                                  setAnnotationMode(!isAnnotationMode);\n                                  setFilteredEmails([]);\n                                }}\n                              >\n                                Cancel\n                              </button>\n                            </div>\n                          </form>\n                        </div>\n                      )} */}\n                    </>\n                  )}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center mt-5\">No document found</div>\n            )}\n            {/* Annotation Close */}\n          </div>\n        </div>\n        <div className=\"col-md-3 p-0 py-7 border-left\">\n          {/* Add Annotation form */}\n\n          {!hide &&\n          docFile &&\n          docName &&\n          user_type === \"admin\" &&\n          selectedAnnotation && //condition for imm pdf\n          (docTypData.document_name &&\n          docTypData.document_name.toLowerCase().includes(\"imm\")\n            ? replyCommentClick === undefined ||\n              replyCommentClick === \"\" ||\n              replyCommentClick === null\n            : addCommentFlag === true) ? (\n            <div\n              style={\n                {\n                  // position: \"absolute\",\n                  // left: selectedAnnotation.x_axis + 10,\n                  // top: selectedAnnotation.y_axis + 20,\n                  // zIndex: 1,\n                }\n              }\n              className=\"pt-5 pb-5\"\n            >\n              <form\n                className=\"comment-form\"\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  addAnnotation(selectedAnnotation);\n                }}\n              >\n                <div className=\"comment-input-container m-5\">\n                  <label>\n                    <b> Add Annotation:</b>\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={comments || \"\"}\n                    onChange={handleInputChange}\n                    placeholder=\"Comments or add others with @\"\n                    className=\"rounded-pill comment-input\"\n                  />\n                  {filteredEmails.length > 0 && (\n                    <ul className=\"email-suggestions\">\n                      {filteredEmails.map((email) => (\n                        <li\n                          key={email.email}\n                          onClick={() => handleEmailClick(email.email)}\n                          onMouseOver={() => handleEmailMouseOver(email.email)}\n                          className=\"email-suggestion-item\"\n                        >\n                          <strong>{email.name}</strong>\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n                </div>\n                <div className=\"button-container mx-4\">\n                  <button\n                    type=\"submit\"\n                    // onClick={(e) => {\n                    //   e.preventDefault();\n                    //   addAnnotation(selectedAnnotation);\n\n                    // }}\n                    className=\"btn-sm btn-primary rounded-pill save-comment-btn\"\n                  >\n                    Save Comment\n                  </button>\n                  <button\n                    className=\"btn-sm btn-info rounded-pill cancel-btn\"\n                    onClick={() => {\n                      setAddCommentFlag();\n                      setSelectedAnnotation(null);\n                      setComments(\"\");\n                      setAnnotationMode(!isAnnotationMode);\n                      setFilteredEmails([]);\n                    }}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </div>\n          ) : null}\n          {/* Comment box */}\n          {user_type === \"admin\" && (\n            <CommentBox\n              commentsReplyList={commentsReplyList}\n              docData={docData}\n              adminid={adminid}\n              setAdminId={setAdminId}\n              allAdmin={allAdmin}\n              annotationStatus={annotationStatus}\n              setAnnotationStatus={setAnnotationStatus}\n              commentsList={commentsList}\n              selectedAnnotation={selectedAnnotation}\n              setSelectedAnnotation={setSelectedAnnotation}\n              OnHandleUpdateComment={OnHandleUpdateComment}\n              determineBackgroundColor={determineBackgroundColor}\n              setReplyCommentClick={setReplyCommentClick}\n              replyCommentClick={replyCommentClick}\n              replyComment={replyComment}\n              handleInputChange={handleInputChange}\n              filteredEmails={filteredEmails}\n              handleEmailClick={handleEmailClick}\n              handleEmailMouseOver={handleEmailMouseOver}\n              ReplyAnnotation={ReplyAnnotation}\n              getCommentsReplyList={getCommentsReplyList}\n              setAddCommentFlag={setAddCommentFlag}\n              setFilteredEmails={setFilteredEmails}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"
        }
    ]
}