{
    "sourceFile": ".history/src/components/email/emailPreview_20240124183505.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710503309563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710503309563,
            "name": "Commit-0",
            "content": "// src/PreviewEmail.js\nimport React, { useState, useEffect } from \"react\";\nimport { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\nimport Loader from \"../common/loader\";\nimport { FileViewer } from \"react-file-viewer\";\n// import { ToastContainer } from \"react-toastify\";\n// import AdminSidebar from \"../admin/sidebar\";\n// import AdminHeader from \"../admin/header\";\nimport { /*useNavigate,*/ Link } from \"react-router-dom\";\nimport { AiOutlineDownload } from \"react-icons/ai\";\nconst PreviewEmail = ({ id, emailType, singleEmailData }) => {\n  /* states */\n  let [apiCall, setApiCall] = useState(false);\n  let [isLoading, setIsLoading] = useState(true);\n  const [emailData, setemailData] = useState({});\n  /* Function to get Employee visa data */\n  const EmailData = async () => {\n    setIsLoading(true);\n    try {\n      const Res = await GetPreviewAttchmentEmail(emailType, id);\n      console.log(Res.data.value);\n      if (\n        // Res.messsage === \"No data found\" ||\n        // Res.status === \"0\" ||\n        // Res.status === 0 ||\n        Res.data.value === undefined ||\n        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n      ) {\n        setemailData({});\n        setIsLoading(false);\n      } else {\n        setemailData(Res.data.value);\n        // setTotalData(Res.data.total_rows);\n        setIsLoading(false);\n      }\n    } catch (err) {\n      console.log(err);\n      setIsLoading(false);\n      setemailData({});\n    }\n  };\n\n  /*Render function to get the employee data*/\n  useEffect(() => {\n    EmailData();\n    if (apiCall === true) {\n      setApiCall(false);\n    }\n  }, [apiCall, id]);\n\n  /*Function to decode the email subject */\n  function decodeEmailSubject(encodedSubject) {\n    if (!encodedSubject) {\n      return \"\";\n    } else {\n      return decodeURIComponent(\n        encodedSubject\n          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n          .replace(/\\?=/g, \"\")\n          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n            String.fromCharCode(parseInt(p1, 16))\n          )\n      );\n    }\n  }\n  /*Funcion to open pdf n new window */\n  // const openPDFInNewTab = (base64PDFData) => {\n  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n  //   const newWindow = window.open();\n  //   newWindow.document.write(\n  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n  //   );\n  // };\n\n  // const openBase64HtmlInNewWindow = (base64Html) => {\n  // const decodedHtml = atob(base64Html);\n  // const newWindow = window.open(\"\", \"_blank\");\n  // if (newWindow) {\n  //   newWindow.document.write(decodedHtml);\n  //   newWindow.document.close();\n  // }\n  // };\n  return (\n    /*---- Email preview Page ----*/\n    <div>\n      {isLoading ? (\n        <Loader />\n      ) : singleEmailData === \"\" ? (\n        <div className=\"gmail-preview-container \">\n          <div className=\"email-content\">\n            <div className=\"email-header\">No Email found</div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"gmail-preview-container \">\n          <div className=\"email-content\">\n            <div className=\"email-header\">\n              <p>\n                <b>From:</b> {singleEmailData.Sender.EmailAddress.Address}\n              </p>\n              <p>\n                <b>To:</b>\n                {singleEmailData.ToRecipients[0].EmailAddress.Address}\n              </p>\n              <h2>{decodeEmailSubject(singleEmailData.Subject)}</h2>\n            </div>\n            {console.log(singleEmailData.Body.Content)}\n            <div className=\"email-body text-break\">\n              {singleEmailData.Body.Content && (\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: singleEmailData.Body.Content,\n                  }}\n                />\n              )}\n            </div>\n            <div className=\"attachments row\">\n              {emailData &&\n                emailData.map((item, index) => (\n                  <div\n                    key={index}\n                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n                  >\n                    {item.Name && (\n                      <FileViewer\n                        fileType={item.Name.split(\".\")[1]}\n                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n                        errorComponent={() => <div>Error loading document</div>}\n                        onError={(e) => console.error(\"Error occurred:\", e)}\n                      />\n                    )}\n                  </div>\n                ))}\n\n              {/* {emailData.attachments &&\n                emailData.attachments.map((item, index) => {\n                  let iconSrc = \"\";\n                  let title = \"\";\n\n                  if (item.mime === \"APPLICATION/PDF\") {\n                    iconSrc =\n                      \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n                    title = item.name;\n                  } else if (item.mime === \"TEXT/HTML\") {\n                    iconSrc =\n                      \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n                    title = item.name;\n                  } else if (item.mime.startsWith(\"IMAGE/\")) {\n                    iconSrc = `data:${item.mime};base64,${item.data}`;\n                    title = item.name;\n                  } else if (\n                    item.mime ===\n                    \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\"\n                  ) {\n                    iconSrc =\n                      \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n                    title = item.name;\n                  } else {\n                    iconSrc =\n                      \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n                    title = item.name;\n                  }\n\n                  return (\n                    <div\n                      key={index}\n                      className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n                      title={item.name}\n                    >\n                      <Link\n                      // onClick={() =>\n                      //   openBase64FileInNewWindow(item.data, item.mime)\n                      // }\n                      >\n                        <img\n                          src={iconSrc}\n                          alt={title}\n                          title={title}\n                          width={45}\n                          height={45}\n                          style={{ zIndex: \"1\" }}\n                        />\n                        <div>\n                          <small\n                            className=\"d-inline-block text-truncate font-weight-bold text-decoration-none text-dark\"\n                            style={{ maxWidth: \"60px\" }}\n                          >\n                            {item.name}\n                          </small>\n                        </div>\n                      </Link>\n                      <div className=\"download-icon\">\n                        <Link\n                          to={`data:${item.mime};base64,${item.data}`}\n                          download={item.name}\n                          className=\"text-dark\"\n                        >\n                          <AiOutlineDownload />\n                        </Link>\n                      </div>\n                    </div>\n                  );\n                })} */}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PreviewEmail;\n"
        }
    ]
}