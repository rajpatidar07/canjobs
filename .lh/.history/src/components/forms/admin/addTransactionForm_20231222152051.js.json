{
    "sourceFile": ".history/src/components/forms/admin/addTransactionForm_20231222152051.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710503309444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710503309444,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\nimport useValidation from \"../../common/useValidation\";\nimport { toast } from \"react-toastify\";\nimport { AddCashpayment } from \"../../../api/api\";\nexport default function AddTransactionForm({\n  data,\n  setApicall,\n  user_id,\n  user,\n}) {\n  const [loading, setLoading] = useState(false);\n  // let name = localStorage.getItem(\"name\")\n  /*Initial state */\n  const initialFormState = {\n    amount: \"\",\n    payment_mode: \"\",\n    payment_id: \"\",\n    id: user_id,\n    user_type: user,\n  };\n\n  /*Validation */\n  const validators = {\n    payment_id: [\n      (value) =>\n        value === \"\" || value === null || value.trim() === \"\"\n          ? \"Payment id is required\"\n          : \"\",\n    ],\n    amount: [\n      (value) =>\n        value === \"\" || value === null || value.trim() === \"\"\n          ? \"Amount is required\"\n          : \"\",\n    ],\n    payment_mode: [\n      (value) =>\n        value === \"\" || value === null || value.trim() === \"\"\n          ? \"Payment Method is required\"\n          : \"\",\n    ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState, onInputChange, errors, /* setErrors,*/ validate } =\n    useValidation(initialFormState, validators);\n\n  /*Function to made payment*/\n  const onPayentClick = async (e) => {\n    if (validate()) {\n      try {\n        let Response = await AddCashpayment(state);\n        if (Response.status === 1) {\n          toast.success(\"Payment Successful.\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 5000,\n          });\n          setState(initialFormState);\n          setApicall(true);\n          setLoading(false);\n        }\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n      }\n    }\n  };\n  return (\n    <form className=\"col-md-4 p-10\">\n      <label className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\">\n        Payment from: <span className=\"text-danger\">*</span>\n      </label>\n      <div className=\"row\">\n        <div\n          className={`col-6 text-capitalize`}\n          //   onClick={() => handleSubStageSelection(expandedStatus, subStage)}\n        >\n          <input\n            type=\"radio\"\n            className=\"mx-2\"\n            // checked={(selectedStatus || []).some(\n            //   (item) => item.substage === subStage\n            // )}\n            readOnly\n            name=\"nationality\"\n          />\n          Canada & US\n        </div>\n        <div\n          className={`col-6 text-capitalize`}\n          //   onClick={() => handleSubStageSelection(expandedStatus, subStage)}\n        >\n          <input\n            type=\"radio\"\n            className=\"mx-2\"\n            name=\"nationality\"\n            // checked={(selectedStatus || []).some(\n            //   (item) => item.substage === subStage\n            // )}\n            readOnly\n          />\n          Outside Canada\n        </div>\n      </div>\n      <div className=\"m-3\">\n        <label\n          htmlFor=\"payment_id\"\n          className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n        >\n          Payment Id: <span className=\"text-danger\">*</span>\n        </label>\n        <div className=\"position-relative\">\n          <div\n            className={\n              errors.payment_id\n                ? \"border border-danger rounded overflow-hidden\"\n                : \"border rounded overflow-hidden\"\n            }\n          >\n            <input\n              name=\"payment_id\"\n              value={state.payment_id}\n              onChange={onInputChange}\n              type=\"text\"\n              min={0}\n              className={\n                errors.payment_id\n                  ? \"form-control border border-danger\"\n                  : \"form-control\"\n              }\n              id=\"payment_id\"\n              maxLength={10}\n            ></input>\n          </div>\n          {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n          {errors.payment_id && (\n            <span key={errors.payment_id} className=\"text-danger font-size-3\">\n              {errors.payment_id}\n            </span>\n          )}\n        </div>\n      </div>\n      <label\n        htmlFor=\"amount\"\n        className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n      >\n        Payment Method: <span className=\"text-danger\">*</span>\n      </label>\n      <div className=\"row\">\n        <div\n          className={`col-6 text-capitalize`}\n          //   onClick={() => handleSubStageSelection(expandedStatus, subStage)}\n        >\n          <input\n            type=\"radio\"\n            className=\"mx-2\"\n            value=\"cash\"\n            checked={state.payment_mode === \"cash\"}\n            onChange={onInputChange}\n            readOnly\n            name=\"payment_mode\"\n          />\n          Cash\n        </div>\n      </div>\n\n      <div className=\"m-3\">\n        <label\n          htmlFor=\"amount\"\n          className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n        >\n          Amount: <span className=\"text-danger\">*</span>\n        </label>\n        <div className=\"position-relative\">\n          <div\n            className={\n              errors.amount\n                ? \"border border-danger rounded overflow-hidden\"\n                : \"border rounded overflow-hidden\"\n            }\n          >\n            <input\n              name=\"amount\"\n              value={state.amount}\n              onChange={onInputChange}\n              type=\"number\"\n              min={0}\n              className={\n                errors.amount\n                  ? \"form-control border border-danger\"\n                  : \"form-control\"\n              }\n              id=\"amount\"\n              maxLength={10}\n            ></input>\n          </div>\n          {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n          {errors.amount && (\n            <span key={errors.amount} className=\"text-danger font-size-3\">\n              {errors.amount}\n            </span>\n          )}\n        </div>\n      </div>\n      <div className=\"form-group text-center\">\n        {loading === true ? (\n          <button\n            className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n            type=\"button\"\n            disabled\n          >\n            <span\n              className=\"spinner-border spinner-border-sm \"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n            <span className=\"sr-only\">Loading...</span>\n          </button>\n        ) : (\n          <button\n            onClick={(e) => onPayentClick(e)}\n            className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n            type=\"button\"\n          >\n            Pay\n          </button>\n        )}\n      </div>\n    </form>\n  );\n}\n"
        }
    ]
}