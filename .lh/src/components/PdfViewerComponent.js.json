{
    "sourceFile": "src/components/PdfViewerComponent.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 47,
            "patches": [
                {
                    "date": 1713604583729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713604617182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+const { List } = PSPDFKit.Immutable;\n+const { DrawingPoint, Rect } = PSPDFKit.Geometry;\n+const { InkAnnotation } = PSPDFKit.Annotations;\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        \n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        const instance = await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        var annotation = new InkAnnotation({\n+          pageIndex: 0,\n+          boundingBox: new Rect({ width: 100, height: 100 }),\n+          lines: List([\n+            List([\n+              new DrawingPoint({ x: 0, y: 0 }),\n+              new DrawingPoint({ x: 100, y: 100 })\n+            ])\n+          ])\n+        });\n+\n+        const [createdAnnotation] = await instance.create(annotation);\n+        console.log(createdAnnotation); // => '01BS964AM5Z01J9MKBK64F22BQ'\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && window.PSPDFKit) {\n+        window.PSPDFKit.unload(container);\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713604717289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n \n //   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n // }\n import React, { useEffect, useRef } from \"react\";\n+import PSPDFKit from \"pspdfkit\";\n const { List } = PSPDFKit.Immutable;\n const { DrawingPoint, Rect } = PSPDFKit.Geometry;\n const { InkAnnotation } = PSPDFKit.Annotations;\n \n@@ -47,9 +48,9 @@\n   useEffect(() => {\n     const loadPSPDFKit = async () => {\n       try {\n         \n-        const PSPDFKit = await import(\"pspdfkit\");\n+        \n         const container = containerRef.current;\n \n         if (!container) {\n           throw new Error(\"Container element not found.\");\n@@ -91,97 +92,4 @@\n   }, [props.document]);\n \n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n }\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n-import React, { useEffect, useRef } from \"react\";\n-const { List } = PSPDFKit.Immutable;\n-const { DrawingPoint, Rect } = PSPDFKit.Geometry;\n-const { InkAnnotation } = PSPDFKit.Annotations;\n-\n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n-\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        const instance = await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-\n-        var annotation = new InkAnnotation({\n-          pageIndex: 0,\n-          boundingBox: new Rect({ width: 100, height: 100 }),\n-          lines: List([\n-            List([\n-              new DrawingPoint({ x: 0, y: 0 }),\n-              new DrawingPoint({ x: 100, y: 100 })\n-            ])\n-          ])\n-        });\n-\n-        const [createdAnnotation] = await instance.create(annotation);\n-        console.log(createdAnnotation.id); // => '01BS964AM5Z01J9MKBK64F22BQ'\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    loadPSPDFKit();\n-\n-    return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n-      }\n-    };\n-  }, [props.document]);\n-\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n"
                },
                {
                    "date": 1713604807302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,82 +1,25 @@\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n import React, { useEffect, useRef } from \"react\";\n-import PSPDFKit from \"pspdfkit\";\n-const { List } = PSPDFKit.Immutable;\n-const { DrawingPoint, Rect } = PSPDFKit.Geometry;\n-const { InkAnnotation } = PSPDFKit.Annotations;\n \n export default function PdfViewerComponent(props) {\n   const containerRef = useRef(null);\n \n   useEffect(() => {\n     const loadPSPDFKit = async () => {\n       try {\n-        \n-        \n+        const PSPDFKit = await import(\"pspdfkit\");\n         const container = containerRef.current;\n \n         if (!container) {\n           throw new Error(\"Container element not found.\");\n         }\n \n-        const instance = await PSPDFKit.load({\n+        await PSPDFKit.load({\n           container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         });\n-\n-        var annotation = new InkAnnotation({\n-          pageIndex: 0,\n-          boundingBox: new Rect({ width: 100, height: 100 }),\n-          lines: List([\n-            List([\n-              new DrawingPoint({ x: 0, y: 0 }),\n-              new DrawingPoint({ x: 100, y: 100 })\n-            ])\n-          ])\n-        });\n-\n-        const [createdAnnotation] = await instance.create(annotation);\n-        console.log(createdAnnotation); // => '01BS964AM5Z01J9MKBK64F22BQ'\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n     };\n"
                },
                {
                    "date": 1713608721218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,110 @@\n-import React, { useEffect, useRef } from \"react\";\n+// import React, { useEffect, useRef } from \"react\";\n \n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n \n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n \n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n \n-        await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from 'react';\n+import { PSPDFKit } from '@pspdfkit/react-pspdfkit';\n+import '@pspdfkit/web';\n+\n+const PdfViewer = ({ pdfUrl, licenseKey }) => {\n+  const instance = useRef(null);\n+\n+  useEffect(() => {\n+    const config = {\n+      container: '#pdf-container',\n+      pdf: pdfUrl,\n+      licenseKey: licenseKey,\n+      annotations: {\n+        color: '#FF0000', // Red color\n+        opacity: 0.5,     // Semi-transparent\n+        thickness: 2,     // 2-point thickness\n+        allowEditing: true,   // Allow users to edit annotations\n+        allowDeleting: true,  // Allow users to delete annotations\n+        defaultAnnotationType: 'highlight', // Default annotation type is highlight\n+        annotationToolbarItems: [\n+          'highlight',\n+          'ink',\n+          'text',\n+          'note',\n+          'stamp',\n+          // Add or remove other tools as needed\n+        ],\n+      },\n     };\n \n-    loadPSPDFKit();\n+    PSPDFKit.load(config).then((sdk) => {\n+      instance.current = sdk;\n+    });\n \n     return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n+      if (instance.current) {\n+        instance.current.destroy();\n       }\n     };\n-  }, [props.document]);\n+  }, [pdfUrl, licenseKey]);\n \n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n+  const addAnnotation = () => {\n+    instance.current?.addAnnotation({\n+      type: 'highlight',\n+      pageIndex: 0,\n+      boundingBox: { left: 100, top: 100, width: 200, height: 50 },\n+      selection: {\n+        rects: [{ left: 120, top: 120, width: 160, height: 30 }],\n+      },\n+    });\n+  };\n+\n+  const editAnnotation = (annotationId, changes) => {\n+    instance.current?.updateAnnotation(annotationId, changes);\n+  };\n+\n+  const deleteAnnotation = (annotationId) => {\n+    instance.current?.deleteAnnotation(annotationId);\n+  };\n+\n+  const mentionInAnnotation = (annotationId, mentionedText) => {\n+    const annotation = instance.current?.getAnnotation(annotationId);\n+    if (annotation) {\n+      const updatedContents = `${annotation.contents} @${mentionedText}`;\n+      instance.current?.updateAnnotation(annotationId, { contents: updatedContents });\n+    }\n+  };\n+\n+  return <div id=\"pdf-container\" style={{ width: '100%', height: '100vh' }} />;\n+};\n+\n+export default PdfViewer;\n"
                },
                {
                    "date": 1713608754062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,110 +1,38 @@\n-// import React, { useEffect, useRef } from \"react\";\n+import React, { useEffect, useRef } from \"react\";\n \n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n \n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n \n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n \n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n-import React, { useEffect, useRef } from 'react';\n-import { PSPDFKit } from '@pspdfkit/react-pspdfkit';\n-import '@pspdfkit/web';\n-\n-const PdfViewer = ({ pdfUrl, licenseKey }) => {\n-  const instance = useRef(null);\n-\n-  useEffect(() => {\n-    const config = {\n-      container: '#pdf-container',\n-      pdf: pdfUrl,\n-      licenseKey: licenseKey,\n-      annotations: {\n-        color: '#FF0000', // Red color\n-        opacity: 0.5,     // Semi-transparent\n-        thickness: 2,     // 2-point thickness\n-        allowEditing: true,   // Allow users to edit annotations\n-        allowDeleting: true,  // Allow users to delete annotations\n-        defaultAnnotationType: 'highlight', // Default annotation type is highlight\n-        annotationToolbarItems: [\n-          'highlight',\n-          'ink',\n-          'text',\n-          'note',\n-          'stamp',\n-          // Add or remove other tools as needed\n-        ],\n-      },\n+        await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n     };\n \n-    PSPDFKit.load(config).then((sdk) => {\n-      instance.current = sdk;\n-    });\n+    loadPSPDFKit();\n \n     return () => {\n-      if (instance.current) {\n-        instance.current.destroy();\n+      const container = containerRef.current;\n+      if (container && window.PSPDFKit) {\n+        window.PSPDFKit.unload(container);\n       }\n     };\n-  }, [pdfUrl, licenseKey]);\n+  }, [props.document]);\n \n-  const addAnnotation = () => {\n-    instance.current?.addAnnotation({\n-      type: 'highlight',\n-      pageIndex: 0,\n-      boundingBox: { left: 100, top: 100, width: 200, height: 50 },\n-      selection: {\n-        rects: [{ left: 120, top: 120, width: 160, height: 30 }],\n-      },\n-    });\n-  };\n-\n-  const editAnnotation = (annotationId, changes) => {\n-    instance.current?.updateAnnotation(annotationId, changes);\n-  };\n-\n-  const deleteAnnotation = (annotationId) => {\n-    instance.current?.deleteAnnotation(annotationId);\n-  };\n-\n-  const mentionInAnnotation = (annotationId, mentionedText) => {\n-    const annotation = instance.current?.getAnnotation(annotationId);\n-    if (annotation) {\n-      const updatedContents = `${annotation.contents} @${mentionedText}`;\n-      instance.current?.updateAnnotation(annotationId, { contents: updatedContents });\n-    }\n-  };\n-\n-  return <div id=\"pdf-container\" style={{ width: '100%', height: '100vh' }} />;\n-};\n-\n-export default PdfViewer;\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713608797375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,24 @@\n           container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+          annotations: {\n+            color: '#FF0000', // Red color\n+            opacity: 0.5,     // Semi-transparent\n+            thickness: 2,     // 2-point thickness\n+            allowEditing: true,   // Allow users to edit annotations\n+            allowDeleting: true,  // Allow users to delete annotations\n+            defaultAnnotationType: 'highlight', // Default annotation type is highlight\n+            annotationToolbarItems: [\n+              'highlight',\n+              'ink',\n+              'text',\n+              'note',\n+              'stamp',\n+              // Add or remove other tools as needed\n+            ],\n+          },\n         });\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n"
                },
                {
                    "date": 1713609478846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+          annotations: {\n+            color: '#FF0000',           // Annotation color (default: '#FF0000')\n+            opacity: 0.5,               // Annotation opacity (default: 1.0)\n+            thickness: 2,               // Annotation thickness (default: 1)\n+            readOnly: false,            // Annotations are read-only (default: false)\n+            allowEditing: true,         // Allow users to edit annotations (default: true)\n+            allowDeleting: true,        // Allow users to delete annotations (default: true)\n+            defaultAnnotationType: 'highlight', // Default annotation type (highlight, ink, etc.)\n+            annotationToolbarItems: [   // Annotation toolbar items\n+              'highlight',\n+              'ink',\n+              'text',\n+              'note',\n+              'stamp',\n+              'link',\n+              'ink-eraser',\n+              'rectangle',\n+              'ellipse',\n+              'line',\n+              'arrow',\n+              'polyline',\n+              'polygon',\n+              'image',\n+              'video',\n+              'audio',\n+              'attachment',\n+            ],\n+            annotationStyle: {          // Custom annotation styles\n+              fontSize: 12,             // Font size (default: 12)\n+              backgroundColor: '#FFFF00', // Background color (default: '#FFFF00')\n+              borderColor: '#000000',   // Border color (default: '#000000')\n+              borderWidth: 1,           // Border width in points (default: 1)\n+            },\n+          },\n+        });\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && window.PSPDFKit) {\n+        window.PSPDFKit.unload(container);\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713609650534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,42 +17,8 @@\n           container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-          annotations: {\n-            color: '#FF0000',           // Annotation color (default: '#FF0000')\n-            opacity: 0.5,               // Annotation opacity (default: 1.0)\n-            thickness: 2,               // Annotation thickness (default: 1)\n-            readOnly: false,            // Annotations are read-only (default: false)\n-            allowEditing: true,         // Allow users to edit annotations (default: true)\n-            allowDeleting: true,        // Allow users to delete annotations (default: true)\n-            defaultAnnotationType: 'highlight', // Default annotation type (highlight, ink, etc.)\n-            annotationToolbarItems: [   // Annotation toolbar items\n-              'highlight',\n-              'ink',\n-              'text',\n-              'note',\n-              'stamp',\n-              'link',\n-              'ink-eraser',\n-              'rectangle',\n-              'ellipse',\n-              'line',\n-              'arrow',\n-              'polyline',\n-              'polygon',\n-              'image',\n-              'video',\n-              'audio',\n-              'attachment',\n-            ],\n-            annotationStyle: {          // Custom annotation styles\n-              fontSize: 12,             // Font size (default: 12)\n-              backgroundColor: '#FFFF00', // Background color (default: '#FFFF00')\n-              borderColor: '#000000',   // Border color (default: '#000000')\n-              borderWidth: 1,           // Border width in points (default: 1)\n-            },\n-          },\n         });\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n"
                },
                {
                    "date": 1713609728708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,42 @@\n-import React, { useEffect, useRef } from \"react\";\n+// import React, { useEffect, useRef } from \"react\";\n \n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n \n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n \n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n \n-        await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n \n-    loadPSPDFKit();\n+//     loadPSPDFKit();\n \n-    return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n-      }\n-    };\n-  }, [props.document]);\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n \n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n import React, { useEffect, useRef } from \"react\";\n \n export default function PdfViewerComponent(props) {\n   const containerRef = useRef(null);\n@@ -55,24 +55,8 @@\n           container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-          annotations: {\n-            color: '#FF0000', // Red color\n-            opacity: 0.5,     // Semi-transparent\n-            thickness: 2,     // 2-point thickness\n-            allowEditing: true,   // Allow users to edit annotations\n-            allowDeleting: true,  // Allow users to delete annotations\n-            defaultAnnotationType: 'highlight', // Default annotation type is highlight\n-            annotationToolbarItems: [\n-              'highlight',\n-              'ink',\n-              'text',\n-              'note',\n-              'stamp',\n-              // Add or remove other tools as needed\n-            ],\n-          },\n         });\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n"
                },
                {
                    "date": 1713609936429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,14 +50,20 @@\n         if (!container) {\n           throw new Error(\"Container element not found.\");\n         }\n \n-        await PSPDFKit.load({\n+        const instance = await PSPDFKit.load({\n           container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         });\n+\n+        // Event listeners for annotation changes\n+        instance.addEventListener(\"annotations.change\", (event) => {\n+          console.log(\"Annotation changed:\", event.annotationChange);\n+        });\n+\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n     };\n"
                },
                {
                    "date": 1713610030752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+  const instanceRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        // Unload previous instance if it exists\n+        if (instanceRef.current) {\n+          instanceRef.current.unload(container);\n+          instanceRef.current = null;\n+        }\n+\n+        const newInstance = await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        // Store the new instance reference\n+        instanceRef.current = newInstance;\n+\n+        // Event listener for annotation changes\n+        newInstance.addEventListener(\"annotations.change\", (event) => {\n+          console.log(\"Annotation changed:\", event);\n+        });\n+\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && instanceRef.current) {\n+        instanceRef.current.unload(container);\n+        instanceRef.current = null;\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713610140660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n         }\n \n         // Unload previous instance if it exists\n         if (instanceRef.current) {\n-          instanceRef.current.unload(container);\n+          instanceRef.current.destroy();\n           instanceRef.current = null;\n         }\n \n         const newInstance = await PSPDFKit.load({\n@@ -68,11 +68,9 @@\n         // Store the new instance reference\n         instanceRef.current = newInstance;\n \n         // Event listener for annotation changes\n-        newInstance.addEventListener(\"annotations.change\", (event) => {\n-          console.log(\"Annotation changed:\", event);\n-        });\n+        newInstance.addEventListener(\"annotations.change\", handleAnnotationChange);\n \n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n@@ -82,94 +80,17 @@\n \n     return () => {\n       const container = containerRef.current;\n       if (container && instanceRef.current) {\n-        instanceRef.current.unload(container);\n+        instanceRef.current.destroy();\n         instanceRef.current = null;\n       }\n     };\n   }, [props.document]);\n \n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n-// import React, { useEffect, useRef } from \"react\";\n+  const handleAnnotationChange = (event) => {\n+    const { annotationChange } = event;\n+    console.log(\"Annotation changed:\", annotationChange);\n+  };\n \n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n-import React, { useEffect, useRef } from \"react\";\n-\n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n-\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        const instance = await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-\n-        // Event listeners for annotation changes\n-        instance.addEventListener(\"annotations.change\", (event) => {\n-          console.log(\"Annotation changed:\", event.annotationChange);\n-        });\n-\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    loadPSPDFKit();\n-\n-    return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n-      }\n-    };\n-  }, [props.document]);\n-\n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n }\n"
                },
                {
                    "date": 1713610209183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,11 @@\n     };\n   }, [props.document]);\n \n   const handleAnnotationChange = (event) => {\n-    const { annotationChange } = event;\n-    console.log(\"Annotation changed:\", annotationChange);\n+    if (event.annotationChange) {\n+      console.log(\"Annotation changed:\", event.annotationChange);\n+    }\n   };\n \n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n }\n"
                },
                {
                    "date": 1713610316739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,12 @@\n     };\n   }, [props.document]);\n \n   const handleAnnotationChange = (event) => {\n-    if (event.annotationChange) {\n-      console.log(\"Annotation changed:\", event.annotationChange);\n+    if (event.annotationChange && event.annotationChange.annotation) {\n+      console.log(\"Annotation changed:\", event.annotationChange.annotation);\n+    } else {\n+      console.log(\"Annotation change event:\", event);\n     }\n   };\n \n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n"
                },
                {
                    "date": 1713610427573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+  const instanceRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        // Unload previous instance if it exists\n+        if (instanceRef.current) {\n+          instanceRef.current.destroy();\n+          instanceRef.current = null;\n+        }\n+\n+        const newInstance = await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        // Store the new instance reference\n+        instanceRef.current = newInstance;\n+\n+        // Log existing annotations\n+        const annotations = await newInstance.getAnnotations();\n+        console.log(\"Existing annotations:\", annotations);\n+\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && instanceRef.current) {\n+        instanceRef.current.destroy();\n+        instanceRef.current = null;\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713610815639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+  const instanceRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        // Unload previous instance if it exists\n+        if (instanceRef.current) {\n+          instanceRef.current.destroy();\n+          instanceRef.current = null;\n+        }\n+\n+        const newInstance = await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        // Store the new instance reference\n+        instanceRef.current = newInstance;\n+\n+        // Log existing annotations\n+        const annotations = await newInstance.getAnnotations();\n+        console.log(\"Existing annotations:\", annotations);\n+\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+    PSPDFKit.load({\n+      customRenderers: {\n+        Annotation: ({ annotation }) => {\n+          if (annotation instanceof PSPDFKit.Annotations.NoteAnnotation) {\n+            return {\n+              node: document.createTextNode(`📝 ${annotation.text}`),\n+              append: false // Replace the entire note annotation UI.\n+            };\n+          } else {\n+            return null; // Render the default UI.\n+          }\n+        }\n+      }\n+    });\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && instanceRef.current) {\n+        instanceRef.current.destroy();\n+        instanceRef.current = null;\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713610847547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,31 +66,31 @@\n         });\n \n         // Store the new instance reference\n         instanceRef.current = newInstance;\n-\n+        PSPDFKit.load({\n+          customRenderers: {\n+            Annotation: ({ annotation }) => {\n+              if (annotation instanceof PSPDFKit.Annotations.NoteAnnotation) {\n+                return {\n+                  node: document.createTextNode(`📝 ${annotation.text}`),\n+                  append: false // Replace the entire note annotation UI.\n+                };\n+              } else {\n+                return null; // Render the default UI.\n+              }\n+            }\n+          }\n+        });\n         // Log existing annotations\n         const annotations = await newInstance.getAnnotations();\n         console.log(\"Existing annotations:\", annotations);\n \n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n     };\n-    PSPDFKit.load({\n-      customRenderers: {\n-        Annotation: ({ annotation }) => {\n-          if (annotation instanceof PSPDFKit.Annotations.NoteAnnotation) {\n-            return {\n-              node: document.createTextNode(`📝 ${annotation.text}`),\n-              append: false // Replace the entire note annotation UI.\n-            };\n-          } else {\n-            return null; // Render the default UI.\n-          }\n-        }\n-      }\n-    });\n+\n     loadPSPDFKit();\n \n     return () => {\n       const container = containerRef.current;\n"
                },
                {
                    "date": 1713610933943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,24 @@\n // }\n import React, { useEffect, useRef } from \"react\";\n \n export default function PdfViewerComponent(props) {\n+  // Create a ref to hold the container element\n   const containerRef = useRef(null);\n+\n+  // Create a ref to hold the PSPDFKit instance\n   const instanceRef = useRef(null);\n \n   useEffect(() => {\n     const loadPSPDFKit = async () => {\n       try {\n+        // Import PSPDFKit dynamically\n         const PSPDFKit = await import(\"pspdfkit\");\n+\n+        // Get the container element using the ref\n         const container = containerRef.current;\n \n+        // Check if the container element exists\n         if (!container) {\n           throw new Error(\"Container element not found.\");\n         }\n \n@@ -57,20 +64,17 @@\n           instanceRef.current.destroy();\n           instanceRef.current = null;\n         }\n \n+        // Load PSPDFKit with configuration\n         const newInstance = await PSPDFKit.load({\n           container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-\n-        // Store the new instance reference\n-        instanceRef.current = newInstance;\n-        PSPDFKit.load({\n           customRenderers: {\n             Annotation: ({ annotation }) => {\n+              // Customize rendering of note annotations\n               if (annotation instanceof PSPDFKit.Annotations.NoteAnnotation) {\n                 return {\n                   node: document.createTextNode(`📝 ${annotation.text}`),\n                   append: false // Replace the entire note annotation UI.\n@@ -80,97 +84,9 @@\n               }\n             }\n           }\n         });\n-        // Log existing annotations\n-        const annotations = await newInstance.getAnnotations();\n-        console.log(\"Existing annotations:\", annotations);\n \n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    loadPSPDFKit();\n-\n-    return () => {\n-      const container = containerRef.current;\n-      if (container && instanceRef.current) {\n-        instanceRef.current.destroy();\n-        instanceRef.current = null;\n-      }\n-    };\n-  }, [props.document]);\n-\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n-import React, { useEffect, useRef } from \"react\";\n-\n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n-  const instanceRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n-\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        // Unload previous instance if it exists\n-        if (instanceRef.current) {\n-          instanceRef.current.destroy();\n-          instanceRef.current = null;\n-        }\n-\n-        const newInstance = await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-\n         // Store the new instance reference\n         instanceRef.current = newInstance;\n \n         // Log existing annotations\n@@ -181,116 +97,19 @@\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n     };\n \n+    // Call the loadPSPDFKit function\n     loadPSPDFKit();\n \n+    // Cleanup function to destroy the PSPDFKit instance\n     return () => {\n-      const container = containerRef.current;\n-      if (container && instanceRef.current) {\n+      if (instanceRef.current) {\n         instanceRef.current.destroy();\n         instanceRef.current = null;\n       }\n     };\n-  }, [props.document]);\n+  }, [props.document]); // Dependency array ensures this effect runs when props.document changes\n \n+  // Return JSX with the container element\n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n }\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n-import React, { useEffect, useRef } from \"react\";\n-\n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n-  const instanceRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n-\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        // Unload previous instance if it exists\n-        if (instanceRef.current) {\n-          instanceRef.current.destroy();\n-          instanceRef.current = null;\n-        }\n-\n-        const newInstance = await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-\n-        // Store the new instance reference\n-        instanceRef.current = newInstance;\n-\n-        // Event listener for annotation changes\n-        newInstance.addEventListener(\"annotations.change\", handleAnnotationChange);\n-\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    loadPSPDFKit();\n-\n-    return () => {\n-      const container = containerRef.current;\n-      if (container && instanceRef.current) {\n-        instanceRef.current.destroy();\n-        instanceRef.current = null;\n-      }\n-    };\n-  }, [props.document]);\n-\n-  const handleAnnotationChange = (event) => {\n-    if (event.annotationChange && event.annotationChange.annotation) {\n-      console.log(\"Annotation changed:\", event.annotationChange.annotation);\n-    } else {\n-      console.log(\"Annotation change event:\", event);\n-    }\n-  };\n-\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n"
                },
                {
                    "date": 1713611019712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,8 +107,12 @@\n         instanceRef.current.destroy();\n         instanceRef.current = null;\n       }\n     };\n+    // Inside the useEffect hook\n+console.log(\"Container Ref:\", containerRef.current);\n+console.log(\"PSPDFKit Instance:\", instanceRef.current);\n+\n   }, [props.document]); // Dependency array ensures this effect runs when props.document changes\n \n   // Return JSX with the container element\n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n"
                },
                {
                    "date": 1713611029698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n"
                },
                {
                    "date": 1713611369388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        const instance = await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        // Listen for annotation creation events\n+        instance.addEventListener(\"annotations.create\", async ({ annotations }) => {\n+          const createdAnnotation = annotations[0];\n+          console.log(\"Annotation created:\", createdAnnotation);\n+        });\n+\n+        // Listen for annotation update events\n+        instance.addEventListener(\"annotations.update\", async ({ annotations }) => {\n+          const updatedAnnotation = annotations[0];\n+          console.log(\"Annotation updated:\", updatedAnnotation);\n+        });\n+\n+        // Listen for annotation deletion events\n+        instance.addEventListener(\"annotations.delete\", async ({ annotations }) => {\n+          const deletedAnnotation = annotations[0];\n+          console.log(\"Annotation deleted:\", deletedAnnotation);\n+        });\n+\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && window.PSPDFKit) {\n+        window.PSPDFKit.unload(container);\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713611473864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,22 +59,28 @@\n         });\n \n         // Listen for annotation creation events\n         instance.addEventListener(\"annotations.create\", async ({ annotations }) => {\n-          const createdAnnotation = annotations[0];\n-          console.log(\"Annotation created:\", createdAnnotation);\n+          if (annotations && annotations.length > 0) {\n+            const createdAnnotation = annotations[0];\n+            console.log(\"Annotation created:\", createdAnnotation);\n+          }\n         });\n \n         // Listen for annotation update events\n         instance.addEventListener(\"annotations.update\", async ({ annotations }) => {\n-          const updatedAnnotation = annotations[0];\n-          console.log(\"Annotation updated:\", updatedAnnotation);\n+          if (annotations && annotations.length > 0) {\n+            const updatedAnnotation = annotations[0];\n+            console.log(\"Annotation updated:\", updatedAnnotation);\n+          }\n         });\n \n         // Listen for annotation deletion events\n         instance.addEventListener(\"annotations.delete\", async ({ annotations }) => {\n-          const deletedAnnotation = annotations[0];\n-          console.log(\"Annotation deleted:\", deletedAnnotation);\n+          if (annotations && annotations.length > 0) {\n+            const deletedAnnotation = annotations[0];\n+            console.log(\"Annotation deleted:\", deletedAnnotation);\n+          }\n         });\n \n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n"
                },
                {
                    "date": 1713611530321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n         });\n \n         // Listen for annotation creation events\n         instance.addEventListener(\"annotations.create\", async ({ annotations }) => {\n+          console.log(annotations)\n           if (annotations && annotations.length > 0) {\n             const createdAnnotation = annotations[0];\n             console.log(\"Annotation created:\", createdAnnotation);\n           }\n"
                },
                {
                    "date": 1713611667207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,31 +59,15 @@\n         });\n \n         // Listen for annotation creation events\n         instance.addEventListener(\"annotations.create\", async ({ annotations }) => {\n-          console.log(annotations)\n+          console.log(\"Annotation created:\", annotations);\n           if (annotations && annotations.length > 0) {\n             const createdAnnotation = annotations[0];\n-            console.log(\"Annotation created:\", createdAnnotation);\n+            console.log(\"Created annotation:\", createdAnnotation);\n           }\n         });\n \n-        // Listen for annotation update events\n-        instance.addEventListener(\"annotations.update\", async ({ annotations }) => {\n-          if (annotations && annotations.length > 0) {\n-            const updatedAnnotation = annotations[0];\n-            console.log(\"Annotation updated:\", updatedAnnotation);\n-          }\n-        });\n-\n-        // Listen for annotation deletion events\n-        instance.addEventListener(\"annotations.delete\", async ({ annotations }) => {\n-          if (annotations && annotations.length > 0) {\n-            const deletedAnnotation = annotations[0];\n-            console.log(\"Annotation deleted:\", deletedAnnotation);\n-          }\n-        });\n-\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n     };\n@@ -99,8 +83,9 @@\n   }, [props.document]);\n \n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n }\n+\n // import React, { useEffect, useRef } from \"react\";\n \n // export default function PdfViewerComponent(props) {\n //   const containerRef = useRef(null);\n@@ -114,52 +99,40 @@\n //         if (!container) {\n //           throw new Error(\"Container element not found.\");\n //         }\n \n-//         await PSPDFKit.load({\n+//         const instance = await PSPDFKit.load({\n //           container,\n //           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n //           document: props.document,\n //           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n //         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n \n-//     loadPSPDFKit();\n+//         // Listen for annotation creation events\n+//         instance.addEventListener(\"annotations.create\", async ({ annotations }) => {\n+//           console.log(annotations)\n+//           if (annotations && annotations.length > 0) {\n+//             const createdAnnotation = annotations[0];\n+//             console.log(\"Annotation created:\", createdAnnotation);\n+//           }\n+//         });\n \n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n+//         // Listen for annotation update events\n+//         instance.addEventListener(\"annotations.update\", async ({ annotations }) => {\n+//           if (annotations && annotations.length > 0) {\n+//             const updatedAnnotation = annotations[0];\n+//             console.log(\"Annotation updated:\", updatedAnnotation);\n+//           }\n+//         });\n \n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n-// import React, { useEffect, useRef } from \"react\";\n+//         // Listen for annotation deletion events\n+//         instance.addEventListener(\"annotations.delete\", async ({ annotations }) => {\n+//           if (annotations && annotations.length > 0) {\n+//             const deletedAnnotation = annotations[0];\n+//             console.log(\"Annotation deleted:\", deletedAnnotation);\n+//           }\n+//         });\n \n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n //       } catch (error) {\n //         console.error(\"Error loading PSPDFKit:\", error);\n //       }\n //     };\n@@ -175,85 +148,4 @@\n //   }, [props.document]);\n \n //   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n // }\n-import React, { useEffect, useRef } from \"react\";\n-\n-export default function PdfViewerComponent(props) {\n-  // Create a ref to hold the container element\n-  const containerRef = useRef(null);\n-\n-  // Create a ref to hold the PSPDFKit instance\n-  const instanceRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        // Import PSPDFKit dynamically\n-        const PSPDFKit = await import(\"pspdfkit\");\n-\n-        // Get the container element using the ref\n-        const container = containerRef.current;\n-\n-        // Check if the container element exists\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        // Unload previous instance if it exists\n-        if (instanceRef.current) {\n-          instanceRef.current.destroy();\n-          instanceRef.current = null;\n-        }\n-\n-        // Load PSPDFKit with configuration\n-        const newInstance = await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-          customRenderers: {\n-            Annotation: ({ annotation }) => {\n-              // Customize rendering of note annotations\n-              if (annotation instanceof PSPDFKit.Annotations.NoteAnnotation) {\n-                return {\n-                  node: document.createTextNode(`📝 ${annotation.text}`),\n-                  append: false // Replace the entire note annotation UI.\n-                };\n-              } else {\n-                return null; // Render the default UI.\n-              }\n-            }\n-          }\n-        });\n-\n-        // Store the new instance reference\n-        instanceRef.current = newInstance;\n-\n-        // Log existing annotations\n-        const annotations = await newInstance.getAnnotations();\n-        console.log(\"Existing annotations:\", annotations);\n-\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    // Call the loadPSPDFKit function\n-    loadPSPDFKit();\n-\n-    // Cleanup function to destroy the PSPDFKit instance\n-    return () => {\n-      if (instanceRef.current) {\n-        instanceRef.current.destroy();\n-        instanceRef.current = null;\n-      }\n-    };\n-    // Inside the useEffect hook\n-console.log(\"Container Ref:\", containerRef.current);\n-console.log(\"PSPDFKit Instance:\", instanceRef.current);\n-\n-  }, [props.document]); // Dependency array ensures this effect runs when props.document changes\n-\n-  // Return JSX with the container element\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n"
                },
                {
                    "date": 1713611782264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        const instance = await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        // Fetch annotations after the document is loaded\n+        const annotations = await instance.getAnnotations();\n+        console.log(\"Annotations:\", annotations);\n+\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && window.PSPDFKit) {\n+        window.PSPDFKit.unload(container);\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713611861818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,4 @@\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n import React, { useEffect, useRef } from \"react\";\n \n export default function PdfViewerComponent(props) {\n   const containerRef = useRef(null);\n@@ -57,10 +19,10 @@\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         });\n \n-        // Fetch annotations after the document is loaded\n-        const annotations = await instance.getAnnotations();\n+        // Fetch annotations for the first page (pageIndex 0)\n+        const annotations = await instance.getAnnotations({ pageIndex: 0 });\n         console.log(\"Annotations:\", annotations);\n \n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n"
                },
                {
                    "date": 1713611914604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,13 @@\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         });\n \n-        // Fetch annotations for the first page (pageIndex 0)\n-        const annotations = await instance.getAnnotations({ pageIndex: 0 });\n-        console.log(\"Annotations:\", annotations);\n+        // Delay fetching annotations to ensure PSPDFKit initialization\n+        setTimeout(async () => {\n+          const annotations = await instance.getAnnotations({ pageIndex: 0 });\n+          console.log(\"Annotations:\", annotations);\n+        }, 1000); // Adjust the delay as needed\n \n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n"
                },
                {
                    "date": 1713611925590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        const instance = await PSPDFKit.load({\n+          container,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        // Delay fetching annotations to ensure PSPDFKit initialization\n+        setTimeout(async () => {\n+          const annotations = await instance.getAnnotations({ pageIndex: 0 });\n+          console.log(\"Annotations:\", annotations);\n+        }, 1000); // Adjust the delay as needed\n+\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && window.PSPDFKit) {\n+        window.PSPDFKit.unload(container);\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713611996485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,12 +57,16 @@\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         });\n \n-        // Delay fetching annotations to ensure PSPDFKit initialization\n+        // Delay querying annotations after a brief period\n         setTimeout(async () => {\n-          const annotations = await instance.getAnnotations({ pageIndex: 0 });\n-          console.log(\"Annotations:\", annotations);\n+          try {\n+            const annotations = await instance.getAnnotations();\n+            console.log(\"Annotations:\", annotations);\n+          } catch (error) {\n+            console.error(\"Error fetching annotations:\", error);\n+          }\n         }, 1000); // Adjust the delay as needed\n \n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n"
                },
                {
                    "date": 1713612075062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,4 @@\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n import React, { useEffect, useRef } from \"react\";\n \n export default function PdfViewerComponent(props) {\n   const containerRef = useRef(null);\n@@ -50,25 +12,14 @@\n         if (!container) {\n           throw new Error(\"Container element not found.\");\n         }\n \n-        const instance = await PSPDFKit.load({\n+        await PSPDFKit.load({\n           container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         });\n-\n-        // Delay querying annotations after a brief period\n-        setTimeout(async () => {\n-          try {\n-            const annotations = await instance.getAnnotations();\n-            console.log(\"Annotations:\", annotations);\n-          } catch (error) {\n-            console.error(\"Error fetching annotations:\", error);\n-          }\n-        }, 1000); // Adjust the delay as needed\n-\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n     };\n"
                },
                {
                    "date": 1713612420272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         }\n \n         await PSPDFKit.load({\n           container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          license: \"TR240415-63529-84403\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         });\n       } catch (error) {\n"
                },
                {
                    "date": 1713613076394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,57 +14,12 @@\n         }\n \n         await PSPDFKit.load({\n           container,\n-          license: \"TR240415-63529-84403\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    loadPSPDFKit();\n-\n-    return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n-      }\n-    };\n-  }, [props.document]);\n-\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n-import React, { useEffect, useRef } from \"react\";\n-\n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n-\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        const instance = await PSPDFKit.load({\n-          container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         });\n-\n-        // Delay fetching annotations to ensure PSPDFKit initialization\n-        setTimeout(async () => {\n-          const annotations = await instance.getAnnotations({ pageIndex: 0 });\n-          console.log(\"Annotations:\", annotations);\n-        }, 1000); // Adjust the delay as needed\n-\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n     };\n@@ -80,155 +35,4 @@\n   }, [props.document]);\n \n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n }\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n-import React, { useEffect, useRef } from \"react\";\n-\n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n-\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        const instance = await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-\n-        // Listen for annotation creation events\n-        instance.addEventListener(\"annotations.create\", async ({ annotations }) => {\n-          console.log(\"Annotation created:\", annotations);\n-          if (annotations && annotations.length > 0) {\n-            const createdAnnotation = annotations[0];\n-            console.log(\"Created annotation:\", createdAnnotation);\n-          }\n-        });\n-\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    loadPSPDFKit();\n-\n-    return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n-      }\n-    };\n-  }, [props.document]);\n-\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n-\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         const instance = await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-\n-//         // Listen for annotation creation events\n-//         instance.addEventListener(\"annotations.create\", async ({ annotations }) => {\n-//           console.log(annotations)\n-//           if (annotations && annotations.length > 0) {\n-//             const createdAnnotation = annotations[0];\n-//             console.log(\"Annotation created:\", createdAnnotation);\n-//           }\n-//         });\n-\n-//         // Listen for annotation update events\n-//         instance.addEventListener(\"annotations.update\", async ({ annotations }) => {\n-//           if (annotations && annotations.length > 0) {\n-//             const updatedAnnotation = annotations[0];\n-//             console.log(\"Annotation updated:\", updatedAnnotation);\n-//           }\n-//         });\n-\n-//         // Listen for annotation deletion events\n-//         instance.addEventListener(\"annotations.delete\", async ({ annotations }) => {\n-//           if (annotations && annotations.length > 0) {\n-//             const deletedAnnotation = annotations[0];\n-//             console.log(\"Annotation deleted:\", deletedAnnotation);\n-//           }\n-//         });\n-\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n"
                },
                {
                    "date": 1713613104003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        const instance = await PSPDFKit.load({\n+          container,\n+          license: \"TR240415-63529-84403\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        // Delay fetching annotations after a brief period\n+        setTimeout(async () => {\n+          try {\n+            const annotations = await instance.getAnnotations({ pageIndex: 0 }); // Assuming pageIndex 0 for the first page\n+            console.log(\"Annotations:\", annotations);\n+          } catch (error) {\n+            console.error(\"Error fetching annotations:\", error);\n+          }\n+        }, 1000); // Adjust the delay as needed\n+\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && window.PSPDFKit) {\n+        window.PSPDFKit.unload(container);\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713613463682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n         // Delay fetching annotations after a brief period\n         setTimeout(async () => {\n           try {\n-            const annotations = await instance.getAnnotations({ pageIndex: 0 }); // Assuming pageIndex 0 for the first page\n+            const annotations = await instance.getAnnotations(); // Assuming pageIndex 0 for the first page\n             console.log(\"Annotations:\", annotations);\n           } catch (error) {\n             console.error(\"Error fetching annotations:\", error);\n           }\n"
                },
                {
                    "date": 1713613618806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from \"react\";\n+\n+export default function PdfViewerComponent(props) {\n+  const containerRef = useRef(null);\n+\n+  useEffect(() => {\n+    const loadPSPDFKit = async () => {\n+      try {\n+        const PSPDFKit = await import(\"pspdfkit\");\n+        const container = containerRef.current;\n+\n+        if (!container) {\n+          throw new Error(\"Container element not found.\");\n+        }\n+\n+        const instance = await PSPDFKit.load({\n+          disableWebAssemblyStreaming: true,\n+          container,\n+          license: \"TR240415-63529-84403\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        });\n+\n+        // Delay fetching annotations after a brief period\n+        setTimeout(async () => {\n+          try {\n+            const annotations = await instance.getAnnotations(); // Assuming pageIndex 0 for the first page\n+            console.log(\"Annotations:\", annotations);\n+          } catch (error) {\n+            console.error(\"Error fetching annotations:\", error);\n+          }\n+        }, 1000); // Adjust the delay as needed\n+\n+      } catch (error) {\n+        console.error(\"Error loading PSPDFKit:\", error);\n+      }\n+    };\n+\n+    loadPSPDFKit();\n+\n+    return () => {\n+      const container = containerRef.current;\n+      if (container && window.PSPDFKit) {\n+        window.PSPDFKit.unload(container);\n+      }\n+    };\n+  }, [props.document]);\n+\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+}\n"
                },
                {
                    "date": 1713614156192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,4 @@\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n import React, { useEffect, useRef } from \"react\";\n \n export default function PdfViewerComponent(props) {\n   const containerRef = useRef(null);\n@@ -50,150 +12,17 @@\n         if (!container) {\n           throw new Error(\"Container element not found.\");\n         }\n \n-        const instance = await PSPDFKit.load({\n-          disableWebAssemblyStreaming: true,\n-          container,\n-          license: \"TR240415-63529-84403\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-\n-        // Delay fetching annotations after a brief period\n-        setTimeout(async () => {\n-          try {\n-            const annotations = await instance.getAnnotations(); // Assuming pageIndex 0 for the first page\n-            console.log(\"Annotations:\", annotations);\n-          } catch (error) {\n-            console.error(\"Error fetching annotations:\", error);\n-          }\n-        }, 1000); // Adjust the delay as needed\n-\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    loadPSPDFKit();\n-\n-    return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n-      }\n-    };\n-  }, [props.document]);\n-\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n-// import React, { useEffect, useRef } from \"react\";\n-\n-// export default function PdfViewerComponent(props) {\n-//   const containerRef = useRef(null);\n-\n-//   useEffect(() => {\n-//     const loadPSPDFKit = async () => {\n-//       try {\n-//         const PSPDFKit = await import(\"pspdfkit\");\n-//         const container = containerRef.current;\n-\n-//         if (!container) {\n-//           throw new Error(\"Container element not found.\");\n-//         }\n-\n-//         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-//         });\n-//       } catch (error) {\n-//         console.error(\"Error loading PSPDFKit:\", error);\n-//       }\n-//     };\n-\n-//     loadPSPDFKit();\n-\n-//     return () => {\n-//       const container = containerRef.current;\n-//       if (container && window.PSPDFKit) {\n-//         window.PSPDFKit.unload(container);\n-//       }\n-//     };\n-//   }, [props.document]);\n-\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-// }\n-import React, { useEffect, useRef } from \"react\";\n-\n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n-\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        const instance = await PSPDFKit.load({\n-          container,\n-          license: \"TR240415-63529-84403\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        });\n-\n-        // Delay fetching annotations after a brief period\n-        setTimeout(async () => {\n-          try {\n-            const annotations = await instance.getAnnotations(); // Assuming pageIndex 0 for the first page\n-            console.log(\"Annotations:\", annotations);\n-          } catch (error) {\n-            console.error(\"Error fetching annotations:\", error);\n-          }\n-        }, 1000); // Adjust the delay as needed\n-\n-      } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n-      }\n-    };\n-\n-    loadPSPDFKit();\n-\n-    return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n-      }\n-    };\n-  }, [props.document]);\n-\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n-import React, { useEffect, useRef } from \"react\";\n-\n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n-\n-  useEffect(() => {\n-    const loadPSPDFKit = async () => {\n-      try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n-\n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n         await PSPDFKit.load({\n           container,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+        })\n+        .then((instance) => {\n+          const position = new PSPDFKit.Geometry.Point({ x: 100, y: 100 });\n+          instance.createAnnotation({ type: \"text\", text: \"Your comment text\", position });\n         });\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n"
                },
                {
                    "date": 1713614220453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,13 @@\n         })\n         .then((instance) => {\n           const position = new PSPDFKit.Geometry.Point({ x: 100, y: 100 });\n           instance.createAnnotation({ type: \"text\", text: \"Your comment text\", position });\n+        }) .then((response) => {\n+          console.log(\"Annotation created:\", response);\n+        })\n+        .catch((error) => {\n+          console.error(\"Error:\", error);\n         });\n       } catch (error) {\n         console.error(\"Error loading PSPDFKit:\", error);\n       }\n"
                },
                {
                    "date": 1713614381742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n         })\n         .then((instance) => {\n           const position = new PSPDFKit.Geometry.Point({ x: 100, y: 100 });\n-          instance.createAnnotation({ type: \"text\", text: \"Your comment text\", position });\n+          instance.createAnnotation({ type: \"text\", text: \"Hello\", position });\n         }) .then((response) => {\n           console.log(\"Annotation created:\", response);\n         })\n         .catch((error) => {\n"
                },
                {
                    "date": 1713614640659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,89 @@\n-import React, { useEffect, useRef } from \"react\";\n+// import React, { useEffect, useRef } from \"react\";\n \n-export default function PdfViewerComponent(props) {\n-  const containerRef = useRef(null);\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n \n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useRef } from 'react';\n+import PSPDFKit from 'pspdfkit';\n+\n+const MyPDFViewer = () => {\n+  const viewerRef = useRef(null);\n+\n   useEffect(() => {\n-    const loadPSPDFKit = async () => {\n+    const loadDocument = async () => {\n       try {\n-        const PSPDFKit = await import(\"pspdfkit\");\n-        const container = containerRef.current;\n+        const instance = await PSPDFKit.load({\n+          container: viewerRef.current,\n+          document: 'path/to/your/document.pdf',\n+          // Other configuration options here\n+        });\n \n-        if (!container) {\n-          throw new Error(\"Container element not found.\");\n-        }\n-\n-        await PSPDFKit.load({\n-          container,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-        })\n-        .then((instance) => {\n-          const position = new PSPDFKit.Geometry.Point({ x: 100, y: 100 });\n-          instance.createAnnotation({ type: \"text\", text: \"Hello\", position });\n-        }) .then((response) => {\n-          console.log(\"Annotation created:\", response);\n-        })\n-        .catch((error) => {\n-          console.error(\"Error:\", error);\n-        });\n+        // Access PSPDFKit instance for further interactions\n+        console.log('PSPDFKit instance:', instance);\n       } catch (error) {\n-        console.error(\"Error loading PSPDFKit:\", error);\n+        console.error('Failed to load PDF:', error);\n       }\n     };\n \n-    loadPSPDFKit();\n+    loadDocument();\n \n+    // Cleanup function\n     return () => {\n-      const container = containerRef.current;\n-      if (container && window.PSPDFKit) {\n-        window.PSPDFKit.unload(container);\n-      }\n+      PSPDFKit.unload(viewerRef.current);\n     };\n-  }, [props.document]);\n+  }, []);\n \n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n-}\n+  const handleAddAnnotation = async () => {\n+    // Example: Adding a highlight annotation programmatically\n+    const instance = PSPDFKit.Instance(viewerRef.current);\n+    const annotation = await instance.createAnnotation({\n+      type: PSPDFKit.AnnotationType.HIGHLIGHT,\n+      pageIndex: 0, // Page index where the annotation should be added\n+      // Other annotation properties\n+    });\n+\n+    console.log('Added annotation:', annotation);\n+  };\n+\n+  return (\n+    <div>\n+      <div ref={viewerRef} style={{ width: '100%', height: '600px' }} />\n+      <button onClick={handleAddAnnotation}>Add Highlight Annotation</button>\n+    </div>\n+  );\n+};\n+\n+export default MyPDFViewer;\n"
                },
                {
                    "date": 1713614650280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n // }\n import React, { useEffect, useRef } from 'react';\n import PSPDFKit from 'pspdfkit';\n \n-const MyPDFViewer = () => {\n+const PdfViewerComponent = () => {\n   const viewerRef = useRef(null);\n \n   useEffect(() => {\n     const loadDocument = async () => {\n@@ -85,5 +85,5 @@\n     </div>\n   );\n };\n \n-export default MyPDFViewer;\n+export default PdfViewerComponent;\n"
                },
                {
                    "date": 1713614673050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,17 @@\n // }\n import React, { useEffect, useRef } from 'react';\n import PSPDFKit from 'pspdfkit';\n \n-const PdfViewerComponent = () => {\n+const PdfViewerComponent = (props) => {\n   const viewerRef = useRef(null);\n \n   useEffect(() => {\n     const loadDocument = async () => {\n       try {\n         const instance = await PSPDFKit.load({\n           container: viewerRef.current,\n-          document: 'path/to/your/document.pdf',\n+          document: props.document,\n           // Other configuration options here\n         });\n \n         // Access PSPDFKit instance for further interactions\n"
                },
                {
                    "date": 1713614694229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,11 @@\n     const loadDocument = async () => {\n       try {\n         const instance = await PSPDFKit.load({\n           container: viewerRef.current,\n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n           // Other configuration options here\n         });\n \n         // Access PSPDFKit instance for further interactions\n"
                },
                {
                    "date": 1713614799705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,57 +35,99 @@\n //   }, [props.document]);\n \n //   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n // }\n-import React, { useEffect, useRef } from 'react';\n+import React, { useEffect, useState } from 'react';\n import PSPDFKit from 'pspdfkit';\n \n-const PdfViewerComponent = (props) => {\n-  const viewerRef = useRef(null);\n+function PdfViewer() {\n+  const [instance, setInstance] = useState(null);\n+  const [comments, setComments] = useState([]);\n+  const [newCommentText, setNewCommentText] = useState('');\n+  const [replyingToComment, setReplyingToComment] = useState(null);\n \n   useEffect(() => {\n-    const loadDocument = async () => {\n-      try {\n-        const instance = await PSPDFKit.load({\n-          container: viewerRef.current,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-          document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n-          // Other configuration options here\n-        });\n+    PSPDFKit.load({\n+      // Configuration options\n+    }).then((pdfInstance) => {\n+      setInstance(pdfInstance);\n \n-        // Access PSPDFKit instance for further interactions\n-        console.log('PSPDFKit instance:', instance);\n-      } catch (error) {\n-        console.error('Failed to load PDF:', error);\n-      }\n-    };\n+      pdfInstance.getComments().then((existingComments) => {\n+        setComments(existingComments);\n+      });\n \n-    loadDocument();\n+      pdfInstance.addEventListener('comments.change', (newComments) => {\n+        setComments(newComments);\n+      });\n+    });\n \n-    // Cleanup function\n     return () => {\n-      PSPDFKit.unload(viewerRef.current);\n+      if (instance) {\n+        PSPDFKit.unload(/* container */);\n+      }\n     };\n   }, []);\n \n-  const handleAddAnnotation = async () => {\n-    // Example: Adding a highlight annotation programmatically\n-    const instance = PSPDFKit.Instance(viewerRef.current);\n-    const annotation = await instance.createAnnotation({\n-      type: PSPDFKit.AnnotationType.HIGHLIGHT,\n-      pageIndex: 0, // Page index where the annotation should be added\n-      // Other annotation properties\n+  const handleAddComment = () => {\n+    if (!newCommentText.trim()) return;\n+\n+    instance.createComment({\n+      text: newCommentText,\n+      pageIndex: instance.currentPageIndex,\n     });\n \n-    console.log('Added annotation:', annotation);\n+    setNewCommentText('');\n   };\n \n+  const handleReplyToComment = (commentId) => {\n+    setReplyingToComment(commentId);\n+  };\n+\n+  const handleMentionUser = (userId) => {\n+    // Logic to mention a user in a comment\n+    // For example:\n+    const mentionedUser = @${userId};\n+    setNewCommentText((prevText) => prevText + mentionedUser + ' ');\n+  };\n+\n+  const handleCancelReply = () => {\n+    setReplyingToComment(null);\n+  };\n+\n   return (\n     <div>\n-      <div ref={viewerRef} style={{ width: '100%', height: '600px' }} />\n-      <button onClick={handleAddAnnotation}>Add Highlight Annotation</button>\n+      <div id=\"pdf-container\" style={{ width: '100%', height: '800px' }}></div>\n+\n+      <div>\n+        <h2>Add Comment</h2>\n+        <textarea value={newCommentText} onChange={(e) => setNewCommentText(e.target.value)}></textarea>\n+        <button onClick={handleAddComment}>Add Comment</button>\n+      </div>\n+\n+      {replyingToComment && (\n+        <div>\n+          <h2>Replying to Comment</h2>\n+          {/* Display the comment being replied to */}\n+          <button onClick={handleCancelReply}>Cancel Reply</button>\n+        </div>\n+      )}\n+\n+      <div>\n+        <h2>Comments</h2>\n+        <ul>\n+          {comments.map((comment) => (\n+            <li key={comment.id}>\n+              <div>\n+                <strong>{comment.creatorName}</strong>\n+                <p>{comment.text}</p>\n+                <button onClick={() => handleReplyToComment(comment.id)}>Reply</button>\n+                {/* Add mention option here */}\n+              </div>\n+            </li>\n+          ))}\n+        </ul>\n+      </div>\n     </div>\n   );\n-};\n+}\n \n-export default PdfViewerComponent;\n+export default PdfViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713614811262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+// import React, { useEffect, useRef } from \"react\";\n+\n+// export default function PdfViewerComponent(props) {\n+//   const containerRef = useRef(null);\n+\n+//   useEffect(() => {\n+//     const loadPSPDFKit = async () => {\n+//       try {\n+//         const PSPDFKit = await import(\"pspdfkit\");\n+//         const container = containerRef.current;\n+\n+//         if (!container) {\n+//           throw new Error(\"Container element not found.\");\n+//         }\n+\n+//         await PSPDFKit.load({\n+//           container,\n+//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+//           document: props.document,\n+//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+//         });\n+//       } catch (error) {\n+//         console.error(\"Error loading PSPDFKit:\", error);\n+//       }\n+//     };\n+\n+//     loadPSPDFKit();\n+\n+//     return () => {\n+//       const container = containerRef.current;\n+//       if (container && window.PSPDFKit) {\n+//         window.PSPDFKit.unload(container);\n+//       }\n+//     };\n+//   }, [props.document]);\n+\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n+// }\n+import React, { useEffect, useState } from 'react';\n+import PSPDFKit from 'pspdfkit';\n+\n+function PdfViewer() {\n+  const [instance, setInstance] = useState(null);\n+  const [comments, setComments] = useState([]);\n+  const [newCommentText, setNewCommentText] = useState('');\n+  const [replyingToComment, setReplyingToComment] = useState(null);\n+\n+  useEffect(() => {\n+    PSPDFKit.load({\n+      // Configuration options\n+    }).then((pdfInstance) => {\n+      setInstance(pdfInstance);\n+\n+      pdfInstance.getComments().then((existingComments) => {\n+        setComments(existingComments);\n+      });\n+\n+      pdfInstance.addEventListener('comments.change', (newComments) => {\n+        setComments(newComments);\n+      });\n+    });\n+\n+    return () => {\n+      if (instance) {\n+        PSPDFKit.unload(/* container */);\n+      }\n+    };\n+  }, []);\n+\n+  const handleAddComment = () => {\n+    if (!newCommentText.trim()) return;\n+\n+    instance.createComment({\n+      text: newCommentText,\n+      pageIndex: instance.currentPageIndex,\n+    });\n+\n+    setNewCommentText('');\n+  };\n+\n+  const handleReplyToComment = (commentId) => {\n+    setReplyingToComment(commentId);\n+  };\n+\n+  const handleMentionUser = (userId) => {\n+    // Logic to mention a user in a comment\n+    // For example:\n+    const mentionedUser = `@${userId}`;\n+    setNewCommentText((prevText) => prevText + mentionedUser + ' ');\n+  };\n+\n+  const handleCancelReply = () => {\n+    setReplyingToComment(null);\n+  };\n+\n+  return (\n+    <div>\n+      <div id=\"pdf-container\" style={{ width: '100%', height: '800px' }}></div>\n+\n+      <div>\n+        <h2>Add Comment</h2>\n+        <textarea value={newCommentText} onChange={(e) => setNewCommentText(e.target.value)}></textarea>\n+        <button onClick={handleAddComment}>Add Comment</button>\n+      </div>\n+\n+      {replyingToComment && (\n+        <div>\n+          <h2>Replying to Comment</h2>\n+          {/* Display the comment being replied to */}\n+          <button onClick={handleCancelReply}>Cancel Reply</button>\n+        </div>\n+      )}\n+\n+      <div>\n+        <h2>Comments</h2>\n+        <ul>\n+          {comments.map((comment) => (\n+            <li key={comment.id}>\n+              <div>\n+                <strong>{comment.creatorName}</strong>\n+                <p>{comment.text}</p>\n+                <button onClick={() => handleReplyToComment(comment.id)}>Reply</button>\n+                {/* Add mention option here */}\n+              </div>\n+            </li>\n+          ))}\n+        </ul>\n+      </div>\n+    </div>\n+  );\n+}\n+\n+export default PdfViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713614896675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,12 @@\n //           throw new Error(\"Container element not found.\");\n //         }\n \n //         await PSPDFKit.load({\n-//           container,\n-//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n-//           document: props.document,\n-//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n+          // container,\n+          // license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          // document: props.document,\n+          // baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n //         });\n //       } catch (error) {\n //         console.error(\"Error loading PSPDFKit:\", error);\n //       }\n@@ -38,9 +38,9 @@\n // }\n import React, { useEffect, useState } from 'react';\n import PSPDFKit from 'pspdfkit';\n \n-function PdfViewer() {\n+function PdfViewerComponent(props) {\n   const [instance, setInstance] = useState(null);\n   const [comments, setComments] = useState([]);\n   const [newCommentText, setNewCommentText] = useState('');\n   const [replyingToComment, setReplyingToComment] = useState(null);\n@@ -61,9 +61,13 @@\n     });\n \n     return () => {\n       if (instance) {\n-        PSPDFKit.unload(/* container */);\n+        PSPDFKit.unload(container \n+        \n+          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          document: props.document,\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_UR);\n       }\n     };\n   }, []);\n \n"
                },
                {
                    "date": 1713615131546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,13 +61,13 @@\n     });\n \n     return () => {\n       if (instance) {\n-        PSPDFKit.unload(container ,\n-        \n+        PSPDFKit.unload({container \n+        ,\n           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n           document: props.document,\n-          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_UR);\n+          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_UR}`})\n       }\n     };\n   }, []);\n \n"
                },
                {
                    "date": 1713615147619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     return () => {\n       if (instance) {\n         PSPDFKit.unload({container \n         ,\n-          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n+          license: \"TR240415-63529-84403\",\n           document: props.document,\n           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_UR}`})\n       }\n     };\n"
                }
            ],
            "date": 1713604583729,
            "name": "Commit-0",
            "content": "// import React, { useEffect, useRef } from \"react\";\n\n// export default function PdfViewerComponent(props) {\n//   const containerRef = useRef(null);\n\n//   useEffect(() => {\n//     const loadPSPDFKit = async () => {\n//       try {\n//         const PSPDFKit = await import(\"pspdfkit\");\n//         const container = containerRef.current;\n\n//         if (!container) {\n//           throw new Error(\"Container element not found.\");\n//         }\n\n//         await PSPDFKit.load({\n//           container,\n//           license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n//           document: props.document,\n//           baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n//         });\n//       } catch (error) {\n//         console.error(\"Error loading PSPDFKit:\", error);\n//       }\n//     };\n\n//     loadPSPDFKit();\n\n//     return () => {\n//       const container = containerRef.current;\n//       if (container && window.PSPDFKit) {\n//         window.PSPDFKit.unload(container);\n//       }\n//     };\n//   }, [props.document]);\n\n//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n// }\nimport React, { useEffect, useRef } from \"react\";\nconst { List } = PSPDFKit.Immutable;\nconst { DrawingPoint, Rect } = PSPDFKit.Geometry;\nconst { InkAnnotation } = PSPDFKit.Annotations;\n\nexport default function PdfViewerComponent(props) {\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const loadPSPDFKit = async () => {\n      try {\n        const PSPDFKit = await import(\"pspdfkit\");\n        const container = containerRef.current;\n\n        if (!container) {\n          throw new Error(\"Container element not found.\");\n        }\n\n        const instance = await PSPDFKit.load({\n          container,\n          license: \"YOUR_PSPDFKIT_LICENSE_KEY\",\n          document: props.document,\n          baseUrl: `${window.location.protocol}//${window.location.host}/${process.env.PUBLIC_URL}`,\n        });\n\n        var annotation = new InkAnnotation({\n          pageIndex: 0,\n          boundingBox: new Rect({ width: 100, height: 100 }),\n          lines: List([\n            List([\n              new DrawingPoint({ x: 0, y: 0 }),\n              new DrawingPoint({ x: 100, y: 100 })\n            ])\n          ])\n        });\n\n        const [createdAnnotation] = await instance.create(annotation);\n        console.log(createdAnnotation.id); // => '01BS964AM5Z01J9MKBK64F22BQ'\n      } catch (error) {\n        console.error(\"Error loading PSPDFKit:\", error);\n      }\n    };\n\n    loadPSPDFKit();\n\n    return () => {\n      const container = containerRef.current;\n      if (container && window.PSPDFKit) {\n        window.PSPDFKit.unload(container);\n      }\n    };\n  }, [props.document]);\n\n  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n}\n"
        }
    ]
}