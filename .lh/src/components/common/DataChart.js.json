{
    "sourceFile": "src/components/common/DataChart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 49,
            "patches": [
                {
                    "date": 1709014843669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709016574535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,53 @@\n import React from 'react';\r\n-import { PolarArea } from 'react-chartjs-2';\r\n+import ReactApexChart from 'react-apexcharts';\r\n \r\n const DataChart = () => {\r\n-  const data = {\r\n-    labels: ['Red', 'Green', 'Yellow', 'Grey', 'Blue'],\r\n-    datasets: [\r\n-      {\r\n-        data: [11, 16, 7, 3, 14],\r\n-        backgroundColor: [\r\n-          'rgba(255, 99, 132, 0.6)',\r\n-          'rgba(75, 192, 192, 0.6)',\r\n-          'rgba(255, 206, 86, 0.6)',\r\n-          'rgba(128, 128, 128, 0.6)',\r\n-          'rgba(54, 162, 235, 0.6)',\r\n-        ],\r\n-        borderColor: [\r\n-          'rgba(255, 99, 132, 1)',\r\n-          'rgba(75, 192, 192, 1)',\r\n-          'rgba(255, 206, 86, 1)',\r\n-          'rgba(128, 128, 128, 1)',\r\n-          'rgba(54, 162, 235, 1)',\r\n-        ],\r\n-        borderWidth: 1,\r\n-      },\r\n-    ],\r\n-  };\r\n-\r\n+  const series = [42, 47, 52, 58, 65];\r\n   const options = {\r\n-    scale: {\r\n-      ticks: {\r\n-        beginAtZero: true,\r\n-      },\r\n+    chart: {\r\n+      width: 380,\r\n+      type: 'polarArea'\r\n     },\r\n+    labels: ['Rose A', 'Rose B', 'Rose C', 'Rose D', 'Rose E'],\r\n+    fill: {\r\n+      opacity: 1\r\n+    },\r\n+    stroke: {\r\n+      width: 1,\r\n+      colors: undefined\r\n+    },\r\n+    yaxis: {\r\n+      show: false\r\n+    },\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      polarArea: {\r\n+        rings: {\r\n+          strokeWidth: 0\r\n+        },\r\n+        spokes: {\r\n+          strokeWidth: 0\r\n+        },\r\n+      }\r\n+    },\r\n+    theme: {\r\n+      monochrome: {\r\n+        enabled: true,\r\n+        shadeTo: 'light',\r\n+        shadeIntensity: 0.6\r\n+      }\r\n+    }\r\n   };\r\n \r\n   return (\r\n     <div>\r\n-      <h2>Polar Area Chart</h2>\r\n-      <PolarArea data={data} options={options} />\r\n+      <div id=\"chart\">\r\n+        <ReactApexChart options={options} series={series} type=\"polarArea\" width={380} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1709027263218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,20 @@\n import React from 'react';\r\n import ReactApexChart from 'react-apexcharts';\r\n \r\n-const DataChart = () => {\r\n-  const series = [42, 47, 52, 58, 65];\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `Rose ${item.status}`);\r\n+\r\n   const options = {\r\n     chart: {\r\n       width: 380,\r\n       type: 'polarArea'\r\n     },\r\n-    labels: ['Rose A', 'Rose B', 'Rose C', 'Rose D', 'Rose E'],\r\n+    labels: statuses, // Using extracted statuses as labels\r\n     fill: {\r\n       opacity: 1\r\n     },\r\n     stroke: {\r\n@@ -43,9 +48,9 @@\n \r\n   return (\r\n     <div>\r\n       <div id=\"chart\">\r\n-        <ReactApexChart options={options} series={series} type=\"polarArea\" width={380} />\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={380} />\r\n       </div>\r\n       <div id=\"html-dist\"></div>\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1709028655240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `Rose ${item.status  === \"1\"\r\n+  ? \"New\"\r\n+  : item.status === \"2\"\r\n+    ? \"Prospect\"\r\n+    : item.status === \"3\"\r\n+      ? \"Lead\"\r\n+      : item.status === \"4\"\r\n+        ? \"Retained\"\r\n+        : item.status === \"5\"\r\n+          ? \"Lost\"\r\n+          : item.status === \"6\"\r\n+            ? \"Dead\"\r\n+            : item.status === \"7\"\r\n+              ? \"Working on\"\r\n+              : item.status === \"8\"\r\n+                ? \"Submitted\"\r\n+                : item.status === \"0\"\r\n+                  ? \"New\"\r\n+                  : \"status\"}`);\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: 380,\r\n+      type: 'polarArea'\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    fill: {\r\n+      opacity: 1\r\n+    },\r\n+    stroke: {\r\n+      width: 1,\r\n+      colors: undefined\r\n+    },\r\n+    yaxis: {\r\n+      show: false\r\n+    },\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      polarArea: {\r\n+        rings: {\r\n+          strokeWidth: 0\r\n+        },\r\n+        spokes: {\r\n+          strokeWidth: 0\r\n+        },\r\n+      }\r\n+    },\r\n+    theme: {\r\n+      monochrome: {\r\n+        enabled: true,\r\n+        shadeTo: 'light',\r\n+        shadeIntensity: 0.6\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <div id=\"chart\">\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={380} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709028669136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,27 +5,27 @@\n   // Extracting counts from data\r\n   const counts = data.map(item => parseInt(item.count, 10));\r\n \r\n   // Extracting statuses from data\r\n-  const statuses = data.map(item => `Rose ${item.status  === \"1\"\r\n-  ? \"New\"\r\n-  : item.status === \"2\"\r\n-    ? \"Prospect\"\r\n-    : item.status === \"3\"\r\n-      ? \"Lead\"\r\n-      : item.status === \"4\"\r\n-        ? \"Retained\"\r\n-        : item.status === \"5\"\r\n-          ? \"Lost\"\r\n-          : item.status === \"6\"\r\n-            ? \"Dead\"\r\n-            : item.status === \"7\"\r\n-              ? \"Working on\"\r\n-              : item.status === \"8\"\r\n-                ? \"Submitted\"\r\n-                : item.status === \"0\"\r\n-                  ? \"New\"\r\n-                  : \"status\"}`);\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"New\"\r\n+                    : \"status\"}`);\r\n \r\n   const options = {\r\n     chart: {\r\n       width: 380,\r\n@@ -74,63 +74,4 @@\n   );\r\n };\r\n \r\n export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `Rose ${item.status}`);\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: 380,\r\n-      type: 'polarArea'\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    fill: {\r\n-      opacity: 1\r\n-    },\r\n-    stroke: {\r\n-      width: 1,\r\n-      colors: undefined\r\n-    },\r\n-    yaxis: {\r\n-      show: false\r\n-    },\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      polarArea: {\r\n-        rings: {\r\n-          strokeWidth: 0\r\n-        },\r\n-        spokes: {\r\n-          strokeWidth: 0\r\n-        },\r\n-      }\r\n-    },\r\n-    theme: {\r\n-      monochrome: {\r\n-        enabled: true,\r\n-        shadeTo: 'light',\r\n-        shadeIntensity: 0.6\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      <div id=\"chart\">\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={380} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n"
                },
                {
                    "date": 1709028873456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n                 ? \"Working on\"\r\n                 : item.status === \"8\"\r\n                   ? \"Submitted\"\r\n                   : item.status === \"0\"\r\n-                    ? \"New\"\r\n+                    ? \"Web\"\r\n                     : \"status\"}`);\r\n \r\n   const options = {\r\n     chart: {\r\n"
                },
                {
                    "date": 1709034702988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: \"100%\",\r\n+      type: 'polarArea'\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    fill: {\r\n+      opacity: 1\r\n+    },\r\n+    stroke: {\r\n+      width: 1,\r\n+      colors: undefined\r\n+    },\r\n+    yaxis: {\r\n+      show: false\r\n+    },\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      polarArea: {\r\n+        rings: {\r\n+          strokeWidth: 0\r\n+        },\r\n+        spokes: {\r\n+          strokeWidth: 0\r\n+        },\r\n+      }\r\n+    },\r\n+    theme: {\r\n+      monochrome: {\r\n+        enabled: true,\r\n+        shadeTo: 'light',\r\n+        shadeIntensity: 0.6\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <div id=\"chart\">\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={380} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709034772081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    fill: {\r\n+      opacity: 1\r\n+    },\r\n+    stroke: {\r\n+      width: 1,\r\n+      colors: undefined\r\n+    },\r\n+    yaxis: {\r\n+      show: false\r\n+    },\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      polarArea: {\r\n+        rings: {\r\n+          strokeWidth: 0\r\n+        },\r\n+        spokes: {\r\n+          strokeWidth: 0\r\n+        },\r\n+      }\r\n+    },\r\n+    theme: {\r\n+      monochrome: {\r\n+        enabled: true,\r\n+        shadeTo: 'light',\r\n+        shadeIntensity: 0.6\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <div id=\"chart\">\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={380} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709034783507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,15 @@\n                     : \"status\"}`);\r\n \r\n   const options = {\r\n     chart: {\r\n-      width: '100%', // Change width to 100%\r\n-      type: 'pie', // Change chart type to 'pie'\r\n+      width: '100%',\r\n+      type: 'pie', \r\n       toolbar: {\r\n-        show: false // Hide toolbar\r\n+        show: false \r\n       }\r\n     },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n+    labels: statuses, \r\n     fill: {\r\n       opacity: 1\r\n     },\r\n     stroke: {\r\n@@ -77,158 +77,4 @@\n   );\r\n };\r\n \r\n export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: \"100%\",\r\n-      type: 'polarArea'\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    fill: {\r\n-      opacity: 1\r\n-    },\r\n-    stroke: {\r\n-      width: 1,\r\n-      colors: undefined\r\n-    },\r\n-    yaxis: {\r\n-      show: false\r\n-    },\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      polarArea: {\r\n-        rings: {\r\n-          strokeWidth: 0\r\n-        },\r\n-        spokes: {\r\n-          strokeWidth: 0\r\n-        },\r\n-      }\r\n-    },\r\n-    theme: {\r\n-      monochrome: {\r\n-        enabled: true,\r\n-        shadeTo: 'light',\r\n-        shadeIntensity: 0.6\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      <div id=\"chart\">\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={380} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: 380,\r\n-      type: 'polarArea'\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    fill: {\r\n-      opacity: 1\r\n-    },\r\n-    stroke: {\r\n-      width: 1,\r\n-      colors: undefined\r\n-    },\r\n-    yaxis: {\r\n-      show: false\r\n-    },\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      polarArea: {\r\n-        rings: {\r\n-          strokeWidth: 0\r\n-        },\r\n-        spokes: {\r\n-          strokeWidth: 0\r\n-        },\r\n-      }\r\n-    },\r\n-    theme: {\r\n-      monochrome: {\r\n-        enabled: true,\r\n-        shadeTo: 'light',\r\n-        shadeIntensity: 0.6\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      <div id=\"chart\">\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={380} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n"
                },
                {
                    "date": 1709034854774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%',\r\n+      type: 'pie', \r\n+      toolbar: {\r\n+        show: false \r\n+      }\r\n+    },\r\n+    labels: statuses, \r\n+    fill: {\r\n+      opacity: 1\r\n+    },\r\n+    stroke: {\r\n+      width: 1,\r\n+      colors: undefined\r\n+    },\r\n+    yaxis: {\r\n+      show: false\r\n+    },\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      polarArea: {\r\n+        rings: {\r\n+          strokeWidth: 0\r\n+        },\r\n+        spokes: {\r\n+          strokeWidth: 0\r\n+        },\r\n+      }\r\n+    },\r\n+    theme: {\r\n+      monochrome: {\r\n+        enabled: true,\r\n+        shadeTo: 'light',\r\n+        shadeIntensity: 0.6\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709034889653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \r\n   const options = {\r\n     chart: {\r\n       width: '100%',\r\n-      type: 'pie', \r\n+      type: 'polarArea', \r\n       toolbar: {\r\n         show: false \r\n       }\r\n     },\r\n@@ -77,84 +77,4 @@\n   );\r\n };\r\n \r\n export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%',\r\n-      type: 'pie', \r\n-      toolbar: {\r\n-        show: false \r\n-      }\r\n-    },\r\n-    labels: statuses, \r\n-    fill: {\r\n-      opacity: 1\r\n-    },\r\n-    stroke: {\r\n-      width: 1,\r\n-      colors: undefined\r\n-    },\r\n-    yaxis: {\r\n-      show: false\r\n-    },\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      polarArea: {\r\n-        rings: {\r\n-          strokeWidth: 0\r\n-        },\r\n-        spokes: {\r\n-          strokeWidth: 0\r\n-        },\r\n-      }\r\n-    },\r\n-    theme: {\r\n-      monochrome: {\r\n-        enabled: true,\r\n-        shadeTo: 'light',\r\n-        shadeIntensity: 0.6\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      <div id=\"chart\">\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={380} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n"
                },
                {
                    "date": 1709034898094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \r\n   const options = {\r\n     chart: {\r\n       width: '100%',\r\n-      type: 'polarArea', \r\n+      type: 'pie', \r\n       toolbar: {\r\n         show: false \r\n       }\r\n     },\r\n"
                },
                {
                    "date": 1709034926616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+                    // \"line\"\r\n+                    // | \"area\"\r\n+                    // | \"bar\"\r\n+                    // | \"pie\"\r\n+                    // | \"donut\"\r\n+                    // | \"radialBar\"\r\n+                    // | \"scatter\"\r\n+                    // | \"bubble\"\r\n+                    // | \"heatmap\"\r\n+                    // | \"candlestick\"\r\n+                    // | \"boxPlot\"\r\n+                    // | \"radar\"\r\n+                    // | \"polarArea\"\r\n+                    // | \"rangeBar\"\r\n+                    // | \"rangeArea\"\r\n+                    // | \"treemap\";\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%',\r\n+      type: 'donut', \r\n+      toolbar: {\r\n+        show: false \r\n+      }\r\n+    },\r\n+    labels: statuses, \r\n+    fill: {\r\n+      opacity: 1\r\n+    },\r\n+    stroke: {\r\n+      width: 1,\r\n+      colors: undefined\r\n+    },\r\n+    yaxis: {\r\n+      show: false\r\n+    },\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      polarArea: {\r\n+        rings: {\r\n+          strokeWidth: 0\r\n+        },\r\n+        spokes: {\r\n+          strokeWidth: 0\r\n+        },\r\n+      }\r\n+    },\r\n+    theme: {\r\n+      monochrome: {\r\n+        enabled: true,\r\n+        shadeTo: 'light',\r\n+        shadeIntensity: 0.6\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709034953932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,48 +40,33 @@\n                     // | \"polarArea\"\r\n                     // | \"rangeBar\"\r\n                     // | \"rangeArea\"\r\n                     // | \"treemap\";\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%',\r\n-      type: 'donut', \r\n-      toolbar: {\r\n-        show: false \r\n-      }\r\n-    },\r\n-    labels: statuses, \r\n-    fill: {\r\n-      opacity: 1\r\n-    },\r\n-    stroke: {\r\n-      width: 1,\r\n-      colors: undefined\r\n-    },\r\n-    yaxis: {\r\n-      show: false\r\n-    },\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      polarArea: {\r\n-        rings: {\r\n-          strokeWidth: 0\r\n-        },\r\n-        spokes: {\r\n-          strokeWidth: 0\r\n-        },\r\n-      }\r\n-    },\r\n-    theme: {\r\n-      monochrome: {\r\n-        enabled: true,\r\n-        shadeTo: 'light',\r\n-        shadeIntensity: 0.6\r\n-      }\r\n-    }\r\n-  };\r\n+                    const options = {\r\n+                      chart: {\r\n+                        width: '100%', // Change width to 100%\r\n+                        type: 'pie', // Change chart type to 'pie'\r\n+                        toolbar: {\r\n+                          show: false // Hide toolbar\r\n+                        }\r\n+                      },\r\n+                      labels: statuses, // Using extracted statuses as labels\r\n+                      legend: {\r\n+                        position: 'bottom'\r\n+                      },\r\n+                      plotOptions: {\r\n+                        pie: {\r\n+                          expandOnClick: false\r\n+                        }\r\n+                      },\r\n+                      theme: {\r\n+                        monochrome: {\r\n+                          enabled: true,\r\n+                          shadeTo: 'light',\r\n+                          shadeIntensity: 0.6\r\n+                        }\r\n+                      }\r\n+                    };\r\n \r\n   return (\r\n     <div className='d=flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n@@ -92,84 +77,4 @@\n   );\r\n };\r\n \r\n export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%',\r\n-      type: 'pie', \r\n-      toolbar: {\r\n-        show: false \r\n-      }\r\n-    },\r\n-    labels: statuses, \r\n-    fill: {\r\n-      opacity: 1\r\n-    },\r\n-    stroke: {\r\n-      width: 1,\r\n-      colors: undefined\r\n-    },\r\n-    yaxis: {\r\n-      show: false\r\n-    },\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      polarArea: {\r\n-        rings: {\r\n-          strokeWidth: 0\r\n-        },\r\n-        spokes: {\r\n-          strokeWidth: 0\r\n-        },\r\n-      }\r\n-    },\r\n-    theme: {\r\n-      monochrome: {\r\n-        enabled: true,\r\n-        shadeTo: 'light',\r\n-        shadeIntensity: 0.6\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n"
                },
                {
                    "date": 1709035010821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+                    // \"line\"\r\n+                    // | \"area\"\r\n+                    // | \"bar\"\r\n+                    // | \"pie\"\r\n+                    // | \"donut\"\r\n+                    // | \"radialBar\"\r\n+                    // | \"scatter\"\r\n+                    // | \"bubble\"\r\n+                    // | \"heatmap\"\r\n+                    // | \"candlestick\"\r\n+                    // | \"boxPlot\"\r\n+                    // | \"radar\"\r\n+                    // | \"polarArea\"\r\n+                    // | \"rangeBar\"\r\n+                    // | \"rangeArea\"\r\n+                    // | \"treemap\";\r\n+                    const options = {\r\n+                      chart: {\r\n+                        width: '100%',\r\n+                        type: 'donut', // Change chart type to 'donut'\r\n+                        toolbar: {\r\n+                          show: false\r\n+                        }\r\n+                      },\r\n+                      labels: statuses,\r\n+                      legend: {\r\n+                        position: 'bottom'\r\n+                      },\r\n+                      plotOptions: {\r\n+                        pie: {\r\n+                          expandOnClick: false\r\n+                        }\r\n+                      },\r\n+                      theme: {\r\n+                        monochrome: {\r\n+                          enabled: true,\r\n+                          shadeTo: 'light',\r\n+                          shadeIntensity: 0.6\r\n+                        }\r\n+                      },\r\n+                      stroke: {\r\n+                        colors: undefined\r\n+                      }\r\n+                    };\r\n+                    \r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709035028770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,37 +40,48 @@\n                     // | \"polarArea\"\r\n                     // | \"rangeBar\"\r\n                     // | \"rangeArea\"\r\n                     // | \"treemap\";\r\n-                    const options = {\r\n-                      chart: {\r\n-                        width: '100%',\r\n-                        type: 'donut', // Change chart type to 'donut'\r\n-                        toolbar: {\r\n-                          show: false\r\n-                        }\r\n-                      },\r\n-                      labels: statuses,\r\n-                      legend: {\r\n-                        position: 'bottom'\r\n-                      },\r\n-                      plotOptions: {\r\n-                        pie: {\r\n-                          expandOnClick: false\r\n-                        }\r\n-                      },\r\n-                      theme: {\r\n-                        monochrome: {\r\n-                          enabled: true,\r\n-                          shadeTo: 'light',\r\n-                          shadeIntensity: 0.6\r\n-                        }\r\n-                      },\r\n-                      stroke: {\r\n-                        colors: undefined\r\n-                      }\r\n-                    };\r\n-                    \r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%',\r\n+      type: 'pie', \r\n+      toolbar: {\r\n+        show: false \r\n+      }\r\n+    },\r\n+    labels: statuses, \r\n+    fill: {\r\n+      opacity: 1\r\n+    },\r\n+    stroke: {\r\n+      width: 1,\r\n+      colors: undefined\r\n+    },\r\n+    yaxis: {\r\n+      show: false\r\n+    },\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      polarArea: {\r\n+        rings: {\r\n+          strokeWidth: 0\r\n+        },\r\n+        spokes: {\r\n+          strokeWidth: 0\r\n+        },\r\n+      }\r\n+    },\r\n+    theme: {\r\n+      monochrome: {\r\n+        enabled: true,\r\n+        shadeTo: 'light',\r\n+        shadeIntensity: 0.6\r\n+      }\r\n+    }\r\n+  };\r\n \r\n   return (\r\n     <div className='d=flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n@@ -81,84 +92,4 @@\n   );\r\n };\r\n \r\n export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-                    // \"line\"\r\n-                    // | \"area\"\r\n-                    // | \"bar\"\r\n-                    // | \"pie\"\r\n-                    // | \"donut\"\r\n-                    // | \"radialBar\"\r\n-                    // | \"scatter\"\r\n-                    // | \"bubble\"\r\n-                    // | \"heatmap\"\r\n-                    // | \"candlestick\"\r\n-                    // | \"boxPlot\"\r\n-                    // | \"radar\"\r\n-                    // | \"polarArea\"\r\n-                    // | \"rangeBar\"\r\n-                    // | \"rangeArea\"\r\n-                    // | \"treemap\";\r\n-                    const options = {\r\n-                      chart: {\r\n-                        width: '100%', // Change width to 100%\r\n-                        type: 'pie', // Change chart type to 'pie'\r\n-                        toolbar: {\r\n-                          show: false // Hide toolbar\r\n-                        }\r\n-                      },\r\n-                      labels: statuses, // Using extracted statuses as labels\r\n-                      legend: {\r\n-                        position: 'bottom'\r\n-                      },\r\n-                      plotOptions: {\r\n-                        pie: {\r\n-                          expandOnClick: false\r\n-                        }\r\n-                      },\r\n-                      theme: {\r\n-                        monochrome: {\r\n-                          enabled: true,\r\n-                          shadeTo: 'light',\r\n-                          shadeIntensity: 0.6\r\n-                        }\r\n-                      }\r\n-                    };\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n"
                },
                {
                    "date": 1709035061082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,48 +40,33 @@\n                     // | \"polarArea\"\r\n                     // | \"rangeBar\"\r\n                     // | \"rangeArea\"\r\n                     // | \"treemap\";\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%',\r\n-      type: 'pie', \r\n-      toolbar: {\r\n-        show: false \r\n-      }\r\n-    },\r\n-    labels: statuses, \r\n-    fill: {\r\n-      opacity: 1\r\n-    },\r\n-    stroke: {\r\n-      width: 1,\r\n-      colors: undefined\r\n-    },\r\n-    yaxis: {\r\n-      show: false\r\n-    },\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      polarArea: {\r\n-        rings: {\r\n-          strokeWidth: 0\r\n-        },\r\n-        spokes: {\r\n-          strokeWidth: 0\r\n-        },\r\n-      }\r\n-    },\r\n-    theme: {\r\n-      monochrome: {\r\n-        enabled: true,\r\n-        shadeTo: 'light',\r\n-        shadeIntensity: 0.6\r\n-      }\r\n-    }\r\n-  };\r\n+                    const options = {\r\n+                      chart: {\r\n+                        width: '100%', // Change width to 100%\r\n+                        type: 'pie', // Change chart type to 'pie'\r\n+                        toolbar: {\r\n+                          show: false // Hide toolbar\r\n+                        }\r\n+                      },\r\n+                      labels: statuses, // Using extracted statuses as labels\r\n+                      legend: {\r\n+                        position: 'bottom'\r\n+                      },\r\n+                      plotOptions: {\r\n+                        pie: {\r\n+                          expandOnClick: false\r\n+                        }\r\n+                      },\r\n+                      theme: {\r\n+                        monochrome: {\r\n+                          enabled: true,\r\n+                          shadeTo: 'light',\r\n+                          shadeIntensity: 0.6\r\n+                        }\r\n+                      }\r\n+                    };\r\n \r\n   return (\r\n     <div className='d=flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n"
                },
                {
                    "date": 1709035135573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+  // Generating a palette of colors\r\n+  const palette = ['#00bcd4', '#4caf50', '#f44336', '#ff9800', '#9c27b0'];\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      pie: {\r\n+        expandOnClick: false\r\n+      }\r\n+    },\r\n+    theme: {\r\n+      monochrome: {\r\n+        enabled: true,\r\n+        shadeTo: 'light',\r\n+        shadeIntensity: 0.6\r\n+      }\r\n+    },\r\n+    colors: palette // Assigning the color palette to the chart\r\n+  };\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709035224561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+                    // \"line\"\r\n+                    // | \"area\"\r\n+                    // | \"bar\"\r\n+                    // | \"pie\"\r\n+                    // | \"donut\"\r\n+                    // | \"radialBar\"\r\n+                    // | \"scatter\"\r\n+                    // | \"bubble\"\r\n+                    // | \"heatmap\"\r\n+                    // | \"candlestick\"\r\n+                    // | \"boxPlot\"\r\n+                    // | \"radar\"\r\n+                    // | \"polarArea\"\r\n+                    // | \"rangeBar\"\r\n+                    // | \"rangeArea\"\r\n+                    // | \"treemap\";\r\n+// Generating shades of colors\r\n+const generateShades = (count, baseColor) => {\r\n+  const shades = [];\r\n+  for (let i = 0; i < count; i++) {\r\n+    const shade = `rgb(${baseColor.map(c => c + i * 10).join(',')})`;\r\n+    shades.push(shade);\r\n+  }\r\n+  return shades;\r\n+};\r\n+\r\n+const palette = ['#00bcd4', '#4caf50', '#f44336', '#ff9800', '#9c27b0'];\r\n+\r\n+const options = {\r\n+  chart: {\r\n+    width: '100%', // Change width to 100%\r\n+    type: 'pie', // Change chart type to 'pie'\r\n+    toolbar: {\r\n+      show: false // Hide toolbar\r\n+    }\r\n+  },\r\n+  labels: statuses, // Using extracted statuses as labels\r\n+  legend: {\r\n+    position: 'bottom'\r\n+  },\r\n+  plotOptions: {\r\n+    pie: {\r\n+      expandOnClick: false\r\n+    }\r\n+  },\r\n+  colors: palette.flatMap((baseColor, index) => generateShades(counts[index], baseColor)),\r\n+};\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709035319761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,178 +24,10 @@\n                   ? \"Submitted\"\r\n                   : item.status === \"0\"\r\n                     ? \"Web\"\r\n                     : \"status\"}`);\r\n-                    // \"line\"\r\n-                    // | \"area\"\r\n-                    // | \"bar\"\r\n-                    // | \"pie\"\r\n-                    // | \"donut\"\r\n-                    // | \"radialBar\"\r\n-                    // | \"scatter\"\r\n-                    // | \"bubble\"\r\n-                    // | \"heatmap\"\r\n-                    // | \"candlestick\"\r\n-                    // | \"boxPlot\"\r\n-                    // | \"radar\"\r\n-                    // | \"polarArea\"\r\n-                    // | \"rangeBar\"\r\n-                    // | \"rangeArea\"\r\n-                    // | \"treemap\";\r\n-// Generating shades of colors\r\n-const generateShades = (count, baseColor) => {\r\n-  const shades = [];\r\n-  for (let i = 0; i < count; i++) {\r\n-    const shade = `rgb(${baseColor.map(c => c + i * 10).join(',')})`;\r\n-    shades.push(shade);\r\n-  }\r\n-  return shades;\r\n-};\r\n-\r\n-const palette = ['#00bcd4', '#4caf50', '#f44336', '#ff9800', '#9c27b0'];\r\n-\r\n-const options = {\r\n-  chart: {\r\n-    width: '100%', // Change width to 100%\r\n-    type: 'pie', // Change chart type to 'pie'\r\n-    toolbar: {\r\n-      show: false // Hide toolbar\r\n-    }\r\n-  },\r\n-  labels: statuses, // Using extracted statuses as labels\r\n-  legend: {\r\n-    position: 'bottom'\r\n-  },\r\n-  plotOptions: {\r\n-    pie: {\r\n-      expandOnClick: false\r\n-    }\r\n-  },\r\n-  colors: palette.flatMap((baseColor, index) => generateShades(counts[index], baseColor)),\r\n-};\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-  // Generating a palette of colors\r\n-  const palette = ['#00bcd4', '#4caf50', '#f44336', '#ff9800', '#9c27b0'];\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%', // Change width to 100%\r\n-      type: 'pie', // Change chart type to 'pie'\r\n-      toolbar: {\r\n-        show: false // Hide toolbar\r\n-      }\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      pie: {\r\n-        expandOnClick: false\r\n-      }\r\n-    },\r\n-    theme: {\r\n-      monochrome: {\r\n-        enabled: true,\r\n-        shadeTo: 'light',\r\n-        shadeIntensity: 0.6\r\n-      }\r\n-    },\r\n-    colors: palette // Assigning the color palette to the chart\r\n-  };\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-                    // \"line\"\r\n-                    // | \"area\"\r\n-                    // | \"bar\"\r\n-                    // | \"pie\"\r\n-                    // | \"donut\"\r\n-                    // | \"radialBar\"\r\n-                    // | \"scatter\"\r\n-                    // | \"bubble\"\r\n-                    // | \"heatmap\"\r\n-                    // | \"candlestick\"\r\n-                    // | \"boxPlot\"\r\n-                    // | \"radar\"\r\n-                    // | \"polarArea\"\r\n-                    // | \"rangeBar\"\r\n-                    // | \"rangeArea\"\r\n-                    // | \"treemap\";\r\n+       \r\n+  \r\n                     const options = {\r\n                       chart: {\r\n                         width: '100%', // Change width to 100%\r\n                         type: 'pie', // Change chart type to 'pie'\r\n"
                },
                {
                    "date": 1709035376209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+       \r\n+  \r\n+                    const options = {\r\n+                      chart: {\r\n+                        width: '100%', // Change width to 100%\r\n+                        type: 'pie', // Change chart type to 'pie'\r\n+                        toolbar: {\r\n+                          show: false // Hide toolbar\r\n+                        }\r\n+                      },\r\n+                      labels: statuses, // Using extracted statuses as labels\r\n+                      legend: {\r\n+                        position: 'bottom'\r\n+                      },\r\n+                      plotOptions: {\r\n+                        pie: {\r\n+                          expandOnClick: false\r\n+                        }\r\n+                      },\r\n+                      colors: ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\r\n+                               '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+                               '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+                               '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n+                    };\r\n+                    \r\n+                    \r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709035402965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,100 +24,34 @@\n                   ? \"Submitted\"\r\n                   : item.status === \"0\"\r\n                     ? \"Web\"\r\n                     : \"status\"}`);\r\n-       \r\n-  \r\n-                    const options = {\r\n-                      chart: {\r\n-                        width: '100%', // Change width to 100%\r\n-                        type: 'pie', // Change chart type to 'pie'\r\n-                        toolbar: {\r\n-                          show: false // Hide toolbar\r\n-                        }\r\n-                      },\r\n-                      labels: statuses, // Using extracted statuses as labels\r\n-                      legend: {\r\n-                        position: 'bottom'\r\n-                      },\r\n-                      plotOptions: {\r\n-                        pie: {\r\n-                          expandOnClick: false\r\n-                        }\r\n-                      },\r\n-                      colors: ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\r\n-                               '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-                               '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-                               '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n-                    };\r\n-                    \r\n-                    \r\n \r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n \r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      pie: {\r\n+        expandOnClick: false\r\n+      }\r\n+    },\r\n+    colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n+      '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+      '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+      '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n+  };\r\n \r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n \r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-       \r\n-  \r\n-                    const options = {\r\n-                      chart: {\r\n-                        width: '100%', // Change width to 100%\r\n-                        type: 'pie', // Change chart type to 'pie'\r\n-                        toolbar: {\r\n-                          show: false // Hide toolbar\r\n-                        }\r\n-                      },\r\n-                      labels: statuses, // Using extracted statuses as labels\r\n-                      legend: {\r\n-                        position: 'bottom'\r\n-                      },\r\n-                      plotOptions: {\r\n-                        pie: {\r\n-                          expandOnClick: false\r\n-                        }\r\n-                      },\r\n-                      theme: {\r\n-                        monochrome: {\r\n-                          enabled: true,\r\n-                          shadeTo: 'light',\r\n-                          shadeIntensity: 0.6\r\n-                        }\r\n-                      }\r\n-                    };\r\n \r\n   return (\r\n     <div className='d=flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n"
                },
                {
                    "date": 1709035765630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n       position: 'bottom'\r\n     },\r\n     plotOptions: {\r\n       pie: {\r\n-        expandOnClick: false\r\n+        // expandOnClick: false\r\n       }\r\n     },\r\n     colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n       '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n"
                },
                {
                    "date": 1709035792723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      pie: {\r\n+        expandOnClick: false\r\n+      }\r\n+    },\r\n+    colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n+      '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+      '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+      '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n+  };\r\n+\r\n+\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709035840916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+\r\n+                    const options = {\r\n+                      chart: {\r\n+                        width: '100%', // Change width to 100%\r\n+                        type: 'pie', // Change chart type to 'pie'\r\n+                        toolbar: {\r\n+                          show: false // Hide toolbar\r\n+                        }\r\n+                      },\r\n+                      labels: statuses, // Using extracted statuses as labels\r\n+                      legend: {\r\n+                        position: 'bottom'\r\n+                      },\r\n+                      plotOptions: {\r\n+                        pie: {\r\n+                          expandOnClick: true, // Allow expanding on click\r\n+                          dataLabels: {\r\n+                            enabled: false // Disable data labels\r\n+                          },\r\n+                          donut: {\r\n+                            labels: {\r\n+                              show: true, // Show labels on donut slices\r\n+                              total: {\r\n+                                show: true, // Show total label\r\n+                                label: 'Total', // Customize total label\r\n+                                formatter: function (w) {\r\n+                                  return w.globals.seriesTotals.reduce((a, b) => {\r\n+                                    return a + b\r\n+                                  }, 0)\r\n+                                }\r\n+                              }\r\n+                            }\r\n+                          }\r\n+                        }\r\n+                      },\r\n+                      colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n+                        '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+                        '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+                        '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n+                    };\r\n+                    \r\n+                    \r\n+\r\n+\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709035953210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+\r\n+  // const options = {\r\n+  //   chart: {\r\n+  //     width: '100%', // Change width to 100%\r\n+  //     type: 'pie', // Change chart type to 'pie'\r\n+  //     toolbar: {\r\n+  //       show: false // Hide toolbar\r\n+  //     }\r\n+  //   },\r\n+  //   labels: statuses, // Using extracted statuses as labels\r\n+  //   legend: {\r\n+  //     position: 'bottom'\r\n+  //   },\r\n+  //   plotOptions: {\r\n+  //     pie: {\r\n+  //       expandOnClick: false\r\n+  //     }\r\n+  //   },\r\n+  //   colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n+  //     '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+  //     '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+  //     '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n+  // };\r\n+\r\n+// Function to calculate percentage\r\n+const calculatePercentage = (value, total) => {\r\n+  return ((value / total) * 100).toFixed(2);\r\n+};\r\n+\r\n+// Calculating total count\r\n+const totalCount = counts.reduce((acc, curr) => acc + curr, 0);\r\n+\r\n+// Generating shades of colors\r\n+const palette = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\r\n+                 '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+                 '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+                 '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'];\r\n+\r\n+const options = {\r\n+  chart: {\r\n+    width: '100%', // Change width to 100%\r\n+    type: 'pie', // Change chart type to 'pie'\r\n+    toolbar: {\r\n+      show: false // Hide toolbar\r\n+    }\r\n+  },\r\n+  labels: statuses, // Using extracted statuses as labels\r\n+  legend: {\r\n+    position: 'bottom'\r\n+  },\r\n+  plotOptions: {\r\n+    pie: {\r\n+      expandOnClick: true,\r\n+      donut: {\r\n+        labels: {\r\n+          show: true,\r\n+          total: {\r\n+            show: true,\r\n+            label: 'Total',\r\n+            formatter: function (w) {\r\n+              return totalCount;\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  },\r\n+  colors: palette,\r\n+  series: counts,\r\n+  tooltip: {\r\n+    enabled: true,\r\n+    formatter: function (val, opts) {\r\n+      const percentage = calculatePercentage(val, totalCount);\r\n+      return `${opts.seriesName}: ${val} (${percentage}%)`;\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709036220913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+\r\n+  // const options = {\r\n+  //   chart: {\r\n+  //     width: '100%', // Change width to 100%\r\n+  //     type: 'pie', // Change chart type to 'pie'\r\n+  //     toolbar: {\r\n+  //       show: false // Hide toolbar\r\n+  //     }\r\n+  //   },\r\n+  //   labels: statuses, // Using extracted statuses as labels\r\n+  //   legend: {\r\n+  //     position: 'bottom'\r\n+  //   },\r\n+  //   plotOptions: {\r\n+  //     pie: {\r\n+  //       expandOnClick: false\r\n+  //     }\r\n+  //   },\r\n+  //   colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n+  //     '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+  //     '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+  //     '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n+  // };\r\n+\r\n+// Function to calculate percentage\r\n+const calculatePercentage = (value, total) => {\r\n+  return ((value / total) * 100).toFixed(2);\r\n+};\r\n+\r\n+// Calculating total count\r\n+const totalCount = counts.reduce((acc, curr) => acc + curr, 0);\r\n+\r\n+// Generating shades of colors\r\n+const palette = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\r\n+                 '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+                 '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+                 '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'];\r\n+\r\n+const options = {\r\n+  chart: {\r\n+    width: '100%', // Change width to 100%\r\n+    type: 'pie', // Change chart type to 'pie'\r\n+    toolbar: {\r\n+      show: false // Hide toolbar\r\n+    }\r\n+  },\r\n+  labels: statuses, // Using extracted statuses as labels\r\n+  legend: {\r\n+    position: 'bottom'\r\n+  },\r\n+  plotOptions: {\r\n+    pie: {\r\n+      expandOnClick: true,\r\n+      donut: {\r\n+        labels: {\r\n+          show: true,\r\n+          total: {\r\n+            show: true,\r\n+            label: 'Total',\r\n+            formatter: function (w) {\r\n+              return totalCount;\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  },\r\n+  colors: palette,\r\n+  series: counts,\r\n+  tooltip: {\r\n+    enabled: true,\r\n+    formatter: function (val, opts) {\r\n+      const percentage = calculatePercentage(val, totalCount);\r\n+      return `${opts.seriesName}: ${val} (${percentage}%)`;\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709036267640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,328 +26,8 @@\n                     ? \"Web\"\r\n                     : \"status\"}`);\r\n \r\n \r\n-  // const options = {\r\n-  //   chart: {\r\n-  //     width: '100%', // Change width to 100%\r\n-  //     type: 'pie', // Change chart type to 'pie'\r\n-  //     toolbar: {\r\n-  //       show: false // Hide toolbar\r\n-  //     }\r\n-  //   },\r\n-  //   labels: statuses, // Using extracted statuses as labels\r\n-  //   legend: {\r\n-  //     position: 'bottom'\r\n-  //   },\r\n-  //   plotOptions: {\r\n-  //     pie: {\r\n-  //       expandOnClick: false\r\n-  //     }\r\n-  //   },\r\n-  //   colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n-  //     '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-  //     '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-  //     '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n-  // };\r\n-\r\n-// Function to calculate percentage\r\n-const calculatePercentage = (value, total) => {\r\n-  return ((value / total) * 100).toFixed(2);\r\n-};\r\n-\r\n-// Calculating total count\r\n-const totalCount = counts.reduce((acc, curr) => acc + curr, 0);\r\n-\r\n-// Generating shades of colors\r\n-const palette = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\r\n-                 '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-                 '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-                 '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'];\r\n-\r\n-const options = {\r\n-  chart: {\r\n-    width: '100%', // Change width to 100%\r\n-    type: 'pie', // Change chart type to 'pie'\r\n-    toolbar: {\r\n-      show: false // Hide toolbar\r\n-    }\r\n-  },\r\n-  labels: statuses, // Using extracted statuses as labels\r\n-  legend: {\r\n-    position: 'bottom'\r\n-  },\r\n-  plotOptions: {\r\n-    pie: {\r\n-      expandOnClick: true,\r\n-      donut: {\r\n-        labels: {\r\n-          show: true,\r\n-          total: {\r\n-            show: true,\r\n-            label: 'Total',\r\n-            formatter: function (w) {\r\n-              return totalCount;\r\n-            }\r\n-          }\r\n-        }\r\n-      }\r\n-    }\r\n-  },\r\n-  colors: palette,\r\n-  series: counts,\r\n-  tooltip: {\r\n-    enabled: true,\r\n-    formatter: function (val, opts) {\r\n-      const percentage = calculatePercentage(val, totalCount);\r\n-      return `${opts.seriesName}: ${val} (${percentage}%)`;\r\n-    }\r\n-  }\r\n-};\r\n-\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-\r\n-  // const options = {\r\n-  //   chart: {\r\n-  //     width: '100%', // Change width to 100%\r\n-  //     type: 'pie', // Change chart type to 'pie'\r\n-  //     toolbar: {\r\n-  //       show: false // Hide toolbar\r\n-  //     }\r\n-  //   },\r\n-  //   labels: statuses, // Using extracted statuses as labels\r\n-  //   legend: {\r\n-  //     position: 'bottom'\r\n-  //   },\r\n-  //   plotOptions: {\r\n-  //     pie: {\r\n-  //       expandOnClick: false\r\n-  //     }\r\n-  //   },\r\n-  //   colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n-  //     '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-  //     '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-  //     '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n-  // };\r\n-\r\n-// Function to calculate percentage\r\n-const calculatePercentage = (value, total) => {\r\n-  return ((value / total) * 100).toFixed(2);\r\n-};\r\n-\r\n-// Calculating total count\r\n-const totalCount = counts.reduce((acc, curr) => acc + curr, 0);\r\n-\r\n-// Generating shades of colors\r\n-const palette = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\r\n-                 '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-                 '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-                 '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'];\r\n-\r\n-const options = {\r\n-  chart: {\r\n-    width: '100%', // Change width to 100%\r\n-    type: 'pie', // Change chart type to 'pie'\r\n-    toolbar: {\r\n-      show: false // Hide toolbar\r\n-    }\r\n-  },\r\n-  labels: statuses, // Using extracted statuses as labels\r\n-  legend: {\r\n-    position: 'bottom'\r\n-  },\r\n-  plotOptions: {\r\n-    pie: {\r\n-      expandOnClick: true,\r\n-      donut: {\r\n-        labels: {\r\n-          show: true,\r\n-          total: {\r\n-            show: true,\r\n-            label: 'Total',\r\n-            formatter: function (w) {\r\n-              return totalCount;\r\n-            }\r\n-          }\r\n-        }\r\n-      }\r\n-    }\r\n-  },\r\n-  colors: palette,\r\n-  series: counts,\r\n-  tooltip: {\r\n-    enabled: true,\r\n-    formatter: function (val, opts) {\r\n-      const percentage = calculatePercentage(val, totalCount);\r\n-      return `${opts.seriesName}: ${val} (${percentage}%)`;\r\n-    }\r\n-  }\r\n-};\r\n-\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-\r\n-                    const options = {\r\n-                      chart: {\r\n-                        width: '100%', // Change width to 100%\r\n-                        type: 'pie', // Change chart type to 'pie'\r\n-                        toolbar: {\r\n-                          show: false // Hide toolbar\r\n-                        }\r\n-                      },\r\n-                      labels: statuses, // Using extracted statuses as labels\r\n-                      legend: {\r\n-                        position: 'bottom'\r\n-                      },\r\n-                      plotOptions: {\r\n-                        pie: {\r\n-                          expandOnClick: true, // Allow expanding on click\r\n-                          dataLabels: {\r\n-                            enabled: false // Disable data labels\r\n-                          },\r\n-                          donut: {\r\n-                            labels: {\r\n-                              show: true, // Show labels on donut slices\r\n-                              total: {\r\n-                                show: true, // Show total label\r\n-                                label: 'Total', // Customize total label\r\n-                                formatter: function (w) {\r\n-                                  return w.globals.seriesTotals.reduce((a, b) => {\r\n-                                    return a + b\r\n-                                  }, 0)\r\n-                                }\r\n-                              }\r\n-                            }\r\n-                          }\r\n-                        }\r\n-                      },\r\n-                      colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n-                        '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-                        '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-                        '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n-                    };\r\n-                    \r\n-                    \r\n-\r\n-\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-\r\n   const options = {\r\n     chart: {\r\n       width: '100%', // Change width to 100%\r\n       type: 'pie', // Change chart type to 'pie'\r\n@@ -370,81 +50,15 @@\n       '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n   };\r\n \r\n \r\n-\r\n   return (\r\n     <div className='d=flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n+        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n       </div>\r\n       <div id=\"html-dist\"></div>\r\n     </div>\r\n   );\r\n };\r\n \r\n export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%', // Change width to 100%\r\n-      type: 'pie', // Change chart type to 'pie'\r\n-      toolbar: {\r\n-        show: false // Hide toolbar\r\n-      }\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      pie: {\r\n-        // expandOnClick: false\r\n-      }\r\n-    },\r\n-    colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n-      '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-      '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-      '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n-  };\r\n-\r\n-\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"polarArea\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n"
                },
                {
                    "date": 1709036490928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    // legend: {\r\n+    //   position: 'bottom'\r\n+    // },\r\n+    // plotOptions: {\r\n+    //   pie: {\r\n+    //     expandOnClick: false\r\n+    //   }\r\n+    // },\r\n+    // colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n+    //   '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n+    //   '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n+    //   '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n+    responsive: [{\r\n+      breakpoint: 480,\r\n+      options: {\r\n+        chart: {\r\n+          width: 200\r\n+        },\r\n+        legend: {\r\n+          position: 'bottom'\r\n+        }\r\n+      }\r\n+    }]\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className='d=flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709036513990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,11 +35,11 @@\n         show: false // Hide toolbar\r\n       }\r\n     },\r\n     labels: statuses, // Using extracted statuses as labels\r\n-    // legend: {\r\n-    //   position: 'bottom'\r\n-    // },\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n     // plotOptions: {\r\n     //   pie: {\r\n     //     expandOnClick: false\r\n     //   }\r\n@@ -72,68 +72,4 @@\n   );\r\n };\r\n \r\n export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%', // Change width to 100%\r\n-      type: 'pie', // Change chart type to 'pie'\r\n-      toolbar: {\r\n-        show: false // Hide toolbar\r\n-      }\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      pie: {\r\n-        expandOnClick: false\r\n-      }\r\n-    },\r\n-    colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n-      '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-      '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-      '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className='d=flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n"
                },
                {
                    "date": 1709036527166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,13 @@\n     labels: statuses, // Using extracted statuses as labels\r\n     legend: {\r\n       position: 'bottom'\r\n     },\r\n-    // plotOptions: {\r\n-    //   pie: {\r\n-    //     expandOnClick: false\r\n-    //   }\r\n-    // },\r\n+    plotOptions: {\r\n+      pie: {\r\n+        expandOnClick: false\r\n+      }\r\n+    },\r\n     // colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n     //   '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n     //   '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n     //   '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n"
                },
                {
                    "date": 1709036542728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,13 @@\n     labels: statuses, // Using extracted statuses as labels\r\n     legend: {\r\n       position: 'bottom'\r\n     },\r\n-    plotOptions: {\r\n-      pie: {\r\n-        expandOnClick: false\r\n-      }\r\n-    },\r\n+    // plotOptions: {\r\n+    //   pie: {\r\n+    //     expandOnClick: false\r\n+    //   }\r\n+    // },\r\n     // colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n     //   '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n     //   '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n     //   '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n"
                },
                {
                    "date": 1709036559470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,8 @@\n     labels: statuses, // Using extracted statuses as labels\r\n     legend: {\r\n       position: 'bottom'\r\n     },\r\n-    // plotOptions: {\r\n-    //   pie: {\r\n-    //     expandOnClick: false\r\n-    //   }\r\n-    // },\r\n-    // colors: ['#FF6633', '#FFB399', '#FF33FF', '#00B3E6',\r\n-    //   '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n-    //   '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n-    //   '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC'],\r\n     responsive: [{\r\n       breakpoint: 480,\r\n       options: {\r\n         chart: {\r\n"
                },
                {
                    "date": 1709269166432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n   };\r\n \r\n \r\n   return (\r\n-    <div className='d=flex justify-content-center'>\r\n+    <div className='d-flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n         <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n       </div>\r\n       <div id=\"html-dist\"></div>\r\n"
                },
                {
                    "date": 1709814661579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,15 @@\n     labels: statuses, // Using extracted statuses as labels\r\n     legend: {\r\n       position: 'bottom'\r\n     },\r\n+    plotOptions: {\r\n+      pie: {\r\n+        events: {\r\n+          click: handleStatusClick // Handle click event on pie chart\r\n+        }\r\n+      }\r\n+    },\r\n     responsive: [{\r\n       breakpoint: 480,\r\n       options: {\r\n         chart: {\r\n@@ -50,10 +57,14 @@\n         }\r\n       }\r\n     }]\r\n   };\r\n-\r\n-\r\n+// On Cclick function for navigation\r\n+  const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+    const clickedStatus = statuses[dataPointIndex];\r\n+    // Do whatever navigation action you need based on the clicked status\r\n+    console.log(\"Clicked status:\", clickedStatus);\r\n+  };\r\n   return (\r\n     <div className='d-flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n         <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n"
                },
                {
                    "date": 1709814724833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n     }]\r\n   };\r\n // On Cclick function for navigation\r\n   const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+    console.log(dataPointIndex)\r\n     const clickedStatus = statuses[dataPointIndex];\r\n     // Do whatever navigation action you need based on the clicked status\r\n     console.log(\"Clicked status:\", clickedStatus);\r\n   };\r\n"
                },
                {
                    "date": 1709814754632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n     }]\r\n   };\r\n // On Cclick function for navigation\r\n   const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-    console.log(dataPointIndex)\r\n+    console.log(event,dataPointIndex)\r\n     const clickedStatus = statuses[dataPointIndex];\r\n     // Do whatever navigation action you need based on the clicked status\r\n     console.log(\"Clicked status:\", clickedStatus);\r\n   };\r\n"
                },
                {
                    "date": 1709814760443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n     }]\r\n   };\r\n // On Cclick function for navigation\r\n   const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-    console.log(event,dataPointIndex)\r\n+    console.log(event,chartContext,dataPointIndex)\r\n     const clickedStatus = statuses[dataPointIndex];\r\n     // Do whatever navigation action you need based on the clicked status\r\n     console.log(\"Clicked status:\", clickedStatus);\r\n   };\r\n"
                },
                {
                    "date": 1709814767654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      pie: {\r\n+        events: {\r\n+          click: handleStatusClick // Handle click event on pie chart\r\n+        }\r\n+      }\r\n+    },\r\n+    responsive: [{\r\n+      breakpoint: 480,\r\n+      options: {\r\n+        chart: {\r\n+          width: 200\r\n+        },\r\n+        legend: {\r\n+          position: 'bottom'\r\n+        }\r\n+      }\r\n+    }]\r\n+  };\r\n+// On Cclick function for navigation\r\n+  const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+    console.log(event,chartContext,seriesIndex,dataPointIndex)\r\n+    const clickedStatus = statuses[dataPointIndex];\r\n+    // Do whatever navigation action you need based on the clicked status\r\n+    console.log(\"Clicked status:\", clickedStatus);\r\n+  };\r\n+  return (\r\n+    <div className='d-flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709814813146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,82 @@\n+// import React from 'react';\r\n+// import ReactApexChart from 'react-apexcharts';\r\n+\r\n+// const DataChart = ({ data }) => {\r\n+//   // Extracting counts from data\r\n+//   const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+//   // Extracting statuses from data\r\n+//   const statuses = data.map(item => `${item.status === \"1\"\r\n+//     ? \"New\"\r\n+//     : item.status === \"2\"\r\n+//       ? \"Prospect\"\r\n+//       : item.status === \"3\"\r\n+//         ? \"Lead\"\r\n+//         : item.status === \"4\"\r\n+//           ? \"Retained\"\r\n+//           : item.status === \"5\"\r\n+//             ? \"Lost\"\r\n+//             : item.status === \"6\"\r\n+//               ? \"Dead\"\r\n+//               : item.status === \"7\"\r\n+//                 ? \"Working on\"\r\n+//                 : item.status === \"8\"\r\n+//                   ? \"Submitted\"\r\n+//                   : item.status === \"0\"\r\n+//                     ? \"Web\"\r\n+//                     : \"status\"}`);\r\n+\r\n+\r\n+//   const options = {\r\n+//     chart: {\r\n+//       width: '100%', // Change width to 100%\r\n+//       type: 'pie', // Change chart type to 'pie'\r\n+//       toolbar: {\r\n+//         show: false // Hide toolbar\r\n+//       }\r\n+//     },\r\n+//     labels: statuses, // Using extracted statuses as labels\r\n+//     legend: {\r\n+//       position: 'bottom'\r\n+//     },\r\n+//     plotOptions: {\r\n+//       pie: {\r\n+//         events: {\r\n+//           click: handleStatusClick // Handle click event on pie chart\r\n+//         }\r\n+//       }\r\n+//     },\r\n+//     responsive: [{\r\n+//       breakpoint: 480,\r\n+//       options: {\r\n+//         chart: {\r\n+//           width: 200\r\n+//         },\r\n+//         legend: {\r\n+//           position: 'bottom'\r\n+//         }\r\n+//       }\r\n+//     }]\r\n+//   };\r\n+// // On Cclick function for navigation\r\n+//   const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+//     console.log(event,chartContext,seriesIndex,dataPointIndex)\r\n+//     const clickedStatus = statuses[dataPointIndex];\r\n+//     // Do whatever navigation action you need based on the clicked status\r\n+//     console.log(\"Clicked status:\", clickedStatus);\r\n+//   };\r\n+//   return (\r\n+//     <div className='d-flex justify-content-center'>\r\n+//       <div id=\"chart\" className='w-100'>\r\n+//         <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+//       </div>\r\n+//       <div id=\"html-dist\"></div>\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// export default DataChart;\r\n import React from 'react';\r\n import ReactApexChart from 'react-apexcharts';\r\n \r\n const DataChart = ({ data }) => {\r\n@@ -25,87 +103,14 @@\n                   : item.status === \"0\"\r\n                     ? \"Web\"\r\n                     : \"status\"}`);\r\n \r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%', // Change width to 100%\r\n-      type: 'pie', // Change chart type to 'pie'\r\n-      toolbar: {\r\n-        show: false // Hide toolbar\r\n-      }\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      pie: {\r\n-        events: {\r\n-          click: handleStatusClick // Handle click event on pie chart\r\n-        }\r\n-      }\r\n-    },\r\n-    responsive: [{\r\n-      breakpoint: 480,\r\n-      options: {\r\n-        chart: {\r\n-          width: 200\r\n-        },\r\n-        legend: {\r\n-          position: 'bottom'\r\n-        }\r\n-      }\r\n-    }]\r\n-  };\r\n-// On Cclick function for navigation\r\n   const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-    console.log(event,chartContext,seriesIndex,dataPointIndex)\r\n     const clickedStatus = statuses[dataPointIndex];\r\n     // Do whatever navigation action you need based on the clicked status\r\n     console.log(\"Clicked status:\", clickedStatus);\r\n   };\r\n-  return (\r\n-    <div className='d-flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n \r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-\r\n   const options = {\r\n     chart: {\r\n       width: '100%', // Change width to 100%\r\n       type: 'pie', // Change chart type to 'pie'\r\n@@ -135,15 +140,9 @@\n         }\r\n       }\r\n     }]\r\n   };\r\n-// On Cclick function for navigation\r\n-  const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-    console.log(event,chartContext,dataPointIndex)\r\n-    const clickedStatus = statuses[dataPointIndex];\r\n-    // Do whatever navigation action you need based on the clicked status\r\n-    console.log(\"Clicked status:\", clickedStatus);\r\n-  };\r\n+\r\n   return (\r\n     <div className='d-flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n         <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n"
                },
                {
                    "date": 1709814881709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+// import React from 'react';\r\n+// import ReactApexChart from 'react-apexcharts';\r\n+\r\n+// const DataChart = ({ data }) => {\r\n+//   // Extracting counts from data\r\n+//   const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+//   // Extracting statuses from data\r\n+//   const statuses = data.map(item => `${item.status === \"1\"\r\n+//     ? \"New\"\r\n+//     : item.status === \"2\"\r\n+//       ? \"Prospect\"\r\n+//       : item.status === \"3\"\r\n+//         ? \"Lead\"\r\n+//         : item.status === \"4\"\r\n+//           ? \"Retained\"\r\n+//           : item.status === \"5\"\r\n+//             ? \"Lost\"\r\n+//             : item.status === \"6\"\r\n+//               ? \"Dead\"\r\n+//               : item.status === \"7\"\r\n+//                 ? \"Working on\"\r\n+//                 : item.status === \"8\"\r\n+//                   ? \"Submitted\"\r\n+//                   : item.status === \"0\"\r\n+//                     ? \"Web\"\r\n+//                     : \"status\"}`);\r\n+\r\n+\r\n+//   const options = {\r\n+//     chart: {\r\n+//       width: '100%', // Change width to 100%\r\n+//       type: 'pie', // Change chart type to 'pie'\r\n+//       toolbar: {\r\n+//         show: false // Hide toolbar\r\n+//       }\r\n+//     },\r\n+//     labels: statuses, // Using extracted statuses as labels\r\n+//     legend: {\r\n+//       position: 'bottom'\r\n+//     },\r\n+//     plotOptions: {\r\n+//       pie: {\r\n+//         events: {\r\n+//           click: handleStatusClick // Handle click event on pie chart\r\n+//         }\r\n+//       }\r\n+//     },\r\n+//     responsive: [{\r\n+//       breakpoint: 480,\r\n+//       options: {\r\n+//         chart: {\r\n+//           width: 200\r\n+//         },\r\n+//         legend: {\r\n+//           position: 'bottom'\r\n+//         }\r\n+//       }\r\n+//     }]\r\n+//   };\r\n+// // On Cclick function for navigation\r\n+//   const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+//     console.log(event,chartContext,seriesIndex,dataPointIndex)\r\n+//     const clickedStatus = statuses[dataPointIndex];\r\n+//     // Do whatever navigation action you need based on the clicked status\r\n+//     console.log(\"Clicked status:\", clickedStatus);\r\n+//   };\r\n+//   return (\r\n+//     <div className='d-flex justify-content-center'>\r\n+//       <div id=\"chart\" className='w-100'>\r\n+//         <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+//       </div>\r\n+//       <div id=\"html-dist\"></div>\r\n+//     </div>\r\n+//   );\r\n+// };\r\n+\r\n+// export default DataChart;\r\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+  // On Click function for navigation\r\n+  const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+    console.log(event, chartContext, seriesIndex, dataPointIndex)\r\n+    const clickedStatus = statuses[dataPointIndex];\r\n+    // Do whatever navigation action you need based on the clicked status\r\n+    console.log(\"Clicked status:\", clickedStatus);\r\n+  };\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      pie: {\r\n+        events: {\r\n+          click: handleStatusClick // Handle click event on pie chart\r\n+        }\r\n+      }\r\n+    },\r\n+    responsive: [{\r\n+      breakpoint: 480,\r\n+      options: {\r\n+        chart: {\r\n+          width: 200\r\n+        },\r\n+        legend: {\r\n+          position: 'bottom'\r\n+        }\r\n+      }\r\n+    }]\r\n+  };\r\n+\r\n+  return (\r\n+    <div className='d-flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709814947643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n     },\r\n     plotOptions: {\r\n       pie: {\r\n         events: {\r\n-          click: handleStatusClick // Handle click event on pie chart\r\n+          click: console.log(\"object\") // Handle click event on pie chart\r\n         }\r\n       }\r\n     },\r\n     responsive: [{\r\n@@ -154,159 +154,4 @@\n   );\r\n };\r\n \r\n export default DataChart;\r\n-// import React from 'react';\r\n-// import ReactApexChart from 'react-apexcharts';\r\n-\r\n-// const DataChart = ({ data }) => {\r\n-//   // Extracting counts from data\r\n-//   const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-//   // Extracting statuses from data\r\n-//   const statuses = data.map(item => `${item.status === \"1\"\r\n-//     ? \"New\"\r\n-//     : item.status === \"2\"\r\n-//       ? \"Prospect\"\r\n-//       : item.status === \"3\"\r\n-//         ? \"Lead\"\r\n-//         : item.status === \"4\"\r\n-//           ? \"Retained\"\r\n-//           : item.status === \"5\"\r\n-//             ? \"Lost\"\r\n-//             : item.status === \"6\"\r\n-//               ? \"Dead\"\r\n-//               : item.status === \"7\"\r\n-//                 ? \"Working on\"\r\n-//                 : item.status === \"8\"\r\n-//                   ? \"Submitted\"\r\n-//                   : item.status === \"0\"\r\n-//                     ? \"Web\"\r\n-//                     : \"status\"}`);\r\n-\r\n-\r\n-//   const options = {\r\n-//     chart: {\r\n-//       width: '100%', // Change width to 100%\r\n-//       type: 'pie', // Change chart type to 'pie'\r\n-//       toolbar: {\r\n-//         show: false // Hide toolbar\r\n-//       }\r\n-//     },\r\n-//     labels: statuses, // Using extracted statuses as labels\r\n-//     legend: {\r\n-//       position: 'bottom'\r\n-//     },\r\n-//     plotOptions: {\r\n-//       pie: {\r\n-//         events: {\r\n-//           click: handleStatusClick // Handle click event on pie chart\r\n-//         }\r\n-//       }\r\n-//     },\r\n-//     responsive: [{\r\n-//       breakpoint: 480,\r\n-//       options: {\r\n-//         chart: {\r\n-//           width: 200\r\n-//         },\r\n-//         legend: {\r\n-//           position: 'bottom'\r\n-//         }\r\n-//       }\r\n-//     }]\r\n-//   };\r\n-// // On Cclick function for navigation\r\n-//   const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-//     console.log(event,chartContext,seriesIndex,dataPointIndex)\r\n-//     const clickedStatus = statuses[dataPointIndex];\r\n-//     // Do whatever navigation action you need based on the clicked status\r\n-//     console.log(\"Clicked status:\", clickedStatus);\r\n-//   };\r\n-//   return (\r\n-//     <div className='d-flex justify-content-center'>\r\n-//       <div id=\"chart\" className='w-100'>\r\n-//         <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n-//       </div>\r\n-//       <div id=\"html-dist\"></div>\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-  const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-    const clickedStatus = statuses[dataPointIndex];\r\n-    // Do whatever navigation action you need based on the clicked status\r\n-    console.log(\"Clicked status:\", clickedStatus);\r\n-  };\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%', // Change width to 100%\r\n-      type: 'pie', // Change chart type to 'pie'\r\n-      toolbar: {\r\n-        show: false // Hide toolbar\r\n-      }\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      pie: {\r\n-        events: {\r\n-          click: handleStatusClick // Handle click event on pie chart\r\n-        }\r\n-      }\r\n-    },\r\n-    responsive: [{\r\n-      breakpoint: 480,\r\n-      options: {\r\n-        chart: {\r\n-          width: 200\r\n-        },\r\n-        legend: {\r\n-          position: 'bottom'\r\n-        }\r\n-      }\r\n-    }]\r\n-  };\r\n-\r\n-  return (\r\n-    <div className='d-flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n"
                },
                {
                    "date": 1709815032975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+// On Cclick function for navigation\r\n+const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+  const clickedStatus = statuses[dataPointIndex];\r\n+  // Do whatever navigation action you need based on the clicked status\r\n+  console.log(\"Clicked status:\", clickedStatus);\r\n+};\r\n+  const options = {\r\n+    chart: {\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    plotOptions: {\r\n+      pie: {\r\n+        events: {\r\n+          click: handleStatusClick // Handle click event on pie chart\r\n+        }\r\n+      }\r\n+    },\r\n+    responsive: [{\r\n+      breakpoint: 480,\r\n+      options: {\r\n+        chart: {\r\n+          width: 200\r\n+        },\r\n+        legend: {\r\n+          position: 'bottom'\r\n+        }\r\n+      }\r\n+    }]\r\n+  };\r\n+\r\n+  return (\r\n+    <div className='d-flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709815293770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,9 @@\n                   : item.status === \"0\"\r\n                     ? \"Web\"\r\n                     : \"status\"}`);\r\n \r\n-// On Cclick function for navigation\r\n-const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-  const clickedStatus = statuses[dataPointIndex];\r\n-  // Do whatever navigation action you need based on the clicked status\r\n-  console.log(\"Clicked status:\", clickedStatus);\r\n-};\r\n+\r\n   const options = {\r\n     chart: {\r\n       width: '100%', // Change width to 100%\r\n       type: 'pie', // Change chart type to 'pie'\r\n@@ -43,15 +38,8 @@\n     labels: statuses, // Using extracted statuses as labels\r\n     legend: {\r\n       position: 'bottom'\r\n     },\r\n-    plotOptions: {\r\n-      pie: {\r\n-        events: {\r\n-          click: handleStatusClick // Handle click event on pie chart\r\n-        }\r\n-      }\r\n-    },\r\n     responsive: [{\r\n       breakpoint: 480,\r\n       options: {\r\n         chart: {\r\n@@ -63,165 +51,9 @@\n       }\r\n     }]\r\n   };\r\n \r\n-  return (\r\n-    <div className='d-flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n \r\n-export default DataChart;\r\n-// import React from 'react';\r\n-// import ReactApexChart from 'react-apexcharts';\r\n-\r\n-// const DataChart = ({ data }) => {\r\n-//   // Extracting counts from data\r\n-//   const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-//   // Extracting statuses from data\r\n-//   const statuses = data.map(item => `${item.status === \"1\"\r\n-//     ? \"New\"\r\n-//     : item.status === \"2\"\r\n-//       ? \"Prospect\"\r\n-//       : item.status === \"3\"\r\n-//         ? \"Lead\"\r\n-//         : item.status === \"4\"\r\n-//           ? \"Retained\"\r\n-//           : item.status === \"5\"\r\n-//             ? \"Lost\"\r\n-//             : item.status === \"6\"\r\n-//               ? \"Dead\"\r\n-//               : item.status === \"7\"\r\n-//                 ? \"Working on\"\r\n-//                 : item.status === \"8\"\r\n-//                   ? \"Submitted\"\r\n-//                   : item.status === \"0\"\r\n-//                     ? \"Web\"\r\n-//                     : \"status\"}`);\r\n-\r\n-\r\n-//   const options = {\r\n-//     chart: {\r\n-//       width: '100%', // Change width to 100%\r\n-//       type: 'pie', // Change chart type to 'pie'\r\n-//       toolbar: {\r\n-//         show: false // Hide toolbar\r\n-//       }\r\n-//     },\r\n-//     labels: statuses, // Using extracted statuses as labels\r\n-//     legend: {\r\n-//       position: 'bottom'\r\n-//     },\r\n-//     plotOptions: {\r\n-//       pie: {\r\n-//         events: {\r\n-//           click: handleStatusClick // Handle click event on pie chart\r\n-//         }\r\n-//       }\r\n-//     },\r\n-//     responsive: [{\r\n-//       breakpoint: 480,\r\n-//       options: {\r\n-//         chart: {\r\n-//           width: 200\r\n-//         },\r\n-//         legend: {\r\n-//           position: 'bottom'\r\n-//         }\r\n-//       }\r\n-//     }]\r\n-//   };\r\n-// // On Cclick function for navigation\r\n-//   const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-//     console.log(event,chartContext,seriesIndex,dataPointIndex)\r\n-//     const clickedStatus = statuses[dataPointIndex];\r\n-//     // Do whatever navigation action you need based on the clicked status\r\n-//     console.log(\"Clicked status:\", clickedStatus);\r\n-//   };\r\n-//   return (\r\n-//     <div className='d-flex justify-content-center'>\r\n-//       <div id=\"chart\" className='w-100'>\r\n-//         <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n-//       </div>\r\n-//       <div id=\"html-dist\"></div>\r\n-//     </div>\r\n-//   );\r\n-// };\r\n-\r\n-// export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-  // On Click function for navigation\r\n-  const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-    console.log(event, chartContext, seriesIndex, dataPointIndex)\r\n-    const clickedStatus = statuses[dataPointIndex];\r\n-    // Do whatever navigation action you need based on the clicked status\r\n-    console.log(\"Clicked status:\", clickedStatus);\r\n-  };\r\n-\r\n-  const options = {\r\n-    chart: {\r\n-      width: '100%', // Change width to 100%\r\n-      type: 'pie', // Change chart type to 'pie'\r\n-      toolbar: {\r\n-        show: false // Hide toolbar\r\n-      }\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    plotOptions: {\r\n-      pie: {\r\n-        events: {\r\n-          click: console.log(\"object\") // Handle click event on pie chart\r\n-        }\r\n-      }\r\n-    },\r\n-    responsive: [{\r\n-      breakpoint: 480,\r\n-      options: {\r\n-        chart: {\r\n-          width: 200\r\n-        },\r\n-        legend: {\r\n-          position: 'bottom'\r\n-        }\r\n-      }\r\n-    }]\r\n-  };\r\n-\r\n   return (\r\n     <div className='d-flex justify-content-center'>\r\n       <div id=\"chart\" className='w-100'>\r\n         <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n"
                },
                {
                    "date": 1709815406772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,13 @@\n       width: '100%', // Change width to 100%\r\n       type: 'pie', // Change chart type to 'pie'\r\n       toolbar: {\r\n         show: false // Hide toolbar\r\n-      }\r\n+      },\r\n+        events: {\r\n+          click: console.log(\"object\") //function(event, chartContext, config) {\r\n+            // The last parameter config contains additional information like `seriesIndex` and `dataPointIndex` for cartesian charts\r\n+          }\r\n     },\r\n     labels: statuses, // Using extracted statuses as labels\r\n     legend: {\r\n       position: 'bottom'\r\n"
                },
                {
                    "date": 1709815520794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,9 @@\n       width: '100%', // Change width to 100%\r\n       type: 'pie', // Change chart type to 'pie'\r\n       toolbar: {\r\n         show: false // Hide toolbar\r\n-      },\r\n-        events: {\r\n-          click: console.log(\"object\") //function(event, chartContext, config) {\r\n-            // The last parameter config contains additional information like `seriesIndex` and `dataPointIndex` for cartesian charts\r\n-          }\r\n+      }\r\n     },\r\n     labels: statuses, // Using extracted statuses as labels\r\n     legend: {\r\n       position: 'bottom'\r\n@@ -52,9 +48,14 @@\n         legend: {\r\n           position: 'bottom'\r\n         }\r\n       }\r\n-    }]\r\n+    }],\r\n+    plotOptions: {\r\n+      pie: {\r\n+        expandOnClick: console.log(\"object\")\r\n+      }\r\n+    }\r\n   };\r\n \r\n \r\n   return (\r\n"
                },
                {
                    "date": 1709815622161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,12 @@\n                     : \"status\"}`);\r\n \r\n \r\n   const options = {\r\n-    chart: {\r\n+    chart: {events: {\r\n+      dataPointSelection: (event, chartContext, config) => { \r\n+          console.log(config.w.config.labels[config.dataPointIndex])}\r\n+      },\r\n       width: '100%', // Change width to 100%\r\n       type: 'pie', // Change chart type to 'pie'\r\n       toolbar: {\r\n         show: false // Hide toolbar\r\n@@ -48,14 +51,9 @@\n         legend: {\r\n           position: 'bottom'\r\n         }\r\n       }\r\n-    }],\r\n-    plotOptions: {\r\n-      pie: {\r\n-        expandOnClick: console.log(\"object\")\r\n-      }\r\n-    }\r\n+    }]\r\n   };\r\n \r\n \r\n   return (\r\n"
                },
                {
                    "date": 1709815681682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+  // Extracting statuses from data\r\n+  const statuses = data.map(item => `${item.status === \"1\"\r\n+    ? \"New\"\r\n+    : item.status === \"2\"\r\n+      ? \"Prospect\"\r\n+      : item.status === \"3\"\r\n+        ? \"Lead\"\r\n+        : item.status === \"4\"\r\n+          ? \"Retained\"\r\n+          : item.status === \"5\"\r\n+            ? \"Lost\"\r\n+            : item.status === \"6\"\r\n+              ? \"Dead\"\r\n+              : item.status === \"7\"\r\n+                ? \"Working on\"\r\n+                : item.status === \"8\"\r\n+                  ? \"Submitted\"\r\n+                  : item.status === \"0\"\r\n+                    ? \"Web\"\r\n+                    : \"status\"}`);\r\n+\r\n+// On Click function for navigation\r\n+const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+  console.log(event, chartContext, seriesIndex, dataPointIndex)\r\n+  const clickedStatus = statuses[dataPointIndex];\r\n+  // Do whatever navigation action you need based on the clicked status\r\n+  console.log(\"Clicked status:\", clickedStatus);\r\n+};\r\n+  const options = {\r\n+    chart: {events: {\r\n+      dataPointSelection:handleStatusClick\r\n+      },\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    responsive: [{\r\n+      breakpoint: 480,\r\n+      options: {\r\n+        chart: {\r\n+          width: 200\r\n+        },\r\n+        legend: {\r\n+          position: 'bottom'\r\n+        }\r\n+      }\r\n+    }]\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className='d-flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                },
                {
                    "date": 1709815809561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,88 +24,26 @@\n                   ? \"Submitted\"\r\n                   : item.status === \"0\"\r\n                     ? \"Web\"\r\n                     : \"status\"}`);\r\n+  // Count occurrences of each status\r\n+  const statusCounts = statuses.reduce((acc, status) => {\r\n+    acc[status] = (acc[status] || 0) + 1;\r\n+    return acc;\r\n+  }, {});\r\n \r\n-// On Click function for navigation\r\n-const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n-  console.log(event, chartContext, seriesIndex, dataPointIndex)\r\n-  const clickedStatus = statuses[dataPointIndex];\r\n-  // Do whatever navigation action you need based on the clicked status\r\n-  console.log(\"Clicked status:\", clickedStatus);\r\n-};\r\n-  const options = {\r\n-    chart: {events: {\r\n-      dataPointSelection:handleStatusClick\r\n-      },\r\n-      width: '100%', // Change width to 100%\r\n-      type: 'pie', // Change chart type to 'pie'\r\n-      toolbar: {\r\n-        show: false // Hide toolbar\r\n-      }\r\n-    },\r\n-    labels: statuses, // Using extracted statuses as labels\r\n-    legend: {\r\n-      position: 'bottom'\r\n-    },\r\n-    responsive: [{\r\n-      breakpoint: 480,\r\n-      options: {\r\n-        chart: {\r\n-          width: 200\r\n-        },\r\n-        legend: {\r\n-          position: 'bottom'\r\n-        }\r\n-      }\r\n-    }]\r\n+  // On Click function for navigation\r\n+  const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+    const clickedStatus = statuses[dataPointIndex];\r\n+    const clickedStatusCount = statusCounts[clickedStatus];\r\n+    // Do whatever navigation action you need based on the clicked status and its count\r\n+    console.log(\"Clicked status:\", clickedStatus);\r\n+    console.log(\"Number of occurrences:\", clickedStatusCount);\r\n   };\r\n-\r\n-\r\n-  return (\r\n-    <div className='d-flex justify-content-center'>\r\n-      <div id=\"chart\" className='w-100'>\r\n-        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n-      </div>\r\n-      <div id=\"html-dist\"></div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DataChart;\r\n-import React from 'react';\r\n-import ReactApexChart from 'react-apexcharts';\r\n-\r\n-const DataChart = ({ data }) => {\r\n-  // Extracting counts from data\r\n-  const counts = data.map(item => parseInt(item.count, 10));\r\n-\r\n-  // Extracting statuses from data\r\n-  const statuses = data.map(item => `${item.status === \"1\"\r\n-    ? \"New\"\r\n-    : item.status === \"2\"\r\n-      ? \"Prospect\"\r\n-      : item.status === \"3\"\r\n-        ? \"Lead\"\r\n-        : item.status === \"4\"\r\n-          ? \"Retained\"\r\n-          : item.status === \"5\"\r\n-            ? \"Lost\"\r\n-            : item.status === \"6\"\r\n-              ? \"Dead\"\r\n-              : item.status === \"7\"\r\n-                ? \"Working on\"\r\n-                : item.status === \"8\"\r\n-                  ? \"Submitted\"\r\n-                  : item.status === \"0\"\r\n-                    ? \"Web\"\r\n-                    : \"status\"}`);\r\n-\r\n-\r\n   const options = {\r\n-    chart: {events: {\r\n-      dataPointSelection: (event, chartContext, config) => { \r\n-          console.log(config.w.config.labels[config.dataPointIndex])}\r\n+    chart: {\r\n+      events: {\r\n+        dataPointSelection: handleStatusClick\r\n       },\r\n       width: '100%', // Change width to 100%\r\n       type: 'pie', // Change chart type to 'pie'\r\n       toolbar: {\r\n"
                },
                {
                    "date": 1709815939762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+import React from 'react';\r\n+import ReactApexChart from 'react-apexcharts';\r\n+\r\n+const DataChart = ({ data }) => {\r\n+  // Extracting counts from data\r\n+  const counts = data.map(item => parseInt(item.count, 10));\r\n+\r\n+ // Reverse mapping object for status names to status numbers\r\n+const statusMap = {\r\n+  \"New\": \"1\",\r\n+  \"Prospect\": \"2\",\r\n+  \"Lead\": \"3\",\r\n+  \"Retained\": \"4\",\r\n+  \"Lost\": \"5\",\r\n+  \"Dead\": \"6\",\r\n+  \"Working on\": \"7\",\r\n+  \"Submitted\": \"8\",\r\n+  \"Web\": \"0\"\r\n+};\r\n+\r\n+const statuses = data.map(item => `${item.status === \"1\"\r\n+  ? \"New\"\r\n+  : item.status === \"2\"\r\n+    ? \"Prospect\"\r\n+    : item.status === \"3\"\r\n+      ? \"Lead\"\r\n+      : item.status === \"4\"\r\n+        ? \"Retained\"\r\n+        : item.status === \"5\"\r\n+          ? \"Lost\"\r\n+          : item.status === \"6\"\r\n+            ? \"Dead\"\r\n+            : item.status === \"7\"\r\n+              ? \"Working on\"\r\n+              : item.status === \"8\"\r\n+                ? \"Submitted\"\r\n+                : item.status === \"0\"\r\n+                  ? \"Web\"\r\n+                  : \"status\"}`);\r\n+\r\n+// On Click function for navigation\r\n+const handleStatusClick = (event, chartContext, { seriesIndex, dataPointIndex }) => {\r\n+  const clickedStatusName = statuses[dataPointIndex];\r\n+  const clickedStatusNumber = statusMap[clickedStatusName];\r\n+  // Do whatever navigation action you need based on the clicked status number\r\n+  console.log(\"Clicked status name:\", clickedStatusName);\r\n+  console.log(\"Clicked status number:\", clickedStatusNumber);\r\n+};\r\n+\r\n+  const options = {\r\n+    chart: {\r\n+      events: {\r\n+        dataPointSelection: handleStatusClick\r\n+      },\r\n+      width: '100%', // Change width to 100%\r\n+      type: 'pie', // Change chart type to 'pie'\r\n+      toolbar: {\r\n+        show: false // Hide toolbar\r\n+      }\r\n+    },\r\n+    labels: statuses, // Using extracted statuses as labels\r\n+    legend: {\r\n+      position: 'bottom'\r\n+    },\r\n+    responsive: [{\r\n+      breakpoint: 480,\r\n+      options: {\r\n+        chart: {\r\n+          width: 200\r\n+        },\r\n+        legend: {\r\n+          position: 'bottom'\r\n+        }\r\n+      }\r\n+    }]\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className='d-flex justify-content-center'>\r\n+      <div id=\"chart\" className='w-100'>\r\n+        <ReactApexChart options={options} series={counts} type=\"pie\" width={\"100%\"} />\r\n+      </div>\r\n+      <div id=\"html-dist\"></div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DataChart;\r\n"
                }
            ],
            "date": 1709014843669,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { PolarArea } from 'react-chartjs-2';\r\n\r\nconst DataChart = () => {\r\n  const data = {\r\n    labels: ['Red', 'Green', 'Yellow', 'Grey', 'Blue'],\r\n    datasets: [\r\n      {\r\n        data: [11, 16, 7, 3, 14],\r\n        backgroundColor: [\r\n          'rgba(255, 99, 132, 0.6)',\r\n          'rgba(75, 192, 192, 0.6)',\r\n          'rgba(255, 206, 86, 0.6)',\r\n          'rgba(128, 128, 128, 0.6)',\r\n          'rgba(54, 162, 235, 0.6)',\r\n        ],\r\n        borderColor: [\r\n          'rgba(255, 99, 132, 1)',\r\n          'rgba(75, 192, 192, 1)',\r\n          'rgba(255, 206, 86, 1)',\r\n          'rgba(128, 128, 128, 1)',\r\n          'rgba(54, 162, 235, 1)',\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    scale: {\r\n      ticks: {\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Polar Area Chart</h2>\r\n      <PolarArea data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataChart;\r\n"
        }
    ]
}