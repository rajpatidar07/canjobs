{
    "sourceFile": "src/components/common/InterviewHistoryTable.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1709707372209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709707433111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import React from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import {getActivityLog} from \"../../api/api\"\r\n+const InterviewHistoryTable = (employee_id) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+  \r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(\"\");\r\n+  \r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+      try {\r\n+        const userData = await getActivityLog(\r\n+currentPage,\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+recordsPerPage,\r\n+employee_id,\r\n+\"employee\",\r\n+\"interviewHistory\"\r\n+        );\r\n+        console.log(userData)\r\n+        // if (userData.data.length === 0) {\r\n+        //   setInterviewHistoryData([]);\r\n+        //   setIsLoading(false);\r\n+        // } else {\r\n+        //   setInterviewHistoryData(userData.data);\r\n+        //   setTotalData(userData.total_rows);\r\n+        //   setIsLoading(false);\r\n+        // }\r\n+      } catch (err) {\r\n+        console.log(err);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+  \r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+      InterviewData();\r\n+    }, [\r\n+      search,\r\n+      columnName,\r\n+      recordsPerPage,\r\n+      sortOrder,\r\n+      currentPage,\r\n+    ]);\r\n+  \r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+  \r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+  \r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+      setcolumnName(columnName);\r\n+    };\r\n+  return (\r\n+    <div>\r\n+      <h2>Interview History</h2>\r\n+      <table className=\" table-responsive main_data_table\">\r\n+        <thead>\r\n+          <tr>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              ID\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              User Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Action Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              StackHolder Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created At\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created By\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Message\r\n+            </th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {data.map(interview => (\r\n+            <tr key={interview.id}>\r\n+              <td>{interview.id}</td>\r\n+              <td>{interview.user_type}</td>\r\n+              <td>{interview.action_type}</td>\r\n+              <td>{interview.stackHolder_type}</td>\r\n+              <td>{interview.created_at}</td>\r\n+              <td>{interview.created_by}</td>\r\n+              <td>{interview.msg}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709707970851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import {getActivityLog} from \"../../api/api\"\r\n+const InterviewHistoryTable = (employee_id) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+  \r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(\"\");\r\n+  \r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+      try {\r\n+        const userData = await getActivityLog(\r\n+currentPage,\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+recordsPerPage,\r\n+employee_id,\r\n+\"employee\",\r\n+\"interviewHistory\"\r\n+        );\r\n+        console.log(userData)\r\n+        // if (userData.data.length === 0) {\r\n+        //   setInterviewHistoryData([]);\r\n+        //   setIsLoading(false);\r\n+        // } else {\r\n+        //   setInterviewHistoryData(userData.data);\r\n+        //   setTotalData(userData.total_rows);\r\n+        //   setIsLoading(false);\r\n+        // }\r\n+      } catch (err) {\r\n+        console.log(err);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+  \r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+      InterviewData();\r\n+    }, [\r\n+      search,\r\n+      columnName,\r\n+      recordsPerPage,\r\n+      sortOrder,\r\n+      currentPage,\r\n+    ]);\r\n+  \r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+  \r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+  \r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+      setcolumnName(columnName);\r\n+    };\r\n+  return (\r\n+    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+    <div className=\"table-responsive main_table_div\">\r\n+      <h2>Interview History</h2>\r\n+      {isLoading ? (\r\n+            <Loader />\r\n+          ) :\r\n+          <table className=\" table-responsive main_data_table\">\r\n+        <thead>\r\n+          <tr>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              ID\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              User Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Action Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              StackHolder Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created At\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created By\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Message\r\n+            </th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {interviewHistoryData.length === 0 ?\r\n+          <tr >\r\n+            <td colSpan={7}>No data found</td>\r\n+          </tr> :\r\n+          interviewHistoryData.map(interview => (\r\n+            <tr key={interview.id}>\r\n+              <td>{interview.id}</td>\r\n+              <td>{interview.user_type}</td>\r\n+              <td>{interview.action_type}</td>\r\n+              <td>{interview.stackHolder_type}</td>\r\n+              <td>{interview.created_at}</td>\r\n+              <td>{interview.created_by}</td>\r\n+              <td>{interview.msg}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708039840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import React,{useState,useEffect} from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import {getActivityLog} from \"../../api/api\"\r\n+const InterviewHistoryTable = (employee_id) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+  \r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(\"\");\r\n+  \r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+      try {\r\n+        const userData = await getActivityLog(\r\n+currentPage,\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+recordsPerPage,\r\n+employee_id,\r\n+\"employee\",\r\n+\"interviewHistory\"\r\n+        );\r\n+        console.log(userData)\r\n+        // if (userData.data.length === 0) {\r\n+        //   setInterviewHistoryData([]);\r\n+        //   setIsLoading(false);\r\n+        // } else {\r\n+        //   setInterviewHistoryData(userData.data);\r\n+        //   setTotalData(userData.total_rows);\r\n+        //   setIsLoading(false);\r\n+        // }\r\n+      } catch (err) {\r\n+        console.log(err);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+  \r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+      InterviewData();\r\n+    }, [\r\n+      search,\r\n+      columnName,\r\n+      recordsPerPage,\r\n+      sortOrder,\r\n+      currentPage,\r\n+    ]);\r\n+  \r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+  \r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+  \r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+      setcolumnName(columnName);\r\n+    };\r\n+  return (\r\n+    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+    <div className=\"table-responsive main_table_div\">\r\n+      <h2>Interview History</h2>\r\n+      {isLoading ? (\r\n+            <Loader />\r\n+          ) :\r\n+          <table className=\" table-responsive main_data_table\">\r\n+        <thead>\r\n+          <tr>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              ID\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              User Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Action Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              StackHolder Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created At\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created By\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Message\r\n+            </th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {interviewHistoryData.length === 0 ?\r\n+          <tr >\r\n+            <td colSpan={7}>No data found</td>\r\n+          </tr> :\r\n+          interviewHistoryData.map(interview => (\r\n+            <tr key={interview.id}>\r\n+              <td>{interview.id}</td>\r\n+              <td>{interview.user_type}</td>\r\n+              <td>{interview.action_type}</td>\r\n+              <td>{interview.stackHolder_type}</td>\r\n+              <td>{interview.created_at}</td>\r\n+              <td>{interview.created_by}</td>\r\n+              <td>{interview.msg}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708049411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n     /*Render function to get the interview*/\r\n     useEffect(() => {\r\n       InterviewData();\r\n     }, [\r\n-      search,\r\n       columnName,\r\n       recordsPerPage,\r\n       sortOrder,\r\n       currentPage,\r\n@@ -131,385 +130,4 @@\n   );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n-import React from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = (employee_id) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-  \r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(\"\");\r\n-  \r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        // if (userData.data.length === 0) {\r\n-        //   setInterviewHistoryData([]);\r\n-        //   setIsLoading(false);\r\n-        // } else {\r\n-        //   setInterviewHistoryData(userData.data);\r\n-        //   setTotalData(userData.total_rows);\r\n-        //   setIsLoading(false);\r\n-        // }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-  \r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-      InterviewData();\r\n-    }, [\r\n-      search,\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n-    ]);\r\n-  \r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-  \r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n-    };\r\n-  return (\r\n-    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-    <div className=\"table-responsive main_table_div\">\r\n-      <h2>Interview History</h2>\r\n-      {isLoading ? (\r\n-            <Loader />\r\n-          ) :\r\n-          <table className=\" table-responsive main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {interviewHistoryData.length === 0 ?\r\n-          <tr >\r\n-            <td colSpan={7}>No data found</td>\r\n-          </tr> :\r\n-          interviewHistoryData.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n-import React from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = (employee_id) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-  \r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(\"\");\r\n-  \r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        // if (userData.data.length === 0) {\r\n-        //   setInterviewHistoryData([]);\r\n-        //   setIsLoading(false);\r\n-        // } else {\r\n-        //   setInterviewHistoryData(userData.data);\r\n-        //   setTotalData(userData.total_rows);\r\n-        //   setIsLoading(false);\r\n-        // }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-  \r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-      InterviewData();\r\n-    }, [\r\n-      search,\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n-    ]);\r\n-  \r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-  \r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n-    };\r\n-  return (\r\n-    <div>\r\n-      <h2>Interview History</h2>\r\n-      <table className=\" table-responsive main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {data.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n-import React from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = (employee_id) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-  \r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(\"\");\r\n-  \r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        // if (userData.data.length === 0) {\r\n-        //   setInterviewHistoryData([]);\r\n-        //   setIsLoading(false);\r\n-        // } else {\r\n-        //   setInterviewHistoryData(userData.data);\r\n-        //   setTotalData(userData.total_rows);\r\n-        //   setIsLoading(false);\r\n-        // }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-  \r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-      InterviewData();\r\n-    }, [\r\n-      search,\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n-    ]);\r\n-  \r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-  \r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n-    };\r\n-  return (\r\n-    <div>\r\n-      <h2>Interview History</h2>\r\n-      <table className=\"table table-striped main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {data.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708152616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React,{useState,useEffect} from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import {getActivityLog} from \"../../api/api\"\r\n+const InterviewHistoryTable = (employee_id) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+  \r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(\"\");\r\n+  \r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+      try {\r\n+        const userData = await getActivityLog(\r\n+currentPage,\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+recordsPerPage,\r\n+employee_id,\r\n+\"employee\",\r\n+\"interviewHistory\"\r\n+        );\r\n+        console.log(userData)\r\n+        // if (userData.data.length === 0) {\r\n+        //   setInterviewHistoryData([]);\r\n+        //   setIsLoading(false);\r\n+        // } else {\r\n+        //   setInterviewHistoryData(userData.data);\r\n+        //   setTotalData(userData.total_rows);\r\n+        //   setIsLoading(false);\r\n+        // }\r\n+      } catch (err) {\r\n+        console.log(err);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+  \r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+      InterviewData();\r\n+    }, [\r\n+      columnName,\r\n+      recordsPerPage,\r\n+      sortOrder,\r\n+      currentPage,\r\n+    ]);\r\n+  \r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+  \r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+  \r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+      setcolumnName(columnName);\r\n+    };\r\n+  return (\r\n+    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+    <div className=\"table-responsive main_table_div\">\r\n+      <h2>Interview History</h2>\r\n+      {isLoading ? (\r\n+            <Loader />\r\n+          ) :\r\n+          <table className=\"table table-striped main_data_table\">\r\n+        <thead>\r\n+          <tr>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              ID\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              User Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Action Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              StackHolder Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created At\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created By\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Message\r\n+            </th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {interviewHistoryData.length === 0 ?\r\n+          <tr >\r\n+            <td colSpan={7}>No data found</td>\r\n+          </tr> :\r\n+          interviewHistoryData.map(interview => (\r\n+            <tr key={interview.id}>\r\n+              <td>{interview.id}</td>\r\n+              <td>{interview.user_type}</td>\r\n+              <td>{interview.action_type}</td>\r\n+              <td>{interview.stackHolder_type}</td>\r\n+              <td>{interview.created_at}</td>\r\n+              <td>{interview.created_by}</td>\r\n+              <td>{interview.msg}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708238815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n         </thead>\r\n         <tbody>\r\n           {interviewHistoryData.length === 0 ?\r\n           <tr >\r\n-            <td colSpan={7}>No data found</td>\r\n+            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n           </tr> :\r\n           interviewHistoryData.map(interview => (\r\n             <tr key={interview.id}>\r\n               <td>{interview.id}</td>\r\n@@ -130,137 +130,4 @@\n   );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n-import React,{useState,useEffect} from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = (employee_id) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-  \r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(\"\");\r\n-  \r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        // if (userData.data.length === 0) {\r\n-        //   setInterviewHistoryData([]);\r\n-        //   setIsLoading(false);\r\n-        // } else {\r\n-        //   setInterviewHistoryData(userData.data);\r\n-        //   setTotalData(userData.total_rows);\r\n-        //   setIsLoading(false);\r\n-        // }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-  \r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-      InterviewData();\r\n-    }, [\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n-    ]);\r\n-  \r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-  \r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n-    };\r\n-  return (\r\n-    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-    <div className=\"table-responsive main_table_div\">\r\n-      <h2>Interview History</h2>\r\n-      {isLoading ? (\r\n-            <Loader />\r\n-          ) :\r\n-          <table className=\" table-responsive main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {interviewHistoryData.length === 0 ?\r\n-          <tr >\r\n-            <td colSpan={7}>No data found</td>\r\n-          </tr> :\r\n-          interviewHistoryData.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708247389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,8 @@\n     };\r\n   return (\r\n     <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n     <div className=\"table-responsive main_table_div\">\r\n-      <h2>Interview History</h2>\r\n       {isLoading ? (\r\n             <Loader />\r\n           ) :\r\n           <table className=\"table table-striped main_data_table\">\r\n"
                },
                {
                    "date": 1709708386872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React,{useState,useEffect} from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import {getActivityLog} from \"../../api/api\"\r\n+const InterviewHistoryTable = (employee_id) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+  \r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(\"\");\r\n+  \r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+      try {\r\n+        const userData = await getActivityLog(\r\n+currentPage,\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+recordsPerPage,\r\n+employee_id,\r\n+\"employee\",\r\n+\"interviewHistory\"\r\n+        );\r\n+        console.log(userData)\r\n+        // if (userData.data.length === 0) {\r\n+        //   setInterviewHistoryData([]);\r\n+        //   setIsLoading(false);\r\n+        // } else {\r\n+        //   setInterviewHistoryData(userData.data);\r\n+        //   setTotalData(userData.total_rows);\r\n+        //   setIsLoading(false);\r\n+        // }\r\n+      } catch (err) {\r\n+        console.log(err);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+  \r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+      InterviewData();\r\n+      console.log(\"object\")\r\n+    }, [\r\n+      columnName,\r\n+      recordsPerPage,\r\n+      sortOrder,\r\n+      currentPage,\r\n+    ]);\r\n+  \r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+  \r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+  \r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+      setcolumnName(columnName);\r\n+    };\r\n+  return (\r\n+    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+    <div className=\"table-responsive main_table_div\">\r\n+      {isLoading ? (\r\n+            <Loader />\r\n+          ) :\r\n+          <table className=\"table table-striped main_data_table\">\r\n+        <thead>\r\n+          <tr>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              ID\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              User Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Action Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              StackHolder Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created At\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created By\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Message\r\n+            </th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {interviewHistoryData.length === 0 ?\r\n+          <tr >\r\n+            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+          </tr> :\r\n+          interviewHistoryData.map(interview => (\r\n+            <tr key={interview.id}>\r\n+              <td>{interview.id}</td>\r\n+              <td>{interview.user_type}</td>\r\n+              <td>{interview.action_type}</td>\r\n+              <td>{interview.stackHolder_type}</td>\r\n+              <td>{interview.created_at}</td>\r\n+              <td>{interview.created_by}</td>\r\n+              <td>{interview.msg}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708445608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,12 +48,12 @@\n         setIsLoading(false);\r\n       }\r\n     };\r\n   \r\n+    console.log(\"object\")\r\n     /*Render function to get the interview*/\r\n     useEffect(() => {\r\n-      InterviewData();\r\n-      console.log(\"object\")\r\n+        InterviewData();\r\n     }, [\r\n       columnName,\r\n       recordsPerPage,\r\n       sortOrder,\r\n"
                },
                {
                    "date": 1709708498254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,12 +48,13 @@\n         setIsLoading(false);\r\n       }\r\n     };\r\n   \r\n-    console.log(\"object\")\r\n+    console.log(\"employee_id\",employee_id)\r\n     /*Render function to get the interview*/\r\n     useEffect(() => {\r\n         InterviewData();\r\n+        console.log(\"p\")\r\n     }, [\r\n       columnName,\r\n       recordsPerPage,\r\n       sortOrder,\r\n@@ -130,136 +131,4 @@\n   );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n-import React,{useState,useEffect} from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = (employee_id) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-  \r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(\"\");\r\n-  \r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        // if (userData.data.length === 0) {\r\n-        //   setInterviewHistoryData([]);\r\n-        //   setIsLoading(false);\r\n-        // } else {\r\n-        //   setInterviewHistoryData(userData.data);\r\n-        //   setTotalData(userData.total_rows);\r\n-        //   setIsLoading(false);\r\n-        // }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-  \r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-      InterviewData();\r\n-    }, [\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n-    ]);\r\n-  \r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-  \r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n-    };\r\n-  return (\r\n-    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-    <div className=\"table-responsive main_table_div\">\r\n-      {isLoading ? (\r\n-            <Loader />\r\n-          ) :\r\n-          <table className=\"table table-striped main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {interviewHistoryData.length === 0 ?\r\n-          <tr >\r\n-            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-          </tr> :\r\n-          interviewHistoryData.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708612471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import React,{useState,useEffect} from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import {getActivityLog} from \"../../api/api\"\r\n+const InterviewHistoryTable = ({employee_id}) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+  \r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(\"\");\r\n+  \r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+      try {\r\n+        const userData = await getActivityLog(\r\n+currentPage,\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+recordsPerPage,\r\n+employee_id,\r\n+\"employee\",\r\n+\"interviewHistory\"\r\n+        );\r\n+        console.log(userData)\r\n+        // if (userData.data.length === 0) {\r\n+        //   setInterviewHistoryData([]);\r\n+        //   setIsLoading(false);\r\n+        // } else {\r\n+        //   setInterviewHistoryData(userData.data);\r\n+        //   setTotalData(userData.total_rows);\r\n+        //   setIsLoading(false);\r\n+        // }\r\n+      } catch (err) {\r\n+        console.log(err);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+  \r\n+    console.log(\"employee_id\",employee_id)\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+        console.log(\"p\")\r\n+    }, [\r\n+      columnName,\r\n+      recordsPerPage,\r\n+      sortOrder,\r\n+      currentPage,\r\n+    ]);\r\n+  \r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+  \r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+  \r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+      setcolumnName(columnName);\r\n+    };\r\n+  return (\r\n+    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+    <div className=\"table-responsive main_table_div\">\r\n+      {isLoading ? (\r\n+            <Loader />\r\n+          ) :\r\n+          <table className=\"table table-striped main_data_table\">\r\n+        <thead>\r\n+          <tr>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              ID\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              User Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Action Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              StackHolder Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created At\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created By\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Message\r\n+            </th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {interviewHistoryData.length === 0 ?\r\n+          <tr >\r\n+            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+          </tr> :\r\n+          interviewHistoryData.map(interview => (\r\n+            <tr key={interview.id}>\r\n+              <td>{interview.id}</td>\r\n+              <td>{interview.user_type}</td>\r\n+              <td>{interview.action_type}</td>\r\n+              <td>{interview.stackHolder_type}</td>\r\n+              <td>{interview.created_at}</td>\r\n+              <td>{interview.created_by}</td>\r\n+              <td>{interview.msg}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708761343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import React,{useState,useEffect} from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import {getActivityLog} from \"../../api/api\"\r\n+const InterviewHistoryTable = ({employee_id}) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+  \r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+  \r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+      try {\r\n+        const userData = await getActivityLog(\r\n+currentPage,\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+recordsPerPage,\r\n+employee_id,\r\n+\"employee\",\r\n+\"interviewHistory\"\r\n+        );\r\n+        console.log(userData)\r\n+        // if (userData.data.length === 0) {\r\n+        //   setInterviewHistoryData([]);\r\n+        //   setIsLoading(false);\r\n+        // } else {\r\n+        //   setInterviewHistoryData(userData.data);\r\n+        //   setTotalData(userData.total_rows);\r\n+        //   setIsLoading(false);\r\n+        // }\r\n+      } catch (err) {\r\n+        console.log(err);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+  \r\n+    console.log(\"employee_id\",employee_id)\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+        console.log(\"p\")\r\n+    }, [\r\n+      columnName,\r\n+      recordsPerPage,\r\n+      sortOrder,\r\n+      currentPage,\r\n+    ]);\r\n+  \r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+  \r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+  \r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+      setcolumnName(columnName);\r\n+    };\r\n+  return (\r\n+    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+    <div className=\"table-responsive main_table_div\">\r\n+      {isLoading ? (\r\n+            <Loader />\r\n+          ) :\r\n+          <table className=\"table table-striped main_data_table\">\r\n+        <thead>\r\n+          <tr>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              ID\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              User Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Action Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              StackHolder Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created At\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created By\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Message\r\n+            </th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {interviewHistoryData.length === 0 ?\r\n+          <tr >\r\n+            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+          </tr> :\r\n+          interviewHistoryData.map(interview => (\r\n+            <tr key={interview.id}>\r\n+              <td>{interview.id}</td>\r\n+              <td>{interview.user_type}</td>\r\n+              <td>{interview.action_type}</td>\r\n+              <td>{interview.stackHolder_type}</td>\r\n+              <td>{interview.created_at}</td>\r\n+              <td>{interview.created_by}</td>\r\n+              <td>{interview.msg}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708803925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import React,{useState,useEffect} from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import {getActivityLog} from \"../../api/api\"\r\n+const InterviewHistoryTable = ({employee_id}) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+  \r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+  \r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+      try {\r\n+        const userData = await getActivityLog(\r\n+currentPage,\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+\"\",\r\n+recordsPerPage,\r\n+employee_id,\r\n+\"employee\",\r\n+\"interviewHistory\"\r\n+        );\r\n+        console.log(userData)\r\n+        if (userData.data.data.length === 0) {\r\n+          setInterviewHistoryData([]);\r\n+          setIsLoading(false);\r\n+        } else {\r\n+          setInterviewHistoryData(userData.data.data);\r\n+          setTotalData(userData.total_rows);\r\n+          setIsLoading(false);\r\n+        }\r\n+      } catch (err) {\r\n+        console.log(err);\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+  \r\n+    console.log(\"employee_id\",employee_id)\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+        console.log(\"p\")\r\n+    }, [\r\n+      columnName,\r\n+      recordsPerPage,\r\n+      sortOrder,\r\n+      currentPage,\r\n+    ]);\r\n+  \r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+  \r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+  \r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+      setcolumnName(columnName);\r\n+    };\r\n+  return (\r\n+    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+    <div className=\"table-responsive main_table_div\">\r\n+      {isLoading ? (\r\n+            <Loader />\r\n+          ) :\r\n+          <table className=\"table table-striped main_data_table\">\r\n+        <thead>\r\n+          <tr>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              ID\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              User Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Action Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              StackHolder Type\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created At\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Created By\r\n+            </th>\r\n+            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+              Message\r\n+            </th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {interviewHistoryData.length === 0 ?\r\n+          <tr >\r\n+            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+          </tr> :\r\n+          interviewHistoryData.map(interview => (\r\n+            <tr key={interview.id}>\r\n+              <td>{interview.id}</td>\r\n+              <td>{interview.user_type}</td>\r\n+              <td>{interview.action_type}</td>\r\n+              <td>{interview.stackHolder_type}</td>\r\n+              <td>{interview.created_at}</td>\r\n+              <td>{interview.created_by}</td>\r\n+              <td>{interview.msg}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709708859380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,536 +1,132 @@\n-import React,{useState,useEffect} from 'react';\r\n+import React, { useState, useEffect } from 'react';\r\n import { Link } from 'react-router-dom';\r\n import moment from 'moment';\r\n import Loader from './loader';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = ({employee_id}) => {\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n     let [isLoading, setIsLoading] = useState(true);\r\n     // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n     const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n     // const [jobId, setJobId] = useState();\r\n     // let [resData, setResData] = useState(\"\");\r\n     let [apiCall, setApiCall] = useState(false);\r\n-  \r\n+\r\n     /*Pagination states */\r\n     const [totalData, setTotalData] = useState(\"\");\r\n     // const [currentPage, setCurrentPage] = useState(1);\r\n     const [recordsPerPage] = useState(10);\r\n     /*Shorting states */\r\n     const [columnName, setcolumnName] = useState(\"\");\r\n     const [sortOrder, setSortOrder] = useState(\"\");\r\n     const [currentPage, setCurrentPage] = useState(1);\r\n-  \r\n+\r\n     //   /* Function to get the intervew data*/\r\n     const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        if (userData.data.data.length === 0) {\r\n-          setInterviewHistoryData([]);\r\n-          setIsLoading(false);\r\n-        } else {\r\n-          setInterviewHistoryData(userData.data.data);\r\n-          setTotalData(userData.total_rows);\r\n-          setIsLoading(false);\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n         }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n     };\r\n-  \r\n-    console.log(\"employee_id\",employee_id)\r\n+\r\n     /*Render function to get the interview*/\r\n     useEffect(() => {\r\n         InterviewData();\r\n-        console.log(\"p\")\r\n     }, [\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n     ]);\r\n-  \r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-  \r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n-    };\r\n-  return (\r\n-    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-    <div className=\"table-responsive main_table_div\">\r\n-      {isLoading ? (\r\n-            <Loader />\r\n-          ) :\r\n-          <table className=\"table table-striped main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {interviewHistoryData.length === 0 ?\r\n-          <tr >\r\n-            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-          </tr> :\r\n-          interviewHistoryData.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n \r\n-export default InterviewHistoryTable;\r\n-import React,{useState,useEffect} from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = ({employee_id}) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-  \r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-  \r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        // if (userData.data.length === 0) {\r\n-        //   setInterviewHistoryData([]);\r\n-        //   setIsLoading(false);\r\n-        // } else {\r\n-        //   setInterviewHistoryData(userData.data);\r\n-        //   setTotalData(userData.total_rows);\r\n-        //   setIsLoading(false);\r\n-        // }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-  \r\n-    console.log(\"employee_id\",employee_id)\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-        console.log(\"p\")\r\n-    }, [\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n-    ]);\r\n-  \r\n     /* Function to show the single data to update interview*/\r\n     // const editInterview = (e) => {\r\n     //   setShowAddInterviewModal(true);\r\n     //   setJobId(e.job_id);\r\n     //   setResData(e);\r\n     // };\r\n-  \r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n-    };\r\n-  return (\r\n-    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-    <div className=\"table-responsive main_table_div\">\r\n-      {isLoading ? (\r\n-            <Loader />\r\n-          ) :\r\n-          <table className=\"table table-striped main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {interviewHistoryData.length === 0 ?\r\n-          <tr >\r\n-            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-          </tr> :\r\n-          interviewHistoryData.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n \r\n-export default InterviewHistoryTable;\r\n-import React,{useState,useEffect} from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = ({employee_id}) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-  \r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(\"\");\r\n-  \r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        // if (userData.data.length === 0) {\r\n-        //   setInterviewHistoryData([]);\r\n-        //   setIsLoading(false);\r\n-        // } else {\r\n-        //   setInterviewHistoryData(userData.data);\r\n-        //   setTotalData(userData.total_rows);\r\n-        //   setIsLoading(false);\r\n-        // }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-  \r\n-    console.log(\"employee_id\",employee_id)\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-        console.log(\"p\")\r\n-    }, [\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n-    ]);\r\n-  \r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-  \r\n     /*Pagination Calculation */\r\n     const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n-    };\r\n-  return (\r\n-    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-    <div className=\"table-responsive main_table_div\">\r\n-      {isLoading ? (\r\n-            <Loader />\r\n-          ) :\r\n-          <table className=\"table table-striped main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {interviewHistoryData.length === 0 ?\r\n-          <tr >\r\n-            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-          </tr> :\r\n-          interviewHistoryData.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n \r\n-export default InterviewHistoryTable;\r\n-import React,{useState,useEffect} from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import {getActivityLog} from \"../../api/api\"\r\n-const InterviewHistoryTable = (employee_id) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-  \r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(\"\");\r\n-  \r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-      try {\r\n-        const userData = await getActivityLog(\r\n-currentPage,\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-\"\",\r\n-recordsPerPage,\r\n-employee_id,\r\n-\"employee\",\r\n-\"interviewHistory\"\r\n-        );\r\n-        console.log(userData)\r\n-        // if (userData.data.length === 0) {\r\n-        //   setInterviewHistoryData([]);\r\n-        //   setIsLoading(false);\r\n-        // } else {\r\n-        //   setInterviewHistoryData(userData.data);\r\n-        //   setTotalData(userData.total_rows);\r\n-        //   setIsLoading(false);\r\n-        // }\r\n-      } catch (err) {\r\n-        console.log(err);\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-  \r\n-    console.log(\"employee_id\",employee_id)\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-        console.log(\"p\")\r\n-    }, [\r\n-      columnName,\r\n-      recordsPerPage,\r\n-      sortOrder,\r\n-      currentPage,\r\n-    ]);\r\n-  \r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-  \r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-  \r\n     /*Sorting Function */\r\n     const handleSort = (columnName) => {\r\n-      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-      setcolumnName(columnName);\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n     };\r\n-  return (\r\n-    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-    <div className=\"table-responsive main_table_div\">\r\n-      {isLoading ? (\r\n-            <Loader />\r\n-          ) :\r\n-          <table className=\"table table-striped main_data_table\">\r\n-        <thead>\r\n-          <tr>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              ID\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              User Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Action Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              StackHolder Type\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created At\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Created By\r\n-            </th>\r\n-            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-              Message\r\n-            </th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {interviewHistoryData.length === 0 ?\r\n-          <tr >\r\n-            <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-          </tr> :\r\n-          interviewHistoryData.map(interview => (\r\n-            <tr key={interview.id}>\r\n-              <td>{interview.id}</td>\r\n-              <td>{interview.user_type}</td>\r\n-              <td>{interview.action_type}</td>\r\n-              <td>{interview.stackHolder_type}</td>\r\n-              <td>{interview.created_at}</td>\r\n-              <td>{interview.created_by}</td>\r\n-              <td>{interview.msg}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    ID\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    User Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    StackHolder Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Created At\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Created By\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{interview.user_type}</td>\r\n+                                        <td>{interview.action_type}</td>\r\n+                                        <td>{interview.stackHolder_type}</td>\r\n+                                        <td>{interview.created_at}</td>\r\n+                                        <td>{interview.created_by}</td>\r\n+                                        <td>{interview.msg}</td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709709211893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,18 @@\n                                 </tr> :\r\n                                 interviewHistoryData.map(interview => (\r\n                                     <tr key={interview.id}>\r\n                                         <td>{interview.id}</td>\r\n-                                        <td>{interview.user_type}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>{\" \"}\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n                                         <td>{interview.action_type}</td>\r\n                                         <td>{interview.stackHolder_type}</td>\r\n                                         <td>{interview.created_at}</td>\r\n                                         <td>{interview.created_by}</td>\r\n"
                },
                {
                    "date": 1709709250375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    ID\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    User Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>{\" \"}\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td>{interview.action_type}</td>\r\n+                                        <td>{interview.msg}</td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709709291940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,10 @@\n                                         <td>{\r\n                                             <div className=\"timeline_date\">\r\n                                                 <b className=\"text-dark font-size-3 text-capitalize\">\r\n                                                     {interview.created_by}\r\n-                                                </b>{\" \"}\r\n+                                                </b>\r\n+                                                <br />\r\n                                                 <i className=\"font-size-2\">\r\n                                                     {moment(interview.created_at).format(\"lll\")}\r\n                                                 </i>\r\n                                             </div>\r\n@@ -126,145 +127,4 @@\n     );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\"\r\n-            );\r\n-            console.log(userData)\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    ID\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    User Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    StackHolder Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Created At\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Created By\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>{\" \"}\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td>{interview.action_type}</td>\r\n-                                        <td>{interview.stackHolder_type}</td>\r\n-                                        <td>{interview.created_at}</td>\r\n-                                        <td>{interview.created_by}</td>\r\n-                                        <td>{interview.msg}</td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709709556014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    ID\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    User Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"d-flex \">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize col\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2 col\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td>{interview.action_type}</td>\r\n+                                        <td>{interview.msg}</td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709709583566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n                                 interviewHistoryData.map(interview => (\r\n                                     <tr key={interview.id}>\r\n                                         <td>{interview.id}</td>\r\n                                         <td>{\r\n-                                            <div className=\"d-flex \">\r\n+                                            <div className=\"row \">\r\n                                                 <b className=\"text-dark font-size-3 text-capitalize col\">\r\n                                                     {interview.created_by}\r\n                                                 </b>\r\n                                                 <br />\r\n@@ -127,134 +127,4 @@\n     );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\"\r\n-            );\r\n-            console.log(userData)\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    ID\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    User Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td>{interview.action_type}</td>\r\n-                                        <td>{interview.msg}</td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709709597257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n                                 interviewHistoryData.map(interview => (\r\n                                     <tr key={interview.id}>\r\n                                         <td>{interview.id}</td>\r\n                                         <td>{\r\n-                                            <div className=\"row \">\r\n+                                            <div className=\"row timeline_date \">\r\n                                                 <b className=\"text-dark font-size-3 text-capitalize col\">\r\n                                                     {interview.created_by}\r\n                                                 </b>\r\n                                                 <br />\r\n"
                },
                {
                    "date": 1709709673148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,14 +105,14 @@\n                                 interviewHistoryData.map(interview => (\r\n                                     <tr key={interview.id}>\r\n                                         <td>{interview.id}</td>\r\n                                         <td>{\r\n-                                            <div className=\"row timeline_date \">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize col\">\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n                                                     {interview.created_by}\r\n                                                 </b>\r\n                                                 <br />\r\n-                                                <i className=\"font-size-2 col\">\r\n+                                                <i className=\"font-size-2\">\r\n                                                     {moment(interview.created_at).format(\"lll\")}\r\n                                                 </i>\r\n                                             </div>\r\n                                         }</td>\r\n"
                },
                {
                    "date": 1709709718355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,17 @@\n     const handleSort = (columnName) => {\r\n         setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n         setcolumnName(columnName);\r\n     };\r\n+     /* Function to replace the _ and correct the document type */\r\n+  const textReplaceFunction = (e) => {\r\n+    if (e && e.includes(\"_\")) {\r\n+      let new_text = e.replaceAll(\"_\", \" \");\r\n+      return new_text;\r\n+    } else {\r\n+      return e;\r\n+    }\r\n+  };\r\n     return (\r\n         <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n             <div className=\"table-responsive main_table_div\">\r\n                 {isLoading ? (\r\n@@ -115,9 +124,9 @@\n                                                     {moment(interview.created_at).format(\"lll\")}\r\n                                                 </i>\r\n                                             </div>\r\n                                         }</td>\r\n-                                        <td>{interview.action_type}</td>\r\n+                                        <td>{textReplaceFunction(interview.action_type)}</td>\r\n                                         <td>{interview.msg}</td>\r\n                                     </tr>\r\n                                 ))}\r\n                         </tbody>\r\n"
                },
                {
                    "date": 1709709802213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+     /* Function to replace the _ and correct the document type */\r\n+  const textReplaceFunction = (e) => {\r\n+    if (e && e.includes(\"_\")) {\r\n+      let new_text = e.replaceAll(\"_\", \" \");\r\n+      return new_text;\r\n+    } else {\r\n+      return e;\r\n+    }\r\n+  };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    ID\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    User Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td><p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}</p></td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709709813896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,156 +73,17 @@\n     const handleSort = (columnName) => {\r\n         setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n         setcolumnName(columnName);\r\n     };\r\n-     /* Function to replace the _ and correct the document type */\r\n-  const textReplaceFunction = (e) => {\r\n-    if (e && e.includes(\"_\")) {\r\n-      let new_text = e.replaceAll(\"_\", \" \");\r\n-      return new_text;\r\n-    } else {\r\n-      return e;\r\n-    }\r\n-  };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    ID\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    User Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date d-flex flex-column\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td><p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}</p></td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\"\r\n-            );\r\n-            console.log(userData)\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n         }\r\n     };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-     /* Function to replace the _ and correct the document type */\r\n-  const textReplaceFunction = (e) => {\r\n-    if (e && e.includes(\"_\")) {\r\n-      let new_text = e.replaceAll(\"_\", \" \");\r\n-      return new_text;\r\n-    } else {\r\n-      return e;\r\n-    }\r\n-  };\r\n     return (\r\n         <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n             <div className=\"table-responsive main_table_div\">\r\n                 {isLoading ? (\r\n@@ -264,9 +125,12 @@\n                                                 </i>\r\n                                             </div>\r\n                                         }</td>\r\n                                         <td>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td>{interview.msg}</td>\r\n+                                        <td\r\n+                                        ><p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n                                     </tr>\r\n                                 ))}\r\n                         </tbody>\r\n                     </table>}\r\n"
                },
                {
                    "date": 1709709821510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    ID\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    User Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709709839619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                                                     {moment(interview.created_at).format(\"lll\")}\r\n                                                 </i>\r\n                                             </div>\r\n                                         }</td>\r\n-                                        <td>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td className='text-capitalize'>{textReplaceFunction(interview.action_type)}</td>\r\n                                         <td>\r\n                                             <p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}\r\n                                             </p>\r\n                                         </td>\r\n@@ -139,146 +139,4 @@\n     );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\"\r\n-            );\r\n-            console.log(userData)\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    /* Function to replace the _ and correct the document type */\r\n-    const textReplaceFunction = (e) => {\r\n-        if (e && e.includes(\"_\")) {\r\n-            let new_text = e.replaceAll(\"_\", \" \");\r\n-            return new_text;\r\n-        } else {\r\n-            return e;\r\n-        }\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    ID\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    User Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date d-flex flex-column\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td\r\n-                                        ><p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}\r\n-                                            </p>\r\n-                                        </td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709709934878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n                                 <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n                                     ID\r\n                                 </th>\r\n                                 <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    User Type\r\n+                                    Scheduled By\r\n                                 </th>\r\n                                 <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n                                     Action Type\r\n                                 </th>\r\n"
                },
                {
                    "date": 1709709965442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    ID\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Scheduled By\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize py-5'>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709710220561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    ID\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Scheduled By\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize py-5\">{interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709710241545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    ID\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Scheduled By\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">{interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709710268906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,10 @@\n                                             </div>\r\n                                         }</td>\r\n                                         <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n                                         <td>\r\n-                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">{interview.msg}\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n+                                                {interview.msg}\r\n                                             </p>\r\n                                         </td>\r\n                                     </tr>\r\n                                 ))}\r\n"
                },
                {
                    "date": 1709714903900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\"\r\n+            );\r\n+            console.log(userData)\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                <Link\r\n+                      to={\"\"}\r\n+                      onClick={() => {\r\n+                        handleSort(\"name\");\r\n+                        props.setpageNo(1);\r\n+                      }}\r\n+                      className=\"text-gray\"\r\n+                      title=\"Sort by Name\"\r\n+                    >   ID\r\n+                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Scheduled By\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n+                                                {interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709714972431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,21 +92,30 @@\n                     <table className=\"table table-striped main_data_table\">\r\n                         <thead>\r\n                             <tr>\r\n                                 <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                <Link\r\n-                      to={\"\"}\r\n-                      onClick={() => {\r\n-                        handleSort(\"name\");\r\n-                        props.setpageNo(1);\r\n-                      }}\r\n-                      className=\"text-gray\"\r\n-                      title=\"Sort by Name\"\r\n-                    >   ID\r\n-                    </Link>\r\n+                                    <Link\r\n+                                        to={\"\"}\r\n+                                        onClick={() => {\r\n+                                            handleSort(\"id\");\r\n+                                            props.setpageNo(1);\r\n+                                        }}\r\n+                                        className=\"text-gray\"\r\n+                                        title=\"Sort by id\"\r\n+                                    >   ID\r\n+                                    </Link>\r\n                                 </th>\r\n                                 <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Scheduled By\r\n+                                    <Link\r\n+                                        to={\"\"}\r\n+                                        onClick={() => {\r\n+                                            handleSort(\"created_at\");\r\n+                                            props.setpageNo(1);\r\n+                                        }}\r\n+                                        className=\"text-gray\"\r\n+                                        title=\"Sort by Time\"\r\n+                                    >  Scheduled By\r\n+                                    </Link>\r\n                                 </th>\r\n                                 <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n                                     Action Type\r\n                                 </th>\r\n@@ -149,573 +158,4 @@\n     );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\"\r\n-            );\r\n-            console.log(userData)\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    /* Function to replace the _ and correct the document type */\r\n-    const textReplaceFunction = (e) => {\r\n-        if (e && e.includes(\"_\")) {\r\n-            let new_text = e.replaceAll(\"_\", \" \");\r\n-            return new_text;\r\n-        } else {\r\n-            return e;\r\n-        }\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    ID\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Scheduled By\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date d-flex flex-column\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td>\r\n-                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n-                                                {interview.msg}\r\n-                                            </p>\r\n-                                        </td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\"\r\n-            );\r\n-            console.log(userData)\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    /* Function to replace the _ and correct the document type */\r\n-    const textReplaceFunction = (e) => {\r\n-        if (e && e.includes(\"_\")) {\r\n-            let new_text = e.replaceAll(\"_\", \" \");\r\n-            return new_text;\r\n-        } else {\r\n-            return e;\r\n-        }\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    ID\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Scheduled By\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date d-flex flex-column\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td>\r\n-                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize py-5\">{interview.msg}\r\n-                                            </p>\r\n-                                        </td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\"\r\n-            );\r\n-            console.log(userData)\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    /* Function to replace the _ and correct the document type */\r\n-    const textReplaceFunction = (e) => {\r\n-        if (e && e.includes(\"_\")) {\r\n-            let new_text = e.replaceAll(\"_\", \" \");\r\n-            return new_text;\r\n-        } else {\r\n-            return e;\r\n-        }\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    ID\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Scheduled By\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date d-flex flex-column\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td className='text-capitalize py-5'>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td>\r\n-                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}\r\n-                                            </p>\r\n-                                        </td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\"\r\n-            );\r\n-            console.log(userData)\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    /* Function to replace the _ and correct the document type */\r\n-    const textReplaceFunction = (e) => {\r\n-        if (e && e.includes(\"_\")) {\r\n-            let new_text = e.replaceAll(\"_\", \" \");\r\n-            return new_text;\r\n-        } else {\r\n-            return e;\r\n-        }\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    ID\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Scheduled By\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date d-flex flex-column\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td className='text-capitalize'>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td>\r\n-                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize\">{interview.msg}\r\n-                                            </p>\r\n-                                        </td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709715068400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     // const [currentPage, setCurrentPage] = useState(1);\r\n     const [recordsPerPage] = useState(10);\r\n     /*Shorting states */\r\n     const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n     const [currentPage, setCurrentPage] = useState(1);\r\n \r\n     //   /* Function to get the intervew data*/\r\n     const InterviewData = async () => {\r\n@@ -31,11 +31,11 @@\n                 \"\",\r\n                 recordsPerPage,\r\n                 employee_id,\r\n                 \"employee\",\r\n-                \"interviewHistory\"\r\n+                \"interviewHistory\",\r\n+                sortOrder\r\n             );\r\n-            console.log(userData)\r\n             if (userData.data.data.length === 0) {\r\n                 setInterviewHistoryData([]);\r\n                 setIsLoading(false);\r\n             } else {\r\n"
                },
                {
                    "date": 1709715095288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n                                     <Link\r\n                                         to={\"\"}\r\n                                         onClick={() => {\r\n                                             handleSort(\"id\");\r\n-                                            props.setpageNo(1);\r\n+                                           setCurrentPage(1);\r\n                                         }}\r\n                                         className=\"text-gray\"\r\n                                         title=\"Sort by id\"\r\n                                     >   ID\r\n@@ -108,9 +108,9 @@\n                                     <Link\r\n                                         to={\"\"}\r\n                                         onClick={() => {\r\n                                             handleSort(\"created_at\");\r\n-                                            props.setpageNo(1);\r\n+                                           setCurrentPage(1);\r\n                                         }}\r\n                                         className=\"text-gray\"\r\n                                         title=\"Sort by Time\"\r\n                                     >  Scheduled By\r\n"
                },
                {
                    "date": 1709715137449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\",\r\n+                sortOrder\r\n+            );\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        to={\"\"}\r\n+                                        onClick={() => {\r\n+                                            handleSort(\"id\");\r\n+                                            setCurrentPage(1);\r\n+                                        }}\r\n+                                        className=\"text-gray\"\r\n+                                        title=\"Sort by id\"\r\n+                                    >   ID\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        to={\"\"}\r\n+                                        onClick={() => {\r\n+                                            handleSort(\"created_at\");\r\n+                                            setCurrentPage(1);\r\n+                                        }}\r\n+                                        className=\"text-gray\"\r\n+                                        title=\"Sort by Time\"\r\n+                                    >  Scheduled By\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n+                                                {interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+            <div className=\"pt-2\">\r\n+                <Pagination\r\n+                    nPages={nPages}\r\n+                    currentPage={currentPage}\r\n+                    setCurrentPage={setCurrentPage}\r\n+                    total={totalData}\r\n+                    count={employeeData.length}\r\n+                />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709715213855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+import Pagination from './pagination';\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    // let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\",\r\n+                sortOrder\r\n+            );\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        to={\"\"}\r\n+                                        onClick={() => {\r\n+                                            handleSort(\"id\");\r\n+                                            setCurrentPage(1);\r\n+                                        }}\r\n+                                        className=\"text-gray\"\r\n+                                        title=\"Sort by id\"\r\n+                                    >   ID\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        to={\"\"}\r\n+                                        onClick={() => {\r\n+                                            handleSort(\"created_at\");\r\n+                                            setCurrentPage(1);\r\n+                                        }}\r\n+                                        className=\"text-gray\"\r\n+                                        title=\"Sort by Time\"\r\n+                                    >  Scheduled By\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n+                                                {interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+            <div className=\"pt-2\">\r\n+                <Pagination\r\n+                    nPages={nPages}\r\n+                    currentPage={currentPage}\r\n+                    setCurrentPage={setCurrentPage}\r\n+                    total={totalData}\r\n+                    count={interviewHistoryData.length}\r\n+                />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709717311690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,10 @@\n                 recordsPerPage,\r\n                 employee_id,\r\n                 \"employee\",\r\n                 \"interviewHistory\",\r\n-                sortOrder\r\n+                sortOrder,\r\n+                columnName\r\n             );\r\n             if (userData.data.data.length === 0) {\r\n                 setInterviewHistoryData([]);\r\n                 setIsLoading(false);\r\n@@ -168,335 +169,4 @@\n     );\r\n };\r\n \r\n export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\",\r\n-                sortOrder\r\n-            );\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    /* Function to replace the _ and correct the document type */\r\n-    const textReplaceFunction = (e) => {\r\n-        if (e && e.includes(\"_\")) {\r\n-            let new_text = e.replaceAll(\"_\", \" \");\r\n-            return new_text;\r\n-        } else {\r\n-            return e;\r\n-        }\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    <Link\r\n-                                        to={\"\"}\r\n-                                        onClick={() => {\r\n-                                            handleSort(\"id\");\r\n-                                            setCurrentPage(1);\r\n-                                        }}\r\n-                                        className=\"text-gray\"\r\n-                                        title=\"Sort by id\"\r\n-                                    >   ID\r\n-                                    </Link>\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    <Link\r\n-                                        to={\"\"}\r\n-                                        onClick={() => {\r\n-                                            handleSort(\"created_at\");\r\n-                                            setCurrentPage(1);\r\n-                                        }}\r\n-                                        className=\"text-gray\"\r\n-                                        title=\"Sort by Time\"\r\n-                                    >  Scheduled By\r\n-                                    </Link>\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date d-flex flex-column\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td>\r\n-                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n-                                                {interview.msg}\r\n-                                            </p>\r\n-                                        </td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-            <div className=\"pt-2\">\r\n-                <Pagination\r\n-                    nPages={nPages}\r\n-                    currentPage={currentPage}\r\n-                    setCurrentPage={setCurrentPage}\r\n-                    total={totalData}\r\n-                    count={employeeData.length}\r\n-                />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import Loader from './loader';\r\n-import { getActivityLog } from \"../../api/api\"\r\n-const InterviewHistoryTable = ({ employee_id }) => {\r\n-    let [isLoading, setIsLoading] = useState(true);\r\n-    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n-    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n-    // const [jobId, setJobId] = useState();\r\n-    // let [resData, setResData] = useState(\"\");\r\n-    let [apiCall, setApiCall] = useState(false);\r\n-\r\n-    /*Pagination states */\r\n-    const [totalData, setTotalData] = useState(\"\");\r\n-    // const [currentPage, setCurrentPage] = useState(1);\r\n-    const [recordsPerPage] = useState(10);\r\n-    /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n-    const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n-    const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-    //   /* Function to get the intervew data*/\r\n-    const InterviewData = async () => {\r\n-        try {\r\n-            const userData = await getActivityLog(\r\n-                currentPage,\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                \"\",\r\n-                recordsPerPage,\r\n-                employee_id,\r\n-                \"employee\",\r\n-                \"interviewHistory\",\r\n-                sortOrder\r\n-            );\r\n-            if (userData.data.data.length === 0) {\r\n-                setInterviewHistoryData([]);\r\n-                setIsLoading(false);\r\n-            } else {\r\n-                setInterviewHistoryData(userData.data.data);\r\n-                setTotalData(userData.total_rows);\r\n-                setIsLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-            setIsLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    /*Render function to get the interview*/\r\n-    useEffect(() => {\r\n-        InterviewData();\r\n-    }, [\r\n-        columnName,\r\n-        recordsPerPage,\r\n-        sortOrder,\r\n-        currentPage,\r\n-    ]);\r\n-\r\n-    /* Function to show the single data to update interview*/\r\n-    // const editInterview = (e) => {\r\n-    //   setShowAddInterviewModal(true);\r\n-    //   setJobId(e.job_id);\r\n-    //   setResData(e);\r\n-    // };\r\n-\r\n-    /*Pagination Calculation */\r\n-    const nPages = Math.ceil(totalData / recordsPerPage);\r\n-\r\n-    /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n-    /* Function to replace the _ and correct the document type */\r\n-    const textReplaceFunction = (e) => {\r\n-        if (e && e.includes(\"_\")) {\r\n-            let new_text = e.replaceAll(\"_\", \" \");\r\n-            return new_text;\r\n-        } else {\r\n-            return e;\r\n-        }\r\n-    };\r\n-    return (\r\n-        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n-            <div className=\"table-responsive main_table_div\">\r\n-                {isLoading ? (\r\n-                    <Loader />\r\n-                ) :\r\n-                    <table className=\"table table-striped main_data_table\">\r\n-                        <thead>\r\n-                            <tr>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    <Link\r\n-                                        to={\"\"}\r\n-                                        onClick={() => {\r\n-                                            handleSort(\"id\");\r\n-                                           setCurrentPage(1);\r\n-                                        }}\r\n-                                        className=\"text-gray\"\r\n-                                        title=\"Sort by id\"\r\n-                                    >   ID\r\n-                                    </Link>\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    <Link\r\n-                                        to={\"\"}\r\n-                                        onClick={() => {\r\n-                                            handleSort(\"created_at\");\r\n-                                           setCurrentPage(1);\r\n-                                        }}\r\n-                                        className=\"text-gray\"\r\n-                                        title=\"Sort by Time\"\r\n-                                    >  Scheduled By\r\n-                                    </Link>\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Action Type\r\n-                                </th>\r\n-                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n-                                    Message\r\n-                                </th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {interviewHistoryData.length === 0 ?\r\n-                                <tr >\r\n-                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n-                                </tr> :\r\n-                                interviewHistoryData.map(interview => (\r\n-                                    <tr key={interview.id}>\r\n-                                        <td>{interview.id}</td>\r\n-                                        <td>{\r\n-                                            <div className=\"timeline_date d-flex flex-column\">\r\n-                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n-                                                    {interview.created_by}\r\n-                                                </b>\r\n-                                                <br />\r\n-                                                <i className=\"font-size-2\">\r\n-                                                    {moment(interview.created_at).format(\"lll\")}\r\n-                                                </i>\r\n-                                            </div>\r\n-                                        }</td>\r\n-                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n-                                        <td>\r\n-                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n-                                                {interview.msg}\r\n-                                            </p>\r\n-                                        </td>\r\n-                                    </tr>\r\n-                                ))}\r\n-                        </tbody>\r\n-                    </table>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709717382356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     const [totalData, setTotalData] = useState(\"\");\r\n     // const [currentPage, setCurrentPage] = useState(1);\r\n     const [recordsPerPage] = useState(10);\r\n     /*Shorting states */\r\n-    const [columnName, setcolumnName] = useState(\"\");\r\n+    const [columnName, setcolumnName] = useState(\"id\");\r\n     const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n     const [currentPage, setCurrentPage] = useState(1);\r\n \r\n     //   /* Function to get the intervew data*/\r\n"
                },
                {
                    "date": 1709717540335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+import Pagination from './pagination';\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    // let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"id\");\r\n+    const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\",\r\n+                sortOrder,\r\n+                columnName\r\n+            );\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        to={\"\"}\r\n+                                        onClick={() => {\r\n+                                            handleSort(\"id\");\r\n+                                            setCurrentPage(1);\r\n+                                        }}\r\n+                                        className=\"text-gray\"\r\n+                                        title=\"Sort by id\"\r\n+                                    >   ID\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        to={\"\"}\r\n+                                        onClick={() => {\r\n+                                            handleSort(\"created_at\");\r\n+                                            setCurrentPage(1);\r\n+                                        }}\r\n+                                        className=\"text-gray\"\r\n+                                        title=\"Sort by Time\"\r\n+                                    >  Scheduled By\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n+                                                {interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+            <div className=\"pt-2\">\r\n+                <Pagination\r\n+                    nPages={nPages}\r\n+                    currentPage={currentPage}\r\n+                    setCurrentPage={setCurrentPage}\r\n+                    total={totalData}\r\n+                    count={interviewHistoryData.length}\r\n+                />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709717556721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+import Pagination from './pagination';\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    // let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"id\");\r\n+    const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\",\r\n+                sortOrder,\r\n+                columnName\r\n+            );\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        // to={\"\"}\r\n+                                        // onClick={() => {\r\n+                                        //     handleSort(\"id\");\r\n+                                        //     setCurrentPage(1);\r\n+                                        // }}\r\n+                                        className=\"text-gray\"\r\n+                                        // title=\"Sort by id\"\r\n+                                    >   ID\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        // to={\"\"}\r\n+                                        // onClick={() => {\r\n+                                        //     handleSort(\"created_at\");\r\n+                                        //     setCurrentPage(1);\r\n+                                        // }}\r\n+                                        className=\"text-gray\"\r\n+                                        // title=\"Sort by Time\"\r\n+                                    >  Scheduled By\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Action Type\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n+                                                {interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+            <div className=\"pt-2\">\r\n+                <Pagination\r\n+                    nPages={nPages}\r\n+                    currentPage={currentPage}\r\n+                    setCurrentPage={setCurrentPage}\r\n+                    total={totalData}\r\n+                    count={interviewHistoryData.length}\r\n+                />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709717588424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+import Pagination from './pagination';\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    // let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName, setcolumnName] = useState(\"id\");\r\n+    const [sortOrder, setSortOrder] = useState(\"DESC\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\",\r\n+                sortOrder,\r\n+                columnName\r\n+            );\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    const handleSort = (columnName) => {\r\n+        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+        setcolumnName(columnName);\r\n+    };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        // to={\"\"}\r\n+                                        // onClick={() => {\r\n+                                        //     handleSort(\"id\");\r\n+                                        //     setCurrentPage(1);\r\n+                                        // }}\r\n+                                        className=\"text-gray\"\r\n+                                        // title=\"Sort by id\"\r\n+                                    >   ID\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        // to={\"\"}\r\n+                                        // onClick={() => {\r\n+                                        //     handleSort(\"created_at\");\r\n+                                        //     setCurrentPage(1);\r\n+                                        // }}\r\n+                                        className=\"text-gray\"\r\n+                                        // title=\"Sort by Time\"\r\n+                                    >  Scheduled By\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Interview Status\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n+                                                {interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+            <div className=\"pt-2\">\r\n+                <Pagination\r\n+                    nPages={nPages}\r\n+                    currentPage={currentPage}\r\n+                    setCurrentPage={setCurrentPage}\r\n+                    total={totalData}\r\n+                    count={interviewHistoryData.length}\r\n+                />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                },
                {
                    "date": 1709721499764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,12 +71,12 @@\n     /*Pagination Calculation */\r\n     const nPages = Math.ceil(totalData / recordsPerPage);\r\n \r\n     /*Sorting Function */\r\n-    const handleSort = (columnName) => {\r\n-        setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n-        setcolumnName(columnName);\r\n-    };\r\n+    // const handleSort = (columnName) => {\r\n+    //     setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+    //     setcolumnName(columnName);\r\n+    // };\r\n     /* Function to replace the _ and correct the document type */\r\n     const textReplaceFunction = (e) => {\r\n         if (e && e.includes(\"_\")) {\r\n             let new_text = e.replaceAll(\"_\", \" \");\r\n"
                },
                {
                    "date": 1710320487673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import Loader from './loader';\r\n+import { getActivityLog } from \"../../api/api\"\r\n+import Pagination from './pagination';\r\n+const InterviewHistoryTable = ({ employee_id }) => {\r\n+    let [isLoading, setIsLoading] = useState(true);\r\n+    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n+    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n+    // const [jobId, setJobId] = useState();\r\n+    // let [resData, setResData] = useState(\"\");\r\n+    // let [apiCall, setApiCall] = useState(false);\r\n+\r\n+    /*Pagination states */\r\n+    const [totalData, setTotalData] = useState(\"\");\r\n+    // const [currentPage, setCurrentPage] = useState(1);\r\n+    const [recordsPerPage] = useState(10);\r\n+    /*Shorting states */\r\n+    const [columnName,/* setcolumnName*/] = useState(\"id\");\r\n+    const [sortOrder,/* setSortOrder*/] = useState(\"DESC\");\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+    //   /* Function to get the intervew data*/\r\n+    const InterviewData = async () => {\r\n+        try {\r\n+            const userData = await getActivityLog(\r\n+                currentPage,\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                \"\",\r\n+                recordsPerPage,\r\n+                employee_id,\r\n+                \"employee\",\r\n+                \"interviewHistory\",\r\n+                sortOrder,\r\n+                columnName\r\n+            );\r\n+            if (userData.data.data.length === 0) {\r\n+                setInterviewHistoryData([]);\r\n+                setIsLoading(false);\r\n+            } else {\r\n+                setInterviewHistoryData(userData.data.data);\r\n+                setTotalData(userData.total_rows);\r\n+                setIsLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            setIsLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    /*Render function to get the interview*/\r\n+    useEffect(() => {\r\n+        InterviewData();\r\n+    }, [\r\n+        columnName,\r\n+        recordsPerPage,\r\n+        sortOrder,\r\n+        currentPage,\r\n+    ]);\r\n+\r\n+    /* Function to show the single data to update interview*/\r\n+    // const editInterview = (e) => {\r\n+    //   setShowAddInterviewModal(true);\r\n+    //   setJobId(e.job_id);\r\n+    //   setResData(e);\r\n+    // };\r\n+\r\n+    /*Pagination Calculation */\r\n+    const nPages = Math.ceil(totalData / recordsPerPage);\r\n+\r\n+    /*Sorting Function */\r\n+    // const handleSort = (columnName) => {\r\n+    //     setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n+    //     setcolumnName(columnName);\r\n+    // };\r\n+    /* Function to replace the _ and correct the document type */\r\n+    const textReplaceFunction = (e) => {\r\n+        if (e && e.includes(\"_\")) {\r\n+            let new_text = e.replaceAll(\"_\", \" \");\r\n+            return new_text;\r\n+        } else {\r\n+            return e;\r\n+        }\r\n+    };\r\n+    return (\r\n+        <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\r\n+            <div className=\"table-responsive main_table_div\">\r\n+                {isLoading ? (\r\n+                    <Loader />\r\n+                ) :\r\n+                    <table className=\"table table-striped main_data_table\">\r\n+                        <thead>\r\n+                            <tr>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        // to={\"\"}\r\n+                                        // onClick={() => {\r\n+                                        //     handleSort(\"id\");\r\n+                                        //     setCurrentPage(1);\r\n+                                        // }}\r\n+                                        className=\"text-gray\"\r\n+                                        // title=\"Sort by id\"\r\n+                                    >   ID\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    <Link\r\n+                                        // to={\"\"}\r\n+                                        // onClick={() => {\r\n+                                        //     handleSort(\"created_at\");\r\n+                                        //     setCurrentPage(1);\r\n+                                        // }}\r\n+                                        className=\"text-gray\"\r\n+                                        // title=\"Sort by Time\"\r\n+                                    >  Scheduled By\r\n+                                    </Link>\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Interview Status\r\n+                                </th>\r\n+                                <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n+                                    Message\r\n+                                </th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {interviewHistoryData.length === 0 ?\r\n+                                <tr >\r\n+                                    <td colSpan={7} className=\"bg-white text-center\">No data found</td>\r\n+                                </tr> :\r\n+                                interviewHistoryData.map(interview => (\r\n+                                    <tr key={interview.id}>\r\n+                                        <td>{interview.id}</td>\r\n+                                        <td>{\r\n+                                            <div className=\"timeline_date d-flex flex-column\">\r\n+                                                <b className=\"text-dark font-size-3 text-capitalize\">\r\n+                                                    {interview.created_by}\r\n+                                                </b>\r\n+                                                <br />\r\n+                                                <i className=\"font-size-2\">\r\n+                                                    {moment(interview.created_at).format(\"lll\")}\r\n+                                                </i>\r\n+                                            </div>\r\n+                                        }</td>\r\n+                                        <td className='text-capitalize '>{textReplaceFunction(interview.action_type)}</td>\r\n+                                        <td>\r\n+                                            <p className=\"timeline_date text-dark font-size-3 text-capitalize mt-5\">\r\n+                                                {interview.msg}\r\n+                                            </p>\r\n+                                        </td>\r\n+                                    </tr>\r\n+                                ))}\r\n+                        </tbody>\r\n+                    </table>}\r\n+            </div>\r\n+            <div className=\"pt-2\">\r\n+                <Pagination\r\n+                    nPages={nPages}\r\n+                    currentPage={currentPage}\r\n+                    setCurrentPage={setCurrentPage}\r\n+                    total={totalData}\r\n+                    count={interviewHistoryData.length}\r\n+                />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default InterviewHistoryTable;\r\n"
                }
            ],
            "date": 1709707372209,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport {getActivityLog} from \"../../api/api\"\r\nconst InterviewHistoryTable = (employee_id) => {\r\n    let [isLoading, setIsLoading] = useState(true);\r\n    // let [showAddInterviewModal, setShowAddInterviewModal] = useState(false);\r\n    const [interviewHistoryData, setInterviewHistoryData] = useState([]);\r\n    // const [jobId, setJobId] = useState();\r\n    // let [resData, setResData] = useState(\"\");\r\n    let [apiCall, setApiCall] = useState(false);\r\n  \r\n    /*Pagination states */\r\n    const [totalData, setTotalData] = useState(\"\");\r\n    // const [currentPage, setCurrentPage] = useState(1);\r\n    const [recordsPerPage] = useState(10);\r\n    /*Shorting states */\r\n    const [columnName, setcolumnName] = useState(\"\");\r\n    const [sortOrder, setSortOrder] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(\"\");\r\n  \r\n    //   /* Function to get the intervew data*/\r\n    const InterviewData = async () => {\r\n      try {\r\n        const userData = await getActivityLog(\r\ncurrentPage,\r\n\"\",\r\n\"\",\r\n\"\",\r\n\"\",\r\nrecordsPerPage,\r\nemployee_id,\r\n\"employee\",\r\n\"interviewHistory\"\r\n        );\r\n        console.log(userData)\r\n        // if (userData.data.length === 0) {\r\n        //   setInterviewHistoryData([]);\r\n        //   setIsLoading(false);\r\n        // } else {\r\n        //   setInterviewHistoryData(userData.data);\r\n        //   setTotalData(userData.total_rows);\r\n        //   setIsLoading(false);\r\n        // }\r\n      } catch (err) {\r\n        console.log(err);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n  \r\n    /*Render function to get the interview*/\r\n    useEffect(() => {\r\n      InterviewData();\r\n    }, [\r\n      search,\r\n      columnName,\r\n      recordsPerPage,\r\n      sortOrder,\r\n      currentPage,\r\n    ]);\r\n  \r\n    /* Function to show the single data to update interview*/\r\n    // const editInterview = (e) => {\r\n    //   setShowAddInterviewModal(true);\r\n    //   setJobId(e.job_id);\r\n    //   setResData(e);\r\n    // };\r\n  \r\n    /*Pagination Calculation */\r\n    const nPages = Math.ceil(totalData / recordsPerPage);\r\n  \r\n    /*Sorting Function */\r\n    const handleSort = (columnName) => {\r\n      setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\r\n      setcolumnName(columnName);\r\n    };\r\n  return (\r\n    <div>\r\n      <h2>Interview History</h2>\r\n      <table className=\"table table-striped main_data_table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n              ID\r\n            </th>\r\n            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n              User Type\r\n            </th>\r\n            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n              Action Type\r\n            </th>\r\n            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n              StackHolder Type\r\n            </th>\r\n            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n              Created At\r\n            </th>\r\n            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n              Created By\r\n            </th>\r\n            <th scope=\"col\" className=\"border-0 font-size-4 font-weight-normal\">\r\n              Message\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map(interview => (\r\n            <tr key={interview.id}>\r\n              <td>{interview.id}</td>\r\n              <td>{interview.user_type}</td>\r\n              <td>{interview.action_type}</td>\r\n              <td>{interview.stackHolder_type}</td>\r\n              <td>{interview.created_at}</td>\r\n              <td>{interview.created_by}</td>\r\n              <td>{interview.msg}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InterviewHistoryTable;\r\n"
        }
    ]
}