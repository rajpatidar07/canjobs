{
    "sourceFile": "src/components/common/Adobe/adobeFile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1712911726583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712912701461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import React, { useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (props) => {\r\n+const [state, setState] = React.useState({isDataLoaded: false, menuLink: null, hasFile: false});\r\n+useEffect(() => {\r\n+axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+.then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+.catch(error => alert(error.message))\r\n+}, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div >\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712912917151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,57 +2,15 @@\n import axios from 'axios';\r\n import CircularProgress from '@material-ui/core/CircularProgress';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n const AdobePDFViewer = (props) => {\r\n-const [state, setState] = React.useState({isDataLoaded: false, menuLink: null, hasFile: false});\r\n-useEffect(() => {\r\n-axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-.then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-.catch(error => alert(error.message))\r\n-}, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+const [state, setState] = React.useState({isDataLoaded: true, menuLink: null, hasFile: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n });\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React, { useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (props) => {\r\n-const [state, setState] = React.useState({isDataLoaded: false, menuLink: null, hasFile: false});\r\n-useEffect(() => {\r\n-axios.get(`https://apnaorganicstore.in/canjobs/get_menu`)\r\n-.then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-.catch(error => alert(error.message))\r\n-}, []);\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n const loadPDF = () => {\r\n const viewSDKClient = new ViewSDKClient();\r\n viewSDKClient.ready().then(() => {\r\n viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n"
                },
                {
                    "date": 1712912960883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import React, { useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (props) => {\r\n+const [state, setState] = React.useState({isDataLoaded: true, menuLink: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n+, hasFile: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n+});\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div >\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914363781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import React, { useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (url) => {\r\n+const [state, setState] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div >\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914449935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (url) => {\r\n+const [state, setState] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div >\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914743262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (url) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914829566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,204 +21,25 @@\n return (\r\n <div style={{height:\"100vh\"}}>\r\n {\r\n state.isDataLoaded ?\r\n-<div>\r\n+<div style={{height:\"100vh\"}}>\r\n {\r\n state.hasFile ?\r\n <>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n </>\r\n :\r\n-<div>\r\n+<div style={{height:\"100vh\"}}>\r\n <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n </div>\r\n }\r\n </div>\r\n :\r\n-<div className='cp'>\r\n+<div className='cp' >\r\n <CircularProgress  style={{color: '#ffc107'}} />\r\n </div>\r\n }\r\n </div>\r\n );\r\n }\r\n-export default AdobePDFViewer;\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (url) => {\r\n-const [state, setState] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n-});\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React, { useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (url) => {\r\n-const [state, setState] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n-});\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React, { useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (props) => {\r\n-const [state, setState] = React.useState({isDataLoaded: true, menuLink: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n-, hasFile: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n-});\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n-});\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React, { useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (props) => {\r\n-const [state, setState] = React.useState({isDataLoaded: true, menuLink: null, hasFile: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n-});\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n-});\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712915431809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const AdobePDFViewer = (url) => {\r\n const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n , hasFile: url\r\n });\r\n+console.log(url)\r\n // useEffect(() => {\r\n // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n // .catch(error => alert(error.message))\r\n"
                },
                {
                    "date": 1712915455247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React/*, { useEffect } */from 'react';\r\n // import axios from 'axios';\r\n import CircularProgress from '@material-ui/core/CircularProgress';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (url) => {\r\n+const AdobePDFViewer = ({url}) => {\r\n const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n , hasFile: url\r\n });\r\n console.log(url)\r\n"
                },
                {
                    "date": 1712916483740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React/*, { useEffect } */from 'react';\r\n // import axios from 'axios';\r\n import CircularProgress from '@material-ui/core/CircularProgress';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url}) => {\r\n+const AdobePDFViewer = ({url,fileNames}) => {\r\n const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n , hasFile: url\r\n });\r\n console.log(url)\r\n@@ -15,9 +15,9 @@\n const loadPDF = () => {\r\n const viewSDKClient = new ViewSDKClient();\r\n viewSDKClient.ready().then(() => {\r\n viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,fileName);\r\n });\r\n }\r\n return (\r\n <div style={{height:\"100vh\"}}>\r\n"
                },
                {
                    "date": 1712916591840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = ({url,fileName}) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+console.log(url)\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,fileName);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+</>\r\n+:\r\n+<div style={{height:\"100vh\"}}>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp' >\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712916651828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+console.log(url)\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data.name);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+</>\r\n+:\r\n+<div style={{height:\"100vh\"}}>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp' >\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712917368749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n const loadPDF = () => {\r\n const viewSDKClient = new ViewSDKClient();\r\n viewSDKClient.ready().then(() => {\r\n viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data.name);\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n });\r\n }\r\n return (\r\n <div style={{height:\"100vh\"}}>\r\n@@ -42,97 +42,5 @@\n }\r\n </div>\r\n );\r\n }\r\n-export default AdobePDFViewer;\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url,fileName}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,fileName);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url,fileNames}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,fileName);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713158202303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React, { useEffect, useState } from 'react';\r\n+\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+  const [view, setView] = useState(null);\r\n+  const urlToPDF =\r\n+  url;\r\n+  const fileID = data.id; // The fileID binds the annotations to the document\r\n+  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+\r\n+  const viewerOptions = {\r\n+    embedMode: 'FULL_WINDOW',\r\n+    defaultViewMode: 'FIT_PAGE',\r\n+    showDownloadPDF: true,\r\n+    showPrintPDF: true,\r\n+    showLeftHandPanel: false,\r\n+    showAnnotationTools: true,\r\n+    enableAnnotationAPIs: true,\r\n+  };\r\n+\r\n+  const annotationManagerConfig = {\r\n+    showToolbar: true,\r\n+    showCommentsPanel: true,\r\n+    downloadWithAnnotations: true,\r\n+    printWithAnnotations: true,\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const adobeDCViewPromise = new Promise((resolve) => {\r\n+      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n+        const embeddedView = new AdobeDC.View({\r\n+          clientId: clientID,\r\n+          divId: 'adobe-dc-view',\r\n+        });\r\n+        resolve(embeddedView);\r\n+      });\r\n+    });\r\n+\r\n+    adobeDCViewPromise.then((embeddedView) => {\r\n+      setView(embeddedView);\r\n+    });\r\n+\r\n+    // Clean up event listener\r\n+    return () => {\r\n+      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n+    };\r\n+  }, [clientID]);\r\n+\r\n+  useEffect(() => {\r\n+    if (view) {\r\n+      fetch(urlToPDF)\r\n+        .then((res) => res.blob())\r\n+        .then((blob) => {\r\n+          const previewPromise = view.previewFile(\r\n+            {\r\n+              // The file content\r\n+              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+              metaData: {\r\n+                fileName: urlToPDF.split('/').slice(-1)[0],\r\n+                id: fileID,\r\n+              },\r\n+            },\r\n+            viewerOptions\r\n+          );\r\n+          createAnnotationManager(previewPromise);\r\n+        });\r\n+    }\r\n+  }, [view, urlToPDF, fileID]);\r\n+\r\n+  function createAnnotationManager(previewPromise) {\r\n+    previewPromise.then((adobeView) => {\r\n+      adobeView.getAnnotationManager().then((annotationManager) => {\r\n+        annotationManager.setConfig(annotationManagerConfig);\r\n+        addAnnotations(annotationManager);\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function addAnnotations(annotationManager) {\r\n+    const annotationURLs = [\r\n+      'https://assets.codepen.io/4479906/underline.json',\r\n+      'https://assets.codepen.io/4479906/highlight.json',\r\n+      'https://assets.codepen.io/4479906/scribble.json',\r\n+    ];\r\n+\r\n+    annotationURLs.forEach((annotURL) => {\r\n+      fetch(annotURL)\r\n+        .then((response) => response.json())\r\n+        .then((json) => {\r\n+          annotationManager.addAnnotations([json]);\r\n+        });\r\n+    });\r\n+  }\r\n+\r\n+  return (\r\n+    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '100vh' }}>\r\n+      {/* AdobeDC View will be rendered here */}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdobePDFViewer;\r\n"
                },
                {
                    "date": 1713158323007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React, { useEffect, useState } from 'react';\r\n+import { AdobeDCView } from '@adobe/dc-view-sdk';\r\n+\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+  const [view, setView] = useState(null);\r\n+  const urlToPDF =\r\n+  url;\r\n+  const fileID = data.id; // The fileID binds the annotations to the document\r\n+  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+\r\n+  const viewerOptions = {\r\n+    embedMode: 'FULL_WINDOW',\r\n+    defaultViewMode: 'FIT_PAGE',\r\n+    showDownloadPDF: true,\r\n+    showPrintPDF: true,\r\n+    showLeftHandPanel: false,\r\n+    showAnnotationTools: true,\r\n+    enableAnnotationAPIs: true,\r\n+  };\r\n+\r\n+  const annotationManagerConfig = {\r\n+    showToolbar: true,\r\n+    showCommentsPanel: true,\r\n+    downloadWithAnnotations: true,\r\n+    printWithAnnotations: true,\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const adobeDCViewPromise = new Promise((resolve) => {\r\n+      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n+        const embeddedView = new AdobeDC.View({\r\n+          clientId: clientID,\r\n+          divId: 'adobe-dc-view',\r\n+        });\r\n+        resolve(embeddedView);\r\n+      });\r\n+    });\r\n+\r\n+    adobeDCViewPromise.then((embeddedView) => {\r\n+      setView(embeddedView);\r\n+    });\r\n+\r\n+    // Clean up event listener\r\n+    return () => {\r\n+      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n+    };\r\n+  }, [clientID]);\r\n+\r\n+  useEffect(() => {\r\n+    if (view) {\r\n+      fetch(urlToPDF)\r\n+        .then((res) => res.blob())\r\n+        .then((blob) => {\r\n+          const previewPromise = view.previewFile(\r\n+            {\r\n+              // The file content\r\n+              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+              metaData: {\r\n+                fileName: urlToPDF.split('/').slice(-1)[0],\r\n+                id: fileID,\r\n+              },\r\n+            },\r\n+            viewerOptions\r\n+          );\r\n+          createAnnotationManager(previewPromise);\r\n+        });\r\n+    }\r\n+  }, [view, urlToPDF, fileID]);\r\n+\r\n+  function createAnnotationManager(previewPromise) {\r\n+    previewPromise.then((adobeView) => {\r\n+      adobeView.getAnnotationManager().then((annotationManager) => {\r\n+        annotationManager.setConfig(annotationManagerConfig);\r\n+        addAnnotations(annotationManager);\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function addAnnotations(annotationManager) {\r\n+    const annotationURLs = [\r\n+      'https://assets.codepen.io/4479906/underline.json',\r\n+      'https://assets.codepen.io/4479906/highlight.json',\r\n+      'https://assets.codepen.io/4479906/scribble.json',\r\n+    ];\r\n+\r\n+    annotationURLs.forEach((annotURL) => {\r\n+      fetch(annotURL)\r\n+        .then((response) => response.json())\r\n+        .then((json) => {\r\n+          annotationManager.addAnnotations([json]);\r\n+        });\r\n+    });\r\n+  }\r\n+\r\n+  return (\r\n+    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '100vh' }}>\r\n+      {/* AdobeDC View will be rendered here */}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdobePDFViewer;\r\n"
                },
                {
                    "date": 1713158351451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,14 +44,15 @@\n // );\r\n // }\r\n // export default AdobePDFViewer;\r\n import React, { useEffect, useState } from 'react';\r\n+\r\n+// Import AdobeDC namespace from Adobe Document Cloud View SDK\r\n import { AdobeDCView } from '@adobe/dc-view-sdk';\r\n \r\n-const AdobePDFViewer = ({url,data}) => {\r\n+const AdobePDFViewer = ({ url, data }) => {\r\n   const [view, setView] = useState(null);\r\n-  const urlToPDF =\r\n-  url;\r\n+  const urlToPDF = url;\r\n   const fileID = data.id; // The fileID binds the annotations to the document\r\n   const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n \r\n   const viewerOptions = {\r\n@@ -73,9 +74,9 @@\n \r\n   useEffect(() => {\r\n     const adobeDCViewPromise = new Promise((resolve) => {\r\n       document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n-        const embeddedView = new AdobeDC.View({\r\n+        const embeddedView = new AdobeDCView({\r\n           clientId: clientID,\r\n           divId: 'adobe-dc-view',\r\n         });\r\n         resolve(embeddedView);\r\n@@ -145,197 +146,4 @@\n   );\r\n };\r\n \r\n export default AdobePDFViewer;\r\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React, { useEffect, useState } from 'react';\r\n-\r\n-const AdobePDFViewer = ({url,data}) => {\r\n-  const [view, setView] = useState(null);\r\n-  const urlToPDF =\r\n-  url;\r\n-  const fileID = data.id; // The fileID binds the annotations to the document\r\n-  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n-\r\n-  const viewerOptions = {\r\n-    embedMode: 'FULL_WINDOW',\r\n-    defaultViewMode: 'FIT_PAGE',\r\n-    showDownloadPDF: true,\r\n-    showPrintPDF: true,\r\n-    showLeftHandPanel: false,\r\n-    showAnnotationTools: true,\r\n-    enableAnnotationAPIs: true,\r\n-  };\r\n-\r\n-  const annotationManagerConfig = {\r\n-    showToolbar: true,\r\n-    showCommentsPanel: true,\r\n-    downloadWithAnnotations: true,\r\n-    printWithAnnotations: true,\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const adobeDCViewPromise = new Promise((resolve) => {\r\n-      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n-        const embeddedView = new AdobeDC.View({\r\n-          clientId: clientID,\r\n-          divId: 'adobe-dc-view',\r\n-        });\r\n-        resolve(embeddedView);\r\n-      });\r\n-    });\r\n-\r\n-    adobeDCViewPromise.then((embeddedView) => {\r\n-      setView(embeddedView);\r\n-    });\r\n-\r\n-    // Clean up event listener\r\n-    return () => {\r\n-      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n-    };\r\n-  }, [clientID]);\r\n-\r\n-  useEffect(() => {\r\n-    if (view) {\r\n-      fetch(urlToPDF)\r\n-        .then((res) => res.blob())\r\n-        .then((blob) => {\r\n-          const previewPromise = view.previewFile(\r\n-            {\r\n-              // The file content\r\n-              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-              metaData: {\r\n-                fileName: urlToPDF.split('/').slice(-1)[0],\r\n-                id: fileID,\r\n-              },\r\n-            },\r\n-            viewerOptions\r\n-          );\r\n-          createAnnotationManager(previewPromise);\r\n-        });\r\n-    }\r\n-  }, [view, urlToPDF, fileID]);\r\n-\r\n-  function createAnnotationManager(previewPromise) {\r\n-    previewPromise.then((adobeView) => {\r\n-      adobeView.getAnnotationManager().then((annotationManager) => {\r\n-        annotationManager.setConfig(annotationManagerConfig);\r\n-        addAnnotations(annotationManager);\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  function addAnnotations(annotationManager) {\r\n-    const annotationURLs = [\r\n-      'https://assets.codepen.io/4479906/underline.json',\r\n-      'https://assets.codepen.io/4479906/highlight.json',\r\n-      'https://assets.codepen.io/4479906/scribble.json',\r\n-    ];\r\n-\r\n-    annotationURLs.forEach((annotURL) => {\r\n-      fetch(annotURL)\r\n-        .then((response) => response.json())\r\n-        .then((json) => {\r\n-          annotationManager.addAnnotations([json]);\r\n-        });\r\n-    });\r\n-  }\r\n-\r\n-  return (\r\n-    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '100vh' }}>\r\n-      {/* AdobeDC View will be rendered here */}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdobePDFViewer;\r\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url,data}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713158788671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,107 +43,97 @@\n // </div>\r\n // );\r\n // }\r\n // export default AdobePDFViewer;\r\n-import React, { useEffect, useState } from 'react';\r\n+const urlToPDF =\r\n+  \"https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf\";\r\n+const fileID = \"3A5E36C8AA950DCDEBFBFE46FFCDE0A6\"; // The fileID binds the annotations to the document\r\n+const clientID = \"e800d12fc12c4d60960778b2bc4370af\";\r\n \r\n-// Import AdobeDC namespace from Adobe Document Cloud View SDK\r\n-import { AdobeDCView } from '@adobe/dc-view-sdk';\r\n+const viewerOptions = {\r\n+  embedMode: \"FULL_WINDOW\",\r\n+  defaultViewMode: \"FIT_PAGE\",\r\n+  showDownloadPDF: true,\r\n+  showPrintPDF: true,\r\n+  showLeftHandPanel: false,\r\n+  showAnnotationTools: true,\r\n+  enableAnnotationAPIs: true\r\n+};\r\n \r\n-const AdobePDFViewer = ({ url, data }) => {\r\n-  const [view, setView] = useState(null);\r\n-  const urlToPDF = url;\r\n-  const fileID = data.id; // The fileID binds the annotations to the document\r\n-  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+const annotationManagerConfig = {\r\n+  showToolbar: true,\r\n+  showCommentsPanel: true,\r\n+  downloadWithAnnotations: true,\r\n+  printWithAnnotations: true\r\n+};\r\n \r\n-  const viewerOptions = {\r\n-    embedMode: 'FULL_WINDOW',\r\n-    defaultViewMode: 'FIT_PAGE',\r\n-    showDownloadPDF: true,\r\n-    showPrintPDF: true,\r\n-    showLeftHandPanel: false,\r\n-    showAnnotationTools: true,\r\n-    enableAnnotationAPIs: true,\r\n-  };\r\n-\r\n-  const annotationManagerConfig = {\r\n-    showToolbar: true,\r\n-    showCommentsPanel: true,\r\n-    downloadWithAnnotations: true,\r\n-    printWithAnnotations: true,\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const adobeDCViewPromise = new Promise((resolve) => {\r\n-      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n-        const embeddedView = new AdobeDCView({\r\n-          clientId: clientID,\r\n-          divId: 'adobe-dc-view',\r\n-        });\r\n-        resolve(embeddedView);\r\n-      });\r\n+function previewPDF(view, pdfURL) {\r\n+  fetch(pdfURL)\r\n+    .then((res) => res.blob())\r\n+    .then((blob) => {\r\n+      var previewPromise = view.previewFile(\r\n+        {\r\n+          // The file content\r\n+          content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+          metaData: {\r\n+            fileName: pdfURL.split(\"/\").slice(-1)[0],\r\n+            id: fileID\r\n+          }\r\n+        },\r\n+        viewerOptions\r\n+      );\r\n+      createAnnotationManager(previewPromise);\r\n     });\r\n+}\r\n \r\n-    adobeDCViewPromise.then((embeddedView) => {\r\n-      setView(embeddedView);\r\n+function createAnnotationManager(previewPromise) {\r\n+  previewPromise.then((view) => {\r\n+    view.getAnnotationManager().then((annotationManager) => {\r\n+      annotationManager.setConfig(annotationManagerConfig);\r\n+      addAnnotations(annotationManager);\r\n     });\r\n+  });\r\n+}\r\n \r\n-    // Clean up event listener\r\n-    return () => {\r\n-      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n-    };\r\n-  }, [clientID]);\r\n+/*\r\n+        In practice you would replace this function with code that would retrieve the annotations for the document.\r\n+        */\r\n+function addAnnotations(annotationManager) {\r\n+  var annotationURLs = [\r\n+    \"https://assets.codepen.io/4479906/underline.json\",\r\n+    \"https://assets.codepen.io/4479906/highlight.json\",\r\n+    \"https://assets.codepen.io/4479906/scribble.json\"\r\n+  ];\r\n+  for (i = 0; i < annotationURLs.length; i++) {\r\n+    var annotURL = annotationURLs[i];\r\n+    fetch(annotURL)\r\n+      .then((response) => response.json())\r\n+      .then((json) => {\r\n+        annotationManager.addAnnotations([json]);\r\n+      });\r\n+  }\r\n+}\r\n \r\n-  useEffect(() => {\r\n-    if (view) {\r\n-      fetch(urlToPDF)\r\n-        .then((res) => res.blob())\r\n-        .then((blob) => {\r\n-          const previewPromise = view.previewFile(\r\n-            {\r\n-              // The file content\r\n-              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-              metaData: {\r\n-                fileName: urlToPDF.split('/').slice(-1)[0],\r\n-                id: fileID,\r\n-              },\r\n-            },\r\n-            viewerOptions\r\n-          );\r\n-          createAnnotationManager(previewPromise);\r\n-        });\r\n-    }\r\n-  }, [view, urlToPDF, fileID]);\r\n+document.addEventListener(\"adobe_dc_view_sdk.ready\", function () {\r\n+  var embeddedView = new AdobeDC.View({\r\n+    clientId: clientID,\r\n+    divId: \"embeddedView\"\r\n+  });\r\n+  previewPDF(embeddedView, urlToPDF, fileID);\r\n+});\r\n \r\n-  function createAnnotationManager(previewPromise) {\r\n-    previewPromise.then((adobeView) => {\r\n-      adobeView.getAnnotationManager().then((annotationManager) => {\r\n-        annotationManager.setConfig(annotationManagerConfig);\r\n-        addAnnotations(annotationManager);\r\n-      });\r\n-    });\r\n+// Add arrayBuffer if necessary i.e. Safari\r\n+(function () {\r\n+  if (Blob.arrayBuffer != \"function\") {\r\n+    Blob.prototype.arrayBuffer = myArrayBuffer;\r\n   }\r\n \r\n-  function addAnnotations(annotationManager) {\r\n-    const annotationURLs = [\r\n-      'https://assets.codepen.io/4479906/underline.json',\r\n-      'https://assets.codepen.io/4479906/highlight.json',\r\n-      'https://assets.codepen.io/4479906/scribble.json',\r\n-    ];\r\n-\r\n-    annotationURLs.forEach((annotURL) => {\r\n-      fetch(annotURL)\r\n-        .then((response) => response.json())\r\n-        .then((json) => {\r\n-          annotationManager.addAnnotations([json]);\r\n-        });\r\n+  function myArrayBuffer() {\r\n+    return new Promise((resolve) => {\r\n+      let fileReader = new FileReader();\r\n+      fileReader.onload = () => {\r\n+        resolve(fileReader.result);\r\n+      };\r\n+      fileReader.readAsArrayBuffer(this);\r\n     });\r\n   }\r\n-\r\n-  return (\r\n-    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '100vh' }}>\r\n-      {/* AdobeDC View will be rendered here */}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdobePDFViewer;\r\n+})();\r\n"
                },
                {
                    "date": 1713159534570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+console.log(url)\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+</>\r\n+:\r\n+<div style={{height:\"100vh\"}}>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp' >\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713160033721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,147 @@\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n\\ No newline at end of file\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React, { useEffect } from 'react';\r\n+\r\n const AdobePDFViewer = ({url,data}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n+  const urlToPDF =\r\n+  url;\r\n+  const fileID = data.id;\r\n+  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+\r\n+  const viewerOptions = {\r\n+    embedMode: 'FULL_WINDOW',\r\n+    defaultViewMode: 'FIT_PAGE',\r\n+    showDownloadPDF: true,\r\n+    showPrintPDF: true,\r\n+    showLeftHandPanel: false,\r\n+    showAnnotationTools: true,\r\n+    enableAnnotationAPIs: true,\r\n+  };\r\n+\r\n+  const annotationManagerConfig = {\r\n+    showToolbar: true,\r\n+    showCommentsPanel: true,\r\n+    downloadWithAnnotations: true,\r\n+    printWithAnnotations: true,\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const previewPDF = (view, pdfURL) => {\r\n+      fetch(pdfURL)\r\n+        .then((res) => res.blob())\r\n+        .then((blob) => {\r\n+          var previewPromise = view.previewFile(\r\n+            {\r\n+              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+              metaData: {\r\n+                fileName: pdfURL.split('/').slice(-1)[0],\r\n+                id: fileID,\r\n+              },\r\n+            },\r\n+            viewerOptions\r\n+          );\r\n+          createAnnotationManager(previewPromise);\r\n+        });\r\n+    };\r\n+\r\n+    const createAnnotationManager = (previewPromise) => {\r\n+      previewPromise.then((view) => {\r\n+        view.getAnnotationManager().then((annotationManager) => {\r\n+          annotationManager.setConfig(annotationManagerConfig);\r\n+          addAnnotations(annotationManager);\r\n+        });\r\n+      });\r\n+    };\r\n+\r\n+    const addAnnotations = (annotationManager) => {\r\n+      var annotationURLs = [\r\n+        'https://assets.codepen.io/4479906/underline.json',\r\n+        'https://assets.codepen.io/4479906/highlight.json',\r\n+        'https://assets.codepen.io/4479906/scribble.json',\r\n+      ];\r\n+      for (let i = 0; i < annotationURLs.length; i++) {\r\n+        var annotURL = annotationURLs[i];\r\n+        fetch(annotURL)\r\n+          .then((response) => response.json())\r\n+          .then((json) => {\r\n+            annotationManager.addAnnotations([json]);\r\n+          });\r\n+      }\r\n+    };\r\n+\r\n+    const onAdobeDCViewSDKReady = () => {\r\n+      const embeddedView = new window.AdobeDC.View({\r\n+        clientId: clientID,\r\n+        divId: 'embeddedView',\r\n+      });\r\n+      previewPDF(embeddedView, urlToPDF, fileID);\r\n+    };\r\n+\r\n+    document.addEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n+\r\n+    return () => {\r\n+      document.removeEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Add arrayBuffer if necessary i.e. Safari\r\n+  if (!Blob.prototype.arrayBuffer) {\r\n+    Blob.prototype.arrayBuffer = function () {\r\n+      return new Promise((resolve) => {\r\n+        let fileReader = new FileReader();\r\n+        fileReader.onload = () => {\r\n+          resolve(fileReader.result);\r\n+        };\r\n+        fileReader.readAsArrayBuffer(this);\r\n+      });\r\n+    };\r\n+  }\r\n+\r\n+  return <div id=\"embeddedView\" />;\r\n+};\r\n+\r\n+export default AdobePDFViewer;\r\n"
                }
            ],
            "date": 1712911726583,
            "name": "Commit-0",
            "content": "import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ViewSDKClient from './ViewSDKClient.js';\r\nconst AdobePDFViewer = (props) => {\r\nconst [state, setState] = React.useState({isDataLoaded: false, menuLink: null, hasFile: false});\r\nuseEffect(() => {\r\naxios.get(`https://apnaorganicstore.in/canjobs/get_menu`)\r\n.then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n.catch(error => alert(error.message))\r\n}, []);\r\nconst loadPDF = () => {\r\nconst viewSDKClient = new ViewSDKClient();\r\nviewSDKClient.ready().then(() => {\r\nviewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\nshowDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n});\r\n}\r\nreturn (\r\n<div >\r\n{\r\nstate.isDataLoaded ?\r\n<div>\r\n{\r\nstate.hasFile ?\r\n<>\r\n<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n</>\r\n:\r\n<div>\r\n<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n</div>\r\n}\r\n</div>\r\n:\r\n<div className='cp'>\r\n<CircularProgress  style={{color: '#ffc107'}} />\r\n</div>\r\n}\r\n</div>\r\n);\r\n}\r\nexport default AdobePDFViewer;"
        }
    ]
}