{
    "sourceFile": "src/components/common/Adobe/adobeFile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1712911726583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712912701461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import React, { useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (props) => {\r\n+const [state, setState] = React.useState({isDataLoaded: false, menuLink: null, hasFile: false});\r\n+useEffect(() => {\r\n+axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+.then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+.catch(error => alert(error.message))\r\n+}, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div >\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712912917151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,57 +2,15 @@\n import axios from 'axios';\r\n import CircularProgress from '@material-ui/core/CircularProgress';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n const AdobePDFViewer = (props) => {\r\n-const [state, setState] = React.useState({isDataLoaded: false, menuLink: null, hasFile: false});\r\n-useEffect(() => {\r\n-axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-.then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-.catch(error => alert(error.message))\r\n-}, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+const [state, setState] = React.useState({isDataLoaded: true, menuLink: null, hasFile: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n });\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React, { useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (props) => {\r\n-const [state, setState] = React.useState({isDataLoaded: false, menuLink: null, hasFile: false});\r\n-useEffect(() => {\r\n-axios.get(`https://apnaorganicstore.in/canjobs/get_menu`)\r\n-.then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-.catch(error => alert(error.message))\r\n-}, []);\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n const loadPDF = () => {\r\n const viewSDKClient = new ViewSDKClient();\r\n viewSDKClient.ready().then(() => {\r\n viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n"
                },
                {
                    "date": 1712912960883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import React, { useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (props) => {\r\n+const [state, setState] = React.useState({isDataLoaded: true, menuLink: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n+, hasFile: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n+});\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div >\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914363781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import React, { useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (url) => {\r\n+const [state, setState] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div >\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914449935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (url) => {\r\n+const [state, setState] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div >\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914743262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = (url) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+</>\r\n+:\r\n+<div>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp'>\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914829566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,204 +21,25 @@\n return (\r\n <div style={{height:\"100vh\"}}>\r\n {\r\n state.isDataLoaded ?\r\n-<div>\r\n+<div style={{height:\"100vh\"}}>\r\n {\r\n state.hasFile ?\r\n <>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n </>\r\n :\r\n-<div>\r\n+<div style={{height:\"100vh\"}}>\r\n <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n </div>\r\n }\r\n </div>\r\n :\r\n-<div className='cp'>\r\n+<div className='cp' >\r\n <CircularProgress  style={{color: '#ffc107'}} />\r\n </div>\r\n }\r\n </div>\r\n );\r\n }\r\n-export default AdobePDFViewer;\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (url) => {\r\n-const [state, setState] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n-});\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React, { useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (url) => {\r\n-const [state, setState] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n-});\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React, { useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (props) => {\r\n-const [state, setState] = React.useState({isDataLoaded: true, menuLink: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n-, hasFile: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n-});\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n-});\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React, { useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (props) => {\r\n-const [state, setState] = React.useState({isDataLoaded: true, menuLink: null, hasFile: \"https://canpathways.sharepoint.com/sites/canpathwaysjobs/_layouts/15/download.aspx?UniqueId=5cafd933-c0a4-4ae7-bcec-100489663e38&Translate=false&tempauth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBfZGlzcGxheW5hbWUiOiJHcmFwaCBQSFAgcXVpY2sgc3RhcnQiLCJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvY2FucGF0aHdheXMuc2hhcmVwb2ludC5jb21ANDYzOTJiN2QtM2ZhNy00Y2M4LWI5ZGQtYjA1YTFkZjllNzQ1IiwiY2lkIjoiWG5vSnAvQUdMMGlpOGtGQzMra2FJUT09IiwiZW5kcG9pbnR1cmwiOiI1WHYwU2gwRmlNbXFMUlZURTltU1JvdzRGb1JCcXZ0c3h5L2NIQzFyU2dJPSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTQ0IiwiZXhwIjoiMTcxMjkxNjQ3NyIsImlwYWRkciI6IjIwLjE5MC4xNzUuMjQiLCJpc2xvb3BiYWNrIjoiVHJ1ZSIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5hbWVpZCI6ImQxMDFjOGFkLWUyNjMtNGMwYS04ZGIzLTNiYTJhZDFmOGVhNkA0NjM5MmI3ZC0zZmE3LTRjYzgtYjlkZC1iMDVhMWRmOWU3NDUiLCJuYmYiOiIxNzEyOTEyODc3Iiwicm9sZXMiOiJhbGxzaXRlcy53cml0ZSBhbGxmaWxlcy53cml0ZSBhbGxmaWxlcy5yZWFkIGFsbHNpdGVzLmZ1bGxjb250cm9sIiwic2l0ZWlkIjoiWXprNE1UUTRPRGt0TkRaaU1TMDBOVFU0TFRsbVlUa3ROamMxTWpZeVpUVXlZV0ZrIiwidHQiOiIxIiwidmVyIjoiaGFzaGVkcHJvb2Z0b2tlbiJ9.T5hgIT_wvuv7PjXpZj3pplY82M5tfB9UIQC_LxQydSQ&ApiVersion=2.0\"\r\n-});\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n-});\r\n-}\r\n-return (\r\n-<div >\r\n-{\r\n-state.isDataLoaded ?\r\n-<div>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n-</>\r\n-:\r\n-<div>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp'>\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712915431809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const AdobePDFViewer = (url) => {\r\n const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n , hasFile: url\r\n });\r\n+console.log(url)\r\n // useEffect(() => {\r\n // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n // .catch(error => alert(error.message))\r\n"
                },
                {
                    "date": 1712915455247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React/*, { useEffect } */from 'react';\r\n // import axios from 'axios';\r\n import CircularProgress from '@material-ui/core/CircularProgress';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = (url) => {\r\n+const AdobePDFViewer = ({url}) => {\r\n const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n , hasFile: url\r\n });\r\n console.log(url)\r\n"
                },
                {
                    "date": 1712916483740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React/*, { useEffect } */from 'react';\r\n // import axios from 'axios';\r\n import CircularProgress from '@material-ui/core/CircularProgress';\r\n import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url}) => {\r\n+const AdobePDFViewer = ({url,fileNames}) => {\r\n const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n , hasFile: url\r\n });\r\n console.log(url)\r\n@@ -15,9 +15,9 @@\n const loadPDF = () => {\r\n const viewSDKClient = new ViewSDKClient();\r\n viewSDKClient.ready().then(() => {\r\n viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,fileName);\r\n });\r\n }\r\n return (\r\n <div style={{height:\"100vh\"}}>\r\n"
                },
                {
                    "date": 1712916591840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = ({url,fileName}) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+console.log(url)\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,fileName);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+</>\r\n+:\r\n+<div style={{height:\"100vh\"}}>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp' >\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712916651828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+console.log(url)\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data.name);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+</>\r\n+:\r\n+<div style={{height:\"100vh\"}}>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp' >\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712917368749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n const loadPDF = () => {\r\n const viewSDKClient = new ViewSDKClient();\r\n viewSDKClient.ready().then(() => {\r\n viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data.name);\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n });\r\n }\r\n return (\r\n <div style={{height:\"100vh\"}}>\r\n@@ -42,97 +42,5 @@\n }\r\n </div>\r\n );\r\n }\r\n-export default AdobePDFViewer;\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url,fileName}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,fileName);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url,fileNames}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,fileName);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713158202303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React, { useEffect, useState } from 'react';\r\n+\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+  const [view, setView] = useState(null);\r\n+  const urlToPDF =\r\n+  url;\r\n+  const fileID = data.id; // The fileID binds the annotations to the document\r\n+  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+\r\n+  const viewerOptions = {\r\n+    embedMode: 'FULL_WINDOW',\r\n+    defaultViewMode: 'FIT_PAGE',\r\n+    showDownloadPDF: true,\r\n+    showPrintPDF: true,\r\n+    showLeftHandPanel: false,\r\n+    showAnnotationTools: true,\r\n+    enableAnnotationAPIs: true,\r\n+  };\r\n+\r\n+  const annotationManagerConfig = {\r\n+    showToolbar: true,\r\n+    showCommentsPanel: true,\r\n+    downloadWithAnnotations: true,\r\n+    printWithAnnotations: true,\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const adobeDCViewPromise = new Promise((resolve) => {\r\n+      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n+        const embeddedView = new AdobeDC.View({\r\n+          clientId: clientID,\r\n+          divId: 'adobe-dc-view',\r\n+        });\r\n+        resolve(embeddedView);\r\n+      });\r\n+    });\r\n+\r\n+    adobeDCViewPromise.then((embeddedView) => {\r\n+      setView(embeddedView);\r\n+    });\r\n+\r\n+    // Clean up event listener\r\n+    return () => {\r\n+      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n+    };\r\n+  }, [clientID]);\r\n+\r\n+  useEffect(() => {\r\n+    if (view) {\r\n+      fetch(urlToPDF)\r\n+        .then((res) => res.blob())\r\n+        .then((blob) => {\r\n+          const previewPromise = view.previewFile(\r\n+            {\r\n+              // The file content\r\n+              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+              metaData: {\r\n+                fileName: urlToPDF.split('/').slice(-1)[0],\r\n+                id: fileID,\r\n+              },\r\n+            },\r\n+            viewerOptions\r\n+          );\r\n+          createAnnotationManager(previewPromise);\r\n+        });\r\n+    }\r\n+  }, [view, urlToPDF, fileID]);\r\n+\r\n+  function createAnnotationManager(previewPromise) {\r\n+    previewPromise.then((adobeView) => {\r\n+      adobeView.getAnnotationManager().then((annotationManager) => {\r\n+        annotationManager.setConfig(annotationManagerConfig);\r\n+        addAnnotations(annotationManager);\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function addAnnotations(annotationManager) {\r\n+    const annotationURLs = [\r\n+      'https://assets.codepen.io/4479906/underline.json',\r\n+      'https://assets.codepen.io/4479906/highlight.json',\r\n+      'https://assets.codepen.io/4479906/scribble.json',\r\n+    ];\r\n+\r\n+    annotationURLs.forEach((annotURL) => {\r\n+      fetch(annotURL)\r\n+        .then((response) => response.json())\r\n+        .then((json) => {\r\n+          annotationManager.addAnnotations([json]);\r\n+        });\r\n+    });\r\n+  }\r\n+\r\n+  return (\r\n+    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '100vh' }}>\r\n+      {/* AdobeDC View will be rendered here */}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdobePDFViewer;\r\n"
                },
                {
                    "date": 1713158323007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React, { useEffect, useState } from 'react';\r\n+import { AdobeDCView } from '@adobe/dc-view-sdk';\r\n+\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+  const [view, setView] = useState(null);\r\n+  const urlToPDF =\r\n+  url;\r\n+  const fileID = data.id; // The fileID binds the annotations to the document\r\n+  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+\r\n+  const viewerOptions = {\r\n+    embedMode: 'FULL_WINDOW',\r\n+    defaultViewMode: 'FIT_PAGE',\r\n+    showDownloadPDF: true,\r\n+    showPrintPDF: true,\r\n+    showLeftHandPanel: false,\r\n+    showAnnotationTools: true,\r\n+    enableAnnotationAPIs: true,\r\n+  };\r\n+\r\n+  const annotationManagerConfig = {\r\n+    showToolbar: true,\r\n+    showCommentsPanel: true,\r\n+    downloadWithAnnotations: true,\r\n+    printWithAnnotations: true,\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const adobeDCViewPromise = new Promise((resolve) => {\r\n+      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n+        const embeddedView = new AdobeDC.View({\r\n+          clientId: clientID,\r\n+          divId: 'adobe-dc-view',\r\n+        });\r\n+        resolve(embeddedView);\r\n+      });\r\n+    });\r\n+\r\n+    adobeDCViewPromise.then((embeddedView) => {\r\n+      setView(embeddedView);\r\n+    });\r\n+\r\n+    // Clean up event listener\r\n+    return () => {\r\n+      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n+    };\r\n+  }, [clientID]);\r\n+\r\n+  useEffect(() => {\r\n+    if (view) {\r\n+      fetch(urlToPDF)\r\n+        .then((res) => res.blob())\r\n+        .then((blob) => {\r\n+          const previewPromise = view.previewFile(\r\n+            {\r\n+              // The file content\r\n+              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+              metaData: {\r\n+                fileName: urlToPDF.split('/').slice(-1)[0],\r\n+                id: fileID,\r\n+              },\r\n+            },\r\n+            viewerOptions\r\n+          );\r\n+          createAnnotationManager(previewPromise);\r\n+        });\r\n+    }\r\n+  }, [view, urlToPDF, fileID]);\r\n+\r\n+  function createAnnotationManager(previewPromise) {\r\n+    previewPromise.then((adobeView) => {\r\n+      adobeView.getAnnotationManager().then((annotationManager) => {\r\n+        annotationManager.setConfig(annotationManagerConfig);\r\n+        addAnnotations(annotationManager);\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  function addAnnotations(annotationManager) {\r\n+    const annotationURLs = [\r\n+      'https://assets.codepen.io/4479906/underline.json',\r\n+      'https://assets.codepen.io/4479906/highlight.json',\r\n+      'https://assets.codepen.io/4479906/scribble.json',\r\n+    ];\r\n+\r\n+    annotationURLs.forEach((annotURL) => {\r\n+      fetch(annotURL)\r\n+        .then((response) => response.json())\r\n+        .then((json) => {\r\n+          annotationManager.addAnnotations([json]);\r\n+        });\r\n+    });\r\n+  }\r\n+\r\n+  return (\r\n+    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '100vh' }}>\r\n+      {/* AdobeDC View will be rendered here */}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdobePDFViewer;\r\n"
                },
                {
                    "date": 1713158351451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,14 +44,15 @@\n // );\r\n // }\r\n // export default AdobePDFViewer;\r\n import React, { useEffect, useState } from 'react';\r\n+\r\n+// Import AdobeDC namespace from Adobe Document Cloud View SDK\r\n import { AdobeDCView } from '@adobe/dc-view-sdk';\r\n \r\n-const AdobePDFViewer = ({url,data}) => {\r\n+const AdobePDFViewer = ({ url, data }) => {\r\n   const [view, setView] = useState(null);\r\n-  const urlToPDF =\r\n-  url;\r\n+  const urlToPDF = url;\r\n   const fileID = data.id; // The fileID binds the annotations to the document\r\n   const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n \r\n   const viewerOptions = {\r\n@@ -73,9 +74,9 @@\n \r\n   useEffect(() => {\r\n     const adobeDCViewPromise = new Promise((resolve) => {\r\n       document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n-        const embeddedView = new AdobeDC.View({\r\n+        const embeddedView = new AdobeDCView({\r\n           clientId: clientID,\r\n           divId: 'adobe-dc-view',\r\n         });\r\n         resolve(embeddedView);\r\n@@ -145,197 +146,4 @@\n   );\r\n };\r\n \r\n export default AdobePDFViewer;\r\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React, { useEffect, useState } from 'react';\r\n-\r\n-const AdobePDFViewer = ({url,data}) => {\r\n-  const [view, setView] = useState(null);\r\n-  const urlToPDF =\r\n-  url;\r\n-  const fileID = data.id; // The fileID binds the annotations to the document\r\n-  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n-\r\n-  const viewerOptions = {\r\n-    embedMode: 'FULL_WINDOW',\r\n-    defaultViewMode: 'FIT_PAGE',\r\n-    showDownloadPDF: true,\r\n-    showPrintPDF: true,\r\n-    showLeftHandPanel: false,\r\n-    showAnnotationTools: true,\r\n-    enableAnnotationAPIs: true,\r\n-  };\r\n-\r\n-  const annotationManagerConfig = {\r\n-    showToolbar: true,\r\n-    showCommentsPanel: true,\r\n-    downloadWithAnnotations: true,\r\n-    printWithAnnotations: true,\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const adobeDCViewPromise = new Promise((resolve) => {\r\n-      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n-        const embeddedView = new AdobeDC.View({\r\n-          clientId: clientID,\r\n-          divId: 'adobe-dc-view',\r\n-        });\r\n-        resolve(embeddedView);\r\n-      });\r\n-    });\r\n-\r\n-    adobeDCViewPromise.then((embeddedView) => {\r\n-      setView(embeddedView);\r\n-    });\r\n-\r\n-    // Clean up event listener\r\n-    return () => {\r\n-      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n-    };\r\n-  }, [clientID]);\r\n-\r\n-  useEffect(() => {\r\n-    if (view) {\r\n-      fetch(urlToPDF)\r\n-        .then((res) => res.blob())\r\n-        .then((blob) => {\r\n-          const previewPromise = view.previewFile(\r\n-            {\r\n-              // The file content\r\n-              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-              metaData: {\r\n-                fileName: urlToPDF.split('/').slice(-1)[0],\r\n-                id: fileID,\r\n-              },\r\n-            },\r\n-            viewerOptions\r\n-          );\r\n-          createAnnotationManager(previewPromise);\r\n-        });\r\n-    }\r\n-  }, [view, urlToPDF, fileID]);\r\n-\r\n-  function createAnnotationManager(previewPromise) {\r\n-    previewPromise.then((adobeView) => {\r\n-      adobeView.getAnnotationManager().then((annotationManager) => {\r\n-        annotationManager.setConfig(annotationManagerConfig);\r\n-        addAnnotations(annotationManager);\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  function addAnnotations(annotationManager) {\r\n-    const annotationURLs = [\r\n-      'https://assets.codepen.io/4479906/underline.json',\r\n-      'https://assets.codepen.io/4479906/highlight.json',\r\n-      'https://assets.codepen.io/4479906/scribble.json',\r\n-    ];\r\n-\r\n-    annotationURLs.forEach((annotURL) => {\r\n-      fetch(annotURL)\r\n-        .then((response) => response.json())\r\n-        .then((json) => {\r\n-          annotationManager.addAnnotations([json]);\r\n-        });\r\n-    });\r\n-  }\r\n-\r\n-  return (\r\n-    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '100vh' }}>\r\n-      {/* AdobeDC View will be rendered here */}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdobePDFViewer;\r\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url,data}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713158788671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,107 +43,97 @@\n // </div>\r\n // );\r\n // }\r\n // export default AdobePDFViewer;\r\n-import React, { useEffect, useState } from 'react';\r\n+const urlToPDF =\r\n+  \"https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf\";\r\n+const fileID = \"3A5E36C8AA950DCDEBFBFE46FFCDE0A6\"; // The fileID binds the annotations to the document\r\n+const clientID = \"e800d12fc12c4d60960778b2bc4370af\";\r\n \r\n-// Import AdobeDC namespace from Adobe Document Cloud View SDK\r\n-import { AdobeDCView } from '@adobe/dc-view-sdk';\r\n+const viewerOptions = {\r\n+  embedMode: \"FULL_WINDOW\",\r\n+  defaultViewMode: \"FIT_PAGE\",\r\n+  showDownloadPDF: true,\r\n+  showPrintPDF: true,\r\n+  showLeftHandPanel: false,\r\n+  showAnnotationTools: true,\r\n+  enableAnnotationAPIs: true\r\n+};\r\n \r\n-const AdobePDFViewer = ({ url, data }) => {\r\n-  const [view, setView] = useState(null);\r\n-  const urlToPDF = url;\r\n-  const fileID = data.id; // The fileID binds the annotations to the document\r\n-  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+const annotationManagerConfig = {\r\n+  showToolbar: true,\r\n+  showCommentsPanel: true,\r\n+  downloadWithAnnotations: true,\r\n+  printWithAnnotations: true\r\n+};\r\n \r\n-  const viewerOptions = {\r\n-    embedMode: 'FULL_WINDOW',\r\n-    defaultViewMode: 'FIT_PAGE',\r\n-    showDownloadPDF: true,\r\n-    showPrintPDF: true,\r\n-    showLeftHandPanel: false,\r\n-    showAnnotationTools: true,\r\n-    enableAnnotationAPIs: true,\r\n-  };\r\n-\r\n-  const annotationManagerConfig = {\r\n-    showToolbar: true,\r\n-    showCommentsPanel: true,\r\n-    downloadWithAnnotations: true,\r\n-    printWithAnnotations: true,\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const adobeDCViewPromise = new Promise((resolve) => {\r\n-      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n-        const embeddedView = new AdobeDCView({\r\n-          clientId: clientID,\r\n-          divId: 'adobe-dc-view',\r\n-        });\r\n-        resolve(embeddedView);\r\n-      });\r\n+function previewPDF(view, pdfURL) {\r\n+  fetch(pdfURL)\r\n+    .then((res) => res.blob())\r\n+    .then((blob) => {\r\n+      var previewPromise = view.previewFile(\r\n+        {\r\n+          // The file content\r\n+          content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+          metaData: {\r\n+            fileName: pdfURL.split(\"/\").slice(-1)[0],\r\n+            id: fileID\r\n+          }\r\n+        },\r\n+        viewerOptions\r\n+      );\r\n+      createAnnotationManager(previewPromise);\r\n     });\r\n+}\r\n \r\n-    adobeDCViewPromise.then((embeddedView) => {\r\n-      setView(embeddedView);\r\n+function createAnnotationManager(previewPromise) {\r\n+  previewPromise.then((view) => {\r\n+    view.getAnnotationManager().then((annotationManager) => {\r\n+      annotationManager.setConfig(annotationManagerConfig);\r\n+      addAnnotations(annotationManager);\r\n     });\r\n+  });\r\n+}\r\n \r\n-    // Clean up event listener\r\n-    return () => {\r\n-      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n-    };\r\n-  }, [clientID]);\r\n+/*\r\n+        In practice you would replace this function with code that would retrieve the annotations for the document.\r\n+        */\r\n+function addAnnotations(annotationManager) {\r\n+  var annotationURLs = [\r\n+    \"https://assets.codepen.io/4479906/underline.json\",\r\n+    \"https://assets.codepen.io/4479906/highlight.json\",\r\n+    \"https://assets.codepen.io/4479906/scribble.json\"\r\n+  ];\r\n+  for (i = 0; i < annotationURLs.length; i++) {\r\n+    var annotURL = annotationURLs[i];\r\n+    fetch(annotURL)\r\n+      .then((response) => response.json())\r\n+      .then((json) => {\r\n+        annotationManager.addAnnotations([json]);\r\n+      });\r\n+  }\r\n+}\r\n \r\n-  useEffect(() => {\r\n-    if (view) {\r\n-      fetch(urlToPDF)\r\n-        .then((res) => res.blob())\r\n-        .then((blob) => {\r\n-          const previewPromise = view.previewFile(\r\n-            {\r\n-              // The file content\r\n-              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-              metaData: {\r\n-                fileName: urlToPDF.split('/').slice(-1)[0],\r\n-                id: fileID,\r\n-              },\r\n-            },\r\n-            viewerOptions\r\n-          );\r\n-          createAnnotationManager(previewPromise);\r\n-        });\r\n-    }\r\n-  }, [view, urlToPDF, fileID]);\r\n+document.addEventListener(\"adobe_dc_view_sdk.ready\", function () {\r\n+  var embeddedView = new AdobeDC.View({\r\n+    clientId: clientID,\r\n+    divId: \"embeddedView\"\r\n+  });\r\n+  previewPDF(embeddedView, urlToPDF, fileID);\r\n+});\r\n \r\n-  function createAnnotationManager(previewPromise) {\r\n-    previewPromise.then((adobeView) => {\r\n-      adobeView.getAnnotationManager().then((annotationManager) => {\r\n-        annotationManager.setConfig(annotationManagerConfig);\r\n-        addAnnotations(annotationManager);\r\n-      });\r\n-    });\r\n+// Add arrayBuffer if necessary i.e. Safari\r\n+(function () {\r\n+  if (Blob.arrayBuffer != \"function\") {\r\n+    Blob.prototype.arrayBuffer = myArrayBuffer;\r\n   }\r\n \r\n-  function addAnnotations(annotationManager) {\r\n-    const annotationURLs = [\r\n-      'https://assets.codepen.io/4479906/underline.json',\r\n-      'https://assets.codepen.io/4479906/highlight.json',\r\n-      'https://assets.codepen.io/4479906/scribble.json',\r\n-    ];\r\n-\r\n-    annotationURLs.forEach((annotURL) => {\r\n-      fetch(annotURL)\r\n-        .then((response) => response.json())\r\n-        .then((json) => {\r\n-          annotationManager.addAnnotations([json]);\r\n-        });\r\n+  function myArrayBuffer() {\r\n+    return new Promise((resolve) => {\r\n+      let fileReader = new FileReader();\r\n+      fileReader.onload = () => {\r\n+        resolve(fileReader.result);\r\n+      };\r\n+      fileReader.readAsArrayBuffer(this);\r\n     });\r\n   }\r\n-\r\n-  return (\r\n-    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '100vh' }}>\r\n-      {/* AdobeDC View will be rendered here */}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdobePDFViewer;\r\n+})();\r\n"
                },
                {
                    "date": 1713159534570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+console.log(url)\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+</>\r\n+:\r\n+<div style={{height:\"100vh\"}}>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp' >\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713160033721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,147 @@\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n\\ No newline at end of file\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React, { useEffect } from 'react';\r\n+\r\n const AdobePDFViewer = ({url,data}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n+  const urlToPDF =\r\n+  url;\r\n+  const fileID = data.id;\r\n+  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+\r\n+  const viewerOptions = {\r\n+    embedMode: 'FULL_WINDOW',\r\n+    defaultViewMode: 'FIT_PAGE',\r\n+    showDownloadPDF: true,\r\n+    showPrintPDF: true,\r\n+    showLeftHandPanel: false,\r\n+    showAnnotationTools: true,\r\n+    enableAnnotationAPIs: true,\r\n+  };\r\n+\r\n+  const annotationManagerConfig = {\r\n+    showToolbar: true,\r\n+    showCommentsPanel: true,\r\n+    downloadWithAnnotations: true,\r\n+    printWithAnnotations: true,\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const previewPDF = (view, pdfURL) => {\r\n+      fetch(pdfURL)\r\n+        .then((res) => res.blob())\r\n+        .then((blob) => {\r\n+          var previewPromise = view.previewFile(\r\n+            {\r\n+              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+              metaData: {\r\n+                fileName: pdfURL.split('/').slice(-1)[0],\r\n+                id: fileID,\r\n+              },\r\n+            },\r\n+            viewerOptions\r\n+          );\r\n+          createAnnotationManager(previewPromise);\r\n+        });\r\n+    };\r\n+\r\n+    const createAnnotationManager = (previewPromise) => {\r\n+      previewPromise.then((view) => {\r\n+        view.getAnnotationManager().then((annotationManager) => {\r\n+          annotationManager.setConfig(annotationManagerConfig);\r\n+          addAnnotations(annotationManager);\r\n+        });\r\n+      });\r\n+    };\r\n+\r\n+    const addAnnotations = (annotationManager) => {\r\n+      var annotationURLs = [\r\n+        'https://assets.codepen.io/4479906/underline.json',\r\n+        'https://assets.codepen.io/4479906/highlight.json',\r\n+        'https://assets.codepen.io/4479906/scribble.json',\r\n+      ];\r\n+      for (let i = 0; i < annotationURLs.length; i++) {\r\n+        var annotURL = annotationURLs[i];\r\n+        fetch(annotURL)\r\n+          .then((response) => response.json())\r\n+          .then((json) => {\r\n+            annotationManager.addAnnotations([json]);\r\n+          });\r\n+      }\r\n+    };\r\n+\r\n+    const onAdobeDCViewSDKReady = () => {\r\n+      const embeddedView = new window.AdobeDC.View({\r\n+        clientId: clientID,\r\n+        divId: 'embeddedView',\r\n+      });\r\n+      previewPDF(embeddedView, urlToPDF, fileID);\r\n+    };\r\n+\r\n+    document.addEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n+\r\n+    return () => {\r\n+      document.removeEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Add arrayBuffer if necessary i.e. Safari\r\n+  if (!Blob.prototype.arrayBuffer) {\r\n+    Blob.prototype.arrayBuffer = function () {\r\n+      return new Promise((resolve) => {\r\n+        let fileReader = new FileReader();\r\n+        fileReader.onload = () => {\r\n+          resolve(fileReader.result);\r\n+        };\r\n+        fileReader.readAsArrayBuffer(this);\r\n+      });\r\n+    };\r\n+  }\r\n+\r\n+  return <div id=\"embeddedView\" />;\r\n+};\r\n+\r\n+export default AdobePDFViewer;\r\n"
                },
                {
                    "date": 1713160910000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React, { useEffect } from 'react';\r\n+\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+  const urlToPDF =\r\n+  url;\r\n+  const fileID = data.id;\r\n+  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n+console.log(urlToPDF,fileID)\r\n+  const viewerOptions = {\r\n+    embedMode: 'FULL_WINDOW',\r\n+    defaultViewMode: 'FIT_PAGE',\r\n+    showDownloadPDF: true,\r\n+    showPrintPDF: true,\r\n+    showLeftHandPanel: false,\r\n+    showAnnotationTools: true,\r\n+    enableAnnotationAPIs: true,\r\n+  };\r\n+\r\n+  const annotationManagerConfig = {\r\n+    showToolbar: true,\r\n+    showCommentsPanel: true,\r\n+    downloadWithAnnotations: true,\r\n+    printWithAnnotations: true,\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const previewPDF = (view, pdfURL) => {\r\n+      fetch(pdfURL)\r\n+        .then((res) => res.blob())\r\n+        .then((blob) => {\r\n+          var previewPromise = view.previewFile(\r\n+            {\r\n+              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+              metaData: {\r\n+                fileName: pdfURL.split('/').slice(-1)[0],\r\n+                id: fileID,\r\n+              },\r\n+            },\r\n+            viewerOptions\r\n+          );\r\n+          createAnnotationManager(previewPromise);\r\n+        });\r\n+    };\r\n+\r\n+    const createAnnotationManager = (previewPromise) => {\r\n+      previewPromise.then((view) => {\r\n+        view.getAnnotationManager().then((annotationManager) => {\r\n+          annotationManager.setConfig(annotationManagerConfig);\r\n+          addAnnotations(annotationManager);\r\n+        });\r\n+      });\r\n+    };\r\n+\r\n+    const addAnnotations = (annotationManager) => {\r\n+      var annotationURLs = [\r\n+        'https://assets.codepen.io/4479906/underline.json',\r\n+        'https://assets.codepen.io/4479906/highlight.json',\r\n+        'https://assets.codepen.io/4479906/scribble.json',\r\n+      ];\r\n+      for (let i = 0; i < annotationURLs.length; i++) {\r\n+        var annotURL = annotationURLs[i];\r\n+        fetch(annotURL)\r\n+          .then((response) => response.json())\r\n+          .then((json) => {\r\n+            annotationManager.addAnnotations([json]);\r\n+          });\r\n+      }\r\n+    };\r\n+\r\n+    const onAdobeDCViewSDKReady = () => {\r\n+      const embeddedView = new window.AdobeDC.View({\r\n+        clientId: clientID,\r\n+        divId: 'embeddedView',\r\n+      });\r\n+      previewPDF(embeddedView, urlToPDF, fileID);\r\n+    };\r\n+\r\n+    document.addEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n+\r\n+    return () => {\r\n+      document.removeEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Add arrayBuffer if necessary i.e. Safari\r\n+  if (!Blob.prototype.arrayBuffer) {\r\n+    Blob.prototype.arrayBuffer = function () {\r\n+      return new Promise((resolve) => {\r\n+        let fileReader = new FileReader();\r\n+        fileReader.onload = () => {\r\n+          resolve(fileReader.result);\r\n+        };\r\n+        fileReader.readAsArrayBuffer(this);\r\n+      });\r\n+    };\r\n+  }\r\n+\r\n+  return <div id=\"embeddedView\" />;\r\n+};\r\n+\r\n+export default AdobePDFViewer;\r\n"
                },
                {
                    "date": 1713162109164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import { useEffect, useRef } from \"react\";\r\n+\r\n+export default function AdobePDFViewer({url,data}) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current; // This `useRef` instance will render the PDF.\r\n+\r\n+    let PSPDFKit, instance;\r\n+    \r\n+    (async function () {\r\n+      PSPDFKit = await import(\"pspdfkit\")\r\n+\r\n+\t\tPSPDFKit.unload(container) // Ensure that there's only one PSPDFKit instance.\r\n+\r\n+      instance = await PSPDFKit.load({\r\n+        // Container where PSPDFKit should be mounted.\r\n+        container,\r\n+        // The document to open.\r\n+        document: url, \r\n+        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+        baseUrl: data.webUrl\r\n+      });\r\n+    })();\r\n+    \r\n+    return () => PSPDFKit && PSPDFKit.unload(container)\r\n+  }, []);\r\n+  \r\n+  // This div element will render the document to the DOM.\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713162204178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,11 +62,11 @@\n       instance = await PSPDFKit.load({\r\n         // Container where PSPDFKit should be mounted.\r\n         container,\r\n         // The document to open.\r\n-        document: url, \r\n+        document: data.name, \r\n         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-        baseUrl: data.webUrl\r\n+        baseUrl: url\r\n       });\r\n     })();\r\n     \r\n     return () => PSPDFKit && PSPDFKit.unload(container)\r\n"
                },
                {
                    "date": 1713162344923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n // </div>\r\n // );\r\n // }\r\n // export default AdobePDFViewer;\r\n-import { useEffect, useRef } from \"react\";\r\n+import React,{ useEffect, useRef } from \"react\";\r\n \r\n export default function AdobePDFViewer({url,data}) {\r\n   const containerRef = useRef(null);\r\n \r\n@@ -73,438 +73,5 @@\n   }, []);\r\n   \r\n   // This div element will render the document to the DOM.\r\n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n-}\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React, { useEffect } from 'react';\r\n-\r\n-const AdobePDFViewer = ({url,data}) => {\r\n-  const urlToPDF =\r\n-  url;\r\n-  const fileID = data.id;\r\n-  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n-console.log(urlToPDF,fileID)\r\n-  const viewerOptions = {\r\n-    embedMode: 'FULL_WINDOW',\r\n-    defaultViewMode: 'FIT_PAGE',\r\n-    showDownloadPDF: true,\r\n-    showPrintPDF: true,\r\n-    showLeftHandPanel: false,\r\n-    showAnnotationTools: true,\r\n-    enableAnnotationAPIs: true,\r\n-  };\r\n-\r\n-  const annotationManagerConfig = {\r\n-    showToolbar: true,\r\n-    showCommentsPanel: true,\r\n-    downloadWithAnnotations: true,\r\n-    printWithAnnotations: true,\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const previewPDF = (view, pdfURL) => {\r\n-      fetch(pdfURL)\r\n-        .then((res) => res.blob())\r\n-        .then((blob) => {\r\n-          var previewPromise = view.previewFile(\r\n-            {\r\n-              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-              metaData: {\r\n-                fileName: pdfURL.split('/').slice(-1)[0],\r\n-                id: fileID,\r\n-              },\r\n-            },\r\n-            viewerOptions\r\n-          );\r\n-          createAnnotationManager(previewPromise);\r\n-        });\r\n-    };\r\n-\r\n-    const createAnnotationManager = (previewPromise) => {\r\n-      previewPromise.then((view) => {\r\n-        view.getAnnotationManager().then((annotationManager) => {\r\n-          annotationManager.setConfig(annotationManagerConfig);\r\n-          addAnnotations(annotationManager);\r\n-        });\r\n-      });\r\n-    };\r\n-\r\n-    const addAnnotations = (annotationManager) => {\r\n-      var annotationURLs = [\r\n-        'https://assets.codepen.io/4479906/underline.json',\r\n-        'https://assets.codepen.io/4479906/highlight.json',\r\n-        'https://assets.codepen.io/4479906/scribble.json',\r\n-      ];\r\n-      for (let i = 0; i < annotationURLs.length; i++) {\r\n-        var annotURL = annotationURLs[i];\r\n-        fetch(annotURL)\r\n-          .then((response) => response.json())\r\n-          .then((json) => {\r\n-            annotationManager.addAnnotations([json]);\r\n-          });\r\n-      }\r\n-    };\r\n-\r\n-    const onAdobeDCViewSDKReady = () => {\r\n-      const embeddedView = new window.AdobeDC.View({\r\n-        clientId: clientID,\r\n-        divId: 'embeddedView',\r\n-      });\r\n-      previewPDF(embeddedView, urlToPDF, fileID);\r\n-    };\r\n-\r\n-    document.addEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n-\r\n-    return () => {\r\n-      document.removeEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Add arrayBuffer if necessary i.e. Safari\r\n-  if (!Blob.prototype.arrayBuffer) {\r\n-    Blob.prototype.arrayBuffer = function () {\r\n-      return new Promise((resolve) => {\r\n-        let fileReader = new FileReader();\r\n-        fileReader.onload = () => {\r\n-          resolve(fileReader.result);\r\n-        };\r\n-        fileReader.readAsArrayBuffer(this);\r\n-      });\r\n-    };\r\n-  }\r\n-\r\n-  return <div id=\"embeddedView\" />;\r\n-};\r\n-\r\n-export default AdobePDFViewer;\r\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React, { useEffect } from 'react';\r\n-\r\n-const AdobePDFViewer = ({url,data}) => {\r\n-  const urlToPDF =\r\n-  url;\r\n-  const fileID = data.id;\r\n-  const clientID = 'd9b36f468d7a4e4e8b275f13728f1132';\r\n-\r\n-  const viewerOptions = {\r\n-    embedMode: 'FULL_WINDOW',\r\n-    defaultViewMode: 'FIT_PAGE',\r\n-    showDownloadPDF: true,\r\n-    showPrintPDF: true,\r\n-    showLeftHandPanel: false,\r\n-    showAnnotationTools: true,\r\n-    enableAnnotationAPIs: true,\r\n-  };\r\n-\r\n-  const annotationManagerConfig = {\r\n-    showToolbar: true,\r\n-    showCommentsPanel: true,\r\n-    downloadWithAnnotations: true,\r\n-    printWithAnnotations: true,\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const previewPDF = (view, pdfURL) => {\r\n-      fetch(pdfURL)\r\n-        .then((res) => res.blob())\r\n-        .then((blob) => {\r\n-          var previewPromise = view.previewFile(\r\n-            {\r\n-              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-              metaData: {\r\n-                fileName: pdfURL.split('/').slice(-1)[0],\r\n-                id: fileID,\r\n-              },\r\n-            },\r\n-            viewerOptions\r\n-          );\r\n-          createAnnotationManager(previewPromise);\r\n-        });\r\n-    };\r\n-\r\n-    const createAnnotationManager = (previewPromise) => {\r\n-      previewPromise.then((view) => {\r\n-        view.getAnnotationManager().then((annotationManager) => {\r\n-          annotationManager.setConfig(annotationManagerConfig);\r\n-          addAnnotations(annotationManager);\r\n-        });\r\n-      });\r\n-    };\r\n-\r\n-    const addAnnotations = (annotationManager) => {\r\n-      var annotationURLs = [\r\n-        'https://assets.codepen.io/4479906/underline.json',\r\n-        'https://assets.codepen.io/4479906/highlight.json',\r\n-        'https://assets.codepen.io/4479906/scribble.json',\r\n-      ];\r\n-      for (let i = 0; i < annotationURLs.length; i++) {\r\n-        var annotURL = annotationURLs[i];\r\n-        fetch(annotURL)\r\n-          .then((response) => response.json())\r\n-          .then((json) => {\r\n-            annotationManager.addAnnotations([json]);\r\n-          });\r\n-      }\r\n-    };\r\n-\r\n-    const onAdobeDCViewSDKReady = () => {\r\n-      const embeddedView = new window.AdobeDC.View({\r\n-        clientId: clientID,\r\n-        divId: 'embeddedView',\r\n-      });\r\n-      previewPDF(embeddedView, urlToPDF, fileID);\r\n-    };\r\n-\r\n-    document.addEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n-\r\n-    return () => {\r\n-      document.removeEventListener('adobe_dc_view_sdk.ready', onAdobeDCViewSDKReady);\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Add arrayBuffer if necessary i.e. Safari\r\n-  if (!Blob.prototype.arrayBuffer) {\r\n-    Blob.prototype.arrayBuffer = function () {\r\n-      return new Promise((resolve) => {\r\n-        let fileReader = new FileReader();\r\n-        fileReader.onload = () => {\r\n-          resolve(fileReader.result);\r\n-        };\r\n-        fileReader.readAsArrayBuffer(this);\r\n-      });\r\n-    };\r\n-  }\r\n-\r\n-  return <div id=\"embeddedView\" />;\r\n-};\r\n-\r\n-export default AdobePDFViewer;\r\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-const urlToPDF =\r\n-  \"https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf\";\r\n-const fileID = \"3A5E36C8AA950DCDEBFBFE46FFCDE0A6\"; // The fileID binds the annotations to the document\r\n-const clientID = \"e800d12fc12c4d60960778b2bc4370af\";\r\n-\r\n-const viewerOptions = {\r\n-  embedMode: \"FULL_WINDOW\",\r\n-  defaultViewMode: \"FIT_PAGE\",\r\n-  showDownloadPDF: true,\r\n-  showPrintPDF: true,\r\n-  showLeftHandPanel: false,\r\n-  showAnnotationTools: true,\r\n-  enableAnnotationAPIs: true\r\n-};\r\n-\r\n-const annotationManagerConfig = {\r\n-  showToolbar: true,\r\n-  showCommentsPanel: true,\r\n-  downloadWithAnnotations: true,\r\n-  printWithAnnotations: true\r\n-};\r\n-\r\n-function previewPDF(view, pdfURL) {\r\n-  fetch(pdfURL)\r\n-    .then((res) => res.blob())\r\n-    .then((blob) => {\r\n-      var previewPromise = view.previewFile(\r\n-        {\r\n-          // The file content\r\n-          content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-          metaData: {\r\n-            fileName: pdfURL.split(\"/\").slice(-1)[0],\r\n-            id: fileID\r\n-          }\r\n-        },\r\n-        viewerOptions\r\n-      );\r\n-      createAnnotationManager(previewPromise);\r\n-    });\r\n-}\r\n-\r\n-function createAnnotationManager(previewPromise) {\r\n-  previewPromise.then((view) => {\r\n-    view.getAnnotationManager().then((annotationManager) => {\r\n-      annotationManager.setConfig(annotationManagerConfig);\r\n-      addAnnotations(annotationManager);\r\n-    });\r\n-  });\r\n-}\r\n-\r\n-/*\r\n-        In practice you would replace this function with code that would retrieve the annotations for the document.\r\n-        */\r\n-function addAnnotations(annotationManager) {\r\n-  var annotationURLs = [\r\n-    \"https://assets.codepen.io/4479906/underline.json\",\r\n-    \"https://assets.codepen.io/4479906/highlight.json\",\r\n-    \"https://assets.codepen.io/4479906/scribble.json\"\r\n-  ];\r\n-  for (i = 0; i < annotationURLs.length; i++) {\r\n-    var annotURL = annotationURLs[i];\r\n-    fetch(annotURL)\r\n-      .then((response) => response.json())\r\n-      .then((json) => {\r\n-        annotationManager.addAnnotations([json]);\r\n-      });\r\n-  }\r\n-}\r\n-\r\n-document.addEventListener(\"adobe_dc_view_sdk.ready\", function () {\r\n-  var embeddedView = new AdobeDC.View({\r\n-    clientId: clientID,\r\n-    divId: \"embeddedView\"\r\n-  });\r\n-  previewPDF(embeddedView, urlToPDF, fileID);\r\n-});\r\n-\r\n-// Add arrayBuffer if necessary i.e. Safari\r\n-(function () {\r\n-  if (Blob.arrayBuffer != \"function\") {\r\n-    Blob.prototype.arrayBuffer = myArrayBuffer;\r\n-  }\r\n-\r\n-  function myArrayBuffer() {\r\n-    return new Promise((resolve) => {\r\n-      let fileReader = new FileReader();\r\n-      fileReader.onload = () => {\r\n-        resolve(fileReader.result);\r\n-      };\r\n-      fileReader.readAsArrayBuffer(this);\r\n-    });\r\n-  }\r\n-})();\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713162931154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import { useEffect, useRef } from \"react\";\r\n+\r\n+export default function PdfViewerComponent({url,data}) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current;\r\n+    let PSPDFKit;\r\n+\r\n+    (async function () {\r\n+      PSPDFKit = await import(\"pspdfkit\");\r\n+      await PSPDFKit.load({\r\n+        // Container where PSPDFKit should be mounted.\r\n+        container,\r\n+        // The document to open.\r\n+        document: data.name,\r\n+        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+        baseUrl: url,\r\n+      });\r\n+    })();\r\n+\r\n+    return () => PSPDFKit && PSPDFKit.unload(container);\r\n+  }, [data.name]);\r\n+\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713163015863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React,{ useEffect, useRef } from \"react\";\r\n+\r\n+export default function PdfViewerComponent({url,data}) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current;\r\n+    let PSPDFKit;\r\n+\r\n+    (async function () {\r\n+      PSPDFKit = await import(\"pspdfkit\");\r\n+      await PSPDFKit.load({\r\n+        // Container where PSPDFKit should be mounted.\r\n+        container,\r\n+        // The document to open.\r\n+        document: data.name,\r\n+        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+        baseUrl: url,\r\n+      });\r\n+    })();\r\n+\r\n+    return () => PSPDFKit && PSPDFKit.unload(container);\r\n+  }, [data.name]);\r\n+\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713163042215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import { useEffect, useRef } from \"react\";\r\n+\r\n+export default function PdfViewerComponent({url,data}) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current;\r\n+    let PSPDFKit;\r\n+\r\n+    (async function () {\r\n+      PSPDFKit = await import(\"pspdfkit\");\r\n+      await PSPDFKit.load({\r\n+        // Container where PSPDFKit should be mounted.\r\n+        container,\r\n+        // The document to open.\r\n+        document: data.name,\r\n+        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+        baseUrl: url,\r\n+      });\r\n+    })();\r\n+\r\n+    return () => PSPDFKit && PSPDFKit.unload(container);\r\n+  }, [data.name]);\r\n+\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713163261801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,246 +48,28 @@\n \r\n export default function PdfViewerComponent({url,data}) {\r\n   const containerRef = useRef(null);\r\n \r\n-  useEffect(() => {\r\n-    const container = containerRef.current;\r\n-    let PSPDFKit;\r\n+//   useEffect(() => {\r\n+//     const container = containerRef.current;\r\n+//     let PSPDFKit;\r\n \r\n-    (async function () {\r\n-      PSPDFKit = await import(\"pspdfkit\");\r\n-      await PSPDFKit.load({\r\n-        // Container where PSPDFKit should be mounted.\r\n-        container,\r\n-        // The document to open.\r\n-        document: data.name,\r\n-        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-        baseUrl: url,\r\n-      });\r\n-    })();\r\n+//     (async function () {\r\n+//       PSPDFKit = await import(\"pspdfkit\");\r\n+//       await PSPDFKit.load({\r\n+//         // Container where PSPDFKit should be mounted.\r\n+//         container,\r\n+//         // The document to open.\r\n+//         document: data.name,\r\n+//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+//         baseUrl: url,\r\n+//       });\r\n+//     })();\r\n \r\n-    return () => PSPDFKit && PSPDFKit.unload(container);\r\n-  }, [data.name]);\r\n+//     return () => PSPDFKit && PSPDFKit.unload(container);\r\n+//   }, [data.name]);\r\n \r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n-}\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React,{ useEffect, useRef } from \"react\";\r\n-\r\n-export default function PdfViewerComponent({url,data}) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    const container = containerRef.current;\r\n-    let PSPDFKit;\r\n-\r\n-    (async function () {\r\n-      PSPDFKit = await import(\"pspdfkit\");\r\n-      await PSPDFKit.load({\r\n-        // Container where PSPDFKit should be mounted.\r\n-        container,\r\n-        // The document to open.\r\n-        document: data.name,\r\n-        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-        baseUrl: url,\r\n-      });\r\n-    })();\r\n-\r\n-    return () => PSPDFKit && PSPDFKit.unload(container);\r\n-  }, [data.name]);\r\n-\r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n-}\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import { useEffect, useRef } from \"react\";\r\n-\r\n-export default function PdfViewerComponent({url,data}) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    const container = containerRef.current;\r\n-    let PSPDFKit;\r\n-\r\n-    (async function () {\r\n-      PSPDFKit = await import(\"pspdfkit\");\r\n-      await PSPDFKit.load({\r\n-        // Container where PSPDFKit should be mounted.\r\n-        container,\r\n-        // The document to open.\r\n-        document: data.name,\r\n-        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-        baseUrl: url,\r\n-      });\r\n-    })();\r\n-\r\n-    return () => PSPDFKit && PSPDFKit.unload(container);\r\n-  }, [data.name]);\r\n-\r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n-}\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React,{ useEffect, useRef } from \"react\";\r\n-\r\n-export default function AdobePDFViewer({url,data}) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    const container = containerRef.current; // This `useRef` instance will render the PDF.\r\n-\r\n-    let PSPDFKit, instance;\r\n-    \r\n-    (async function () {\r\n-      PSPDFKit = await import(\"pspdfkit\")\r\n-\r\n-\t\tPSPDFKit.unload(container) // Ensure that there's only one PSPDFKit instance.\r\n-\r\n-      instance = await PSPDFKit.load({\r\n-        // Container where PSPDFKit should be mounted.\r\n-        container,\r\n-        // The document to open.\r\n-        document: data.name, \r\n-        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-        baseUrl: url\r\n-      });\r\n-    })();\r\n-    \r\n-    return () => PSPDFKit && PSPDFKit.unload(container)\r\n-  }, []);\r\n-  \r\n-  // This div element will render the document to the DOM.\r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n+  return (\r\n+    <h1> jdskjs</h1>\r\n+  )\r\n+//   <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713163293181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React, { useEffect, useRef } from \"react\";\r\n+\r\n+export default function PdfViewerComponent({url,data}) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+//   useEffect(() => {\r\n+//     const container = containerRef.current;\r\n+//     let PSPDFKit;\r\n+\r\n+//     (async function () {\r\n+//       PSPDFKit = await import(\"pspdfkit\");\r\n+//       await PSPDFKit.load({\r\n+//         // Container where PSPDFKit should be mounted.\r\n+//         container,\r\n+//         // The document to open.\r\n+//         document: data.name,\r\n+//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+//         baseUrl: url,\r\n+//       });\r\n+//     })();\r\n+\r\n+//     return () => PSPDFKit && PSPDFKit.unload(container);\r\n+//   }, [data.name]);\r\n+\r\n+  return (\r\n+    <h1> Data:\r\n+        {data}\r\n+    </h1>\r\n+  )\r\n+//   <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713163446032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+// import { useEffect, useRef } from \"react\";\r\n+\r\n+// export default function PdfViewerComponent({url,data}) {\r\n+//   const containerRef = useRef(null);\r\n+\r\n+//   useEffect(() => {\r\n+//     const container = containerRef.current;\r\n+//     let PSPDFKit;\r\n+\r\n+//     (async function () {\r\n+//       PSPDFKit = await import(\"pspdfkit\");\r\n+//       await PSPDFKit.load({\r\n+//         // Container where PSPDFKit should be mounted.\r\n+//         container,\r\n+//         // The document to open.\r\n+//         document: data.name,\r\n+//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+//         baseUrl: url,\r\n+//       });\r\n+//     })();\r\n+\r\n+//     return () => PSPDFKit && PSPDFKit.unload(container);\r\n+//   }, [data.name]);\r\n+\r\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+// }\r\n+import React, { useEffect, useRef } from \"react\";\r\n+import { PSPDFKit } from \"@pspdfkit/react-pspdfkit\";\r\n+\r\n+export default function PdfViewerComponent({ url, data }) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current;\r\n+    let pspdfkitInstance = null;\r\n+\r\n+    (async function () {\r\n+      try {\r\n+        pspdfkitInstance = await PSPDFKit.load({\r\n+          container,\r\n+          document: {\r\n+            url: data.name,\r\n+            authorizationHeaders: { Authorization: \"Bearer YOUR_API_TOKEN\" },\r\n+          },\r\n+          licenseKey: \"YOUR_PSPDFKIT_LICENSE_KEY\",\r\n+          baseUrl: url,\r\n+        });\r\n+      } catch (error) {\r\n+        console.error(\"Error loading PSPDFKit:\", error);\r\n+      }\r\n+    })();\r\n+\r\n+    return () => {\r\n+      if (pspdfkitInstance) {\r\n+        pspdfkitInstance.destroy();\r\n+      }\r\n+    };\r\n+  }, [url, data.name]);\r\n+\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+}\r\n"
                },
                {
                    "date": 1713164783939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+// import { useEffect, useRef } from \"react\";\r\n+\r\n+// export default function PdfViewerComponent({url,data}) {\r\n+//   const containerRef = useRef(null);\r\n+\r\n+//   useEffect(() => {\r\n+//     const container = containerRef.current;\r\n+//     let PSPDFKit;\r\n+\r\n+//     (async function () {\r\n+//       PSPDFKit = await import(\"pspdfkit\");\r\n+//       await PSPDFKit.load({\r\n+//         // Container where PSPDFKit should be mounted.\r\n+//         container,\r\n+//         // The document to open.\r\n+//         document: data.name,\r\n+//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+//         baseUrl: url,\r\n+//       });\r\n+//     })();\r\n+\r\n+//     return () => PSPDFKit && PSPDFKit.unload(container);\r\n+//   }, [data.name]);\r\n+\r\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+// }\r\n+import React, { useEffect, useRef } from \"react\";\r\n+import { PSPDFKit } from \"@pspdfkit/react-pspdfkit\";\r\n+\r\n+export default function PdfViewerComponent({ url, data }) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current;\r\n+    let pspdfkitInstance = null;\r\n+\r\n+    (async function () {\r\n+      try {\r\n+        pspdfkitInstance = await PSPDFKit.load({\r\n+          container,\r\n+          document: {\r\n+            url: data.name,\r\n+            authorizationHeaders: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n+          },\r\n+          licenseKey: \"cF6D-jxIY0iG3YSYeTiVDrV78npe1D7z9t_V3vxEaNrE4vyVgo88mqO7fpiZiQyrXcEYw5A8yC5a23ncanYYCu-rk3UKvkKH8EWvuxcRebigT5-o7tbXOdl5Fuzho3Y0BEa_Sk3scSnixH8-Y8jdAaOk4Idq4PHjtxMeLyMyjWfDX1Y4VUfABnQXNS7ygfMyJsit_6y2QpRucg\",\r\n+          baseUrl: url,\r\n+        });\r\n+      } catch (error) {\r\n+        console.error(\"Error loading PSPDFKit:\", error);\r\n+      }\r\n+    })();\r\n+\r\n+    return () => {\r\n+      if (pspdfkitInstance) {\r\n+        pspdfkitInstance.destroy();\r\n+      }\r\n+    };\r\n+  }, [url, data.name]);\r\n+\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+}\r\n"
                },
                {
                    "date": 1713164797385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,263 +104,4 @@\n   }, [url, data.name]);\r\n \r\n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n }\r\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-// import { useEffect, useRef } from \"react\";\r\n-\r\n-// export default function PdfViewerComponent({url,data}) {\r\n-//   const containerRef = useRef(null);\r\n-\r\n-//   useEffect(() => {\r\n-//     const container = containerRef.current;\r\n-//     let PSPDFKit;\r\n-\r\n-//     (async function () {\r\n-//       PSPDFKit = await import(\"pspdfkit\");\r\n-//       await PSPDFKit.load({\r\n-//         // Container where PSPDFKit should be mounted.\r\n-//         container,\r\n-//         // The document to open.\r\n-//         document: data.name,\r\n-//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-//         baseUrl: url,\r\n-//       });\r\n-//     })();\r\n-\r\n-//     return () => PSPDFKit && PSPDFKit.unload(container);\r\n-//   }, [data.name]);\r\n-\r\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n-// }\r\n-import React, { useEffect, useRef } from \"react\";\r\n-import { PSPDFKit } from \"@pspdfkit/react-pspdfkit\";\r\n-\r\n-export default function PdfViewerComponent({ url, data }) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    const container = containerRef.current;\r\n-    let pspdfkitInstance = null;\r\n-\r\n-    (async function () {\r\n-      try {\r\n-        pspdfkitInstance = await PSPDFKit.load({\r\n-          container,\r\n-          document: {\r\n-            url: data.name,\r\n-            authorizationHeaders: { Authorization: \"Bearer YOUR_API_TOKEN\" },\r\n-          },\r\n-          licenseKey: \"YOUR_PSPDFKIT_LICENSE_KEY\",\r\n-          baseUrl: url,\r\n-        });\r\n-      } catch (error) {\r\n-        console.error(\"Error loading PSPDFKit:\", error);\r\n-      }\r\n-    })();\r\n-\r\n-    return () => {\r\n-      if (pspdfkitInstance) {\r\n-        pspdfkitInstance.destroy();\r\n-      }\r\n-    };\r\n-  }, [url, data.name]);\r\n-\r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n-}\r\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React, { useEffect, useRef } from \"react\";\r\n-\r\n-export default function PdfViewerComponent({url,data}) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-//   useEffect(() => {\r\n-//     const container = containerRef.current;\r\n-//     let PSPDFKit;\r\n-\r\n-//     (async function () {\r\n-//       PSPDFKit = await import(\"pspdfkit\");\r\n-//       await PSPDFKit.load({\r\n-//         // Container where PSPDFKit should be mounted.\r\n-//         container,\r\n-//         // The document to open.\r\n-//         document: data.name,\r\n-//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-//         baseUrl: url,\r\n-//       });\r\n-//     })();\r\n-\r\n-//     return () => PSPDFKit && PSPDFKit.unload(container);\r\n-//   }, [data.name]);\r\n-\r\n-  return (\r\n-    <h1> Data:\r\n-        {data}\r\n-    </h1>\r\n-  )\r\n-//   <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n-}\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import { useEffect, useRef } from \"react\";\r\n-\r\n-export default function PdfViewerComponent({url,data}) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-//   useEffect(() => {\r\n-//     const container = containerRef.current;\r\n-//     let PSPDFKit;\r\n-\r\n-//     (async function () {\r\n-//       PSPDFKit = await import(\"pspdfkit\");\r\n-//       await PSPDFKit.load({\r\n-//         // Container where PSPDFKit should be mounted.\r\n-//         container,\r\n-//         // The document to open.\r\n-//         document: data.name,\r\n-//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-//         baseUrl: url,\r\n-//       });\r\n-//     })();\r\n-\r\n-//     return () => PSPDFKit && PSPDFKit.unload(container);\r\n-//   }, [data.name]);\r\n-\r\n-  return (\r\n-    <h1> jdskjs</h1>\r\n-  )\r\n-//   <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713165088168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React,{ useEffect, useRef } from \"react\";\r\n+\r\n+export default function AdobePDFViewer({url,data}) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current; // This `useRef` instance will render the PDF.\r\n+\r\n+    let PSPDFKit, instance;\r\n+    \r\n+    (async function () {\r\n+      PSPDFKit = await import(\"pspdfkit\")\r\n+\r\n+\t\tPSPDFKit.unload(container) // Ensure that there's only one PSPDFKit instance.\r\n+\r\n+      instance = await PSPDFKit.load({\r\n+        // Container where PSPDFKit should be mounted.\r\n+        container,\r\n+        // The document to open.\r\n+        document: data.name, \r\n+        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+        baseUrl: url\r\n+      });\r\n+    })();\r\n+    \r\n+    return () => PSPDFKit && PSPDFKit.unload(container)\r\n+  }, []);\r\n+  \r\n+  // This div element will render the document to the DOM.\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n+}\r\n+import { useEffect, useRef } from \"react\";\r\n+\r\n+export default function PdfViewerComponent({url,data}) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current;\r\n+    let PSPDFKit;\r\n+\r\n+    (async function () {\r\n+      PSPDFKit = await import(\"pspdfkit\");\r\n+      await PSPDFKit.load({\r\n+        // Container where PSPDFKit should be mounted.\r\n+        container,\r\n+        // The document to open.\r\n+        document: data.name,\r\n+        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+        baseUrl: url,\r\n+      });\r\n+    })();\r\n+\r\n+    return () => PSPDFKit && PSPDFKit.unload(container);\r\n+  }, [data.name]);\r\n+\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713165101619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,31 +73,5 @@\n   }, []);\r\n   \r\n   // This div element will render the document to the DOM.\r\n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n-}\r\n-import { useEffect, useRef } from \"react\";\r\n-\r\n-export default function PdfViewerComponent({url,data}) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    const container = containerRef.current;\r\n-    let PSPDFKit;\r\n-\r\n-    (async function () {\r\n-      PSPDFKit = await import(\"pspdfkit\");\r\n-      await PSPDFKit.load({\r\n-        // Container where PSPDFKit should be mounted.\r\n-        container,\r\n-        // The document to open.\r\n-        document: data.name,\r\n-        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-        baseUrl: url,\r\n-      });\r\n-    })();\r\n-\r\n-    return () => PSPDFKit && PSPDFKit.unload(container);\r\n-  }, [data.name]);\r\n-\r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713165222826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React,{ useEffect, useRef } from \"react\";\r\n+\r\n+export default function AdobePDFViewer({url,data}) {\r\n+  const containerRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    const container = containerRef.current; // This `useRef` instance will render the PDF.\r\n+\r\n+    let PSPDFKit, instance;\r\n+    \r\n+    (async function () {\r\n+      PSPDFKit = await import(\"pspdfkit\")\r\n+\r\n+\t\tPSPDFKit.unload(container) // Ensure that there's only one PSPDFKit instance.\r\n+\r\n+      instance = await PSPDFKit.load({\r\n+        // Container where PSPDFKit should be mounted.\r\n+        container,\r\n+        // The document to open.\r\n+        document: data.name, \r\n+        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+        baseUrl: url\r\n+      });\r\n+    })();\r\n+    \r\n+    return () => PSPDFKit && PSPDFKit.unload(container)\r\n+  }, []);\r\n+  \r\n+  // This div element will render the document to the DOM.\r\n+  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713166203978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,189 +73,5 @@\n   }, []);\r\n   \r\n   // This div element will render the document to the DOM.\r\n   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n-}\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React,{ useEffect, useRef } from \"react\";\r\n-\r\n-export default function AdobePDFViewer({url,data}) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    const container = containerRef.current; // This `useRef` instance will render the PDF.\r\n-\r\n-    let PSPDFKit, instance;\r\n-    \r\n-    (async function () {\r\n-      PSPDFKit = await import(\"pspdfkit\")\r\n-\r\n-\t\tPSPDFKit.unload(container) // Ensure that there's only one PSPDFKit instance.\r\n-\r\n-      instance = await PSPDFKit.load({\r\n-        // Container where PSPDFKit should be mounted.\r\n-        container,\r\n-        // The document to open.\r\n-        document: data.name, \r\n-        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-        baseUrl: url\r\n-      });\r\n-    })();\r\n-    \r\n-    return () => PSPDFKit && PSPDFKit.unload(container)\r\n-  }, []);\r\n-  \r\n-  // This div element will render the document to the DOM.\r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n-}\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-// import { useEffect, useRef } from \"react\";\r\n-\r\n-// export default function PdfViewerComponent({url,data}) {\r\n-//   const containerRef = useRef(null);\r\n-\r\n-//   useEffect(() => {\r\n-//     const container = containerRef.current;\r\n-//     let PSPDFKit;\r\n-\r\n-//     (async function () {\r\n-//       PSPDFKit = await import(\"pspdfkit\");\r\n-//       await PSPDFKit.load({\r\n-//         // Container where PSPDFKit should be mounted.\r\n-//         container,\r\n-//         // The document to open.\r\n-//         document: data.name,\r\n-//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-//         baseUrl: url,\r\n-//       });\r\n-//     })();\r\n-\r\n-//     return () => PSPDFKit && PSPDFKit.unload(container);\r\n-//   }, [data.name]);\r\n-\r\n-//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n-// }\r\n-import React, { useEffect, useRef } from \"react\";\r\n-import { PSPDFKit } from \"@pspdfkit/react-pspdfkit\";\r\n-\r\n-export default function PdfViewerComponent({ url, data }) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    const container = containerRef.current;\r\n-    let pspdfkitInstance = null;\r\n-\r\n-    (async function () {\r\n-      try {\r\n-        pspdfkitInstance = await PSPDFKit.load({\r\n-          container,\r\n-          document: {\r\n-            url: data.name,\r\n-            authorizationHeaders: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n-          },\r\n-          licenseKey: \"cF6D-jxIY0iG3YSYeTiVDrV78npe1D7z9t_V3vxEaNrE4vyVgo88mqO7fpiZiQyrXcEYw5A8yC5a23ncanYYCu-rk3UKvkKH8EWvuxcRebigT5-o7tbXOdl5Fuzho3Y0BEa_Sk3scSnixH8-Y8jdAaOk4Idq4PHjtxMeLyMyjWfDX1Y4VUfABnQXNS7ygfMyJsit_6y2QpRucg\",\r\n-          baseUrl: url,\r\n-        });\r\n-      } catch (error) {\r\n-        console.error(\"Error loading PSPDFKit:\", error);\r\n-      }\r\n-    })();\r\n-\r\n-    return () => {\r\n-      if (pspdfkitInstance) {\r\n-        pspdfkitInstance.destroy();\r\n-      }\r\n-    };\r\n-  }, [url, data.name]);\r\n-\r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />;\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713169280485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,46 @@\n-// import React/*, { useEffect } */from 'react';\r\n-// // import axios from 'axios';\r\n-// import CircularProgress from '@material-ui/core/CircularProgress';\r\n-// import ViewSDKClient from './ViewSDKClient.js';\r\n-// const AdobePDFViewer = ({url,data}) => {\r\n-// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-// , hasFile: url\r\n-// });\r\n-// console.log(url)\r\n-// // useEffect(() => {\r\n-// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// // .catch(error => alert(error.message))\r\n-// // }, []);\r\n-// const loadPDF = () => {\r\n-// const viewSDKClient = new ViewSDKClient();\r\n-// viewSDKClient.ready().then(() => {\r\n-// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-// });\r\n-// }\r\n-// return (\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.isDataLoaded ?\r\n-// <div style={{height:\"100vh\"}}>\r\n-// {\r\n-// state.hasFile ?\r\n-// <>\r\n-// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-// </>\r\n-// :\r\n-// <div style={{height:\"100vh\"}}>\r\n-// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// :\r\n-// <div className='cp' >\r\n-// <CircularProgress  style={{color: '#ffc107'}} />\r\n-// </div>\r\n-// }\r\n-// </div>\r\n-// );\r\n-// }\r\n-// export default AdobePDFViewer;\r\n-import React,{ useEffect, useRef } from \"react\";\r\n-\r\n-export default function AdobePDFViewer({url,data}) {\r\n-  const containerRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    const container = containerRef.current; // This `useRef` instance will render the PDF.\r\n-\r\n-    let PSPDFKit, instance;\r\n-    \r\n-    (async function () {\r\n-      PSPDFKit = await import(\"pspdfkit\")\r\n-\r\n-\t\tPSPDFKit.unload(container) // Ensure that there's only one PSPDFKit instance.\r\n-\r\n-      instance = await PSPDFKit.load({\r\n-        // Container where PSPDFKit should be mounted.\r\n-        container,\r\n-        // The document to open.\r\n-        document: data.name, \r\n-        // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n-        baseUrl: url\r\n-      });\r\n-    })();\r\n-    \r\n-    return () => PSPDFKit && PSPDFKit.unload(container)\r\n-  }, []);\r\n-  \r\n-  // This div element will render the document to the DOM.\r\n-  return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n-}\n\\ No newline at end of file\n+import React/*, { useEffect } */from 'react';\r\n+// import axios from 'axios';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+const AdobePDFViewer = ({url,data}) => {\r\n+const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+, hasFile: url\r\n+});\r\n+console.log(url)\r\n+// useEffect(() => {\r\n+// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// .catch(error => alert(error.message))\r\n+// }, []);\r\n+const loadPDF = () => {\r\n+const viewSDKClient = new ViewSDKClient();\r\n+viewSDKClient.ready().then(() => {\r\n+viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+});\r\n+}\r\n+return (\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.isDataLoaded ?\r\n+<div style={{height:\"100vh\"}}>\r\n+{\r\n+state.hasFile ?\r\n+<>\r\n+<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+</>\r\n+:\r\n+<div style={{height:\"100vh\"}}>\r\n+<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+</div>\r\n+}\r\n+</div>\r\n+:\r\n+<div className='cp' >\r\n+<CircularProgress  style={{color: '#ffc107'}} />\r\n+</div>\r\n+}\r\n+</div>\r\n+);\r\n+}\r\n+export default AdobePDFViewer;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713169855740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import PSPDFKit from \"pspdfkit\";\r\n+class AdobePDFViewer extends React.Component {\r\n+    \r\n+    render({url,data}) {\r\n+        const configuration = {\r\n+            document: new PSPDFKit.Document('my-document.pdf'),\r\n+            licenseKey: 'YOUR_LICENSE_KEY',\r\n+            toolbar: true,\r\n+            sidebar: true,\r\n+            annotations: [],\r\n+            search: true,\r\n+            print: true\r\n+          };\r\n+      return (\r\n+        <PSPDFKit\r\n+          document={new PSPDFKit.Document(data.name)}\r\n+          configuration={ configuration}\r\n+        />\r\n+      );\r\n+    }\r\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713169869433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n class AdobePDFViewer extends React.Component {\r\n     \r\n     render({url,data}) {\r\n         const configuration = {\r\n-            document: new PSPDFKit.Document('my-document.pdf'),\r\n+            document: new PSPDFKit.Document(data.name),\r\n             licenseKey: 'YOUR_LICENSE_KEY',\r\n             toolbar: true,\r\n             sidebar: true,\r\n             annotations: [],\r\n@@ -63,51 +63,5 @@\n           configuration={ configuration}\r\n         />\r\n       );\r\n     }\r\n-  }\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n-const AdobePDFViewer = ({url,data}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n-export default AdobePDFViewer;\n\\ No newline at end of file\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713170116429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,24 +44,23 @@\n // );\r\n // }\r\n // export default AdobePDFViewer;\r\n import PSPDFKit from \"pspdfkit\";\r\n-class AdobePDFViewer extends React.Component {\r\n-    \r\n-    render({url,data}) {\r\n-        const configuration = {\r\n-            document: new PSPDFKit.Document(data.name),\r\n-            licenseKey: 'YOUR_LICENSE_KEY',\r\n-            toolbar: true,\r\n-            sidebar: true,\r\n-            annotations: [],\r\n-            search: true,\r\n-            print: true\r\n-          };\r\n-      return (\r\n+\r\n+export default function AdobePDFViewer({ url, data }) {\r\n+    const configuration = {\r\n+        document: new PSPDFKit.Document(data.name),\r\n+        licenseKey: 'cF6D-jxIY0iG3YSYeTiVDrV78npe1D7z9t_V3vxEaNrE4vyVgo88mqO7fpiZiQyrXcEYw5A8yC5a23ncanYYCu-rk3UKvkKH8EWvuxcRebigT5-o7tbXOdl5Fuzho3Y0BEa_Sk3scSnixH8-Y8jdAaOk4Idq4PHjtxMeLyMyjWfDX1Y4VUfABnQXNS7ygfMyJsit_6y2QpRucg',\r\n+        toolbar: true,\r\n+        sidebar: true,\r\n\\ No newline at end of file\n+        annotations: [],\r\n+        search: true,\r\n+        print: true\r\n+    };\r\n+    return (\r\n         <PSPDFKit\r\n-          document={new PSPDFKit.Document(data.name)}\r\n-          configuration={ configuration}\r\n+            document={new PSPDFKit.Document(data.name)}\r\n+            configuration={configuration}\r\n         />\r\n-      );\r\n-    }\r\n-  }\n+    );\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713170176887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+import React from \"react\";\r\n+import PSPDFKit from \"pspdfkit\";\r\n+\r\n+export default function AdobePDFViewer({ url, data }) {\r\n+    const configuration = {\r\n+        document: new PSPDFKit.Document(data.name),\r\n+        licenseKey: 'cF6D-jxIY0iG3YSYeTiVDrV78npe1D7z9t_V3vxEaNrE4vyVgo88mqO7fpiZiQyrXcEYw5A8yC5a23ncanYYCu-rk3UKvkKH8EWvuxcRebigT5-o7tbXOdl5Fuzho3Y0BEa_Sk3scSnixH8-Y8jdAaOk4Idq4PHjtxMeLyMyjWfDX1Y4VUfABnQXNS7ygfMyJsit_6y2QpRucg',\r\n+        toolbar: true,\r\n+        sidebar: true,\r\n+        annotations: [],\r\n+        search: true,\r\n+        print: true\r\n+    };\r\n+    return (\r\n+        <PSPDFKit\r\n+            document={new PSPDFKit.Document(data.name)}\r\n+            configuration={configuration}\r\n+        />\r\n+    );\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1713259037032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,103 @@\n-import React/*, { useEffect } */from 'react';\r\n-// import axios from 'axios';\r\n-import CircularProgress from '@material-ui/core/CircularProgress';\r\n-import ViewSDKClient from './ViewSDKClient.js';\r\n+import React, { useState } from 'react';\r\n+import { Document, Page } from 'react-pdf/dist/esm/entry.webpack';\r\n+import AdobePDFEmbedAPI from '@adobe/pdf-embed-api';\r\n+\r\n const AdobePDFViewer = ({url,data}) => {\r\n-const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n-, hasFile: url\r\n-});\r\n-console.log(url)\r\n-// useEffect(() => {\r\n-// axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n-// .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n-// .catch(error => alert(error.message))\r\n-// }, []);\r\n-const loadPDF = () => {\r\n-const viewSDKClient = new ViewSDKClient();\r\n-viewSDKClient.ready().then(() => {\r\n-viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n-showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n-});\r\n-}\r\n-return (\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.isDataLoaded ?\r\n-<div style={{height:\"100vh\"}}>\r\n-{\r\n-state.hasFile ?\r\n-<>\r\n-<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n-</>\r\n-:\r\n-<div style={{height:\"100vh\"}}>\r\n-<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n-</div>\r\n-}\r\n-</div>\r\n-:\r\n-<div className='cp' >\r\n-<CircularProgress  style={{color: '#ffc107'}} />\r\n-</div>\r\n-}\r\n-</div>\r\n-);\r\n-}\r\n+  const [numPages, setNumPages] = useState(null);\r\n+  const [pageNumber, setPageNumber] = useState(1);\r\n+  const [comments, setComments] = useState([]);\r\n+\r\n+  // Initialize Adobe PDF Embed API\r\n+  const adobeDCView = new AdobePDFEmbedAPI.PDFEmbedView();\r\n+  adobeDCView.previewFile(\"pdf-div\", {\r\n+    content: { location: { url: url } },\r\n+    metaData: { fileName: data.name },\r\n+  });\r\n+\r\n+  // Function to handle annotation click and add comment\r\n+  const handleAnnotationClick = (annotationId) => {\r\n+    const newComment = prompt('Enter your comment:');\r\n+    if (newComment) {\r\n+      setComments([...comments, { annotationId, comment: newComment }]);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <div id=\"pdf-div\"></div>\r\n+      <Document\r\n+        file=\"path-to-your-pdf-file.pdf\"\r\n+        onLoadSuccess={({ numPages }) => setNumPages(numPages)}\r\n+      >\r\n+        {[...Array(numPages).keys()].map((page) => (\r\n+          <Page\r\n+            key={`page_${page + 1}`}\r\n+            pageNumber={page + 1}\r\n+            width={800}\r\n+            onClick={() => handleAnnotationClick(`annotation_${page + 1}`)}\r\n+          />\r\n+        ))}\r\n+      </Document>\r\n+      <div>\r\n+        {comments.map((item, index) => (\r\n+          <div key={`comment_${index}`}>\r\n+            Annotation ID: {item.annotationId}, Comment: {item.comment}\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n export default AdobePDFViewer;\r\n+\r\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n // import React from \"react\";\r\n // import PSPDFKit from \"pspdfkit\";\r\n \r\n // export default function AdobePDFViewer({ url, data }) {\r\n"
                },
                {
                    "date": 1713259799032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+import React, { useEffect } from 'react';\r\n+import CircularProgress from '@material-ui/core/CircularProgress';\r\n+import ViewSDKClient from './ViewSDKClient';\r\n+\r\n+const AdobePDFViewer = ({ url, data }) => {\r\n+  const [state, setState] = React.useState({\r\n+    isDataLoaded: false,\r\n+    menuLink: url,\r\n+    hasFile: true,\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    const viewSDKClient = new ViewSDKClient();\r\n+    viewSDKClient.ready().then(() => {\r\n+      setState((prevState) => ({ ...prevState, isDataLoaded: true }));\r\n+      viewSDKClient.registerEventsHandler(); // Register event handlers\r\n+    });\r\n+  }, []);\r\n+\r\n+  const loadPDF = () => {\r\n+    const viewSDKClient = new ViewSDKClient();\r\n+    viewSDKClient.ready().then(() => {\r\n+      viewSDKClient.previewFile(\r\n+        \"pdf-div\",\r\n+        {\r\n+          showAnnotationTools: true,\r\n+          showLeftHandPanel: true,\r\n+          showPageControls: true,\r\n+          showDownloadPDF: true,\r\n+          showPrintPDF: true,\r\n+        },\r\n+        state.menuLink,\r\n+        data\r\n+      );\r\n+\r\n+      // Listen for annotation events\r\n+      viewSDKClient.adobeDCView.registerCallback(\r\n+        window.AdobeDC.View.Enum.CallbackType.ANNOTATION_CHANGED,\r\n+        (annotations) => {\r\n+          console.log(\"Annotations changed:\", annotations);\r\n+          // Extract comments from annotations and pass them to saveApiHandler\r\n+          annotations.forEach((annotation) => {\r\n+            if (annotation.comment) {\r\n+              const newComment = annotation.comment;\r\n+              viewSDKClient.saveApiHandler(\r\n+                {\r\n+                  id: annotation.id, // Assuming annotation ID is used as document ID\r\n+                  /* Include any other metadata needed */\r\n+                },\r\n+                annotation.content,\r\n+                {},\r\n+                newComment\r\n+              );\r\n+            }\r\n+          });\r\n+        }\r\n+      );\r\n+    });\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{ height: \"100vh\" }}>\r\n+      {state.isDataLoaded ? (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+          {state.hasFile ? (\r\n+            <>\r\n+              <div\r\n+                id=\"pdf-div\"\r\n+                className=\"full-window-div\"\r\n+                onLoad={loadPDF()}\r\n+                style={{ height: \"100vh\" }}\r\n+              ></div>\r\n+            </>\r\n+          ) : (\r\n+            <div style={{ height: \"100vh\" }}>\r\n+              <p className=\"text dashboard\" id=\"no-file\">\r\n+                Sorry, no file at this link\r\n+              </p>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+      ) : (\r\n+        <div className=\"cp\">\r\n+          <CircularProgress style={{ color: \"#ffc107\" }} />\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n+// import React/*, { useEffect } */from 'react';\r\n+// // import axios from 'axios';\r\n+// import CircularProgress from '@material-ui/core/CircularProgress';\r\n+// import ViewSDKClient from './ViewSDKClient.js';\r\n+// const AdobePDFViewer = ({url,data}) => {\r\n+// const [state/*, setState*/] = React.useState({isDataLoaded: true, menuLink: url\r\n+// , hasFile: url\r\n+// });\r\n+// console.log(url)\r\n+// // useEffect(() => {\r\n+// // axios.get(`${process.env.REACT_APP_BASE_URL}/get_menu`)\r\n+// // .then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n+// // .catch(error => alert(error.message))\r\n+// // }, []);\r\n+// const loadPDF = () => {\r\n+// const viewSDKClient = new ViewSDKClient();\r\n+// viewSDKClient.ready().then(() => {\r\n+// viewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\n+// showDownloadPDF: false, showPrintPDF: false}, state.menuLink,data);\r\n+// });\r\n+// }\r\n+// return (\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.isDataLoaded ?\r\n+// <div style={{height:\"100vh\"}}>\r\n+// {\r\n+// state.hasFile ?\r\n+// <>\r\n+// <div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()} style={{height:\"100vh\"}}></div>\r\n+// </>\r\n+// :\r\n+// <div style={{height:\"100vh\"}}>\r\n+// <p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// :\r\n+// <div className='cp' >\r\n+// <CircularProgress  style={{color: '#ffc107'}} />\r\n+// </div>\r\n+// }\r\n+// </div>\r\n+// );\r\n+// }\r\n+// export default AdobePDFViewer;\r\n+// import React from \"react\";\r\n+// import PSPDFKit from \"pspdfkit\";\r\n+\r\n+// export default function AdobePDFViewer({ url, data }) {\r\n+//     const configuration = {\r\n+//         document: new PSPDFKit.Document(url),\r\n+//         licenseKey: 'cF6D-jxIY0iG3YSYeTiVDrV78npe1D7z9t_V3vxEaNrE4vyVgo88mqO7fpiZiQyrXcEYw5A8yC5a23ncanYYCu-rk3UKvkKH8EWvuxcRebigT5-o7tbXOdl5Fuzho3Y0BEa_Sk3scSnixH8-Y8jdAaOk4Idq4PHjtxMeLyMyjWfDX1Y4VUfABnQXNS7ygfMyJsit_6y2QpRucg',\r\n+//         toolbar: true,\r\n+//         sidebar: true,\r\n+//         annotations: [],\r\n+//         search: true,\r\n+//         print: true\r\n+//     };\r\n+//     return (\r\n+//         <PSPDFKit\r\n+//             document={new PSPDFKit.Document(url)}\r\n+//             configuration={configuration}\r\n+//         />\r\n+//     );\r\n+\r\n+// }\r\n+// import React, { useEffect, useRef } from \"react\";\r\n+\r\n+// export default function AdobePDFViewer({url,data}) {\r\n+//   const containerRef = useRef(null);\r\n+\r\n+//   useEffect(() => {\r\n+//     const container = containerRef.current; // This `useRef` instance will render the PDF.\r\n+\r\n+//     let PSPDFKit, instance;\r\n+    \r\n+//     (async function () {\r\n+//       PSPDFKit = await import(\"pspdfkit\")\r\n+\r\n+// \t\tPSPDFKit.unload(container) // Ensure that there's only one PSPDFKit instance.\r\n+\r\n+//       instance = await PSPDFKit.load({\r\n+//         // Container where PSPDFKit should be mounted.\r\n+//         container,\r\n+//         // The document to open.\r\n+//         document: data.name, \r\n+//         // Use the public directory URL as a base URL. PSPDFKit will download its library assets from here.\r\n+//         baseUrl: url\r\n+//       });\r\n+//     })();\r\n+    \r\n+//     return () => PSPDFKit && PSPDFKit.unload(container)\r\n+//   }, []);\r\n+  \r\n+//   // This div element will render the document to the DOM.\r\n+//   return <div ref={containerRef} style={{ width: \"100%\", height: \"100vh\" }} />\r\n+// }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1712911726583,
            "name": "Commit-0",
            "content": "import React, { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ViewSDKClient from './ViewSDKClient.js';\r\nconst AdobePDFViewer = (props) => {\r\nconst [state, setState] = React.useState({isDataLoaded: false, menuLink: null, hasFile: false});\r\nuseEffect(() => {\r\naxios.get(`https://apnaorganicstore.in/canjobs/get_menu`)\r\n.then(response => setState({isDataLoaded: true, hasFile: response.data.has_file, menuLink: response.data.menu_link}))\r\n.catch(error => alert(error.message))\r\n}, []);\r\nconst loadPDF = () => {\r\nconst viewSDKClient = new ViewSDKClient();\r\nviewSDKClient.ready().then(() => {\r\nviewSDKClient.previewFile(\"pdf-div\", {showAnnotationTools: false, showLeftHandPanel: false, showPageControls: false,\r\nshowDownloadPDF: false, showPrintPDF: false}, state.menuLink);\r\n});\r\n}\r\nreturn (\r\n<div >\r\n{\r\nstate.isDataLoaded ?\r\n<div>\r\n{\r\nstate.hasFile ?\r\n<>\r\n<div id=\"pdf-div\" className=\"full-window-div\" onDocumentLoad={loadPDF()}></div>\r\n</>\r\n:\r\n<div>\r\n<p className='text dashboard' id=\"no-file\">Sorry, no file at this link</p>\r\n</div>\r\n}\r\n</div>\r\n:\r\n<div className='cp'>\r\n<CircularProgress  style={{color: '#ffc107'}} />\r\n</div>\r\n}\r\n</div>\r\n);\r\n}\r\nexport default AdobePDFViewer;"
        }
    ]
}