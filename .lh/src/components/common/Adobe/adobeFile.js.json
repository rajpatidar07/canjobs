{
    "sourceFile": "src/components/common/Adobe/adobeFile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1713603932613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713876849144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import React, { useEffect/*, useRef */ } from 'react';\r\n+import ViewSDKClient from './ViewSDKClient.js';\r\n+\r\n+const AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n+    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n+    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n+    useEffect(() => {\r\n+        const viewSDKClient = new ViewSDKClient();\r\n+        viewSDKClient.ready().then(() => {\r\n+            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n+                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n+                showDownloadPDF: true, showPrintPDF: true,\r\n+            }, url, data, userId, annotationId);\r\n+            const eventOptions = {\r\n+                listenOn: [\r\n+                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n+                ],\r\n+            }\r\n+            const AdminDetails = {\r\n+                \"id\": localStorage.getItem(\"admin_id\"),\r\n+                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n+                \"type\": \"Person\"\r\n+            }\r\n+            previewFilePromise\r\n+                .then((adobeViewer) => {\r\n+\r\n+                    adobeViewer.getAnnotationManager()\r\n+                        .then(annotationManager => {\r\n+\r\n+                            if (annotationData.length === 0) {\r\n+                                console.log(\"No Annotation data\")\r\n+                            }\r\n+                            else {\r\n+                                annotationManager.addAnnotations(annotationData)\r\n+                                .then(() => console.log(\"Success\"))\r\n+                                .catch(error => console.log(error));\r\n+                            }\r\n+\r\n+\r\n+                            annotationManager.getAnnotations()\r\n+                                .then(result => {\r\n+                                    viewSDKClient.annots = result;\r\n+                                })\r\n+                                .catch(e => {\r\n+                                    console.log(e);\r\n+                                });\r\n+                            annotationManager.registerEventListener(\r\n+                                function (event) {\r\n+                                    // console.log(event.type, event.data, event)\r\n+                                    if (event.type === 'ANNOTATION_ADDED') {\r\n+                                        // Include AdminDetails for annotations \r\n+                                        const newAnnotation = event.data;\r\n+                                        newAnnotation.creator = AdminDetails;\r\n+                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n+                                    }\r\n+                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n+                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n+                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n+                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n+                                    }\r\n+                                },\r\n+                                eventOptions,\r\n+                            );\r\n+\r\n+\r\n+                        })\r\n+                        .catch(e => {\r\n+                            console.log(e);\r\n+                        });\r\n+                })\r\n+                .catch(e => {\r\n+                    console.log(e);\r\n+                });\r\n+\r\n+            viewSDKClient.registerSaveApiHandler();\r\n+        });\r\n+// eslint-disable-next-line\r\n+    }, [annotationId, annotationData]);\r\n+    return (\r\n+        <div style={{ height: \"100vh\" }}>\r\n+            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n+        </div>\r\n+    );\r\n+}\r\n+\r\n+export default AdobePDFViewer;\r\n+\r\n"
                }
            ],
            "date": 1713603932613,
            "name": "Commit-0",
            "content": "import React, { useEffect/*, useRef */ } from 'react';\r\nimport ViewSDKClient from './ViewSDKClient.js';\r\n\r\nconst AdobePDFViewer = ({ url, data, userId, commentsList }) => {\r\n    const annotationId = !commentsList || commentsList.length === 0 ? \"\" : commentsList[0].id\r\n    let annotationData = !commentsList || commentsList.length === 0 ? \"\" : JSON.parse(commentsList[0].doctaskjson)\r\n    useEffect(() => {\r\n        const viewSDKClient = new ViewSDKClient();\r\n        viewSDKClient.ready().then(() => {\r\n            const previewFilePromise = viewSDKClient.previewFile(\"pdf-div\", {\r\n                showAnnotationTools: false, showLeftHandPanel: true, showPageControls: true, enableAnnotationAPIs: true, includePDFAnnotations: true,\r\n                showDownloadPDF: true, showPrintPDF: true,\r\n            }, url, data, userId, annotationId);\r\n            const eventOptions = {\r\n                listenOn: [\r\n                    \"ANNOTATION_ADDED\", \"ANNOTATION_UPDATED\", \"ANNOTATION_DELETED\"\r\n                ],\r\n            }\r\n            const AdminDetails = {\r\n                \"id\": localStorage.getItem(\"admin_id\"),\r\n                \"name\": localStorage.getItem(\"admin\").charAt(0).toUpperCase() + localStorage.getItem(\"admin\").slice(1),\r\n                \"type\": \"Person\"\r\n            }\r\n            previewFilePromise\r\n                .then((adobeViewer) => {\r\n\r\n                    adobeViewer.getAnnotationManager()\r\n                        .then(annotationManager => {\r\n\r\n                            if (annotationData.length === 0) {\r\n                                console.log(\"No Annotation data\")\r\n                            }\r\n                            else {\r\n                                annotationManager.addAnnotations(annotationData)\r\n                                .then(() => console.log(\"Success\"))\r\n                                .catch(error => console.log(error));\r\n                            }\r\n\r\n\r\n                            annotationManager.getAnnotations()\r\n                                .then(result => {\r\n                                    viewSDKClient.annots = result;\r\n                                })\r\n                                .catch(e => {\r\n                                    console.log(e);\r\n                                });\r\n                            annotationManager.registerEventListener(\r\n                                function (event) {\r\n                                    // console.log(event.type, event.data, event)\r\n                                    if (event.type === 'ANNOTATION_ADDED') {\r\n                                        // Include AdminDetails for annotations \r\n                                        const newAnnotation = event.data;\r\n                                        newAnnotation.creator = AdminDetails;\r\n                                        viewSDKClient.annots = [...viewSDKClient.annots, newAnnotation];\r\n                                    }\r\n                                    else if (event.type === 'ANNOTATION_UPDATED') {\r\n                                        viewSDKClient.annots = [...(viewSDKClient.annots.filter(a => a.id !== event.data.id)), event.data]\r\n                                    } else if (event.type === 'ANNOTATION_DELETED') {\r\n                                        viewSDKClient.annots = viewSDKClient.annots.filter(a => a.id !== event.data.id);\r\n                                    }\r\n                                },\r\n                                eventOptions,\r\n                            );\r\n\r\n\r\n                        })\r\n                        .catch(e => {\r\n                            console.log(e);\r\n                        });\r\n                })\r\n                .catch(e => {\r\n                    console.log(e);\r\n                });\r\n\r\n            viewSDKClient.registerSaveApiHandler();\r\n        });\r\n\r\n    }, [annotationId, annotationData]);\r\n    return (\r\n        <div style={{ height: \"100vh\" }}>\r\n            <div id=\"pdf-div\" className=\"full-window-div\" style={{ height: \"100vh\" }}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdobePDFViewer;\r\n\r\n"
        }
    ]
}