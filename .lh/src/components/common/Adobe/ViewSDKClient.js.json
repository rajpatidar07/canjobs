{
    "sourceFile": "src/components/common/Adobe/ViewSDKClient.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1712911622327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712912666884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+class ViewSDKClient {\r\n+    constructor() {\r\n+    this.readyPromise = new Promise((resolve) => {\r\n+    if (window.AdobeDC) {\r\n+    resolve();\r\n+    } else {\r\n+    document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+    resolve();\r\n+    });\r\n+    }\r\n+    });\r\n+    this.adobeDCView = undefined;\r\n+    }\r\n+    ready() {\r\n+    return this.readyPromise;\r\n+    }\r\n+    previewFile(divId, viewerConfig, url) {\r\n+    const config = {\r\n+    clientId: \"2c4accab69ff4244ac358ef34d13d747\",\r\n+    };\r\n+    if (divId) {\r\n+    config.divId = divId;\r\n+    }\r\n+    this.adobeDCView = new window.AdobeDC.View(config);\r\n+    const previewFilePromise = this.adobeDCView.previewFile({\r\n+    content: {\r\n+    location: {\r\n+    url: url,\r\n+    },\r\n+    },\r\n+    metaData: {\r\n+    fileName: \"Menu.pdf\",\r\n+    id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+    }\r\n+    }, viewerConfig);\r\n+    return previewFilePromise;\r\n+    }\r\n+    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+    this.adobeDCView = new window.AdobeDC.View({\r\n+    clientId: \"2c4accab69ff4244ac358ef34d13d747\",\r\n+    divId,\r\n+    });\r\n+    this.adobeDCView.previewFile({\r\n+    content: {\r\n+    promise: filePromise,\r\n+    },\r\n+    metaData: {\r\n+    fileName: fileName\r\n+    }\r\n+    }, {});\r\n+    }\r\n+    registerSaveApiHandler() {\r\n+    const saveApiHandler = (metaData, content, options) => {\r\n+    console.log(metaData, content, options);\r\n+    return new Promise(resolve => {\r\n+    setTimeout(() => {\r\n+    const response = {\r\n+    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+    data: {\r\n+    metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n+    },\r\n+    };\r\n+    resolve(response);\r\n+    }, 2000);\r\n+    });\r\n+    };\r\n+    this.adobeDCView.registerCallback(\r\n+    window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+    saveApiHandler,\r\n+    {}\r\n+    );\r\n+    }\r\n+    registerEventsHandler() {\r\n+    this.adobeDCView.registerCallback(\r\n+    window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+    event => {\r\n+    console.log(event);\r\n+    },\r\n+    {\r\n+    enablePDFAnalytics: true,\r\n+    }\r\n+    );\r\n+    }\r\n+    }\r\n+    export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712913141194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     return this.readyPromise;\r\n     }\r\n     previewFile(divId, viewerConfig, url) {\r\n     const config = {\r\n-    clientId: \"2c4accab69ff4244ac358ef34d13d747\",\r\n+    clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n     };\r\n     if (divId) {\r\n     config.divId = divId;\r\n     }\r\n@@ -36,9 +36,9 @@\n     return previewFilePromise;\r\n     }\r\n     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n     this.adobeDCView = new window.AdobeDC.View({\r\n-    clientId: \"2c4accab69ff4244ac358ef34d13d747\",\r\n+    clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n     divId,\r\n     });\r\n     this.adobeDCView.previewFile({\r\n     content: {\r\n@@ -81,90 +81,5 @@\n     }\r\n     );\r\n     }\r\n     }\r\n-    export default ViewSDKClient;\n-class ViewSDKClient {\r\n-    constructor() {\r\n-    this.readyPromise = new Promise((resolve) => {\r\n-    if (window.AdobeDC) {\r\n-    resolve();\r\n-    } else {\r\n-    document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-    resolve();\r\n-    });\r\n-    }\r\n-    });\r\n-    this.adobeDCView = undefined;\r\n-    }\r\n-    ready() {\r\n-    return this.readyPromise;\r\n-    }\r\n-    previewFile(divId, viewerConfig, url) {\r\n-    const config = {\r\n-    clientId: \"5bfcbeb2d14c49bf95f73dc0eed7f390\",\r\n-    };\r\n-    if (divId) {\r\n-    config.divId = divId;\r\n-    }\r\n-    this.adobeDCView = new window.AdobeDC.View(config);\r\n-    const previewFilePromise = this.adobeDCView.previewFile({\r\n-    content: {\r\n-    location: {\r\n-    url: url,\r\n-    },\r\n-    },\r\n-    metaData: {\r\n-    fileName: \"Menu.pdf\",\r\n-    id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-    }\r\n-    }, viewerConfig);\r\n-    return previewFilePromise;\r\n-    }\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-    this.adobeDCView = new window.AdobeDC.View({\r\n-    clientId: \"5bfcbeb2d14c49bf95f73dc0eed7f390\",\r\n-    divId,\r\n-    });\r\n-    this.adobeDCView.previewFile({\r\n-    content: {\r\n-    promise: filePromise,\r\n-    },\r\n-    metaData: {\r\n-    fileName: fileName\r\n-    }\r\n-    }, {});\r\n-    }\r\n-    registerSaveApiHandler() {\r\n-    const saveApiHandler = (metaData, content, options) => {\r\n-    console.log(metaData, content, options);\r\n-    return new Promise(resolve => {\r\n-    setTimeout(() => {\r\n-    const response = {\r\n-    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-    data: {\r\n-    metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n-    },\r\n-    };\r\n-    resolve(response);\r\n-    }, 2000);\r\n-    });\r\n-    };\r\n-    this.adobeDCView.registerCallback(\r\n-    window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-    saveApiHandler,\r\n-    {}\r\n-    );\r\n-    }\r\n-    registerEventsHandler() {\r\n-    this.adobeDCView.registerCallback(\r\n-    window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-    event => {\r\n-    console.log(event);\r\n-    },\r\n-    {\r\n-    enablePDFAnalytics: true,\r\n-    }\r\n-    );\r\n-    }\r\n-    }\r\n     export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914646183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+    previewFile(divId, viewerConfig, url) {\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        // Add annotation UI configuration to the viewerConfig\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            annotationUIConfig: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs\r\n+                enableAnnotationPanel: true, // Show annotation panel\r\n+            },\r\n+        }\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: \"Menu.pdf\",\r\n+                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+            }\r\n+        }, viewerConfig);\r\n+        return previewFilePromise;\r\n+    }\r\n+    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: fileName\r\n+            }\r\n+        }, {});\r\n+    }\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712916204213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+    previewFile(divId, viewerConfig, url) {\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        // Add annotation UI configuration to the viewerConfig\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            annotationUIConfig: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs\r\n+                enableAnnotationPanel: true, // Show annotation panel\r\n+            },\r\n+        }\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                \r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: \"Menu.pdf\",\r\n+                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+            }\r\n+        }, viewerConfig);\r\n+        return previewFilePromise;\r\n+    }\r\n+    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: fileName\r\n+            }\r\n+        }, {});\r\n+    }\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712916482603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,205 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, fileName) {\r\n+        const fileExtension = fileName.split('.').pop().toLowerCase();\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        \r\n+        // Set different viewer configurations based on file type\r\n+        if (fileExtension === 'pdf') {\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        } else {\r\n+            viewerConfig = {}; // For non-PDF files, disable annotations\r\n+        }\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: fileName,\r\n+                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: fileName\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712916755775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        \r\n+        // Set different viewer configurations based on file type\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        \r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712916791158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         return this.readyPromise;\r\n     }\r\n \r\n     previewFile(divId, viewerConfig, url, data) {\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        // const fileExtension = data.name.split('.').pop().toLowerCase();\r\n         const config = {\r\n             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n         };\r\n \r\n@@ -199,483 +199,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, fileName) {\r\n-        const fileExtension = fileName.split('.').pop().toLowerCase();\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        \r\n-        // Set different viewer configurations based on file type\r\n-        if (fileExtension === 'pdf') {\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        } else {\r\n-            viewerConfig = {}; // For non-PDF files, disable annotations\r\n-        }\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: fileName,\r\n-                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: fileName\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-    previewFile(divId, viewerConfig, url) {\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        // Add annotation UI configuration to the viewerConfig\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            annotationUIConfig: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs\r\n-                enableAnnotationPanel: true, // Show annotation panel\r\n-            },\r\n-        }\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                \r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: \"Menu.pdf\",\r\n-                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-            }\r\n-        }, viewerConfig);\r\n-        return previewFilePromise;\r\n-    }\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: fileName\r\n-            }\r\n-        }, {});\r\n-    }\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-export default ViewSDKClient;\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-    previewFile(divId, viewerConfig, url) {\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        // Add annotation UI configuration to the viewerConfig\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            annotationUIConfig: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs\r\n-                enableAnnotationPanel: true, // Show annotation panel\r\n-            },\r\n-        }\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: \"Menu.pdf\",\r\n-                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-            }\r\n-        }, viewerConfig);\r\n-        return previewFilePromise;\r\n-    }\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: fileName\r\n-            }\r\n-        }, {});\r\n-    }\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-export default ViewSDKClient;\n-class ViewSDKClient {\r\n-    constructor() {\r\n-    this.readyPromise = new Promise((resolve) => {\r\n-    if (window.AdobeDC) {\r\n-    resolve();\r\n-    } else {\r\n-    document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-    resolve();\r\n-    });\r\n-    }\r\n-    });\r\n-    this.adobeDCView = undefined;\r\n-    }\r\n-    ready() {\r\n-    return this.readyPromise;\r\n-    }\r\n-    previewFile(divId, viewerConfig, url) {\r\n-    const config = {\r\n-    clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-    };\r\n-    if (divId) {\r\n-    config.divId = divId;\r\n-    }\r\n-    this.adobeDCView = new window.AdobeDC.View(config);\r\n-    const previewFilePromise = this.adobeDCView.previewFile({\r\n-    content: {\r\n-    location: {\r\n-    url: url,\r\n-    },\r\n-    },\r\n-    metaData: {\r\n-    fileName: \"Menu.pdf\",\r\n-    id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-    }\r\n-    }, viewerConfig);\r\n-    return previewFilePromise;\r\n-    }\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-    this.adobeDCView = new window.AdobeDC.View({\r\n-    clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-    divId,\r\n-    });\r\n-    this.adobeDCView.previewFile({\r\n-    content: {\r\n-    promise: filePromise,\r\n-    },\r\n-    metaData: {\r\n-    fileName: fileName\r\n-    }\r\n-    }, {});\r\n-    }\r\n-    registerSaveApiHandler() {\r\n-    const saveApiHandler = (metaData, content, options) => {\r\n-    console.log(metaData, content, options);\r\n-    return new Promise(resolve => {\r\n-    setTimeout(() => {\r\n-    const response = {\r\n-    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-    data: {\r\n-    metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n-    },\r\n-    };\r\n-    resolve(response);\r\n-    }, 2000);\r\n-    });\r\n-    };\r\n-    this.adobeDCView.registerCallback(\r\n-    window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-    saveApiHandler,\r\n-    {}\r\n-    );\r\n-    }\r\n-    registerEventsHandler() {\r\n-    this.adobeDCView.registerCallback(\r\n-    window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-    event => {\r\n-    console.log(event);\r\n-    },\r\n-    {\r\n-    enablePDFAnalytics: true,\r\n-    }\r\n-    );\r\n-    }\r\n-    }\r\n-    export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712917336663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log( data.name,data)\r\n+        // const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        \r\n+        // Set different viewer configurations based on file type\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        \r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712917670625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set different viewer configurations based on file type\r\n+        if (fileExtension === 'pdf' || fileExtension === 'docx') {\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {\r\n+            // For images, enable specific image viewer options\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+                showAnnotationTools: false, // Disable annotation tools for images\r\n+            };\r\n+        } else {\r\n+            // For unsupported file types, use default viewer configuration\r\n+            viewerConfig = {};\r\n+        }\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712917697709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,215 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(data.name, data,\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set different viewer configurations based on file type\r\n+        if (fileExtension === 'pdf' || fileExtension === 'docx') {\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {\r\n+            // For images, enable specific image viewer options\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+                showAnnotationTools: false, // Disable annotation tools for images\r\n+            };\r\n+        } else {\r\n+            // For unsupported file types, use default viewer configuration\r\n+            viewerConfig = {};\r\n+        }\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712918855137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712918950080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension:fileExtension\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712919002301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,218 +34,9 @@\n //         const previewFilePromise = this.adobeDCView.previewFile({\r\n //             content: {\r\n //                 location: {\r\n //                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n \r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration with all options enabled for all file types\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-            showAnnotationTools: true, // Show annotation tools\r\n-            showDownloadPDF: true, // Show download PDF option\r\n-            showPrintPDF: true, // Show print PDF option\r\n-            enableFormFilling: true, // Enable form filling\r\n-            showLeftHandPanel: true, // Show left-hand panel\r\n-            showSearchPDF: true, // Show search PDF option\r\n-            showDocumentInfo: true, // Show document information\r\n-        };\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension:fileExtension\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n //                 },\r\n //             },\r\n //             metaData: {\r\n //                 fileName: \"Menu.pdf\",\r\n@@ -351,8 +142,10 @@\n         const previewFilePromise = this.adobeDCView.previewFile({\r\n             content: {\r\n                 location: {\r\n                     url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n                 },\r\n             },\r\n             metaData: {\r\n                 fileName: data.name,\r\n@@ -414,840 +207,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(data.name, data,\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set different viewer configurations based on file type\r\n-        if (fileExtension === 'pdf' || fileExtension === 'docx') {\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {\r\n-            // For images, enable specific image viewer options\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-                showAnnotationTools: false, // Disable annotation tools for images\r\n-            };\r\n-        } else {\r\n-            // For unsupported file types, use default viewer configuration\r\n-            viewerConfig = {};\r\n-        }\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set different viewer configurations based on file type\r\n-        if (fileExtension === 'pdf' || fileExtension === 'docx') {\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {\r\n-            // For images, enable specific image viewer options\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-                showAnnotationTools: false, // Disable annotation tools for images\r\n-            };\r\n-        } else {\r\n-            // For unsupported file types, use default viewer configuration\r\n-            viewerConfig = {};\r\n-        }\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log( data.name,data)\r\n-        // const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        \r\n-        // Set different viewer configurations based on file type\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        \r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        \r\n-        // Set different viewer configurations based on file type\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        \r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712920507622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,99 +1,4 @@\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n class ViewSDKClient {\r\n     constructor() {\r\n         this.readyPromise = new Promise((resolve) => {\r\n             if (window.AdobeDC) {\r\n"
                },
                {
                    "date": 1712921260382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    saveAnnotations(annotationData) {\r\n+        if (!this.adobeDCView) {\r\n+            console.error(\"Adobe DC View is not initialized.\");\r\n+            return;\r\n+        }\r\n+console.log(annotationData)\r\n+        // // Make a POST request to a server endpoint with the annotation data\r\n+        // fetch(\"https://example.com/save-annotations\", {\r\n+        //     method: \"POST\",\r\n+        //     headers: {\r\n+        //         \"Content-Type\": \"application/json\",\r\n+        //     },\r\n+        //     body: JSON.stringify(annotationData),\r\n+        // })\r\n+        // .then(response => {\r\n+        //     if (response.ok) {\r\n+        //         console.log(\"Annotations saved successfully.\");\r\n+        //     } else {\r\n+        //         console.error(\"Failed to save annotations.\");\r\n+        //     }\r\n+        // })\r\n+        // .catch(error => {\r\n+        //     console.error(\"Error saving annotations:\", error);\r\n+        // });\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            // Call saveAnnotations with metaData containing annotation data\r\n+            this.saveAnnotations(metaData);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712922198036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    saveAnnotations(annotationData) {\r\n+        if (!this.adobeDCView) {\r\n+            console.error(\"Adobe DC View is not initialized.\");\r\n+            return;\r\n+        }\r\n+\r\n+        let existingAnnotations = [];\r\n+        try {\r\n+            existingAnnotations = JSON.parse(localStorage.getItem('annotations')) || [];\r\n+        } catch (error) {\r\n+            console.error(\"Error parsing existing annotations:\", error);\r\n+        }\r\n+\r\n+        existingAnnotations.push(annotationData);\r\n+\r\n+        localStorage.setItem('annotations', JSON.stringify(existingAnnotations));\r\n+        console.log(\"Annotations saved successfully.\");\r\n+    }\r\n+\r\n+    retrieveAnnotations() {\r\n+        let existingAnnotations = [];\r\n+        try {\r\n+            existingAnnotations = JSON.parse(localStorage.getItem('annotations')) || [];\r\n+        } catch (error) {\r\n+            console.error(\"Error parsing existing annotations:\", error);\r\n+        }\r\n+        return existingAnnotations;\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            this.saveAnnotations(metaData);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                }
            ],
            "date": 1712911622327,
            "name": "Commit-0",
            "content": "class ViewSDKClient {\r\n    constructor() {\r\n    this.readyPromise = new Promise((resolve) => {\r\n    if (window.AdobeDC) {\r\n    resolve();\r\n    } else {\r\n    document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n    resolve();\r\n    });\r\n    }\r\n    });\r\n    this.adobeDCView = undefined;\r\n    }\r\n    ready() {\r\n    return this.readyPromise;\r\n    }\r\n    previewFile(divId, viewerConfig, url) {\r\n    const config = {\r\n    clientId: \"5bfcbeb2d14c49bf95f73dc0eed7f390\",\r\n    };\r\n    if (divId) {\r\n    config.divId = divId;\r\n    }\r\n    this.adobeDCView = new window.AdobeDC.View(config);\r\n    const previewFilePromise = this.adobeDCView.previewFile({\r\n    content: {\r\n    location: {\r\n    url: url,\r\n    },\r\n    },\r\n    metaData: {\r\n    fileName: \"Menu.pdf\",\r\n    id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n    }\r\n    }, viewerConfig);\r\n    return previewFilePromise;\r\n    }\r\n    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n    this.adobeDCView = new window.AdobeDC.View({\r\n    clientId: \"5bfcbeb2d14c49bf95f73dc0eed7f390\",\r\n    divId,\r\n    });\r\n    this.adobeDCView.previewFile({\r\n    content: {\r\n    promise: filePromise,\r\n    },\r\n    metaData: {\r\n    fileName: fileName\r\n    }\r\n    }, {});\r\n    }\r\n    registerSaveApiHandler() {\r\n    const saveApiHandler = (metaData, content, options) => {\r\n    console.log(metaData, content, options);\r\n    return new Promise(resolve => {\r\n    setTimeout(() => {\r\n    const response = {\r\n    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n    data: {\r\n    metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n    },\r\n    };\r\n    resolve(response);\r\n    }, 2000);\r\n    });\r\n    };\r\n    this.adobeDCView.registerCallback(\r\n    window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n    saveApiHandler,\r\n    {}\r\n    );\r\n    }\r\n    registerEventsHandler() {\r\n    this.adobeDCView.registerCallback(\r\n    window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n    event => {\r\n    console.log(event);\r\n    },\r\n    {\r\n    enablePDFAnalytics: true,\r\n    }\r\n    );\r\n    }\r\n    }\r\n    export default ViewSDKClient;"
        }
    ]
}