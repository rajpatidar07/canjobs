{
    "sourceFile": "src/components/common/Adobe/ViewSDKClient.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 74,
            "patches": [
                {
                    "date": 1712911622327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712912666884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+class ViewSDKClient {\r\n+    constructor() {\r\n+    this.readyPromise = new Promise((resolve) => {\r\n+    if (window.AdobeDC) {\r\n+    resolve();\r\n+    } else {\r\n+    document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+    resolve();\r\n+    });\r\n+    }\r\n+    });\r\n+    this.adobeDCView = undefined;\r\n+    }\r\n+    ready() {\r\n+    return this.readyPromise;\r\n+    }\r\n+    previewFile(divId, viewerConfig, url) {\r\n+    const config = {\r\n+    clientId: \"2c4accab69ff4244ac358ef34d13d747\",\r\n+    };\r\n+    if (divId) {\r\n+    config.divId = divId;\r\n+    }\r\n+    this.adobeDCView = new window.AdobeDC.View(config);\r\n+    const previewFilePromise = this.adobeDCView.previewFile({\r\n+    content: {\r\n+    location: {\r\n+    url: url,\r\n+    },\r\n+    },\r\n+    metaData: {\r\n+    fileName: \"Menu.pdf\",\r\n+    id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+    }\r\n+    }, viewerConfig);\r\n+    return previewFilePromise;\r\n+    }\r\n+    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+    this.adobeDCView = new window.AdobeDC.View({\r\n+    clientId: \"2c4accab69ff4244ac358ef34d13d747\",\r\n+    divId,\r\n+    });\r\n+    this.adobeDCView.previewFile({\r\n+    content: {\r\n+    promise: filePromise,\r\n+    },\r\n+    metaData: {\r\n+    fileName: fileName\r\n+    }\r\n+    }, {});\r\n+    }\r\n+    registerSaveApiHandler() {\r\n+    const saveApiHandler = (metaData, content, options) => {\r\n+    console.log(metaData, content, options);\r\n+    return new Promise(resolve => {\r\n+    setTimeout(() => {\r\n+    const response = {\r\n+    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+    data: {\r\n+    metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n+    },\r\n+    };\r\n+    resolve(response);\r\n+    }, 2000);\r\n+    });\r\n+    };\r\n+    this.adobeDCView.registerCallback(\r\n+    window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+    saveApiHandler,\r\n+    {}\r\n+    );\r\n+    }\r\n+    registerEventsHandler() {\r\n+    this.adobeDCView.registerCallback(\r\n+    window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+    event => {\r\n+    console.log(event);\r\n+    },\r\n+    {\r\n+    enablePDFAnalytics: true,\r\n+    }\r\n+    );\r\n+    }\r\n+    }\r\n+    export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712913141194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     return this.readyPromise;\r\n     }\r\n     previewFile(divId, viewerConfig, url) {\r\n     const config = {\r\n-    clientId: \"2c4accab69ff4244ac358ef34d13d747\",\r\n+    clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n     };\r\n     if (divId) {\r\n     config.divId = divId;\r\n     }\r\n@@ -36,9 +36,9 @@\n     return previewFilePromise;\r\n     }\r\n     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n     this.adobeDCView = new window.AdobeDC.View({\r\n-    clientId: \"2c4accab69ff4244ac358ef34d13d747\",\r\n+    clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n     divId,\r\n     });\r\n     this.adobeDCView.previewFile({\r\n     content: {\r\n@@ -81,90 +81,5 @@\n     }\r\n     );\r\n     }\r\n     }\r\n-    export default ViewSDKClient;\n-class ViewSDKClient {\r\n-    constructor() {\r\n-    this.readyPromise = new Promise((resolve) => {\r\n-    if (window.AdobeDC) {\r\n-    resolve();\r\n-    } else {\r\n-    document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-    resolve();\r\n-    });\r\n-    }\r\n-    });\r\n-    this.adobeDCView = undefined;\r\n-    }\r\n-    ready() {\r\n-    return this.readyPromise;\r\n-    }\r\n-    previewFile(divId, viewerConfig, url) {\r\n-    const config = {\r\n-    clientId: \"5bfcbeb2d14c49bf95f73dc0eed7f390\",\r\n-    };\r\n-    if (divId) {\r\n-    config.divId = divId;\r\n-    }\r\n-    this.adobeDCView = new window.AdobeDC.View(config);\r\n-    const previewFilePromise = this.adobeDCView.previewFile({\r\n-    content: {\r\n-    location: {\r\n-    url: url,\r\n-    },\r\n-    },\r\n-    metaData: {\r\n-    fileName: \"Menu.pdf\",\r\n-    id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-    }\r\n-    }, viewerConfig);\r\n-    return previewFilePromise;\r\n-    }\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-    this.adobeDCView = new window.AdobeDC.View({\r\n-    clientId: \"5bfcbeb2d14c49bf95f73dc0eed7f390\",\r\n-    divId,\r\n-    });\r\n-    this.adobeDCView.previewFile({\r\n-    content: {\r\n-    promise: filePromise,\r\n-    },\r\n-    metaData: {\r\n-    fileName: fileName\r\n-    }\r\n-    }, {});\r\n-    }\r\n-    registerSaveApiHandler() {\r\n-    const saveApiHandler = (metaData, content, options) => {\r\n-    console.log(metaData, content, options);\r\n-    return new Promise(resolve => {\r\n-    setTimeout(() => {\r\n-    const response = {\r\n-    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-    data: {\r\n-    metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n-    },\r\n-    };\r\n-    resolve(response);\r\n-    }, 2000);\r\n-    });\r\n-    };\r\n-    this.adobeDCView.registerCallback(\r\n-    window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-    saveApiHandler,\r\n-    {}\r\n-    );\r\n-    }\r\n-    registerEventsHandler() {\r\n-    this.adobeDCView.registerCallback(\r\n-    window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-    event => {\r\n-    console.log(event);\r\n-    },\r\n-    {\r\n-    enablePDFAnalytics: true,\r\n-    }\r\n-    );\r\n-    }\r\n-    }\r\n     export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712914646183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+    previewFile(divId, viewerConfig, url) {\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        // Add annotation UI configuration to the viewerConfig\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            annotationUIConfig: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs\r\n+                enableAnnotationPanel: true, // Show annotation panel\r\n+            },\r\n+        }\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: \"Menu.pdf\",\r\n+                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+            }\r\n+        }, viewerConfig);\r\n+        return previewFilePromise;\r\n+    }\r\n+    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: fileName\r\n+            }\r\n+        }, {});\r\n+    }\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712916204213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+    previewFile(divId, viewerConfig, url) {\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        // Add annotation UI configuration to the viewerConfig\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            annotationUIConfig: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs\r\n+                enableAnnotationPanel: true, // Show annotation panel\r\n+            },\r\n+        }\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                \r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: \"Menu.pdf\",\r\n+                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+            }\r\n+        }, viewerConfig);\r\n+        return previewFilePromise;\r\n+    }\r\n+    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: fileName\r\n+            }\r\n+        }, {});\r\n+    }\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712916482603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,205 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, fileName) {\r\n+        const fileExtension = fileName.split('.').pop().toLowerCase();\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        \r\n+        // Set different viewer configurations based on file type\r\n+        if (fileExtension === 'pdf') {\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        } else {\r\n+            viewerConfig = {}; // For non-PDF files, disable annotations\r\n+        }\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: fileName,\r\n+                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: fileName\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712916755775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        \r\n+        // Set different viewer configurations based on file type\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        \r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712916791158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         return this.readyPromise;\r\n     }\r\n \r\n     previewFile(divId, viewerConfig, url, data) {\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        // const fileExtension = data.name.split('.').pop().toLowerCase();\r\n         const config = {\r\n             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n         };\r\n \r\n@@ -199,483 +199,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, fileName) {\r\n-        const fileExtension = fileName.split('.').pop().toLowerCase();\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        \r\n-        // Set different viewer configurations based on file type\r\n-        if (fileExtension === 'pdf') {\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        } else {\r\n-            viewerConfig = {}; // For non-PDF files, disable annotations\r\n-        }\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: fileName,\r\n-                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: fileName\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-    previewFile(divId, viewerConfig, url) {\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        // Add annotation UI configuration to the viewerConfig\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            annotationUIConfig: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs\r\n-                enableAnnotationPanel: true, // Show annotation panel\r\n-            },\r\n-        }\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                \r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: \"Menu.pdf\",\r\n-                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-            }\r\n-        }, viewerConfig);\r\n-        return previewFilePromise;\r\n-    }\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: fileName\r\n-            }\r\n-        }, {});\r\n-    }\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-export default ViewSDKClient;\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-    previewFile(divId, viewerConfig, url) {\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        // Add annotation UI configuration to the viewerConfig\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            annotationUIConfig: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs\r\n-                enableAnnotationPanel: true, // Show annotation panel\r\n-            },\r\n-        }\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: \"Menu.pdf\",\r\n-                id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-            }\r\n-        }, viewerConfig);\r\n-        return previewFilePromise;\r\n-    }\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: fileName\r\n-            }\r\n-        }, {});\r\n-    }\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-export default ViewSDKClient;\n-class ViewSDKClient {\r\n-    constructor() {\r\n-    this.readyPromise = new Promise((resolve) => {\r\n-    if (window.AdobeDC) {\r\n-    resolve();\r\n-    } else {\r\n-    document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-    resolve();\r\n-    });\r\n-    }\r\n-    });\r\n-    this.adobeDCView = undefined;\r\n-    }\r\n-    ready() {\r\n-    return this.readyPromise;\r\n-    }\r\n-    previewFile(divId, viewerConfig, url) {\r\n-    const config = {\r\n-    clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-    };\r\n-    if (divId) {\r\n-    config.divId = divId;\r\n-    }\r\n-    this.adobeDCView = new window.AdobeDC.View(config);\r\n-    const previewFilePromise = this.adobeDCView.previewFile({\r\n-    content: {\r\n-    location: {\r\n-    url: url,\r\n-    },\r\n-    },\r\n-    metaData: {\r\n-    fileName: \"Menu.pdf\",\r\n-    id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-    }\r\n-    }, viewerConfig);\r\n-    return previewFilePromise;\r\n-    }\r\n-    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-    this.adobeDCView = new window.AdobeDC.View({\r\n-    clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-    divId,\r\n-    });\r\n-    this.adobeDCView.previewFile({\r\n-    content: {\r\n-    promise: filePromise,\r\n-    },\r\n-    metaData: {\r\n-    fileName: fileName\r\n-    }\r\n-    }, {});\r\n-    }\r\n-    registerSaveApiHandler() {\r\n-    const saveApiHandler = (metaData, content, options) => {\r\n-    console.log(metaData, content, options);\r\n-    return new Promise(resolve => {\r\n-    setTimeout(() => {\r\n-    const response = {\r\n-    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-    data: {\r\n-    metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n-    },\r\n-    };\r\n-    resolve(response);\r\n-    }, 2000);\r\n-    });\r\n-    };\r\n-    this.adobeDCView.registerCallback(\r\n-    window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-    saveApiHandler,\r\n-    {}\r\n-    );\r\n-    }\r\n-    registerEventsHandler() {\r\n-    this.adobeDCView.registerCallback(\r\n-    window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-    event => {\r\n-    console.log(event);\r\n-    },\r\n-    {\r\n-    enablePDFAnalytics: true,\r\n-    }\r\n-    );\r\n-    }\r\n-    }\r\n-    export default ViewSDKClient;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1712917336663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log( data.name,data)\r\n+        // const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+        \r\n+        // Set different viewer configurations based on file type\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        \r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712917670625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set different viewer configurations based on file type\r\n+        if (fileExtension === 'pdf' || fileExtension === 'docx') {\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {\r\n+            // For images, enable specific image viewer options\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+                showAnnotationTools: false, // Disable annotation tools for images\r\n+            };\r\n+        } else {\r\n+            // For unsupported file types, use default viewer configuration\r\n+            viewerConfig = {};\r\n+        }\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712917697709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,215 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(data.name, data,\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set different viewer configurations based on file type\r\n+        if (fileExtension === 'pdf' || fileExtension === 'docx') {\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                annotationUIConfig: {\r\n+                    enableAnnotationAPIs: true,\r\n+                    enableAnnotationPanel: true,\r\n+                },\r\n+            };\r\n+        } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {\r\n+            // For images, enable specific image viewer options\r\n+            viewerConfig = {\r\n+                ...viewerConfig,\r\n+                embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+                showAnnotationTools: false, // Disable annotation tools for images\r\n+            };\r\n+        } else {\r\n+            // For unsupported file types, use default viewer configuration\r\n+            viewerConfig = {};\r\n+        }\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712918855137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712918950080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+//     previewFile(divId, viewerConfig, url) {\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+//         // Add annotation UI configuration to the viewerConfig\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             annotationUIConfig: {\r\n+//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n+//                 enableAnnotationPanel: true, // Show annotation panel\r\n+//             },\r\n+//         }\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+                \r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: \"Menu.pdf\",\r\n+//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n+//             }\r\n+//         }, viewerConfig);\r\n+//         return previewFilePromise;\r\n+//     }\r\n+//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: fileName\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension:fileExtension\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712919002301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,218 +34,9 @@\n //         const previewFilePromise = this.adobeDCView.previewFile({\r\n //             content: {\r\n //                 location: {\r\n //                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n \r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration with all options enabled for all file types\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-            showAnnotationTools: true, // Show annotation tools\r\n-            showDownloadPDF: true, // Show download PDF option\r\n-            showPrintPDF: true, // Show print PDF option\r\n-            enableFormFilling: true, // Enable form filling\r\n-            showLeftHandPanel: true, // Show left-hand panel\r\n-            showSearchPDF: true, // Show search PDF option\r\n-            showDocumentInfo: true, // Show document information\r\n-        };\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension:fileExtension\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n //                 },\r\n //             },\r\n //             metaData: {\r\n //                 fileName: \"Menu.pdf\",\r\n@@ -351,8 +142,10 @@\n         const previewFilePromise = this.adobeDCView.previewFile({\r\n             content: {\r\n                 location: {\r\n                     url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n                 },\r\n             },\r\n             metaData: {\r\n                 fileName: data.name,\r\n@@ -414,840 +207,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(data.name, data,\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set different viewer configurations based on file type\r\n-        if (fileExtension === 'pdf' || fileExtension === 'docx') {\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {\r\n-            // For images, enable specific image viewer options\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-                showAnnotationTools: false, // Disable annotation tools for images\r\n-            };\r\n-        } else {\r\n-            // For unsupported file types, use default viewer configuration\r\n-            viewerConfig = {};\r\n-        }\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set different viewer configurations based on file type\r\n-        if (fileExtension === 'pdf' || fileExtension === 'docx') {\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        } else if (fileExtension === 'jpg' || fileExtension === 'jpeg' || fileExtension === 'png') {\r\n-            // For images, enable specific image viewer options\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-                showAnnotationTools: false, // Disable annotation tools for images\r\n-            };\r\n-        } else {\r\n-            // For unsupported file types, use default viewer configuration\r\n-            viewerConfig = {};\r\n-        }\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log( data.name,data)\r\n-        // const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        \r\n-        // Set different viewer configurations based on file type\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        \r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-                \r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-        \r\n-        // Set different viewer configurations based on file type\r\n-            viewerConfig = {\r\n-                ...viewerConfig,\r\n-                annotationUIConfig: {\r\n-                    enableAnnotationAPIs: true,\r\n-                    enableAnnotationPanel: true,\r\n-                },\r\n-            };\r\n-        \r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712920507622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,99 +1,4 @@\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-//     previewFile(divId, viewerConfig, url) {\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-//         // Add annotation UI configuration to the viewerConfig\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             annotationUIConfig: {\r\n-//                 enableAnnotationAPIs: true, // Enable annotation APIs\r\n-//                 enableAnnotationPanel: true, // Show annotation panel\r\n-//             },\r\n-//         }\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: \"Menu.pdf\",\r\n-//                 id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n-//             }\r\n-//         }, viewerConfig);\r\n-//         return previewFilePromise;\r\n-//     }\r\n-//     previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: fileName\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-// export default ViewSDKClient;\r\n class ViewSDKClient {\r\n     constructor() {\r\n         this.readyPromise = new Promise((resolve) => {\r\n             if (window.AdobeDC) {\r\n"
                },
                {
                    "date": 1712921260382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    saveAnnotations(annotationData) {\r\n+        if (!this.adobeDCView) {\r\n+            console.error(\"Adobe DC View is not initialized.\");\r\n+            return;\r\n+        }\r\n+console.log(annotationData)\r\n+        // // Make a POST request to a server endpoint with the annotation data\r\n+        // fetch(\"https://example.com/save-annotations\", {\r\n+        //     method: \"POST\",\r\n+        //     headers: {\r\n+        //         \"Content-Type\": \"application/json\",\r\n+        //     },\r\n+        //     body: JSON.stringify(annotationData),\r\n+        // })\r\n+        // .then(response => {\r\n+        //     if (response.ok) {\r\n+        //         console.log(\"Annotations saved successfully.\");\r\n+        //     } else {\r\n+        //         console.error(\"Failed to save annotations.\");\r\n+        //     }\r\n+        // })\r\n+        // .catch(error => {\r\n+        //     console.error(\"Error saving annotations:\", error);\r\n+        // });\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            // Call saveAnnotations with metaData containing annotation data\r\n+            this.saveAnnotations(metaData);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712922198036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+    }\r\n+\r\n+    saveAnnotations(annotationData) {\r\n+        if (!this.adobeDCView) {\r\n+            console.error(\"Adobe DC View is not initialized.\");\r\n+            return;\r\n+        }\r\n+\r\n+        let existingAnnotations = [];\r\n+        try {\r\n+            existingAnnotations = JSON.parse(localStorage.getItem('annotations')) || [];\r\n+        } catch (error) {\r\n+            console.error(\"Error parsing existing annotations:\", error);\r\n+        }\r\n+\r\n+        existingAnnotations.push(annotationData);\r\n+\r\n+        localStorage.setItem('annotations', JSON.stringify(existingAnnotations));\r\n+        console.log(\"Annotations saved successfully.\");\r\n+    }\r\n+\r\n+    retrieveAnnotations() {\r\n+        let existingAnnotations = [];\r\n+        try {\r\n+            existingAnnotations = JSON.parse(localStorage.getItem('annotations')) || [];\r\n+        } catch (error) {\r\n+            console.error(\"Error parsing existing annotations:\", error);\r\n+        }\r\n+        return existingAnnotations;\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            this.saveAnnotations(metaData);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712922966108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,119 +1,4 @@\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n class ViewSDKClient {\r\n     constructor() {\r\n         this.readyPromise = new Promise((resolve) => {\r\n             if (window.AdobeDC) {\r\n@@ -145,266 +30,8 @@\n         }\r\n \r\n         this.adobeDCView = new window.AdobeDC.View(config);\r\n \r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    saveAnnotations(annotationData) {\r\n-        if (!this.adobeDCView) {\r\n-            console.error(\"Adobe DC View is not initialized.\");\r\n-            return;\r\n-        }\r\n-\r\n-        let existingAnnotations = [];\r\n-        try {\r\n-            existingAnnotations = JSON.parse(localStorage.getItem('annotations')) || [];\r\n-        } catch (error) {\r\n-            console.error(\"Error parsing existing annotations:\", error);\r\n-        }\r\n-\r\n-        existingAnnotations.push(annotationData);\r\n-\r\n-        localStorage.setItem('annotations', JSON.stringify(existingAnnotations));\r\n-        console.log(\"Annotations saved successfully.\");\r\n-    }\r\n-\r\n-    retrieveAnnotations() {\r\n-        let existingAnnotations = [];\r\n-        try {\r\n-            existingAnnotations = JSON.parse(localStorage.getItem('annotations')) || [];\r\n-        } catch (error) {\r\n-            console.error(\"Error parsing existing annotations:\", error);\r\n-        }\r\n-        return existingAnnotations;\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            this.saveAnnotations(metaData);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n         // Set viewer configuration with all options enabled for all file types\r\n         viewerConfig = {\r\n             ...viewerConfig,\r\n             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n@@ -449,152 +76,10 @@\n             }\r\n         }, {});\r\n     }\r\n \r\n-    saveAnnotations(annotationData) {\r\n-        if (!this.adobeDCView) {\r\n-            console.error(\"Adobe DC View is not initialized.\");\r\n-            return;\r\n-        }\r\n-console.log(annotationData)\r\n-        // // Make a POST request to a server endpoint with the annotation data\r\n-        // fetch(\"https://example.com/save-annotations\", {\r\n-        //     method: \"POST\",\r\n-        //     headers: {\r\n-        //         \"Content-Type\": \"application/json\",\r\n-        //     },\r\n-        //     body: JSON.stringify(annotationData),\r\n-        // })\r\n-        // .then(response => {\r\n-        //     if (response.ok) {\r\n-        //         console.log(\"Annotations saved successfully.\");\r\n-        //     } else {\r\n-        //         console.error(\"Failed to save annotations.\");\r\n-        //     }\r\n-        // })\r\n-        // .catch(error => {\r\n-        //     console.error(\"Error saving annotations:\", error);\r\n-        // });\r\n-    }\r\n-\r\n     registerSaveApiHandler() {\r\n         const saveApiHandler = (metaData, content, options) => {\r\n-            // Call saveAnnotations with metaData containing annotation data\r\n-            this.saveAnnotations(metaData);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration with all options enabled for all file types\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-            showAnnotationTools: true, // Show annotation tools\r\n-            showDownloadPDF: true, // Show download PDF option\r\n-            showPrintPDF: true, // Show print PDF option\r\n-            enableFormFilling: true, // Enable form filling\r\n-            showLeftHandPanel: true, // Show left-hand panel\r\n-            showSearchPDF: true, // Show search PDF option\r\n-            showDocumentInfo: true, // Show document information\r\n-        };\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n             console.log(metaData, content, options);\r\n             return new Promise(resolve => {\r\n                 setTimeout(() => {\r\n                     const response = {\r\n"
                },
                {
                    "date": 1712923153436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,243 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        this.registerSaveApiHandler(); // Register save API handler\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        this.registerSaveApiHandler(); // Register save API handler\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    localStorage.setItem(\"annotations\", JSON.stringify(savedData));\r\n+\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712924732153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,244 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        this.registerSaveApiHandler(); // Register save API handler\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        this.registerSaveApiHandler(); // Register save API handler\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    localStorage.setItem(documentId, JSON.stringify(savedData));\r\n+    \r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712924737854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,244 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+    }\r\n+\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration with all options enabled for all file types\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+            showAnnotationTools: true, // Show annotation tools\r\n+            showDownloadPDF: true, // Show download PDF option\r\n+            showPrintPDF: true, // Show print PDF option\r\n+            enableFormFilling: true, // Enable form filling\r\n+            showLeftHandPanel: true, // Show left-hand panel\r\n+            showSearchPDF: true, // Show search PDF option\r\n+            showDocumentInfo: true, // Show document information\r\n+        };\r\n+\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        this.registerSaveApiHandler(); // Register save API handler\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        this.registerSaveApiHandler(); // Register save API handler\r\n+    }\r\n+\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    localStorage.setItem(documentId, JSON.stringify(savedData));\r\n+    \r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712925444993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        // Register save API handler\r\n+        this.registerSaveApiHandler();\r\n+    }\r\n+\r\n+    // Method to register a save API handler\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content, options);\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    localStorage.setItem(documentId, JSON.stringify(savedData));\r\n+\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712926165679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,15 +207,15 @@\n \r\n     // Method to register a save API handler\r\n     registerSaveApiHandler() {\r\n         const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n             return new Promise(resolve => {\r\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n                     savedData[metaData.id] = content;\r\n-                    localStorage.setItem(documentId, JSON.stringify(savedData));\r\n+                    console.log(\"data\",savedData)\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n                     const response = {\r\n                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n                         data: {\r\n@@ -235,9 +235,9 @@\n     }\r\n \r\n     // Method to retrieve annotations from local storage\r\n     retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n         return savedData[documentId] || {};\r\n     }\r\n \r\n     // Method to register event handlers\r\n@@ -254,850 +254,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration with all options enabled for all file types\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-            showAnnotationTools: true, // Show annotation tools\r\n-            showDownloadPDF: true, // Show download PDF option\r\n-            showPrintPDF: true, // Show print PDF option\r\n-            enableFormFilling: true, // Enable form filling\r\n-            showLeftHandPanel: true, // Show left-hand panel\r\n-            showSearchPDF: true, // Show search PDF option\r\n-            showDocumentInfo: true, // Show document information\r\n-        };\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        this.registerSaveApiHandler(); // Register save API handler\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        this.registerSaveApiHandler(); // Register save API handler\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    localStorage.setItem(documentId, JSON.stringify(savedData));\r\n-    \r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration with all options enabled for all file types\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-            showAnnotationTools: true, // Show annotation tools\r\n-            showDownloadPDF: true, // Show download PDF option\r\n-            showPrintPDF: true, // Show print PDF option\r\n-            enableFormFilling: true, // Enable form filling\r\n-            showLeftHandPanel: true, // Show left-hand panel\r\n-            showSearchPDF: true, // Show search PDF option\r\n-            showDocumentInfo: true, // Show document information\r\n-        };\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        this.registerSaveApiHandler(); // Register save API handler\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        this.registerSaveApiHandler(); // Register save API handler\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    localStorage.setItem(documentId, JSON.stringify(savedData));\r\n-    \r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration with all options enabled for all file types\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-            showAnnotationTools: true, // Show annotation tools\r\n-            showDownloadPDF: true, // Show download PDF option\r\n-            showPrintPDF: true, // Show print PDF option\r\n-            enableFormFilling: true, // Enable form filling\r\n-            showLeftHandPanel: true, // Show left-hand panel\r\n-            showSearchPDF: true, // Show search PDF option\r\n-            showDocumentInfo: true, // Show document information\r\n-        };\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        this.registerSaveApiHandler(); // Register save API handler\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        this.registerSaveApiHandler(); // Register save API handler\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    localStorage.setItem(\"annotations\", JSON.stringify(savedData));\r\n-\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(\"annotations\")) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-    }\r\n-\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration with all options enabled for all file types\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-            showAnnotationTools: true, // Show annotation tools\r\n-            showDownloadPDF: true, // Show download PDF option\r\n-            showPrintPDF: true, // Show print PDF option\r\n-            enableFormFilling: true, // Enable form filling\r\n-            showLeftHandPanel: true, // Show left-hand panel\r\n-            showSearchPDF: true, // Show search PDF option\r\n-            showDocumentInfo: true, // Show document information\r\n-        };\r\n-\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-    }\r\n-\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content, options);\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712926767782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,15 +212,21 @@\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n                     savedData[metaData.id] = content;\r\n-                    console.log(\"data\",savedData)\r\n+                    console.log(\"data\", savedData);\r\n                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n+                    // Set a sample message for the annotation\r\n+                    const annotationMessage = \"This is a sample annotation message.\";\r\n+\r\n                     const response = {\r\n                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n                         data: {\r\n-                            metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: annotationMessage // Set the annotation message here\r\n+                            })\r\n                         },\r\n                     };\r\n                     resolve(response);\r\n                 }, 2000);\r\n"
                },
                {
                    "date": 1712926870693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,263 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler(annotationMessage) {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(\"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: annotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1712927114806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,263 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler(annotationMessage) {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(annotationMessage,\"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: annotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713157868998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,225 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+\r\n+import React, { useEffect } from 'react';\r\n+\r\n+const ViewSDKClient = () => {\r\n+  const urlToPDF =\r\n+    \"https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf\";\r\n+  const fileID = \"3A5E36C8AA950DCDEBFBFE46FFCDE0A6\"; // The fileID binds the annotations to the document\r\n+  const clientID = \"e800d12fc12c4d60960778b2bc4370af\";\r\n+\r\n+  const viewerOptions = {\r\n+    embedMode: \"FULL_WINDOW\",\r\n+    defaultViewMode: \"FIT_PAGE\",\r\n+    showDownloadPDF: true,\r\n+    showPrintPDF: true,\r\n+    showLeftHandPanel: false,\r\n+    showAnnotationTools: true,\r\n+    enableAnnotationAPIs: true\r\n+  };\r\n+\r\n+  const annotationManagerConfig = {\r\n+    showToolbar: true,\r\n+    showCommentsPanel: true,\r\n+    downloadWithAnnotations: true,\r\n+    printWithAnnotations: true\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const previewPDF = async (view, pdfURL) => {\r\n+      try {\r\n+        const res = await fetch(pdfURL);\r\n+        const blob = await res.blob();\r\n+\r\n+        const previewPromise = view.previewFile(\r\n+          {\r\n+            content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+            metaData: {\r\n+              fileName: pdfURL.split(\"/\").slice(-1)[0],\r\n+              id: fileID\r\n+            }\r\n+          },\r\n+          viewerOptions\r\n+        );\r\n+        createAnnotationManager(previewPromise);\r\n+      } catch (error) {\r\n+        console.error(\"Error loading PDF:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    const createAnnotationManager = (previewPromise) => {\r\n+      previewPromise.then((view) => {\r\n+        view.getAnnotationManager().then((annotationManager) => {\r\n+          annotationManager.setConfig(annotationManagerConfig);\r\n+          addAnnotations(annotationManager);\r\n+        });\r\n+      });\r\n+    };\r\n+\r\n+    const addAnnotations = (annotationManager) => {\r\n+      const annotationURLs = [\r\n+        \"https://assets.codepen.io/4479906/underline.json\",\r\n+        \"https://assets.codepen.io/4479906/highlight.json\",\r\n+        \"https://assets.codepen.io/4479906/scribble.json\"\r\n+      ];\r\n+      for (let i = 0; i < annotationURLs.length; i++) {\r\n+        const annotURL = annotationURLs[i];\r\n+        fetch(annotURL)\r\n+          .then((response) => response.json())\r\n+          .then((json) => {\r\n+            annotationManager.addAnnotations([json]);\r\n+          });\r\n+      }\r\n+    };\r\n+\r\n+    const initializePDFViewer = () => {\r\n+      document.addEventListener(\"adobe_dc_view_sdk.ready\", function () {\r\n+        const embeddedView = new AdobeDC.View({\r\n+          clientId: clientID,\r\n+          divId: \"embeddedView\"\r\n+        });\r\n+        previewPDF(embeddedView, urlToPDF, fileID);\r\n+      });\r\n+\r\n+      // Add arrayBuffer if necessary i.e. Safari\r\n+      if (Blob.arrayBuffer !== \"function\") {\r\n+        Blob.prototype.arrayBuffer = myArrayBuffer;\r\n+      }\r\n+\r\n+      function myArrayBuffer() {\r\n+        return new Promise((resolve) => {\r\n+          let fileReader = new FileReader();\r\n+          fileReader.onload = () => {\r\n+            resolve(fileReader.result);\r\n+          };\r\n+          fileReader.readAsArrayBuffer(this);\r\n+        });\r\n+      }\r\n+    };\r\n+\r\n+    initializePDFViewer();\r\n+\r\n+    // Clean up event listeners on unmount\r\n+    return () => {\r\n+      document.removeEventListener(\"adobe_dc_view_sdk.ready\", initializePDFViewer);\r\n+    };\r\n+  }, []);\r\n+\r\n+  return <div id=\"embeddedView\"></div>;\r\n+};\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713158021331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,114 +112,253 @@\n //     }\r\n // }\r\n \r\n // export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n \r\n-import React, { useEffect } from 'react';\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n \r\n-const ViewSDKClient = () => {\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage,\"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+import React, { useEffect, useState } from 'react';\r\n+\r\n+const AdobePDFViewer = () => {\r\n+  const [view, setView] = useState(null);\r\n   const urlToPDF =\r\n-    \"https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf\";\r\n-  const fileID = \"3A5E36C8AA950DCDEBFBFE46FFCDE0A6\"; // The fileID binds the annotations to the document\r\n-  const clientID = \"e800d12fc12c4d60960778b2bc4370af\";\r\n+    'https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf';\r\n+  const fileID = '3A5E36C8AA950DCDEBFBFE46FFCDE0A6'; // The fileID binds the annotations to the document\r\n+  const clientID = 'e800d12fc12c4d60960778b2bc4370af';\r\n \r\n   const viewerOptions = {\r\n-    embedMode: \"FULL_WINDOW\",\r\n-    defaultViewMode: \"FIT_PAGE\",\r\n+    embedMode: 'FULL_WINDOW',\r\n+    defaultViewMode: 'FIT_PAGE',\r\n     showDownloadPDF: true,\r\n     showPrintPDF: true,\r\n     showLeftHandPanel: false,\r\n     showAnnotationTools: true,\r\n-    enableAnnotationAPIs: true\r\n+    enableAnnotationAPIs: true,\r\n   };\r\n \r\n   const annotationManagerConfig = {\r\n     showToolbar: true,\r\n     showCommentsPanel: true,\r\n     downloadWithAnnotations: true,\r\n-    printWithAnnotations: true\r\n+    printWithAnnotations: true,\r\n   };\r\n \r\n   useEffect(() => {\r\n-    const previewPDF = async (view, pdfURL) => {\r\n-      try {\r\n-        const res = await fetch(pdfURL);\r\n-        const blob = await res.blob();\r\n-\r\n-        const previewPromise = view.previewFile(\r\n-          {\r\n-            content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-            metaData: {\r\n-              fileName: pdfURL.split(\"/\").slice(-1)[0],\r\n-              id: fileID\r\n-            }\r\n-          },\r\n-          viewerOptions\r\n-        );\r\n-        createAnnotationManager(previewPromise);\r\n-      } catch (error) {\r\n-        console.error(\"Error loading PDF:\", error);\r\n-      }\r\n-    };\r\n-\r\n-    const createAnnotationManager = (previewPromise) => {\r\n-      previewPromise.then((view) => {\r\n-        view.getAnnotationManager().then((annotationManager) => {\r\n-          annotationManager.setConfig(annotationManagerConfig);\r\n-          addAnnotations(annotationManager);\r\n+    const adobeDCViewPromise = new Promise((resolve) => {\r\n+      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n+        const embeddedView = new AdobeDC.View({\r\n+          clientId: clientID,\r\n+          divId: 'adobe-dc-view',\r\n         });\r\n+        resolve(embeddedView);\r\n       });\r\n-    };\r\n+    });\r\n \r\n-    const addAnnotations = (annotationManager) => {\r\n-      const annotationURLs = [\r\n-        \"https://assets.codepen.io/4479906/underline.json\",\r\n-        \"https://assets.codepen.io/4479906/highlight.json\",\r\n-        \"https://assets.codepen.io/4479906/scribble.json\"\r\n-      ];\r\n-      for (let i = 0; i < annotationURLs.length; i++) {\r\n-        const annotURL = annotationURLs[i];\r\n-        fetch(annotURL)\r\n-          .then((response) => response.json())\r\n-          .then((json) => {\r\n-            annotationManager.addAnnotations([json]);\r\n-          });\r\n-      }\r\n+    adobeDCViewPromise.then((embeddedView) => {\r\n+      setView(embeddedView);\r\n+    });\r\n+\r\n+    // Clean up event listener\r\n+    return () => {\r\n+      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n     };\r\n+  }, [clientID]);\r\n \r\n-    const initializePDFViewer = () => {\r\n-      document.addEventListener(\"adobe_dc_view_sdk.ready\", function () {\r\n-        const embeddedView = new AdobeDC.View({\r\n-          clientId: clientID,\r\n-          divId: \"embeddedView\"\r\n+  useEffect(() => {\r\n+    if (view) {\r\n+      fetch(urlToPDF)\r\n+        .then((res) => res.blob())\r\n+        .then((blob) => {\r\n+          const previewPromise = view.previewFile(\r\n+            {\r\n+              // The file content\r\n+              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n+              metaData: {\r\n+                fileName: urlToPDF.split('/').slice(-1)[0],\r\n+                id: fileID,\r\n+              },\r\n+            },\r\n+            viewerOptions\r\n+          );\r\n+          createAnnotationManager(previewPromise);\r\n         });\r\n-        previewPDF(embeddedView, urlToPDF, fileID);\r\n+    }\r\n+  }, [view, urlToPDF, fileID]);\r\n+\r\n+  function createAnnotationManager(previewPromise) {\r\n+    previewPromise.then((adobeView) => {\r\n+      adobeView.getAnnotationManager().then((annotationManager) => {\r\n+        annotationManager.setConfig(annotationManagerConfig);\r\n+        addAnnotations(annotationManager);\r\n       });\r\n+    });\r\n+  }\r\n \r\n-      // Add arrayBuffer if necessary i.e. Safari\r\n-      if (Blob.arrayBuffer !== \"function\") {\r\n-        Blob.prototype.arrayBuffer = myArrayBuffer;\r\n-      }\r\n+  function addAnnotations(annotationManager) {\r\n+    const annotationURLs = [\r\n+      'https://assets.codepen.io/4479906/underline.json',\r\n+      'https://assets.codepen.io/4479906/highlight.json',\r\n+      'https://assets.codepen.io/4479906/scribble.json',\r\n+    ];\r\n \r\n-      function myArrayBuffer() {\r\n-        return new Promise((resolve) => {\r\n-          let fileReader = new FileReader();\r\n-          fileReader.onload = () => {\r\n-            resolve(fileReader.result);\r\n-          };\r\n-          fileReader.readAsArrayBuffer(this);\r\n+    annotationURLs.forEach((annotURL) => {\r\n+      fetch(annotURL)\r\n+        .then((response) => response.json())\r\n+        .then((json) => {\r\n+          annotationManager.addAnnotations([json]);\r\n         });\r\n-      }\r\n-    };\r\n+    });\r\n+  }\r\n \r\n-    initializePDFViewer();\r\n-\r\n-    // Clean up event listeners on unmount\r\n-    return () => {\r\n-      document.removeEventListener(\"adobe_dc_view_sdk.ready\", initializePDFViewer);\r\n-    };\r\n-  }, []);\r\n-\r\n-  return <div id=\"embeddedView\"></div>;\r\n+  return (\r\n+    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '600px' }}>\r\n+      {/* AdobeDC View will be rendered here */}\r\n+    </div>\r\n+  );\r\n };\r\n \r\n-export default ViewSDKClient;\r\n+export default AdobePDFViewer;\r\n"
                },
                {
                    "date": 1713158106599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,263 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler(annotationMessage) {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(annotationMessage,\"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: annotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713245860101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n         console.log(\"File extension:\", fileExtension);\r\n \r\n         const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n         };\r\n \r\n         if (divId) {\r\n             config.divId = divId;\r\n@@ -188,9 +188,9 @@\n \r\n     // Method to preview a file using a file promise\r\n     previewFileUsingFilePromise(divId, filePromise, data) {\r\n         this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n             divId,\r\n         });\r\n \r\n         this.adobeDCView.previewFile({\r\n@@ -260,1157 +260,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage,\"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-import React, { useEffect, useState } from 'react';\r\n-\r\n-const AdobePDFViewer = () => {\r\n-  const [view, setView] = useState(null);\r\n-  const urlToPDF =\r\n-    'https://documentcloud.adobe.com/view-sdk-demo/PDFs/Summary.pdf';\r\n-  const fileID = '3A5E36C8AA950DCDEBFBFE46FFCDE0A6'; // The fileID binds the annotations to the document\r\n-  const clientID = 'e800d12fc12c4d60960778b2bc4370af';\r\n-\r\n-  const viewerOptions = {\r\n-    embedMode: 'FULL_WINDOW',\r\n-    defaultViewMode: 'FIT_PAGE',\r\n-    showDownloadPDF: true,\r\n-    showPrintPDF: true,\r\n-    showLeftHandPanel: false,\r\n-    showAnnotationTools: true,\r\n-    enableAnnotationAPIs: true,\r\n-  };\r\n-\r\n-  const annotationManagerConfig = {\r\n-    showToolbar: true,\r\n-    showCommentsPanel: true,\r\n-    downloadWithAnnotations: true,\r\n-    printWithAnnotations: true,\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const adobeDCViewPromise = new Promise((resolve) => {\r\n-      document.addEventListener('adobe_dc_view_sdk.ready', () => {\r\n-        const embeddedView = new AdobeDC.View({\r\n-          clientId: clientID,\r\n-          divId: 'adobe-dc-view',\r\n-        });\r\n-        resolve(embeddedView);\r\n-      });\r\n-    });\r\n-\r\n-    adobeDCViewPromise.then((embeddedView) => {\r\n-      setView(embeddedView);\r\n-    });\r\n-\r\n-    // Clean up event listener\r\n-    return () => {\r\n-      document.removeEventListener('adobe_dc_view_sdk.ready', () => {});\r\n-    };\r\n-  }, [clientID]);\r\n-\r\n-  useEffect(() => {\r\n-    if (view) {\r\n-      fetch(urlToPDF)\r\n-        .then((res) => res.blob())\r\n-        .then((blob) => {\r\n-          const previewPromise = view.previewFile(\r\n-            {\r\n-              // The file content\r\n-              content: { promise: Promise.resolve(blob.arrayBuffer()) },\r\n-              metaData: {\r\n-                fileName: urlToPDF.split('/').slice(-1)[0],\r\n-                id: fileID,\r\n-              },\r\n-            },\r\n-            viewerOptions\r\n-          );\r\n-          createAnnotationManager(previewPromise);\r\n-        });\r\n-    }\r\n-  }, [view, urlToPDF, fileID]);\r\n-\r\n-  function createAnnotationManager(previewPromise) {\r\n-    previewPromise.then((adobeView) => {\r\n-      adobeView.getAnnotationManager().then((annotationManager) => {\r\n-        annotationManager.setConfig(annotationManagerConfig);\r\n-        addAnnotations(annotationManager);\r\n-      });\r\n-    });\r\n-  }\r\n-\r\n-  function addAnnotations(annotationManager) {\r\n-    const annotationURLs = [\r\n-      'https://assets.codepen.io/4479906/underline.json',\r\n-      'https://assets.codepen.io/4479906/highlight.json',\r\n-      'https://assets.codepen.io/4479906/scribble.json',\r\n-    ];\r\n-\r\n-    annotationURLs.forEach((annotURL) => {\r\n-      fetch(annotURL)\r\n-        .then((response) => response.json())\r\n-        .then((json) => {\r\n-          annotationManager.addAnnotations([json]);\r\n-        });\r\n-    });\r\n-  }\r\n-\r\n-  return (\r\n-    <div id=\"adobe-dc-view\" style={{ width: '100%', height: '600px' }}>\r\n-      {/* AdobeDC View will be rendered here */}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AdobePDFViewer;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to preview a file using a file promise\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler(annotationMessage) {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(annotationMessage,\"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: annotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to preview a file using a file promise\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler(annotationMessage) {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(\"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: annotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to preview a file using a file promise\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        // Register save API handler\r\n-        this.registerSaveApiHandler();\r\n-    }\r\n-\r\n-    // Method to register a save API handler\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(\"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set a sample message for the annotation\r\n-                    const annotationMessage = \"This is a sample annotation message.\";\r\n-\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: annotationMessage // Set the annotation message here\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713248680015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,9 @@\n     }\r\n \r\n     // Method to register a save API handler with dynamic annotation message\r\n     registerSaveApiHandler(annotationMessage) {\r\n+        alert(\"This is save event\")\r\n         const saveApiHandler = (metaData, content, options) => {\r\n             return new Promise(resolve => {\r\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n"
                },
                {
                    "date": 1713248739333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,264 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler(annotationMessage) {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            alert(\"This is save event\")\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(annotationMessage,\"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: annotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713248750338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n \r\n     // Method to register a save API handler with dynamic annotation message\r\n     registerSaveApiHandler(annotationMessage) {\r\n         const saveApiHandler = (metaData, content, options) => {\r\n-            alert(\"This is save event\")\r\n+            alert(\"This is save event\",options)\r\n             return new Promise(resolve => {\r\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n@@ -261,268 +261,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to preview a file using a file promise\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler(annotationMessage) {\r\n-        alert(\"This is save event\")\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(annotationMessage,\"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: annotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713249277119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n \r\n     // Method to register a save API handler with dynamic annotation message\r\n     registerSaveApiHandler(annotationMessage) {\r\n         const saveApiHandler = (metaData, content, options) => {\r\n-            alert(\"This is save event\",options)\r\n+console.log(metaData,\"content => \", content,\"Options:- \", options)\r\n             return new Promise(resolve => {\r\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n"
                },
                {
                    "date": 1713250297099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,41 +207,75 @@\n         this.registerSaveApiHandler(annotationMessage);\r\n     }\r\n \r\n     // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler(annotationMessage) {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-console.log(metaData,\"content => \", content,\"Options:- \", options)\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(annotationMessage,\"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+    // registerSaveApiHandler(annotationMessage) {\r\n+    //     const saveApiHandler = (metaData, content, options) => {\r\n+    //         console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+    //         return new Promise(resolve => {\r\n+    //             setTimeout(() => {\r\n+    //                 const documentId = metaData.id;\r\n+    //                 const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+    //                 savedData[metaData.id] = content;\r\n+    //                 console.log(annotationMessage, \"data\", savedData);\r\n+    //                 localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: annotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n+    //                 // Set the dynamic annotation message\r\n+    //                 const response = {\r\n+    //                     code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+    //                     data: {\r\n+    //                         metaData: Object.assign(metaData, {\r\n+    //                             updatedAt: new Date().getTime(),\r\n+    //                             message: annotationMessage // Set the annotation message dynamically\r\n+    //                         })\r\n+    //                     },\r\n+    //                 };\r\n+    //                 resolve(response);\r\n+    //             }, 2000);\r\n+    //         });\r\n+    //     };\r\n+    //     // Register save API handler with AdobeDC View object\r\n+    //     this.adobeDCView.registerCallback(\r\n+    //         window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+    //         saveApiHandler,\r\n+    //         {}\r\n+    //     );\r\n+    // }\r\n+// Method to register a save API handler with dynamic annotation message\r\n+registerSaveApiHandler(annotationMessage) {\r\n+    const saveApiHandler = (metaData, content, options) => {\r\n+        console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+        return new Promise(resolve => {\r\n+            setTimeout(() => {\r\n+                const documentId = metaData.id;\r\n+                const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                savedData[metaData.id] = content;\r\n+                console.log(annotationMessage, \"data\", savedData);\r\n+                localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n+                // Set the dynamic annotation message\r\n+                const response = {\r\n+                    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                    data: {\r\n+                        metaData: Object.assign(metaData, {\r\n+                            updatedAt: new Date().getTime(),\r\n+                            message: annotationMessage, // Set the annotation message dynamically\r\n+                            bodyValue: content.bodyValue // Set the bodyValue for the annotation\r\n+                        })\r\n+                    },\r\n+                };\r\n+                resolve(response);\r\n+            }, 2000);\r\n+        });\r\n+    };\r\n+    // Register save API handler with AdobeDC View object\r\n+    this.adobeDCView.registerCallback(\r\n+        window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+        saveApiHandler,\r\n+        {}\r\n+    );\r\n+}\r\n+\r\n     // Method to retrieve annotations from local storage\r\n     retrieveAnnotations(documentId) {\r\n         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n         return savedData[documentId] || {};\r\n"
                },
                {
                    "date": 1713251240517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,154 @@\n //     }\r\n // }\r\n \r\n // export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n class ViewSDKClient {\r\n     constructor() {\r\n         // Promise that resolves when AdobeDC SDK is ready\r\n         this.readyPromise = new Promise((resolve) => {\r\n@@ -125,8 +271,9 @@\n                 });\r\n             }\r\n         });\r\n         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n     }\r\n \r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n@@ -179,103 +326,51 @@\n             }\r\n         }, viewerConfig);\r\n \r\n         // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n+        this.registerSaveApiHandler();\r\n \r\n         return previewFilePromise;\r\n     }\r\n \r\n-    // Method to preview a file using a file promise\r\n-    previewFileUsingFilePromise(divId, filePromise, data) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-            divId,\r\n-        });\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n \r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n     }\r\n \r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    // registerSaveApiHandler(annotationMessage) {\r\n-    //     const saveApiHandler = (metaData, content, options) => {\r\n-    //         console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-    //         return new Promise(resolve => {\r\n-    //             setTimeout(() => {\r\n-    //                 const documentId = metaData.id;\r\n-    //                 const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-    //                 savedData[metaData.id] = content;\r\n-    //                 console.log(annotationMessage, \"data\", savedData);\r\n-    //                 localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-    //                 // Set the dynamic annotation message\r\n-    //                 const response = {\r\n-    //                     code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-    //                     data: {\r\n-    //                         metaData: Object.assign(metaData, {\r\n-    //                             updatedAt: new Date().getTime(),\r\n-    //                             message: annotationMessage // Set the annotation message dynamically\r\n-    //                         })\r\n-    //                     },\r\n-    //                 };\r\n-    //                 resolve(response);\r\n-    //             }, 2000);\r\n-    //         });\r\n-    //     };\r\n-    //     // Register save API handler with AdobeDC View object\r\n-    //     this.adobeDCView.registerCallback(\r\n-    //         window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-    //         saveApiHandler,\r\n-    //         {}\r\n-    //     );\r\n-    // }\r\n-// Method to register a save API handler with dynamic annotation message\r\n-registerSaveApiHandler(annotationMessage) {\r\n-    const saveApiHandler = (metaData, content, options) => {\r\n-        console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-        return new Promise(resolve => {\r\n-            setTimeout(() => {\r\n-                const documentId = metaData.id;\r\n-                const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                savedData[metaData.id] = content;\r\n-                console.log(annotationMessage, \"data\", savedData);\r\n-                localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                // Set the dynamic annotation message\r\n-                const response = {\r\n-                    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                    data: {\r\n-                        metaData: Object.assign(metaData, {\r\n-                            updatedAt: new Date().getTime(),\r\n-                            message: annotationMessage, // Set the annotation message dynamically\r\n-                            bodyValue: content.bodyValue // Set the bodyValue for the annotation\r\n-                        })\r\n-                    },\r\n-                };\r\n-                resolve(response);\r\n-            }, 2000);\r\n-        });\r\n-    };\r\n-    // Register save API handler with AdobeDC View object\r\n-    this.adobeDCView.registerCallback(\r\n-        window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-        saveApiHandler,\r\n-        {}\r\n-    );\r\n-}\r\n-\r\n     // Method to retrieve annotations from local storage\r\n     retrieveAnnotations(documentId) {\r\n         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n         return savedData[documentId] || {};\r\n@@ -295,4 +390,6 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713251254010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,395 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            }\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713251306161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,402 +324,203 @@\n             },\r\n             metaData: {\r\n                 fileName: data.name,\r\n                 id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n             },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                showPageControls: true, // Show page navigation controls\r\n+                showToolbar: true, // Show the viewer's toolbar\r\n+                showReflowControl: true, // Show reflow control for text reflow\r\n+                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+                enableFormNavigation: true, // Enable form navigation controls\r\n+                enableAddTextComment: true, // Enable adding text comments\r\n+                enableAddStickyNote: true, // Enable adding sticky notes\r\n+                showDownloadButton: true, // Show the download button\r\n+                showPrintButton: true, // Show the print button\r\n+                showZoomButtons: true, // Show zoom in/out buttons\r\n+                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+                showLeftHandPanel: true, // Show the left-hand panel\r\n+                showRightHandPanel: true, // Show the right-hand panel\r\n+                showSearchBar: true, // Show the search bar\r\n+                enableFormFilling: true, // Enable form filling in the viewer\r\n+                enableAutoSave: true, // Enable auto-save feature\r\n+                showDocumentInfo: true, // Show document information\r\n+                enablePDFAnalytics: true, // Enable PDF analytics\r\n+                showAnnotationTools: true, // Show annotation tools\r\n+                showSignaturePanel: true, // Show the signature panel\r\n+                showThumbnailsPanel: true, // Show the thumbnails panel\r\n+                showRotateButton: true, // Show the rotate button\r\n+                showUndoRedoButtons: true, // Show undo/redo buttons\r\n+                showFullScreenButton: true, // Show the full-screen button\r\n+                enableAccessibility: true, // Enable accessibility features\r\n+                showShareButton: true, // Show the share button\r\n+                showOptimizedViewButton: true, // Show the optimized view button\r\n+                showFormResetButton: true, // Show the form reset button\r\n+                showFormSaveButton: true, // Show the form save button\r\n+                enableMultiPageControl: true, // Enable multi-page control\r\n+                enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+                showOpenFileButton: true, // Show the open file button\r\n+                showAddAttachmentButton: true, // Show the add attachment button\r\n+                enableHighlightText: true, // Enable text highlighting\r\n+                enableStrikeoutText: true, // Enable text strikeout\r\n+                enableUnderlineText: true, // Enable text underlining\r\n+                enableAreaHighlight: true, // Enable area highlighting\r\n+                enableLinkAnnotation: true, // Enable link annotations\r\n+                enableTextSelection: true, // Enable text selection\r\n+                enablePanZoom: true, // Enable pan and zoom\r\n+                enableTextAnnotation: true, // Enable text annotation\r\n+                enableRedactText: true, // Enable text redaction\r\n+                enableMeasureTools: true, // Enable measure tools\r\n+                enableCommentingTools: true, // Enable commenting tools\r\n+                enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+                enableHandTool: true, // Enable hand tool for panning\r\n+                enableZoomTools: true, // Enable zoom tools\r\n+                enableRotatePages: true, // Enable page rotation\r\n+                enableScrollZoom: true, // Enable scroll zoom\r\n+                showAnnotationFilters: true, // Show annotation filters\r\n+                enablePageViewTracking: true, // Enable page view tracking\r\n+                enablePerformanceTracking: true, // Enable performance tracking\r\n+                showTutorialButton: true, // Show the tutorial button\r\n+                enableFormsTracking: true, // Enable forms tracking\r\n+                enableTextExtraction: true, // Enable text extraction\r\n+                enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+                enablePDFConversion: true, // Enable PDF conversion\r\n+                enablePDFSigning: true, // Enable PDF signing\r\n+                enablePDFEditing: true, // Enable PDF editing\r\n+                enablePDFCreation: true, // Enable PDF creation\r\n+                enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+                enablePDFRedaction: true, // Enable PDF redaction\r\n+                enablePDFTextEditing: true, // Enable PDF text editing\r\n+                enablePDFImageEditing: true, // Enable PDF image editing\r\n+                enablePDFPageManagement: true, // Enable PDF page management\r\n+                enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+                enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+                enablePDFWatermarking: true, // Enable PDF watermarking\r\n+                enablePDFStamping: true, // Enable PDF stamping\r\n+                enablePDFSearch: true, // Enable PDF search\r\n+                enablePDFCompression: true, // Enable PDF compression\r\n+                enablePDFOptimization: true, // Enable PDF optimization\r\n+                enablePDFAccessibility: true, // Enable PDF accessibility\r\n+                enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+                enablePDFMerge: true, // Enable PDF merge\r\n+                enablePDFSplit: true, // Enable PDF split\r\n+                enablePDFPageRotation: true, // Enable PDF page rotation\r\n+                enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+                enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+                enablePDFPageReordering: true, // Enable PDF page reordering\r\n+                enablePDFPageScaling: true, // Enable PDF page scaling\r\n+                enablePDFPageCropping: true, // Enable PDF page cropping\r\n+                enablePDFTextSearch: true, // Enable PDF text search\r\n+                enablePDFImageSearch: true, // Enable PDF image search\r\n+                enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+                enablePDFCommentSearch: true, // Enable PDF comment search\r\n+                enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+                enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+                enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+                enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+                enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+                enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+                enablePDFExport: true, // Enable PDF export\r\n+                enablePDFImport: true, // Enable PDF import\r\n+                enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+                enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+                enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+                enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+                enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+                enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+                enablePDFEncryption: true, // Enable PDF encryption\r\n+                enablePDFDecryption: true, // Enable PDF decryption\r\n+                enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+                enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+                enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+                enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+                enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+                enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+                enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+                enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+                enablePDFPageLayout: true, // Enable PDF page layout\r\n+                enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+                enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+                enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+                enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+                enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+                enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+                enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+                enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+                enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+                enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+                enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+                enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+                enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+                enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+                enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+                enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+                enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+                enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+                enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+                enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+                enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+                enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+                enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+                enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+                enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+                enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+                enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+                enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+                enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+                enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+                enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+                enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+                enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+                enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+                enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+                enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+                enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+                enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+                enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+                enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+                enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+                enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+                enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+                enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+                enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+                enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+                enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+                enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+                enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+                enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+                enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+                enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+                enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+                enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+                enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+                enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+                enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+                enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+                enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+                enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+                enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+                enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+                enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+                enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+                enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+                enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+                enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+                enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+                enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+                enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+                enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+                enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+                enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+                enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+                enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+                enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+                enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+                enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+                // Add more options as needed based on your requirements\r\n             },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n         }, viewerConfig);\r\n \r\n         // Register save API handler with dynamic annotation message\r\n         this.registerSaveApiHandler();\r\n@@ -785,6 +586,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713251594549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,203 +324,9 @@\n             },\r\n             metaData: {\r\n                 fileName: data.name,\r\n                 id: data.id,\r\n-            },\r\n-            options: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                showPageControls: true, // Show page navigation controls\r\n-                showToolbar: true, // Show the viewer's toolbar\r\n-                showReflowControl: true, // Show reflow control for text reflow\r\n-                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-                enableFormNavigation: true, // Enable form navigation controls\r\n-                enableAddTextComment: true, // Enable adding text comments\r\n-                enableAddStickyNote: true, // Enable adding sticky notes\r\n-                showDownloadButton: true, // Show the download button\r\n-                showPrintButton: true, // Show the print button\r\n-                showZoomButtons: true, // Show zoom in/out buttons\r\n-                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-                showLeftHandPanel: true, // Show the left-hand panel\r\n-                showRightHandPanel: true, // Show the right-hand panel\r\n-                showSearchBar: true, // Show the search bar\r\n-                enableFormFilling: true, // Enable form filling in the viewer\r\n-                enableAutoSave: true, // Enable auto-save feature\r\n-                showDocumentInfo: true, // Show document information\r\n-                enablePDFAnalytics: true, // Enable PDF analytics\r\n-                showAnnotationTools: true, // Show annotation tools\r\n-                showSignaturePanel: true, // Show the signature panel\r\n-                showThumbnailsPanel: true, // Show the thumbnails panel\r\n-                showRotateButton: true, // Show the rotate button\r\n-                showUndoRedoButtons: true, // Show undo/redo buttons\r\n-                showFullScreenButton: true, // Show the full-screen button\r\n-                enableAccessibility: true, // Enable accessibility features\r\n-                showShareButton: true, // Show the share button\r\n-                showOptimizedViewButton: true, // Show the optimized view button\r\n-                showFormResetButton: true, // Show the form reset button\r\n-                showFormSaveButton: true, // Show the form save button\r\n-                enableMultiPageControl: true, // Enable multi-page control\r\n-                enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-                showOpenFileButton: true, // Show the open file button\r\n-                showAddAttachmentButton: true, // Show the add attachment button\r\n-                enableHighlightText: true, // Enable text highlighting\r\n-                enableStrikeoutText: true, // Enable text strikeout\r\n-                enableUnderlineText: true, // Enable text underlining\r\n-                enableAreaHighlight: true, // Enable area highlighting\r\n-                enableLinkAnnotation: true, // Enable link annotations\r\n-                enableTextSelection: true, // Enable text selection\r\n-                enablePanZoom: true, // Enable pan and zoom\r\n-                enableTextAnnotation: true, // Enable text annotation\r\n-                enableRedactText: true, // Enable text redaction\r\n-                enableMeasureTools: true, // Enable measure tools\r\n-                enableCommentingTools: true, // Enable commenting tools\r\n-                enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-                enableHandTool: true, // Enable hand tool for panning\r\n-                enableZoomTools: true, // Enable zoom tools\r\n-                enableRotatePages: true, // Enable page rotation\r\n-                enableScrollZoom: true, // Enable scroll zoom\r\n-                showAnnotationFilters: true, // Show annotation filters\r\n-                enablePageViewTracking: true, // Enable page view tracking\r\n-                enablePerformanceTracking: true, // Enable performance tracking\r\n-                showTutorialButton: true, // Show the tutorial button\r\n-                enableFormsTracking: true, // Enable forms tracking\r\n-                enableTextExtraction: true, // Enable text extraction\r\n-                enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-                enablePDFConversion: true, // Enable PDF conversion\r\n-                enablePDFSigning: true, // Enable PDF signing\r\n-                enablePDFEditing: true, // Enable PDF editing\r\n-                enablePDFCreation: true, // Enable PDF creation\r\n-                enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-                enablePDFRedaction: true, // Enable PDF redaction\r\n-                enablePDFTextEditing: true, // Enable PDF text editing\r\n-                enablePDFImageEditing: true, // Enable PDF image editing\r\n-                enablePDFPageManagement: true, // Enable PDF page management\r\n-                enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-                enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-                enablePDFWatermarking: true, // Enable PDF watermarking\r\n-                enablePDFStamping: true, // Enable PDF stamping\r\n-                enablePDFSearch: true, // Enable PDF search\r\n-                enablePDFCompression: true, // Enable PDF compression\r\n-                enablePDFOptimization: true, // Enable PDF optimization\r\n-                enablePDFAccessibility: true, // Enable PDF accessibility\r\n-                enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-                enablePDFMerge: true, // Enable PDF merge\r\n-                enablePDFSplit: true, // Enable PDF split\r\n-                enablePDFPageRotation: true, // Enable PDF page rotation\r\n-                enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-                enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-                enablePDFPageReordering: true, // Enable PDF page reordering\r\n-                enablePDFPageScaling: true, // Enable PDF page scaling\r\n-                enablePDFPageCropping: true, // Enable PDF page cropping\r\n-                enablePDFTextSearch: true, // Enable PDF text search\r\n-                enablePDFImageSearch: true, // Enable PDF image search\r\n-                enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-                enablePDFCommentSearch: true, // Enable PDF comment search\r\n-                enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-                enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-                enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-                enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-                enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-                enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-                enablePDFExport: true, // Enable PDF export\r\n-                enablePDFImport: true, // Enable PDF import\r\n-                enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-                enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-                enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-                enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-                enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-                enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-                enablePDFEncryption: true, // Enable PDF encryption\r\n-                enablePDFDecryption: true, // Enable PDF decryption\r\n-                enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-                enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-                enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-                enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-                enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-                enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-                enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-                enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-                enablePDFPageLayout: true, // Enable PDF page layout\r\n-                enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-                enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-                enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-                enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-                enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-                enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-                enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-                enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-                enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-                enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-                enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-                enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-                enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-                enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-                enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-                enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-                enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-                enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-                enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-                enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-                enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-                enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-                enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-                enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-                enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-                enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-                enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-                enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-                enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-                enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-                enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-                enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-                enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-                enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-                enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-                enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-                enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-                enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-                enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-                enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-                enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-                enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-                enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-                enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-                enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-                enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-                enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-                enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-                enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-                enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-                enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-                enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-                enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-                enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-                enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-                enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-                enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-                enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-                enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-                enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-                enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-                enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-                enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-                enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-                enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-                enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-                enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-                enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-                enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-                enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-                enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-                enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-                enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-                enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-                enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-                enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-                enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-                enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-                // Add more options as needed based on your requirements\r\n-            },\r\n+            }\r\n         }, viewerConfig);\r\n \r\n         // Register save API handler with dynamic annotation message\r\n         this.registerSaveApiHandler();\r\n@@ -560,13 +366,8 @@\n             {}\r\n         );\r\n     }\r\n \r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n     // Method to retrieve annotations from local storage\r\n     retrieveAnnotations(documentId) {\r\n         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n         return savedData[documentId] || {};\r\n@@ -576,14 +377,23 @@\n     registerEventsHandler() {\r\n         this.adobeDCView.registerCallback(\r\n             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n             event => {\r\n-                console.log(event);\r\n+                if (event.type === \"COMMENT_INPUT\") {\r\n+                    // Capture the user's input in the comment field\r\n+                    this.setDynamicAnnotationMessage(event.data.comment);\r\n+                }\r\n             },\r\n             {\r\n                 enablePDFAnalytics: true,\r\n             }\r\n         );\r\n     }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n }\r\n \r\n export default ViewSDKClient;\r\n+\r\n"
                },
                {
                    "date": 1713256377226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,589 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+    options: {\r\n+        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+        showPageControls: true, // Show page navigation controls\r\n+        showToolbar: true, // Show the viewer's toolbar\r\n+        showReflowControl: true, // Show reflow control for text reflow\r\n+        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+        enableFormNavigation: true, // Enable form navigation controls\r\n+        enableAddTextComment: true, // Enable adding text comments\r\n+        enableAddStickyNote: true, // Enable adding sticky notes\r\n+        showDownloadButton: true, // Show the download button\r\n+        showPrintButton: true, // Show the print button\r\n+        showZoomButtons: true, // Show zoom in/out buttons\r\n+        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+        showLeftHandPanel: true, // Show the left-hand panel\r\n+        showRightHandPanel: true, // Show the right-hand panel\r\n+        showSearchBar: true, // Show the search bar\r\n+        enableFormFilling: true, // Enable form filling in the viewer\r\n+        enableAutoSave: true, // Enable auto-save feature\r\n+        showDocumentInfo: true, // Show document information\r\n+        enablePDFAnalytics: true, // Enable PDF analytics\r\n+        showAnnotationTools: true, // Show annotation tools\r\n+        showSignaturePanel: true, // Show the signature panel\r\n+        showThumbnailsPanel: true, // Show the thumbnails panel\r\n+        showRotateButton: true, // Show the rotate button\r\n+        showUndoRedoButtons: true, // Show undo/redo buttons\r\n+        showFullScreenButton: true, // Show the full-screen button\r\n+        enableAccessibility: true, // Enable accessibility features\r\n+        showShareButton: true, // Show the share button\r\n+        showOptimizedViewButton: true, // Show the optimized view button\r\n+        showFormResetButton: true, // Show the form reset button\r\n+        showFormSaveButton: true, // Show the form save button\r\n+        enableMultiPageControl: true, // Enable multi-page control\r\n+        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+        showOpenFileButton: true, // Show the open file button\r\n+        showAddAttachmentButton: true, // Show the add attachment button\r\n+        enableHighlightText: true, // Enable text highlighting\r\n+        enableStrikeoutText: true, // Enable text strikeout\r\n+        enableUnderlineText: true, // Enable text underlining\r\n+        enableAreaHighlight: true, // Enable area highlighting\r\n+        enableLinkAnnotation: true, // Enable link annotations\r\n+        enableTextSelection: true, // Enable text selection\r\n+        enablePanZoom: true, // Enable pan and zoom\r\n+        enableTextAnnotation: true, // Enable text annotation\r\n+        enableRedactText: true, // Enable text redaction\r\n+        enableMeasureTools: true, // Enable measure tools\r\n+        enableCommentingTools: true, // Enable commenting tools\r\n+        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+        enableHandTool: true, // Enable hand tool for panning\r\n+        enableZoomTools: true, // Enable zoom tools\r\n+        enableRotatePages: true, // Enable page rotation\r\n+        enableScrollZoom: true, // Enable scroll zoom\r\n+        showAnnotationFilters: true, // Show annotation filters\r\n+        enablePageViewTracking: true, // Enable page view tracking\r\n+        enablePerformanceTracking: true, // Enable performance tracking\r\n+        showTutorialButton: true, // Show the tutorial button\r\n+        enableFormsTracking: true, // Enable forms tracking\r\n+        enableTextExtraction: true, // Enable text extraction\r\n+        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+        enablePDFConversion: true, // Enable PDF conversion\r\n+        enablePDFSigning: true, // Enable PDF signing\r\n+        enablePDFEditing: true, // Enable PDF editing\r\n+        enablePDFCreation: true, // Enable PDF creation\r\n+        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+        enablePDFRedaction: true, // Enable PDF redaction\r\n+        enablePDFTextEditing: true, // Enable PDF text editing\r\n+        enablePDFImageEditing: true, // Enable PDF image editing\r\n+        enablePDFPageManagement: true, // Enable PDF page management\r\n+        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+        enablePDFWatermarking: true, // Enable PDF watermarking\r\n+        enablePDFStamping: true, // Enable PDF stamping\r\n+        enablePDFSearch: true, // Enable PDF search\r\n+        enablePDFCompression: true, // Enable PDF compression\r\n+        enablePDFOptimization: true, // Enable PDF optimization\r\n+        enablePDFAccessibility: true, // Enable PDF accessibility\r\n+        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+        enablePDFMerge: true, // Enable PDF merge\r\n+        enablePDFSplit: true, // Enable PDF split\r\n+        enablePDFPageRotation: true, // Enable PDF page rotation\r\n+        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+        enablePDFPageReordering: true, // Enable PDF page reordering\r\n+        enablePDFPageScaling: true, // Enable PDF page scaling\r\n+        enablePDFPageCropping: true, // Enable PDF page cropping\r\n+        enablePDFTextSearch: true, // Enable PDF text search\r\n+        enablePDFImageSearch: true, // Enable PDF image search\r\n+        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+        enablePDFCommentSearch: true, // Enable PDF comment search\r\n+        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+        enablePDFExport: true, // Enable PDF export\r\n+        enablePDFImport: true, // Enable PDF import\r\n+        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+        enablePDFEncryption: true, // Enable PDF encryption\r\n+        enablePDFDecryption: true, // Enable PDF decryption\r\n+        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+        enablePDFPageLayout: true, // Enable PDF page layout\r\n+        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+        // Add more options as needed based on your requirements\r\n+    },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713256430116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,590 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+    options: {\r\n+        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+        showPageControls: true, // Show page navigation controls\r\n+        showToolbar: true, // Show the viewer's toolbar\r\n+        showReflowControl: true, // Show reflow control for text reflow\r\n+        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+        enableFormNavigation: true, // Enable form navigation controls\r\n+        enableAddTextComment: true, // Enable adding text comments\r\n+        enableAddStickyNote: true, // Enable adding sticky notes\r\n+        showDownloadButton: true, // Show the download button\r\n+        showPrintButton: true, // Show the print button\r\n+        showZoomButtons: true, // Show zoom in/out buttons\r\n+        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+        showLeftHandPanel: true, // Show the left-hand panel\r\n+        showRightHandPanel: true, // Show the right-hand panel\r\n+        showSearchBar: true, // Show the search bar\r\n+        enableFormFilling: true, // Enable form filling in the viewer\r\n+        enableAutoSave: true, // Enable auto-save feature\r\n+        showDocumentInfo: true, // Show document information\r\n+        enablePDFAnalytics: true, // Enable PDF analytics\r\n+        showAnnotationTools: true, // Show annotation tools\r\n+        showSignaturePanel: true, // Show the signature panel\r\n+        showThumbnailsPanel: true, // Show the thumbnails panel\r\n+        showRotateButton: true, // Show the rotate button\r\n+        showUndoRedoButtons: true, // Show undo/redo buttons\r\n+        showFullScreenButton: true, // Show the full-screen button\r\n+        enableAccessibility: true, // Enable accessibility features\r\n+        showShareButton: true, // Show the share button\r\n+        showOptimizedViewButton: true, // Show the optimized view button\r\n+        showFormResetButton: true, // Show the form reset button\r\n+        showFormSaveButton: true, // Show the form save button\r\n+        enableMultiPageControl: true, // Enable multi-page control\r\n+        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+        showOpenFileButton: true, // Show the open file button\r\n+        showAddAttachmentButton: true, // Show the add attachment button\r\n+        enableHighlightText: true, // Enable text highlighting\r\n+        enableStrikeoutText: true, // Enable text strikeout\r\n+        enableUnderlineText: true, // Enable text underlining\r\n+        enableAreaHighlight: true, // Enable area highlighting\r\n+        enableLinkAnnotation: true, // Enable link annotations\r\n+        enableTextSelection: true, // Enable text selection\r\n+        enablePanZoom: true, // Enable pan and zoom\r\n+        enableTextAnnotation: true, // Enable text annotation\r\n+        enableRedactText: true, // Enable text redaction\r\n+        enableMeasureTools: true, // Enable measure tools\r\n+        enableCommentingTools: true, // Enable commenting tools\r\n+        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+        enableHandTool: true, // Enable hand tool for panning\r\n+        enableZoomTools: true, // Enable zoom tools\r\n+        enableRotatePages: true, // Enable page rotation\r\n+        enableScrollZoom: true, // Enable scroll zoom\r\n+        showAnnotationFilters: true, // Show annotation filters\r\n+        enablePageViewTracking: true, // Enable page view tracking\r\n+        enablePerformanceTracking: true, // Enable performance tracking\r\n+        showTutorialButton: true, // Show the tutorial button\r\n+        enableFormsTracking: true, // Enable forms tracking\r\n+        enableTextExtraction: true, // Enable text extraction\r\n+        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+        enablePDFConversion: true, // Enable PDF conversion\r\n+        enablePDFSigning: true, // Enable PDF signing\r\n+        enablePDFEditing: true, // Enable PDF editing\r\n+        enablePDFCreation: true, // Enable PDF creation\r\n+        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+        enablePDFRedaction: true, // Enable PDF redaction\r\n+        enablePDFTextEditing: true, // Enable PDF text editing\r\n+        enablePDFImageEditing: true, // Enable PDF image editing\r\n+        enablePDFPageManagement: true, // Enable PDF page management\r\n+        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+        enablePDFWatermarking: true, // Enable PDF watermarking\r\n+        enablePDFStamping: true, // Enable PDF stamping\r\n+        enablePDFSearch: true, // Enable PDF search\r\n+        enablePDFCompression: true, // Enable PDF compression\r\n+        enablePDFOptimization: true, // Enable PDF optimization\r\n+        enablePDFAccessibility: true, // Enable PDF accessibility\r\n+        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+        enablePDFMerge: true, // Enable PDF merge\r\n+        enablePDFSplit: true, // Enable PDF split\r\n+        enablePDFPageRotation: true, // Enable PDF page rotation\r\n+        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+        enablePDFPageReordering: true, // Enable PDF page reordering\r\n+        enablePDFPageScaling: true, // Enable PDF page scaling\r\n+        enablePDFPageCropping: true, // Enable PDF page cropping\r\n+        enablePDFTextSearch: true, // Enable PDF text search\r\n+        enablePDFImageSearch: true, // Enable PDF image search\r\n+        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+        enablePDFCommentSearch: true, // Enable PDF comment search\r\n+        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+        enablePDFExport: true, // Enable PDF export\r\n+        enablePDFImport: true, // Enable PDF import\r\n+        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+        enablePDFEncryption: true, // Enable PDF encryption\r\n+        enablePDFDecryption: true, // Enable PDF decryption\r\n+        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+        enablePDFPageLayout: true, // Enable PDF page layout\r\n+        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+        // Add more options as needed based on your requirements\r\n+    },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, content,\"object\", options,)\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713257124833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,156 +112,8 @@\n //     }\r\n // }\r\n \r\n // export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n class ViewSDKClient {\r\n     constructor() {\r\n         // Promise that resolves when AdobeDC SDK is ready\r\n         this.readyPromise = new Promise((resolve) => {\r\n@@ -273,9 +125,8 @@\n                 });\r\n             }\r\n         });\r\n         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n     }\r\n \r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n@@ -325,818 +176,56 @@\n             metaData: {\r\n                 fileName: data.name,\r\n                 id: data.id,\r\n             },\r\n-    options: {\r\n-        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-        showPageControls: true, // Show page navigation controls\r\n-        showToolbar: true, // Show the viewer's toolbar\r\n-        showReflowControl: true, // Show reflow control for text reflow\r\n-        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-        enableFormNavigation: true, // Enable form navigation controls\r\n-        enableAddTextComment: true, // Enable adding text comments\r\n-        enableAddStickyNote: true, // Enable adding sticky notes\r\n-        showDownloadButton: true, // Show the download button\r\n-        showPrintButton: true, // Show the print button\r\n-        showZoomButtons: true, // Show zoom in/out buttons\r\n-        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-        showLeftHandPanel: true, // Show the left-hand panel\r\n-        showRightHandPanel: true, // Show the right-hand panel\r\n-        showSearchBar: true, // Show the search bar\r\n-        enableFormFilling: true, // Enable form filling in the viewer\r\n-        enableAutoSave: true, // Enable auto-save feature\r\n-        showDocumentInfo: true, // Show document information\r\n-        enablePDFAnalytics: true, // Enable PDF analytics\r\n-        showAnnotationTools: true, // Show annotation tools\r\n-        showSignaturePanel: true, // Show the signature panel\r\n-        showThumbnailsPanel: true, // Show the thumbnails panel\r\n-        showRotateButton: true, // Show the rotate button\r\n-        showUndoRedoButtons: true, // Show undo/redo buttons\r\n-        showFullScreenButton: true, // Show the full-screen button\r\n-        enableAccessibility: true, // Enable accessibility features\r\n-        showShareButton: true, // Show the share button\r\n-        showOptimizedViewButton: true, // Show the optimized view button\r\n-        showFormResetButton: true, // Show the form reset button\r\n-        showFormSaveButton: true, // Show the form save button\r\n-        enableMultiPageControl: true, // Enable multi-page control\r\n-        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-        showOpenFileButton: true, // Show the open file button\r\n-        showAddAttachmentButton: true, // Show the add attachment button\r\n-        enableHighlightText: true, // Enable text highlighting\r\n-        enableStrikeoutText: true, // Enable text strikeout\r\n-        enableUnderlineText: true, // Enable text underlining\r\n-        enableAreaHighlight: true, // Enable area highlighting\r\n-        enableLinkAnnotation: true, // Enable link annotations\r\n-        enableTextSelection: true, // Enable text selection\r\n-        enablePanZoom: true, // Enable pan and zoom\r\n-        enableTextAnnotation: true, // Enable text annotation\r\n-        enableRedactText: true, // Enable text redaction\r\n-        enableMeasureTools: true, // Enable measure tools\r\n-        enableCommentingTools: true, // Enable commenting tools\r\n-        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-        enableHandTool: true, // Enable hand tool for panning\r\n-        enableZoomTools: true, // Enable zoom tools\r\n-        enableRotatePages: true, // Enable page rotation\r\n-        enableScrollZoom: true, // Enable scroll zoom\r\n-        showAnnotationFilters: true, // Show annotation filters\r\n-        enablePageViewTracking: true, // Enable page view tracking\r\n-        enablePerformanceTracking: true, // Enable performance tracking\r\n-        showTutorialButton: true, // Show the tutorial button\r\n-        enableFormsTracking: true, // Enable forms tracking\r\n-        enableTextExtraction: true, // Enable text extraction\r\n-        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-        enablePDFConversion: true, // Enable PDF conversion\r\n-        enablePDFSigning: true, // Enable PDF signing\r\n-        enablePDFEditing: true, // Enable PDF editing\r\n-        enablePDFCreation: true, // Enable PDF creation\r\n-        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-        enablePDFRedaction: true, // Enable PDF redaction\r\n-        enablePDFTextEditing: true, // Enable PDF text editing\r\n-        enablePDFImageEditing: true, // Enable PDF image editing\r\n-        enablePDFPageManagement: true, // Enable PDF page management\r\n-        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-        enablePDFWatermarking: true, // Enable PDF watermarking\r\n-        enablePDFStamping: true, // Enable PDF stamping\r\n-        enablePDFSearch: true, // Enable PDF search\r\n-        enablePDFCompression: true, // Enable PDF compression\r\n-        enablePDFOptimization: true, // Enable PDF optimization\r\n-        enablePDFAccessibility: true, // Enable PDF accessibility\r\n-        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-        enablePDFMerge: true, // Enable PDF merge\r\n-        enablePDFSplit: true, // Enable PDF split\r\n-        enablePDFPageRotation: true, // Enable PDF page rotation\r\n-        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-        enablePDFPageReordering: true, // Enable PDF page reordering\r\n-        enablePDFPageScaling: true, // Enable PDF page scaling\r\n-        enablePDFPageCropping: true, // Enable PDF page cropping\r\n-        enablePDFTextSearch: true, // Enable PDF text search\r\n-        enablePDFImageSearch: true, // Enable PDF image search\r\n-        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-        enablePDFCommentSearch: true, // Enable PDF comment search\r\n-        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-        enablePDFExport: true, // Enable PDF export\r\n-        enablePDFImport: true, // Enable PDF import\r\n-        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-        enablePDFEncryption: true, // Enable PDF encryption\r\n-        enablePDFDecryption: true, // Enable PDF decryption\r\n-        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-        enablePDFPageLayout: true, // Enable PDF page layout\r\n-        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-        // Add more options as needed based on your requirements\r\n-    },\r\n         }, viewerConfig);\r\n \r\n         // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n \r\n         return previewFilePromise;\r\n     }\r\n \r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, content,\"object\", options,)\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+            divId,\r\n         });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-    }\r\n \r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n+        this.adobeDCView.previewFile({\r\n             content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n+                promise: filePromise,\r\n             },\r\n             metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-    options: {\r\n-        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-        showPageControls: true, // Show page navigation controls\r\n-        showToolbar: true, // Show the viewer's toolbar\r\n-        showReflowControl: true, // Show reflow control for text reflow\r\n-        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-        enableFormNavigation: true, // Enable form navigation controls\r\n-        enableAddTextComment: true, // Enable adding text comments\r\n-        enableAddStickyNote: true, // Enable adding sticky notes\r\n-        showDownloadButton: true, // Show the download button\r\n-        showPrintButton: true, // Show the print button\r\n-        showZoomButtons: true, // Show zoom in/out buttons\r\n-        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-        showLeftHandPanel: true, // Show the left-hand panel\r\n-        showRightHandPanel: true, // Show the right-hand panel\r\n-        showSearchBar: true, // Show the search bar\r\n-        enableFormFilling: true, // Enable form filling in the viewer\r\n-        enableAutoSave: true, // Enable auto-save feature\r\n-        showDocumentInfo: true, // Show document information\r\n-        enablePDFAnalytics: true, // Enable PDF analytics\r\n-        showAnnotationTools: true, // Show annotation tools\r\n-        showSignaturePanel: true, // Show the signature panel\r\n-        showThumbnailsPanel: true, // Show the thumbnails panel\r\n-        showRotateButton: true, // Show the rotate button\r\n-        showUndoRedoButtons: true, // Show undo/redo buttons\r\n-        showFullScreenButton: true, // Show the full-screen button\r\n-        enableAccessibility: true, // Enable accessibility features\r\n-        showShareButton: true, // Show the share button\r\n-        showOptimizedViewButton: true, // Show the optimized view button\r\n-        showFormResetButton: true, // Show the form reset button\r\n-        showFormSaveButton: true, // Show the form save button\r\n-        enableMultiPageControl: true, // Enable multi-page control\r\n-        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-        showOpenFileButton: true, // Show the open file button\r\n-        showAddAttachmentButton: true, // Show the add attachment button\r\n-        enableHighlightText: true, // Enable text highlighting\r\n-        enableStrikeoutText: true, // Enable text strikeout\r\n-        enableUnderlineText: true, // Enable text underlining\r\n-        enableAreaHighlight: true, // Enable area highlighting\r\n-        enableLinkAnnotation: true, // Enable link annotations\r\n-        enableTextSelection: true, // Enable text selection\r\n-        enablePanZoom: true, // Enable pan and zoom\r\n-        enableTextAnnotation: true, // Enable text annotation\r\n-        enableRedactText: true, // Enable text redaction\r\n-        enableMeasureTools: true, // Enable measure tools\r\n-        enableCommentingTools: true, // Enable commenting tools\r\n-        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-        enableHandTool: true, // Enable hand tool for panning\r\n-        enableZoomTools: true, // Enable zoom tools\r\n-        enableRotatePages: true, // Enable page rotation\r\n-        enableScrollZoom: true, // Enable scroll zoom\r\n-        showAnnotationFilters: true, // Show annotation filters\r\n-        enablePageViewTracking: true, // Enable page view tracking\r\n-        enablePerformanceTracking: true, // Enable performance tracking\r\n-        showTutorialButton: true, // Show the tutorial button\r\n-        enableFormsTracking: true, // Enable forms tracking\r\n-        enableTextExtraction: true, // Enable text extraction\r\n-        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-        enablePDFConversion: true, // Enable PDF conversion\r\n-        enablePDFSigning: true, // Enable PDF signing\r\n-        enablePDFEditing: true, // Enable PDF editing\r\n-        enablePDFCreation: true, // Enable PDF creation\r\n-        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-        enablePDFRedaction: true, // Enable PDF redaction\r\n-        enablePDFTextEditing: true, // Enable PDF text editing\r\n-        enablePDFImageEditing: true, // Enable PDF image editing\r\n-        enablePDFPageManagement: true, // Enable PDF page management\r\n-        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-        enablePDFWatermarking: true, // Enable PDF watermarking\r\n-        enablePDFStamping: true, // Enable PDF stamping\r\n-        enablePDFSearch: true, // Enable PDF search\r\n-        enablePDFCompression: true, // Enable PDF compression\r\n-        enablePDFOptimization: true, // Enable PDF optimization\r\n-        enablePDFAccessibility: true, // Enable PDF accessibility\r\n-        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-        enablePDFMerge: true, // Enable PDF merge\r\n-        enablePDFSplit: true, // Enable PDF split\r\n-        enablePDFPageRotation: true, // Enable PDF page rotation\r\n-        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-        enablePDFPageReordering: true, // Enable PDF page reordering\r\n-        enablePDFPageScaling: true, // Enable PDF page scaling\r\n-        enablePDFPageCropping: true, // Enable PDF page cropping\r\n-        enablePDFTextSearch: true, // Enable PDF text search\r\n-        enablePDFImageSearch: true, // Enable PDF image search\r\n-        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-        enablePDFCommentSearch: true, // Enable PDF comment search\r\n-        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-        enablePDFExport: true, // Enable PDF export\r\n-        enablePDFImport: true, // Enable PDF import\r\n-        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-        enablePDFEncryption: true, // Enable PDF encryption\r\n-        enablePDFDecryption: true, // Enable PDF decryption\r\n-        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-        enablePDFPageLayout: true, // Enable PDF page layout\r\n-        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-        // Add more options as needed based on your requirements\r\n-    },\r\n-        }, viewerConfig);\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n \r\n         // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n     }\r\n \r\n     // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n+    registerSaveApiHandler(annotationMessage) {\r\n         const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n             return new Promise(resolve => {\r\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n                     savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    console.log(annotationMessage, \"data\", savedData);\r\n                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n                     // Set the dynamic annotation message\r\n                     const response = {\r\n                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n                         data: {\r\n                             metaData: Object.assign(metaData, {\r\n                                 updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                                message: annotationMessage // Set the annotation message dynamically\r\n                             })\r\n                         },\r\n                     };\r\n                     resolve(response);\r\n@@ -1150,13 +239,8 @@\n             {}\r\n         );\r\n     }\r\n \r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n     // Method to retrieve annotations from local storage\r\n     retrieveAnnotations(documentId) {\r\n         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n         return savedData[documentId] || {};\r\n@@ -1175,404 +259,6 @@\n         );\r\n     }\r\n }\r\n \r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n // export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n \r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            }\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                if (event.type === \"COMMENT_INPUT\") {\r\n-                    // Capture the user's input in the comment field\r\n-                    this.setDynamicAnnotationMessage(event.data.comment);\r\n-                }\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-\r\n"
                },
                {
                    "date": 1713257142271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,264 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler(annotationMessage) {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(annotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: annotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n+\r\n"
                },
                {
                    "date": 1713258971907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,264 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler(annotationMessage) {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(annotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: annotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n+\r\n"
                },
                {
                    "date": 1713259404690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,396 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+      // Promise that resolves when AdobeDC SDK is ready\r\n+      this.readyPromise = new Promise((resolve) => {\r\n+        if (window.AdobeDC) {\r\n+          resolve();\r\n+        } else {\r\n+          document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+            resolve();\r\n+          });\r\n+        }\r\n+      });\r\n+      this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+  \r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+      return this.readyPromise;\r\n+    }\r\n+  \r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+      // Log file information\r\n+      console.log(data.name, data);\r\n+      const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n+      console.log(\"File extension:\", fileExtension);\r\n+  \r\n+      const config = {\r\n+        clientId: \"YOUR_CLIENT_ID\",\r\n+      };\r\n+  \r\n+      if (divId) {\r\n+        config.divId = divId;\r\n+      }\r\n+  \r\n+      // Create AdobeDC View object\r\n+      this.adobeDCView = new window.AdobeDC.View(config);\r\n+  \r\n+      // Set viewer configuration\r\n+      viewerConfig = {\r\n+        ...viewerConfig,\r\n+        embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+        showAnnotationTools: true,\r\n+        showDownloadPDF: true,\r\n+        showPrintPDF: true,\r\n+        enableFormFilling: true,\r\n+        showLeftHandPanel: true,\r\n+        showSearchPDF: true,\r\n+        showDocumentInfo: true,\r\n+      };\r\n+  \r\n+      // Preview file using AdobeDC View object\r\n+      const previewFilePromise = this.adobeDCView.previewFile(\r\n+        {\r\n+          content: {\r\n+            location: {\r\n+              url: url,\r\n+              fileExtension: fileExtension,\r\n+              fileType: data.mimeType,\r\n+            },\r\n+          },\r\n+          metaData: {\r\n+            fileName: data.name,\r\n+            id: data.id,\r\n+          },\r\n+        },\r\n+        viewerConfig\r\n+      );\r\n+  \r\n+      // Register save API handler\r\n+      this.registerSaveApiHandler();\r\n+  \r\n+      return previewFilePromise;\r\n+    }\r\n+  \r\n+    // Method to register a save API handler\r\n+    registerSaveApiHandler() {\r\n+      const saveApiHandler = (metaData, content, options) => {\r\n+        console.log(metaData, \"content => \", content, \"Options:- \", options);\r\n+        return new Promise((resolve) => {\r\n+          setTimeout(() => {\r\n+            const documentId = metaData.id;\r\n+            const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+            savedData[metaData.id] = content;\r\n+            console.log(\"Saved data:\", savedData);\r\n+            localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+  \r\n+            // Simulate a success response\r\n+            const response = {\r\n+              code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+              data: {\r\n+                metaData: Object.assign(metaData, {\r\n+                  updatedAt: new Date().getTime(),\r\n+                  message: \"Annotation saved successfully\",\r\n+                }),\r\n+              },\r\n+            };\r\n+            resolve(response);\r\n+          }, 2000); // Simulating a delay for demonstration purposes\r\n+        });\r\n+      };\r\n+  \r\n+      // Register save API handler with AdobeDC View object\r\n+      this.adobeDCView.registerCallback(\r\n+        window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+        saveApiHandler,\r\n+        {}\r\n+      );\r\n+    }\r\n+  \r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+      const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+      return savedData[documentId] || {};\r\n+    }\r\n+  \r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+      this.adobeDCView.registerCallback(\r\n+        window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+        (event) => {\r\n+          console.log(event);\r\n+        },\r\n+        {\r\n+          enablePDFAnalytics: true,\r\n+        }\r\n+      );\r\n+    }\r\n+  }\r\n+  \r\n+  export default ViewSDKClient;\r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1713259442630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,396 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+      // Promise that resolves when AdobeDC SDK is ready\r\n+      this.readyPromise = new Promise((resolve) => {\r\n+        if (window.AdobeDC) {\r\n+          resolve();\r\n+        } else {\r\n+          document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+            resolve();\r\n+          });\r\n+        }\r\n+      });\r\n+      this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+  \r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+      return this.readyPromise;\r\n+    }\r\n+  \r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+      // Log file information\r\n+      console.log(data.name, data);\r\n+      const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n+      console.log(\"File extension:\", fileExtension);\r\n+  \r\n+      const config = {\r\n+        clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+      };\r\n+  \r\n+      if (divId) {\r\n+        config.divId = divId;\r\n+      }\r\n+  \r\n+      // Create AdobeDC View object\r\n+      this.adobeDCView = new window.AdobeDC.View(config);\r\n+  \r\n+      // Set viewer configuration\r\n+      viewerConfig = {\r\n+        ...viewerConfig,\r\n+        embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+        showAnnotationTools: true,\r\n+        showDownloadPDF: true,\r\n+        showPrintPDF: true,\r\n+        enableFormFilling: true,\r\n+        showLeftHandPanel: true,\r\n+        showSearchPDF: true,\r\n+        showDocumentInfo: true,\r\n+      };\r\n+  \r\n+      // Preview file using AdobeDC View object\r\n+      const previewFilePromise = this.adobeDCView.previewFile(\r\n+        {\r\n+          content: {\r\n+            location: {\r\n+              url: url,\r\n+              fileExtension: fileExtension,\r\n+              fileType: data.mimeType,\r\n+            },\r\n+          },\r\n+          metaData: {\r\n+            fileName: data.name,\r\n+            id: data.id,\r\n+          },\r\n+        },\r\n+        viewerConfig\r\n+      );\r\n+  \r\n+      // Register save API handler\r\n+      this.registerSaveApiHandler();\r\n+  \r\n+      return previewFilePromise;\r\n+    }\r\n+  \r\n+    // Method to register a save API handler\r\n+    registerSaveApiHandler() {\r\n+      const saveApiHandler = (metaData, content, options) => {\r\n+        console.log(metaData, \"content => \", content, \"Options:- \", options);\r\n+        return new Promise((resolve) => {\r\n+          setTimeout(() => {\r\n+            const documentId = metaData.id;\r\n+            const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+            savedData[metaData.id] = content;\r\n+            console.log(\"Saved data:\", savedData);\r\n+            localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+  \r\n+            // Simulate a success response\r\n+            const response = {\r\n+              code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+              data: {\r\n+                metaData: Object.assign(metaData, {\r\n+                  updatedAt: new Date().getTime(),\r\n+                  message: \"Annotation saved successfully\",\r\n+                }),\r\n+              },\r\n+            };\r\n+            resolve(response);\r\n+          }, 2000); // Simulating a delay for demonstration purposes\r\n+        });\r\n+      };\r\n+  \r\n+      // Register save API handler with AdobeDC View object\r\n+      this.adobeDCView.registerCallback(\r\n+        window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+        saveApiHandler,\r\n+        {}\r\n+      );\r\n+    }\r\n+  \r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+      const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+      return savedData[documentId] || {};\r\n+    }\r\n+  \r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+      this.adobeDCView.registerCallback(\r\n+        window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+        (event) => {\r\n+          console.log(event);\r\n+        },\r\n+        {\r\n+          enablePDFAnalytics: true,\r\n+        }\r\n+      );\r\n+    }\r\n+  }\r\n+  \r\n+  export default ViewSDKClient;\r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1713259482350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,1192 +392,5 @@\n     }\r\n   }\r\n   \r\n   export default ViewSDKClient;\r\n-  \n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-      // Promise that resolves when AdobeDC SDK is ready\r\n-      this.readyPromise = new Promise((resolve) => {\r\n-        if (window.AdobeDC) {\r\n-          resolve();\r\n-        } else {\r\n-          document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-            resolve();\r\n-          });\r\n-        }\r\n-      });\r\n-      this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-  \r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-      return this.readyPromise;\r\n-    }\r\n-  \r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-      // Log file information\r\n-      console.log(data.name, data);\r\n-      const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n-      console.log(\"File extension:\", fileExtension);\r\n-  \r\n-      const config = {\r\n-        clientId: \"YOUR_CLIENT_ID\",\r\n-      };\r\n-  \r\n-      if (divId) {\r\n-        config.divId = divId;\r\n-      }\r\n-  \r\n-      // Create AdobeDC View object\r\n-      this.adobeDCView = new window.AdobeDC.View(config);\r\n-  \r\n-      // Set viewer configuration\r\n-      viewerConfig = {\r\n-        ...viewerConfig,\r\n-        embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-        showAnnotationTools: true,\r\n-        showDownloadPDF: true,\r\n-        showPrintPDF: true,\r\n-        enableFormFilling: true,\r\n-        showLeftHandPanel: true,\r\n-        showSearchPDF: true,\r\n-        showDocumentInfo: true,\r\n-      };\r\n-  \r\n-      // Preview file using AdobeDC View object\r\n-      const previewFilePromise = this.adobeDCView.previewFile(\r\n-        {\r\n-          content: {\r\n-            location: {\r\n-              url: url,\r\n-              fileExtension: fileExtension,\r\n-              fileType: data.mimeType,\r\n-            },\r\n-          },\r\n-          metaData: {\r\n-            fileName: data.name,\r\n-            id: data.id,\r\n-          },\r\n-        },\r\n-        viewerConfig\r\n-      );\r\n-  \r\n-      // Register save API handler\r\n-      this.registerSaveApiHandler();\r\n-  \r\n-      return previewFilePromise;\r\n-    }\r\n-  \r\n-    // Method to register a save API handler\r\n-    registerSaveApiHandler() {\r\n-      const saveApiHandler = (metaData, content, options) => {\r\n-        console.log(metaData, \"content => \", content, \"Options:- \", options);\r\n-        return new Promise((resolve) => {\r\n-          setTimeout(() => {\r\n-            const documentId = metaData.id;\r\n-            const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-            savedData[metaData.id] = content;\r\n-            console.log(\"Saved data:\", savedData);\r\n-            localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-  \r\n-            // Simulate a success response\r\n-            const response = {\r\n-              code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-              data: {\r\n-                metaData: Object.assign(metaData, {\r\n-                  updatedAt: new Date().getTime(),\r\n-                  message: \"Annotation saved successfully\",\r\n-                }),\r\n-              },\r\n-            };\r\n-            resolve(response);\r\n-          }, 2000); // Simulating a delay for demonstration purposes\r\n-        });\r\n-      };\r\n-  \r\n-      // Register save API handler with AdobeDC View object\r\n-      this.adobeDCView.registerCallback(\r\n-        window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-        saveApiHandler,\r\n-        {}\r\n-      );\r\n-    }\r\n-  \r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-      const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-      return savedData[documentId] || {};\r\n-    }\r\n-  \r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-      this.adobeDCView.registerCallback(\r\n-        window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-        (event) => {\r\n-          console.log(event);\r\n-        },\r\n-        {\r\n-          enablePDFAnalytics: true,\r\n-        }\r\n-      );\r\n-    }\r\n-  }\r\n-  \r\n-  export default ViewSDKClient;\r\n-  \n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to preview a file using a file promise\r\n-    previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler(annotationMessage) {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(annotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: annotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to preview a file using a file promise\r\n-    previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler(annotationMessage) {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(annotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: annotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        const annotationMessage = \"This is a sample annotation message.\";\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to preview a file using a file promise\r\n-    previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-        this.adobeDCView = new window.AdobeDC.View({\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-            divId,\r\n-        });\r\n-\r\n-        this.adobeDCView.previewFile({\r\n-            content: {\r\n-                promise: filePromise,\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name\r\n-            }\r\n-        }, {});\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler(annotationMessage);\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler(annotationMessage) {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(annotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: annotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-// export default ViewSDKClient;\n\\ No newline at end of file\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1713259812086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,33 +338,37 @@\n     }\r\n   \r\n     // Method to register a save API handler\r\n     registerSaveApiHandler() {\r\n-      const saveApiHandler = (metaData, content, options) => {\r\n-        console.log(metaData, \"content => \", content, \"Options:- \", options);\r\n-        return new Promise((resolve) => {\r\n-          setTimeout(() => {\r\n-            const documentId = metaData.id;\r\n-            const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-            savedData[metaData.id] = content;\r\n-            console.log(\"Saved data:\", savedData);\r\n-            localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+        const saveApiHandler = (metaData, content, options, comment) => {\r\n+            console.log(metaData, \"content => \", content, \"Options:- \", options, \"Comment: \", comment);\r\n+            return new Promise((resolve, reject) => {\r\n+              setTimeout(() => {\r\n+                const documentId = metaData.id;\r\n+                const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                savedData[metaData.id] = { content, comment }; // Include comment with annotation content\r\n+                console.log(\"Saved data:\", savedData);\r\n+                try {\r\n+                  localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+                  const response = {\r\n+                    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                    data: {\r\n+                      metaData: Object.assign(metaData, {\r\n+                        updatedAt: new Date().getTime(),\r\n+                        message: \"Annotation saved successfully\",\r\n+                      }),\r\n+                    },\r\n+                  };\r\n+                  resolve(response);\r\n+                } catch (error) {\r\n+                  console.error(\"Error saving annotations:\", error);\r\n+                  reject(error);\r\n+                }\r\n+              }, 2000); // Simulating a delay for demonstration purposes\r\n+            });\r\n+          };\r\n+          \r\n   \r\n-            // Simulate a success response\r\n-            const response = {\r\n-              code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-              data: {\r\n-                metaData: Object.assign(metaData, {\r\n-                  updatedAt: new Date().getTime(),\r\n-                  message: \"Annotation saved successfully\",\r\n-                }),\r\n-              },\r\n-            };\r\n-            resolve(response);\r\n-          }, 2000); // Simulating a delay for demonstration purposes\r\n-        });\r\n-      };\r\n-  \r\n       // Register save API handler with AdobeDC View object\r\n       this.adobeDCView.registerCallback(\r\n         window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n         saveApiHandler,\r\n"
                },
                {
                    "date": 1713260069325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,35 +339,30 @@\n   \r\n     // Method to register a save API handler\r\n     registerSaveApiHandler() {\r\n         const saveApiHandler = (metaData, content, options, comment) => {\r\n-            console.log(metaData, \"content => \", content, \"Options:- \", options, \"Comment: \", comment);\r\n             return new Promise((resolve, reject) => {\r\n               setTimeout(() => {\r\n                 const documentId = metaData.id;\r\n                 const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n                 savedData[metaData.id] = { content, comment }; // Include comment with annotation content\r\n-                console.log(\"Saved data:\", savedData);\r\n-                try {\r\n-                  localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-                  const response = {\r\n-                    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                    data: {\r\n-                      metaData: Object.assign(metaData, {\r\n-                        updatedAt: new Date().getTime(),\r\n-                        message: \"Annotation saved successfully\",\r\n-                      }),\r\n-                    },\r\n-                  };\r\n-                  resolve(response);\r\n-                } catch (error) {\r\n-                  console.error(\"Error saving annotations:\", error);\r\n-                  reject(error);\r\n-                }\r\n+                localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+                \r\n+                const response = {\r\n+                  code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                  data: {\r\n+                    metaData: Object.assign(metaData, {\r\n+                      updatedAt: new Date().getTime(),\r\n+                      message: \"Annotation saved successfully\",\r\n+                    }),\r\n+                  },\r\n+                };\r\n+                resolve(response);\r\n               }, 2000); // Simulating a delay for demonstration purposes\r\n             });\r\n           };\r\n           \r\n+          \r\n   \r\n       // Register save API handler with AdobeDC View object\r\n       this.adobeDCView.registerCallback(\r\n         window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n"
                },
                {
                    "date": 1713260517746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,393 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+      // Promise that resolves when AdobeDC SDK is ready\r\n+      this.readyPromise = new Promise((resolve) => {\r\n+        if (window.AdobeDC) {\r\n+          resolve();\r\n+        } else {\r\n+          document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+            resolve();\r\n+          });\r\n+        }\r\n+      });\r\n+      this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+  \r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+      return this.readyPromise;\r\n+    }\r\n+  \r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+      // Log file information\r\n+      console.log(\"File name:\", data.name);\r\n+      const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n+      console.log(\"File extension:\", fileExtension);\r\n+  \r\n+      const config = {\r\n+        clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+      };\r\n+  \r\n+      if (divId) {\r\n+        config.divId = divId;\r\n+      }\r\n+  \r\n+      // Create AdobeDC View object\r\n+      this.adobeDCView = new window.AdobeDC.View(config);\r\n+  \r\n+      // Set viewer configuration\r\n+      viewerConfig = {\r\n+        ...viewerConfig,\r\n+        embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+        showAnnotationTools: true,\r\n+        showDownloadPDF: true,\r\n+        showPrintPDF: true,\r\n+        enableFormFilling: true,\r\n+        showLeftHandPanel: true,\r\n+        showSearchPDF: true,\r\n+        showDocumentInfo: true,\r\n+      };\r\n+  \r\n+      // Preview file using AdobeDC View object\r\n+      const previewFilePromise = this.adobeDCView.previewFile(\r\n+        {\r\n+          content: {\r\n+            location: {\r\n+              url: url,\r\n+              fileExtension: fileExtension,\r\n+              fileType: data.mimeType,\r\n+            },\r\n+          },\r\n+          metaData: {\r\n+            fileName: data.name,\r\n+            id: data.id,\r\n+          },\r\n+        },\r\n+        viewerConfig\r\n+      );\r\n+  \r\n+      // Register save API handler with dynamic annotation message\r\n+      this.registerSaveApiHandler();\r\n+  \r\n+      return previewFilePromise;\r\n+    }\r\n+  \r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+      const saveApiHandler = (metaData, content, options) => {\r\n+        return new Promise((resolve, reject) => {\r\n+          setTimeout(() => {\r\n+            const documentId = metaData.id;\r\n+            const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+            savedData[metaData.id] = { content, comment: options.message }; // Include comment with annotation content\r\n+            localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+  \r\n+            const response = {\r\n+              code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+              data: {\r\n+                metaData: Object.assign(metaData, {\r\n+                  updatedAt: new Date().getTime(),\r\n+                  message: \"Annotation saved successfully\",\r\n+                }),\r\n+              },\r\n+            };\r\n+            resolve(response);\r\n+          }, 2000); // Simulating a delay for demonstration purposes\r\n+        });\r\n+      };\r\n+  \r\n+      // Register save API handler with AdobeDC View object\r\n+      this.adobeDCView.registerCallback(\r\n+        window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+        saveApiHandler,\r\n+        {}\r\n+      );\r\n+    }\r\n+  \r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+      const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+      return savedData[documentId] || {};\r\n+    }\r\n+  \r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+      this.adobeDCView.registerCallback(\r\n+        window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+        (event) => {\r\n+          console.log(event);\r\n+        },\r\n+        {\r\n+          enablePDFAnalytics: true,\r\n+        }\r\n+      );\r\n+    }\r\n+  }\r\n+  \r\n+  export default ViewSDKClient;\r\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1713260730551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,526 +263,131 @@\n // export default ViewSDKClient;\r\n \r\n class ViewSDKClient {\r\n     constructor() {\r\n-      // Promise that resolves when AdobeDC SDK is ready\r\n-      this.readyPromise = new Promise((resolve) => {\r\n-        if (window.AdobeDC) {\r\n-          resolve();\r\n-        } else {\r\n-          document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-            resolve();\r\n-          });\r\n-        }\r\n-      });\r\n-      this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n     }\r\n-  \r\n+\r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n-      return this.readyPromise;\r\n+        return this.readyPromise;\r\n     }\r\n-  \r\n+\r\n     // Method to preview a file\r\n     previewFile(divId, viewerConfig, url, data) {\r\n-      // Log file information\r\n-      console.log(\"File name:\", data.name);\r\n-      const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n-      console.log(\"File extension:\", fileExtension);\r\n-  \r\n-      const config = {\r\n-        clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-      };\r\n-  \r\n-      if (divId) {\r\n-        config.divId = divId;\r\n-      }\r\n-  \r\n-      // Create AdobeDC View object\r\n-      this.adobeDCView = new window.AdobeDC.View(config);\r\n-  \r\n-      // Set viewer configuration\r\n-      viewerConfig = {\r\n-        ...viewerConfig,\r\n-        embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-        showAnnotationTools: true,\r\n-        showDownloadPDF: true,\r\n-        showPrintPDF: true,\r\n-        enableFormFilling: true,\r\n-        showLeftHandPanel: true,\r\n-        showSearchPDF: true,\r\n-        showDocumentInfo: true,\r\n-      };\r\n-  \r\n-      // Preview file using AdobeDC View object\r\n-      const previewFilePromise = this.adobeDCView.previewFile(\r\n-        {\r\n-          content: {\r\n-            location: {\r\n-              url: url,\r\n-              fileExtension: fileExtension,\r\n-              fileType: data.mimeType,\r\n-            },\r\n-          },\r\n-          metaData: {\r\n-            fileName: data.name,\r\n-            id: data.id,\r\n-          },\r\n-        },\r\n-        viewerConfig\r\n-      );\r\n-  \r\n-      // Register save API handler with dynamic annotation message\r\n-      this.registerSaveApiHandler();\r\n-  \r\n-      return previewFilePromise;\r\n-    }\r\n-  \r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-      const saveApiHandler = (metaData, content, options) => {\r\n-        return new Promise((resolve, reject) => {\r\n-          setTimeout(() => {\r\n-            const documentId = metaData.id;\r\n-            const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-            savedData[metaData.id] = { content, comment: options.message }; // Include comment with annotation content\r\n-            localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-  \r\n-            const response = {\r\n-              code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-              data: {\r\n-                metaData: Object.assign(metaData, {\r\n-                  updatedAt: new Date().getTime(),\r\n-                  message: \"Annotation saved successfully\",\r\n-                }),\r\n-              },\r\n-            };\r\n-            resolve(response);\r\n-          }, 2000); // Simulating a delay for demonstration purposes\r\n-        });\r\n-      };\r\n-  \r\n-      // Register save API handler with AdobeDC View object\r\n-      this.adobeDCView.registerCallback(\r\n-        window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-        saveApiHandler,\r\n-        {}\r\n-      );\r\n-    }\r\n-  \r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-      const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-      return savedData[documentId] || {};\r\n-    }\r\n-  \r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-      this.adobeDCView.registerCallback(\r\n-        window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-        (event) => {\r\n-          console.log(event);\r\n-        },\r\n-        {\r\n-          enablePDFAnalytics: true,\r\n-        }\r\n-      );\r\n-    }\r\n-  }\r\n-  \r\n-  export default ViewSDKClient;\r\n-  \n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n+        // Log file information\r\n+        console.log(\"File name:\", data.name);\r\n+        const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n \r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n \r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n \r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n \r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n \r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile(\r\n+            {\r\n+                content: {\r\n+                    location: {\r\n+                        url: url,\r\n+                        fileExtension: fileExtension,\r\n+                        fileType: data.mimeType,\r\n+                    },\r\n+                },\r\n+                metaData: {\r\n+                    fileName: data.name,\r\n+                    id: data.id,\r\n+                },\r\n+            },\r\n+            viewerConfig\r\n+        );\r\n \r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n \r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n+        return previewFilePromise;\r\n+    }\r\n \r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-      // Promise that resolves when AdobeDC SDK is ready\r\n-      this.readyPromise = new Promise((resolve) => {\r\n-        if (window.AdobeDC) {\r\n-          resolve();\r\n-        } else {\r\n-          document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-            resolve();\r\n-          });\r\n-        }\r\n-      });\r\n-      this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-  \r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-      return this.readyPromise;\r\n-    }\r\n-  \r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-      // Log file information\r\n-      console.log(data.name, data);\r\n-      const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n-      console.log(\"File extension:\", fileExtension);\r\n-  \r\n-      const config = {\r\n-        clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-      };\r\n-  \r\n-      if (divId) {\r\n-        config.divId = divId;\r\n-      }\r\n-  \r\n-      // Create AdobeDC View object\r\n-      this.adobeDCView = new window.AdobeDC.View(config);\r\n-  \r\n-      // Set viewer configuration\r\n-      viewerConfig = {\r\n-        ...viewerConfig,\r\n-        embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-        showAnnotationTools: true,\r\n-        showDownloadPDF: true,\r\n-        showPrintPDF: true,\r\n-        enableFormFilling: true,\r\n-        showLeftHandPanel: true,\r\n-        showSearchPDF: true,\r\n-        showDocumentInfo: true,\r\n-      };\r\n-  \r\n-      // Preview file using AdobeDC View object\r\n-      const previewFilePromise = this.adobeDCView.previewFile(\r\n-        {\r\n-          content: {\r\n-            location: {\r\n-              url: url,\r\n-              fileExtension: fileExtension,\r\n-              fileType: data.mimeType,\r\n-            },\r\n-          },\r\n-          metaData: {\r\n-            fileName: data.name,\r\n-            id: data.id,\r\n-          },\r\n-        },\r\n-        viewerConfig\r\n-      );\r\n-  \r\n-      // Register save API handler\r\n-      this.registerSaveApiHandler();\r\n-  \r\n\\ No newline at end of file\n-      return previewFilePromise;\r\n-    }\r\n-  \r\n-    // Method to register a save API handler\r\n+    // Method to register a save API handler with dynamic annotation message\r\n     registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options, comment) => {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n             return new Promise((resolve, reject) => {\r\n-              setTimeout(() => {\r\n-                const documentId = metaData.id;\r\n-                const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                savedData[metaData.id] = { content, comment }; // Include comment with annotation content\r\n-                localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-                \r\n-                const response = {\r\n-                  code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                  data: {\r\n-                    metaData: Object.assign(metaData, {\r\n-                      updatedAt: new Date().getTime(),\r\n-                      message: \"Annotation saved successfully\",\r\n-                    }),\r\n-                  },\r\n-                };\r\n-                resolve(response);\r\n-              }, 2000); // Simulating a delay for demonstration purposes\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+                    savedData[metaData.id] = { content, comment: options.message }; // Include comment with annotation content\r\n+                    console.log(savedData, \"object\", options.message)\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: \"Annotation saved successfully\",\r\n+                            }),\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000); // Simulating a delay for demonstration purposes\r\n             });\r\n-          };\r\n-          \r\n-          \r\n-  \r\n-      // Register save API handler with AdobeDC View object\r\n-      this.adobeDCView.registerCallback(\r\n-        window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-        saveApiHandler,\r\n-        {}\r\n-      );\r\n+        };\r\n+\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n     }\r\n-  \r\n+\r\n     // Method to retrieve annotations from local storage\r\n     retrieveAnnotations(documentId) {\r\n-      const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-      return savedData[documentId] || {};\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n     }\r\n-  \r\n+\r\n     // Method to register event handlers\r\n     registerEventsHandler() {\r\n-      this.adobeDCView.registerCallback(\r\n-        window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-        (event) => {\r\n-          console.log(event);\r\n-        },\r\n-        {\r\n-          enablePDFAnalytics: true,\r\n-        }\r\n-      );\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            (event) => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n     }\r\n-  }\r\n-  \r\n-  export default ViewSDKClient;\r\n-  \n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713260799220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,9 +344,9 @@\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n                     const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n                     savedData[metaData.id] = { content, comment: options.message }; // Include comment with annotation content\r\n-                    console.log(savedData, \"object\", options.message)\r\n+                    console.log(savedData, \"options\",options,\"msg\", options.message)\r\n                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n                     const response = {\r\n                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n"
                },
                {
                    "date": 1713261024066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,587 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(\"File name:\", data.name);\r\n+        const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile(\r\n+            {\r\n+                content: {\r\n+                    location: {\r\n+                        url: url,\r\n+                        fileExtension: fileExtension,\r\n+                        fileType: data.mimeType,\r\n+                    },\r\n+                },\r\n+                metaData: {\r\n+                    fileName: data.name,\r\n+                    id: data.id,\r\n+                },\r\n+                options: {\r\n+                    enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                    includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                    showPageControls: true, // Show page navigation controls\r\n+                    showToolbar: true, // Show the viewer's toolbar\r\n+                    showReflowControl: true, // Show reflow control for text reflow\r\n+                    openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+                    enableFormNavigation: true, // Enable form navigation controls\r\n+                    enableAddTextComment: true, // Enable adding text comments\r\n+                    enableAddStickyNote: true, // Enable adding sticky notes\r\n+                    showDownloadButton: true, // Show the download button\r\n+                    showPrintButton: true, // Show the print button\r\n+                    showZoomButtons: true, // Show zoom in/out buttons\r\n+                    defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+                    showLeftHandPanel: true, // Show the left-hand panel\r\n+                    showRightHandPanel: true, // Show the right-hand panel\r\n+                    showSearchBar: true, // Show the search bar\r\n+                    enableFormFilling: true, // Enable form filling in the viewer\r\n+                    enableAutoSave: true, // Enable auto-save feature\r\n+                    showDocumentInfo: true, // Show document information\r\n+                    enablePDFAnalytics: true, // Enable PDF analytics\r\n+                    showAnnotationTools: true, // Show annotation tools\r\n+                    showSignaturePanel: true, // Show the signature panel\r\n+                    showThumbnailsPanel: true, // Show the thumbnails panel\r\n+                    showRotateButton: true, // Show the rotate button\r\n+                    showUndoRedoButtons: true, // Show undo/redo buttons\r\n+                    showFullScreenButton: true, // Show the full-screen button\r\n+                    enableAccessibility: true, // Enable accessibility features\r\n+                    showShareButton: true, // Show the share button\r\n+                    showOptimizedViewButton: true, // Show the optimized view button\r\n+                    showFormResetButton: true, // Show the form reset button\r\n+                    showFormSaveButton: true, // Show the form save button\r\n+                    enableMultiPageControl: true, // Enable multi-page control\r\n+                    enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+                    showOpenFileButton: true, // Show the open file button\r\n+                    showAddAttachmentButton: true, // Show the add attachment button\r\n+                    enableHighlightText: true, // Enable text highlighting\r\n+                    enableStrikeoutText: true, // Enable text strikeout\r\n+                    enableUnderlineText: true, // Enable text underlining\r\n+                    enableAreaHighlight: true, // Enable area highlighting\r\n+                    enableLinkAnnotation: true, // Enable link annotations\r\n+                    enableTextSelection: true, // Enable text selection\r\n+                    enablePanZoom: true, // Enable pan and zoom\r\n+                    enableTextAnnotation: true, // Enable text annotation\r\n+                    enableRedactText: true, // Enable text redaction\r\n+                    enableMeasureTools: true, // Enable measure tools\r\n+                    enableCommentingTools: true, // Enable commenting tools\r\n+                    enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+                    enableHandTool: true, // Enable hand tool for panning\r\n+                    enableZoomTools: true, // Enable zoom tools\r\n+                    enableRotatePages: true, // Enable page rotation\r\n+                    enableScrollZoom: true, // Enable scroll zoom\r\n+                    showAnnotationFilters: true, // Show annotation filters\r\n+                    enablePageViewTracking: true, // Enable page view tracking\r\n+                    enablePerformanceTracking: true, // Enable performance tracking\r\n+                    showTutorialButton: true, // Show the tutorial button\r\n+                    enableFormsTracking: true, // Enable forms tracking\r\n+                    enableTextExtraction: true, // Enable text extraction\r\n+                    enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+                    enablePDFConversion: true, // Enable PDF conversion\r\n+                    enablePDFSigning: true, // Enable PDF signing\r\n+                    enablePDFEditing: true, // Enable PDF editing\r\n+                    enablePDFCreation: true, // Enable PDF creation\r\n+                    enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+                    enablePDFRedaction: true, // Enable PDF redaction\r\n+                    enablePDFTextEditing: true, // Enable PDF text editing\r\n+                    enablePDFImageEditing: true, // Enable PDF image editing\r\n+                    enablePDFPageManagement: true, // Enable PDF page management\r\n+                    enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+                    enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+                    enablePDFWatermarking: true, // Enable PDF watermarking\r\n+                    enablePDFStamping: true, // Enable PDF stamping\r\n+                    enablePDFSearch: true, // Enable PDF search\r\n+                    enablePDFCompression: true, // Enable PDF compression\r\n+                    enablePDFOptimization: true, // Enable PDF optimization\r\n+                    enablePDFAccessibility: true, // Enable PDF accessibility\r\n+                    enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+                    enablePDFMerge: true, // Enable PDF merge\r\n+                    enablePDFSplit: true, // Enable PDF split\r\n+                    enablePDFPageRotation: true, // Enable PDF page rotation\r\n+                    enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+                    enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+                    enablePDFPageReordering: true, // Enable PDF page reordering\r\n+                    enablePDFPageScaling: true, // Enable PDF page scaling\r\n+                    enablePDFPageCropping: true, // Enable PDF page cropping\r\n+                    enablePDFTextSearch: true, // Enable PDF text search\r\n+                    enablePDFImageSearch: true, // Enable PDF image search\r\n+                    enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+                    enablePDFCommentSearch: true, // Enable PDF comment search\r\n+                    enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+                    enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+                    enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+                    enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+                    enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+                    enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+                    enablePDFExport: true, // Enable PDF export\r\n+                    enablePDFImport: true, // Enable PDF import\r\n+                    enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+                    enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+                    enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+                    enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+                    enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+                    enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+                    enablePDFEncryption: true, // Enable PDF encryption\r\n+                    enablePDFDecryption: true, // Enable PDF decryption\r\n+                    enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+                    enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+                    enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+                    enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+                    enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+                    enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+                    enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+                    enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+                    enablePDFPageLayout: true, // Enable PDF page layout\r\n+                    enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+                    enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+                    enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+                    enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+                    enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+                    enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+                    enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+                    enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+                    enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+                    enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+                    enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+                    enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+                    enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+                    enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+                    enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+                    enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+                    enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+                    enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+                    enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+                    enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+                    enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+                    enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+                    enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+                    enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+                    enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+                    enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+                    enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+                    enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+                    enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+                    enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+                    enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+                    enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+                    enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+                    enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+                    enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+                    enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+                    enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+                    enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+                    enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+                    enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+                    enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+                    enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+                    enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+                    enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+                    enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+                    enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+                    enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+                    enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+                    enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+                    enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+                    enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+                    enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+                    enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+                    enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+                    enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+                    enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+                    enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+                    enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+                    enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+                    enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+                    enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+                    enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+                    enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+                    enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+                    enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+                    enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+                    enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+                    enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+                    enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+                    enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+                    enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+                    enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+                    enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+                    enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+                    enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+                    enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+                    enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+                    enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+                    // Add more options as needed based on your requirements\r\n+            },\r\n+        },\r\n+            viewerConfig\r\n+        );\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise((resolve, reject) => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+                    savedData[metaData.id] = { content, comment: options.message }; // Include comment with annotation content\r\n+                    console.log(savedData, \"options\",options,\"msg\", options.message)\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: \"Annotation saved successfully\",\r\n+                            }),\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000); // Simulating a delay for demonstration purposes\r\n+            });\r\n+        };\r\n+\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            (event) => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713261100214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,8 +327,9 @@\n                     fileName: data.name,\r\n                     id: data.id,\r\n                 },\r\n                 options: {\r\n+                    message:\"dddddddddddddd\",\r\n                     enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n                     includePDFAnnotations: true, // Include PDF annotations in the preview\r\n                     showPageControls: true, // Show page navigation controls\r\n                     showToolbar: true, // Show the viewer's toolbar\r\n@@ -584,397 +585,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(\"File name:\", data.name);\r\n-        const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile(\r\n-            {\r\n-                content: {\r\n-                    location: {\r\n-                        url: url,\r\n-                        fileExtension: fileExtension,\r\n-                        fileType: data.mimeType,\r\n-                    },\r\n-                },\r\n-                metaData: {\r\n-                    fileName: data.name,\r\n-                    id: data.id,\r\n-                },\r\n-            },\r\n-            viewerConfig\r\n-        );\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise((resolve, reject) => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-                    savedData[metaData.id] = { content, comment: options.message }; // Include comment with annotation content\r\n-                    console.log(savedData, \"options\",options,\"msg\", options.message)\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: \"Annotation saved successfully\",\r\n-                            }),\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000); // Simulating a delay for demonstration purposes\r\n-            });\r\n-        };\r\n-\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            (event) => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713261458944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,9 +260,8 @@\n //     }\r\n // }\r\n \r\n // export default ViewSDKClient;\r\n-\r\n class ViewSDKClient {\r\n     constructor() {\r\n         // Promise that resolves when AdobeDC SDK is ready\r\n         this.readyPromise = new Promise((resolve) => {\r\n@@ -274,8 +273,9 @@\n                 });\r\n             }\r\n         });\r\n         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n     }\r\n \r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n@@ -284,10 +284,10 @@\n \r\n     // Method to preview a file\r\n     previewFile(divId, viewerConfig, url, data) {\r\n         // Log file information\r\n-        console.log(\"File name:\", data.name);\r\n-        const fileExtension = data.name.split(\".\").pop().toLowerCase();\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n         console.log(\"File extension:\", fileExtension);\r\n \r\n         const config = {\r\n             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n@@ -313,219 +313,215 @@\n             showDocumentInfo: true,\r\n         };\r\n \r\n         // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile(\r\n-            {\r\n-                content: {\r\n-                    location: {\r\n-                        url: url,\r\n-                        fileExtension: fileExtension,\r\n-                        fileType: data.mimeType,\r\n-                    },\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n                 },\r\n-                metaData: {\r\n-                    fileName: data.name,\r\n-                    id: data.id,\r\n-                },\r\n-                options: {\r\n-                    message:\"dddddddddddddd\",\r\n-                    enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-                    includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                    showPageControls: true, // Show page navigation controls\r\n-                    showToolbar: true, // Show the viewer's toolbar\r\n-                    showReflowControl: true, // Show reflow control for text reflow\r\n-                    openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-                    enableFormNavigation: true, // Enable form navigation controls\r\n-                    enableAddTextComment: true, // Enable adding text comments\r\n-                    enableAddStickyNote: true, // Enable adding sticky notes\r\n-                    showDownloadButton: true, // Show the download button\r\n-                    showPrintButton: true, // Show the print button\r\n-                    showZoomButtons: true, // Show zoom in/out buttons\r\n-                    defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-                    showLeftHandPanel: true, // Show the left-hand panel\r\n-                    showRightHandPanel: true, // Show the right-hand panel\r\n-                    showSearchBar: true, // Show the search bar\r\n-                    enableFormFilling: true, // Enable form filling in the viewer\r\n-                    enableAutoSave: true, // Enable auto-save feature\r\n-                    showDocumentInfo: true, // Show document information\r\n-                    enablePDFAnalytics: true, // Enable PDF analytics\r\n-                    showAnnotationTools: true, // Show annotation tools\r\n-                    showSignaturePanel: true, // Show the signature panel\r\n-                    showThumbnailsPanel: true, // Show the thumbnails panel\r\n-                    showRotateButton: true, // Show the rotate button\r\n-                    showUndoRedoButtons: true, // Show undo/redo buttons\r\n-                    showFullScreenButton: true, // Show the full-screen button\r\n-                    enableAccessibility: true, // Enable accessibility features\r\n-                    showShareButton: true, // Show the share button\r\n-                    showOptimizedViewButton: true, // Show the optimized view button\r\n-                    showFormResetButton: true, // Show the form reset button\r\n-                    showFormSaveButton: true, // Show the form save button\r\n-                    enableMultiPageControl: true, // Enable multi-page control\r\n-                    enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-                    showOpenFileButton: true, // Show the open file button\r\n-                    showAddAttachmentButton: true, // Show the add attachment button\r\n-                    enableHighlightText: true, // Enable text highlighting\r\n-                    enableStrikeoutText: true, // Enable text strikeout\r\n-                    enableUnderlineText: true, // Enable text underlining\r\n-                    enableAreaHighlight: true, // Enable area highlighting\r\n-                    enableLinkAnnotation: true, // Enable link annotations\r\n-                    enableTextSelection: true, // Enable text selection\r\n-                    enablePanZoom: true, // Enable pan and zoom\r\n-                    enableTextAnnotation: true, // Enable text annotation\r\n-                    enableRedactText: true, // Enable text redaction\r\n-                    enableMeasureTools: true, // Enable measure tools\r\n-                    enableCommentingTools: true, // Enable commenting tools\r\n-                    enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-                    enableHandTool: true, // Enable hand tool for panning\r\n-                    enableZoomTools: true, // Enable zoom tools\r\n-                    enableRotatePages: true, // Enable page rotation\r\n-                    enableScrollZoom: true, // Enable scroll zoom\r\n-                    showAnnotationFilters: true, // Show annotation filters\r\n-                    enablePageViewTracking: true, // Enable page view tracking\r\n-                    enablePerformanceTracking: true, // Enable performance tracking\r\n-                    showTutorialButton: true, // Show the tutorial button\r\n-                    enableFormsTracking: true, // Enable forms tracking\r\n-                    enableTextExtraction: true, // Enable text extraction\r\n-                    enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-                    enablePDFConversion: true, // Enable PDF conversion\r\n-                    enablePDFSigning: true, // Enable PDF signing\r\n-                    enablePDFEditing: true, // Enable PDF editing\r\n-                    enablePDFCreation: true, // Enable PDF creation\r\n-                    enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-                    enablePDFRedaction: true, // Enable PDF redaction\r\n-                    enablePDFTextEditing: true, // Enable PDF text editing\r\n-                    enablePDFImageEditing: true, // Enable PDF image editing\r\n-                    enablePDFPageManagement: true, // Enable PDF page management\r\n-                    enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-                    enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-                    enablePDFWatermarking: true, // Enable PDF watermarking\r\n-                    enablePDFStamping: true, // Enable PDF stamping\r\n-                    enablePDFSearch: true, // Enable PDF search\r\n-                    enablePDFCompression: true, // Enable PDF compression\r\n-                    enablePDFOptimization: true, // Enable PDF optimization\r\n-                    enablePDFAccessibility: true, // Enable PDF accessibility\r\n-                    enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-                    enablePDFMerge: true, // Enable PDF merge\r\n-                    enablePDFSplit: true, // Enable PDF split\r\n-                    enablePDFPageRotation: true, // Enable PDF page rotation\r\n-                    enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-                    enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-                    enablePDFPageReordering: true, // Enable PDF page reordering\r\n-                    enablePDFPageScaling: true, // Enable PDF page scaling\r\n-                    enablePDFPageCropping: true, // Enable PDF page cropping\r\n-                    enablePDFTextSearch: true, // Enable PDF text search\r\n-                    enablePDFImageSearch: true, // Enable PDF image search\r\n-                    enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-                    enablePDFCommentSearch: true, // Enable PDF comment search\r\n-                    enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-                    enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-                    enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-                    enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-                    enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-                    enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-                    enablePDFExport: true, // Enable PDF export\r\n-                    enablePDFImport: true, // Enable PDF import\r\n-                    enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-                    enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-                    enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-                    enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-                    enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-                    enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-                    enablePDFEncryption: true, // Enable PDF encryption\r\n-                    enablePDFDecryption: true, // Enable PDF decryption\r\n-                    enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-                    enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-                    enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-                    enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-                    enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-                    enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-                    enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-                    enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-                    enablePDFPageLayout: true, // Enable PDF page layout\r\n-                    enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-                    enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-                    enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-                    enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-                    enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-                    enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-                    enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-                    enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-                    enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-                    enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-                    enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-                    enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-                    enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-                    enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-                    enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-                    enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-                    enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-                    enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-                    enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-                    enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-                    enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-                    enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-                    enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-                    enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-                    enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-                    enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-                    enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-                    enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-                    enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-                    enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-                    enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-                    enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-                    enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-                    enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-                    enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-                    enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-                    enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-                    enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-                    enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-                    enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-                    enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-                    enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-                    enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-                    enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-                    enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-                    enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-                    enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-                    enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-                    enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-                    enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-                    enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-                    enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-                    enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-                    enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-                    enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-                    enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-                    enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-                    enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-                    enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-                    enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-                    enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-                    enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-                    enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-                    enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-                    enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-                    enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-                    enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-                    enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-                    enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-                    enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-                    enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-                    enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-                    enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-                    enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-                    enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-                    enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-                    enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-                    enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-                    // Add more options as needed based on your requirements\r\n             },\r\n-        },\r\n-            viewerConfig\r\n-        );\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+    options: {\r\n+        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+        showPageControls: true, // Show page navigation controls\r\n+        showToolbar: true, // Show the viewer's toolbar\r\n+        showReflowControl: true, // Show reflow control for text reflow\r\n+        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+        enableFormNavigation: true, // Enable form navigation controls\r\n+        enableAddTextComment: true, // Enable adding text comments\r\n+        enableAddStickyNote: true, // Enable adding sticky notes\r\n+        showDownloadButton: true, // Show the download button\r\n+        showPrintButton: true, // Show the print button\r\n+        showZoomButtons: true, // Show zoom in/out buttons\r\n+        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+        showLeftHandPanel: true, // Show the left-hand panel\r\n+        showRightHandPanel: true, // Show the right-hand panel\r\n+        showSearchBar: true, // Show the search bar\r\n+        enableFormFilling: true, // Enable form filling in the viewer\r\n+        enableAutoSave: true, // Enable auto-save feature\r\n+        showDocumentInfo: true, // Show document information\r\n+        enablePDFAnalytics: true, // Enable PDF analytics\r\n+        showAnnotationTools: true, // Show annotation tools\r\n+        showSignaturePanel: true, // Show the signature panel\r\n+        showThumbnailsPanel: true, // Show the thumbnails panel\r\n+        showRotateButton: true, // Show the rotate button\r\n+        showUndoRedoButtons: true, // Show undo/redo buttons\r\n+        showFullScreenButton: true, // Show the full-screen button\r\n+        enableAccessibility: true, // Enable accessibility features\r\n+        showShareButton: true, // Show the share button\r\n+        showOptimizedViewButton: true, // Show the optimized view button\r\n+        showFormResetButton: true, // Show the form reset button\r\n+        showFormSaveButton: true, // Show the form save button\r\n+        enableMultiPageControl: true, // Enable multi-page control\r\n+        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+        showOpenFileButton: true, // Show the open file button\r\n+        showAddAttachmentButton: true, // Show the add attachment button\r\n+        enableHighlightText: true, // Enable text highlighting\r\n+        enableStrikeoutText: true, // Enable text strikeout\r\n+        enableUnderlineText: true, // Enable text underlining\r\n+        enableAreaHighlight: true, // Enable area highlighting\r\n+        enableLinkAnnotation: true, // Enable link annotations\r\n+        enableTextSelection: true, // Enable text selection\r\n+        enablePanZoom: true, // Enable pan and zoom\r\n+        enableTextAnnotation: true, // Enable text annotation\r\n+        enableRedactText: true, // Enable text redaction\r\n+        enableMeasureTools: true, // Enable measure tools\r\n+        enableCommentingTools: true, // Enable commenting tools\r\n+        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+        enableHandTool: true, // Enable hand tool for panning\r\n+        enableZoomTools: true, // Enable zoom tools\r\n+        enableRotatePages: true, // Enable page rotation\r\n+        enableScrollZoom: true, // Enable scroll zoom\r\n+        showAnnotationFilters: true, // Show annotation filters\r\n+        enablePageViewTracking: true, // Enable page view tracking\r\n+        enablePerformanceTracking: true, // Enable performance tracking\r\n+        showTutorialButton: true, // Show the tutorial button\r\n+        enableFormsTracking: true, // Enable forms tracking\r\n+        enableTextExtraction: true, // Enable text extraction\r\n+        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+        enablePDFConversion: true, // Enable PDF conversion\r\n+        enablePDFSigning: true, // Enable PDF signing\r\n+        enablePDFEditing: true, // Enable PDF editing\r\n+        enablePDFCreation: true, // Enable PDF creation\r\n+        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+        enablePDFRedaction: true, // Enable PDF redaction\r\n+        enablePDFTextEditing: true, // Enable PDF text editing\r\n+        enablePDFImageEditing: true, // Enable PDF image editing\r\n+        enablePDFPageManagement: true, // Enable PDF page management\r\n+        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+        enablePDFWatermarking: true, // Enable PDF watermarking\r\n+        enablePDFStamping: true, // Enable PDF stamping\r\n+        enablePDFSearch: true, // Enable PDF search\r\n+        enablePDFCompression: true, // Enable PDF compression\r\n+        enablePDFOptimization: true, // Enable PDF optimization\r\n+        enablePDFAccessibility: true, // Enable PDF accessibility\r\n+        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+        enablePDFMerge: true, // Enable PDF merge\r\n+        enablePDFSplit: true, // Enable PDF split\r\n+        enablePDFPageRotation: true, // Enable PDF page rotation\r\n+        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+        enablePDFPageReordering: true, // Enable PDF page reordering\r\n+        enablePDFPageScaling: true, // Enable PDF page scaling\r\n+        enablePDFPageCropping: true, // Enable PDF page cropping\r\n+        enablePDFTextSearch: true, // Enable PDF text search\r\n+        enablePDFImageSearch: true, // Enable PDF image search\r\n+        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+        enablePDFCommentSearch: true, // Enable PDF comment search\r\n+        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+        enablePDFExport: true, // Enable PDF export\r\n+        enablePDFImport: true, // Enable PDF import\r\n+        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+        enablePDFEncryption: true, // Enable PDF encryption\r\n+        enablePDFDecryption: true, // Enable PDF decryption\r\n+        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+        enablePDFPageLayout: true, // Enable PDF page layout\r\n+        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+        // Add more options as needed based on your requirements\r\n+    },\r\n+        }, viewerConfig);\r\n \r\n         // Register save API handler with dynamic annotation message\r\n         this.registerSaveApiHandler();\r\n \r\n@@ -534,38 +530,43 @@\n \r\n     // Method to register a save API handler with dynamic annotation message\r\n     registerSaveApiHandler() {\r\n         const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise((resolve, reject) => {\r\n+            return new Promise(resolve => {\r\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-                    savedData[metaData.id] = { content, comment: options.message }; // Include comment with annotation content\r\n-                    console.log(savedData, \"options\",options,\"msg\", options.message)\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n+                    // Set the dynamic annotation message\r\n                     const response = {\r\n                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n                         data: {\r\n                             metaData: Object.assign(metaData, {\r\n                                 updatedAt: new Date().getTime(),\r\n-                                message: \"Annotation saved successfully\",\r\n-                            }),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n                         },\r\n                     };\r\n                     resolve(response);\r\n-                }, 2000); // Simulating a delay for demonstration purposes\r\n+                }, 2000);\r\n             });\r\n         };\r\n-\r\n         // Register save API handler with AdobeDC View object\r\n         this.adobeDCView.registerCallback(\r\n             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n             saveApiHandler,\r\n             {}\r\n         );\r\n     }\r\n \r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n     // Method to retrieve annotations from local storage\r\n     retrieveAnnotations(documentId) {\r\n         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n         return savedData[documentId] || {};\r\n@@ -574,9 +575,9 @@\n     // Method to register event handlers\r\n     registerEventsHandler() {\r\n         this.adobeDCView.registerCallback(\r\n             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            (event) => {\r\n+            event => {\r\n                 console.log(event);\r\n             },\r\n             {\r\n                 enablePDFAnalytics: true,\r\n"
                },
                {
                    "date": 1713263445631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,589 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+    options: {\r\n+        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+        showPageControls: true, // Show page navigation controls\r\n+        showToolbar: true, // Show the viewer's toolbar\r\n+        showReflowControl: true, // Show reflow control for text reflow\r\n+        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+        enableFormNavigation: true, // Enable form navigation controls\r\n+        enableAddTextComment: true, // Enable adding text comments\r\n+        enableAddStickyNote: true, // Enable adding sticky notes\r\n+        showDownloadButton: true, // Show the download button\r\n+        showPrintButton: true, // Show the print button\r\n+        showZoomButtons: true, // Show zoom in/out buttons\r\n+        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+        showLeftHandPanel: true, // Show the left-hand panel\r\n+        showRightHandPanel: true, // Show the right-hand panel\r\n+        showSearchBar: true, // Show the search bar\r\n+        enableFormFilling: true, // Enable form filling in the viewer\r\n+        enableAutoSave: true, // Enable auto-save feature\r\n+        showDocumentInfo: true, // Show document information\r\n+        enablePDFAnalytics: true, // Enable PDF analytics\r\n+        showAnnotationTools: false, // Show annotation tools\r\n+        showSignaturePanel: true, // Show the signature panel\r\n+        showThumbnailsPanel: true, // Show the thumbnails panel\r\n+        showRotateButton: true, // Show the rotate button\r\n+        showUndoRedoButtons: true, // Show undo/redo buttons\r\n+        showFullScreenButton: true, // Show the full-screen button\r\n+        enableAccessibility: true, // Enable accessibility features\r\n+        showShareButton: true, // Show the share button\r\n+        showOptimizedViewButton: true, // Show the optimized view button\r\n+        showFormResetButton: true, // Show the form reset button\r\n+        showFormSaveButton: true, // Show the form save button\r\n+        enableMultiPageControl: true, // Enable multi-page control\r\n+        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+        showOpenFileButton: true, // Show the open file button\r\n+        showAddAttachmentButton: true, // Show the add attachment button\r\n+        enableHighlightText: true, // Enable text highlighting\r\n+        enableStrikeoutText: true, // Enable text strikeout\r\n+        enableUnderlineText: true, // Enable text underlining\r\n+        enableAreaHighlight: true, // Enable area highlighting\r\n+        enableLinkAnnotation: true, // Enable link annotations\r\n+        enableTextSelection: true, // Enable text selection\r\n+        enablePanZoom: true, // Enable pan and zoom\r\n+        enableTextAnnotation: true, // Enable text annotation\r\n+        enableRedactText: true, // Enable text redaction\r\n+        enableMeasureTools: true, // Enable measure tools\r\n+        enableCommentingTools: true, // Enable commenting tools\r\n+        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+        enableHandTool: true, // Enable hand tool for panning\r\n+        enableZoomTools: true, // Enable zoom tools\r\n+        enableRotatePages: true, // Enable page rotation\r\n+        enableScrollZoom: true, // Enable scroll zoom\r\n+        showAnnotationFilters: true, // Show annotation filters\r\n+        enablePageViewTracking: true, // Enable page view tracking\r\n+        enablePerformanceTracking: true, // Enable performance tracking\r\n+        showTutorialButton: true, // Show the tutorial button\r\n+        enableFormsTracking: true, // Enable forms tracking\r\n+        enableTextExtraction: true, // Enable text extraction\r\n+        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+        enablePDFConversion: true, // Enable PDF conversion\r\n+        enablePDFSigning: true, // Enable PDF signing\r\n+        enablePDFEditing: true, // Enable PDF editing\r\n+        enablePDFCreation: true, // Enable PDF creation\r\n+        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+        enablePDFRedaction: true, // Enable PDF redaction\r\n+        enablePDFTextEditing: true, // Enable PDF text editing\r\n+        enablePDFImageEditing: true, // Enable PDF image editing\r\n+        enablePDFPageManagement: true, // Enable PDF page management\r\n+        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+        enablePDFWatermarking: true, // Enable PDF watermarking\r\n+        enablePDFStamping: true, // Enable PDF stamping\r\n+        enablePDFSearch: true, // Enable PDF search\r\n+        enablePDFCompression: true, // Enable PDF compression\r\n+        enablePDFOptimization: true, // Enable PDF optimization\r\n+        enablePDFAccessibility: true, // Enable PDF accessibility\r\n+        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+        enablePDFMerge: true, // Enable PDF merge\r\n+        enablePDFSplit: true, // Enable PDF split\r\n+        enablePDFPageRotation: true, // Enable PDF page rotation\r\n+        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+        enablePDFPageReordering: true, // Enable PDF page reordering\r\n+        enablePDFPageScaling: true, // Enable PDF page scaling\r\n+        enablePDFPageCropping: true, // Enable PDF page cropping\r\n+        enablePDFTextSearch: true, // Enable PDF text search\r\n+        enablePDFImageSearch: true, // Enable PDF image search\r\n+        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+        enablePDFCommentSearch: true, // Enable PDF comment search\r\n+        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+        enablePDFExport: true, // Enable PDF export\r\n+        enablePDFImport: true, // Enable PDF import\r\n+        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+        enablePDFEncryption: true, // Enable PDF encryption\r\n+        enablePDFDecryption: true, // Enable PDF decryption\r\n+        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+        enablePDFPageLayout: true, // Enable PDF page layout\r\n+        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+        // Add more options as needed based on your requirements\r\n+    },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713268187308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n                 });\r\n             }\r\n         });\r\n         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+        this.dynamicAnnotationMessage = \"hello\"; // Initialize dynamic annotation message\r\n     }\r\n \r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n@@ -586,593 +586,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-    options: {\r\n-        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-        showPageControls: true, // Show page navigation controls\r\n-        showToolbar: true, // Show the viewer's toolbar\r\n-        showReflowControl: true, // Show reflow control for text reflow\r\n-        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-        enableFormNavigation: true, // Enable form navigation controls\r\n-        enableAddTextComment: true, // Enable adding text comments\r\n-        enableAddStickyNote: true, // Enable adding sticky notes\r\n-        showDownloadButton: true, // Show the download button\r\n-        showPrintButton: true, // Show the print button\r\n-        showZoomButtons: true, // Show zoom in/out buttons\r\n-        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-        showLeftHandPanel: true, // Show the left-hand panel\r\n-        showRightHandPanel: true, // Show the right-hand panel\r\n-        showSearchBar: true, // Show the search bar\r\n-        enableFormFilling: true, // Enable form filling in the viewer\r\n-        enableAutoSave: true, // Enable auto-save feature\r\n-        showDocumentInfo: true, // Show document information\r\n-        enablePDFAnalytics: true, // Enable PDF analytics\r\n-        showAnnotationTools: true, // Show annotation tools\r\n-        showSignaturePanel: true, // Show the signature panel\r\n-        showThumbnailsPanel: true, // Show the thumbnails panel\r\n-        showRotateButton: true, // Show the rotate button\r\n-        showUndoRedoButtons: true, // Show undo/redo buttons\r\n-        showFullScreenButton: true, // Show the full-screen button\r\n-        enableAccessibility: true, // Enable accessibility features\r\n-        showShareButton: true, // Show the share button\r\n-        showOptimizedViewButton: true, // Show the optimized view button\r\n-        showFormResetButton: true, // Show the form reset button\r\n-        showFormSaveButton: true, // Show the form save button\r\n-        enableMultiPageControl: true, // Enable multi-page control\r\n-        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-        showOpenFileButton: true, // Show the open file button\r\n-        showAddAttachmentButton: true, // Show the add attachment button\r\n-        enableHighlightText: true, // Enable text highlighting\r\n-        enableStrikeoutText: true, // Enable text strikeout\r\n-        enableUnderlineText: true, // Enable text underlining\r\n-        enableAreaHighlight: true, // Enable area highlighting\r\n-        enableLinkAnnotation: true, // Enable link annotations\r\n-        enableTextSelection: true, // Enable text selection\r\n-        enablePanZoom: true, // Enable pan and zoom\r\n-        enableTextAnnotation: true, // Enable text annotation\r\n-        enableRedactText: true, // Enable text redaction\r\n-        enableMeasureTools: true, // Enable measure tools\r\n-        enableCommentingTools: true, // Enable commenting tools\r\n-        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-        enableHandTool: true, // Enable hand tool for panning\r\n-        enableZoomTools: true, // Enable zoom tools\r\n-        enableRotatePages: true, // Enable page rotation\r\n-        enableScrollZoom: true, // Enable scroll zoom\r\n-        showAnnotationFilters: true, // Show annotation filters\r\n-        enablePageViewTracking: true, // Enable page view tracking\r\n-        enablePerformanceTracking: true, // Enable performance tracking\r\n-        showTutorialButton: true, // Show the tutorial button\r\n-        enableFormsTracking: true, // Enable forms tracking\r\n-        enableTextExtraction: true, // Enable text extraction\r\n-        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-        enablePDFConversion: true, // Enable PDF conversion\r\n-        enablePDFSigning: true, // Enable PDF signing\r\n-        enablePDFEditing: true, // Enable PDF editing\r\n-        enablePDFCreation: true, // Enable PDF creation\r\n-        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-        enablePDFRedaction: true, // Enable PDF redaction\r\n-        enablePDFTextEditing: true, // Enable PDF text editing\r\n-        enablePDFImageEditing: true, // Enable PDF image editing\r\n-        enablePDFPageManagement: true, // Enable PDF page management\r\n-        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-        enablePDFWatermarking: true, // Enable PDF watermarking\r\n-        enablePDFStamping: true, // Enable PDF stamping\r\n-        enablePDFSearch: true, // Enable PDF search\r\n-        enablePDFCompression: true, // Enable PDF compression\r\n-        enablePDFOptimization: true, // Enable PDF optimization\r\n-        enablePDFAccessibility: true, // Enable PDF accessibility\r\n-        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-        enablePDFMerge: true, // Enable PDF merge\r\n-        enablePDFSplit: true, // Enable PDF split\r\n-        enablePDFPageRotation: true, // Enable PDF page rotation\r\n-        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-        enablePDFPageReordering: true, // Enable PDF page reordering\r\n-        enablePDFPageScaling: true, // Enable PDF page scaling\r\n-        enablePDFPageCropping: true, // Enable PDF page cropping\r\n-        enablePDFTextSearch: true, // Enable PDF text search\r\n-        enablePDFImageSearch: true, // Enable PDF image search\r\n-        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-        enablePDFCommentSearch: true, // Enable PDF comment search\r\n-        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-        enablePDFExport: true, // Enable PDF export\r\n-        enablePDFImport: true, // Enable PDF import\r\n-        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-        enablePDFEncryption: true, // Enable PDF encryption\r\n-        enablePDFDecryption: true, // Enable PDF decryption\r\n-        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-        enablePDFPageLayout: true, // Enable PDF page layout\r\n-        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-        // Add more options as needed based on your requirements\r\n-    },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713269721467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,8 +260,334 @@\n //     }\r\n // }\r\n \r\n // export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"hello\"; // Initialize dynamic annotation message\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: false, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler();\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n class ViewSDKClient {\r\n     constructor() {\r\n         // Promise that resolves when AdobeDC SDK is ready\r\n         this.readyPromise = new Promise((resolve) => {\r\n@@ -273,9 +599,19 @@\n                 });\r\n             }\r\n         });\r\n         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"hello\"; // Initialize dynamic annotation message\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+\r\n+        this.onChange = this.onChange.bind(this); // Bind the onChange method to the class instance\r\n+        this.inputElement = document.getElementsByClassName('ModernEditableTextComponent__textEditorPHItalic___hBycl'); // Replace 'ModernEditableTextComponent__textEditorPHItalic___hBycl' with the actual ID of your input element\r\n+\r\n+        if (!this.inputElement) {\r\n+            throw new Error(`Element with ID 'ModernEditableTextComponent__textEditorPHItalic___hBycl' not found.`);\r\n+        }\r\n+\r\n+        // Add event listener for input change\r\n+        this.inputElement.addEventListener('change', this.onChange);\r\n     }\r\n \r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n@@ -325,202 +661,30 @@\n             metaData: {\r\n                 fileName: data.name,\r\n                 id: data.id,\r\n             },\r\n-    options: {\r\n-        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-        showPageControls: true, // Show page navigation controls\r\n-        showToolbar: true, // Show the viewer's toolbar\r\n-        showReflowControl: true, // Show reflow control for text reflow\r\n-        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-        enableFormNavigation: true, // Enable form navigation controls\r\n-        enableAddTextComment: true, // Enable adding text comments\r\n-        enableAddStickyNote: true, // Enable adding sticky notes\r\n-        showDownloadButton: true, // Show the download button\r\n-        showPrintButton: true, // Show the print button\r\n-        showZoomButtons: true, // Show zoom in/out buttons\r\n-        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-        showLeftHandPanel: true, // Show the left-hand panel\r\n-        showRightHandPanel: true, // Show the right-hand panel\r\n-        showSearchBar: true, // Show the search bar\r\n-        enableFormFilling: true, // Enable form filling in the viewer\r\n-        enableAutoSave: true, // Enable auto-save feature\r\n-        showDocumentInfo: true, // Show document information\r\n-        enablePDFAnalytics: true, // Enable PDF analytics\r\n-        showAnnotationTools: false, // Show annotation tools\r\n-        showSignaturePanel: true, // Show the signature panel\r\n-        showThumbnailsPanel: true, // Show the thumbnails panel\r\n-        showRotateButton: true, // Show the rotate button\r\n-        showUndoRedoButtons: true, // Show undo/redo buttons\r\n-        showFullScreenButton: true, // Show the full-screen button\r\n-        enableAccessibility: true, // Enable accessibility features\r\n-        showShareButton: true, // Show the share button\r\n-        showOptimizedViewButton: true, // Show the optimized view button\r\n-        showFormResetButton: true, // Show the form reset button\r\n-        showFormSaveButton: true, // Show the form save button\r\n-        enableMultiPageControl: true, // Enable multi-page control\r\n-        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-        showOpenFileButton: true, // Show the open file button\r\n-        showAddAttachmentButton: true, // Show the add attachment button\r\n-        enableHighlightText: true, // Enable text highlighting\r\n-        enableStrikeoutText: true, // Enable text strikeout\r\n-        enableUnderlineText: true, // Enable text underlining\r\n-        enableAreaHighlight: true, // Enable area highlighting\r\n-        enableLinkAnnotation: true, // Enable link annotations\r\n-        enableTextSelection: true, // Enable text selection\r\n-        enablePanZoom: true, // Enable pan and zoom\r\n-        enableTextAnnotation: true, // Enable text annotation\r\n-        enableRedactText: true, // Enable text redaction\r\n-        enableMeasureTools: true, // Enable measure tools\r\n-        enableCommentingTools: true, // Enable commenting tools\r\n-        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-        enableHandTool: true, // Enable hand tool for panning\r\n-        enableZoomTools: true, // Enable zoom tools\r\n-        enableRotatePages: true, // Enable page rotation\r\n-        enableScrollZoom: true, // Enable scroll zoom\r\n-        showAnnotationFilters: true, // Show annotation filters\r\n-        enablePageViewTracking: true, // Enable page view tracking\r\n-        enablePerformanceTracking: true, // Enable performance tracking\r\n-        showTutorialButton: true, // Show the tutorial button\r\n-        enableFormsTracking: true, // Enable forms tracking\r\n-        enableTextExtraction: true, // Enable text extraction\r\n-        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-        enablePDFConversion: true, // Enable PDF conversion\r\n-        enablePDFSigning: true, // Enable PDF signing\r\n-        enablePDFEditing: true, // Enable PDF editing\r\n-        enablePDFCreation: true, // Enable PDF creation\r\n-        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-        enablePDFRedaction: true, // Enable PDF redaction\r\n-        enablePDFTextEditing: true, // Enable PDF text editing\r\n-        enablePDFImageEditing: true, // Enable PDF image editing\r\n-        enablePDFPageManagement: true, // Enable PDF page management\r\n-        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-        enablePDFWatermarking: true, // Enable PDF watermarking\r\n-        enablePDFStamping: true, // Enable PDF stamping\r\n-        enablePDFSearch: true, // Enable PDF search\r\n-        enablePDFCompression: true, // Enable PDF compression\r\n-        enablePDFOptimization: true, // Enable PDF optimization\r\n-        enablePDFAccessibility: true, // Enable PDF accessibility\r\n-        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-        enablePDFMerge: true, // Enable PDF merge\r\n-        enablePDFSplit: true, // Enable PDF split\r\n-        enablePDFPageRotation: true, // Enable PDF page rotation\r\n-        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-        enablePDFPageReordering: true, // Enable PDF page reordering\r\n-        enablePDFPageScaling: true, // Enable PDF page scaling\r\n-        enablePDFPageCropping: true, // Enable PDF page cropping\r\n-        enablePDFTextSearch: true, // Enable PDF text search\r\n-        enablePDFImageSearch: true, // Enable PDF image search\r\n-        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-        enablePDFCommentSearch: true, // Enable PDF comment search\r\n-        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-        enablePDFExport: true, // Enable PDF export\r\n-        enablePDFImport: true, // Enable PDF import\r\n-        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-        enablePDFEncryption: true, // Enable PDF encryption\r\n-        enablePDFDecryption: true, // Enable PDF decryption\r\n-        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-        enablePDFPageLayout: true, // Enable PDF page layout\r\n-        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-        // Add more options as needed based on your requirements\r\n-    },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                showPageControls: true, // Show page navigation controls\r\n+                showToolbar: true, // Show the viewer's toolbar\r\n+                showReflowControl: true, // Show reflow control for text reflow\r\n+                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+                enableFormNavigation: true, // Enable form navigation controls\r\n+                enableAddTextComment: true, // Enable adding text comments\r\n+                enableAddStickyNote: true, // Enable adding sticky notes\r\n+                showDownloadButton: true, // Show the download button\r\n+                showPrintButton: true, // Show the print button\r\n+                showZoomButtons: true, // Show zoom in/out buttons\r\n+                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+                showLeftHandPanel: true, // Show the left-hand panel\r\n+                showRightHandPanel: true, // Show the right-hand panel\r\n+                showSearchBar: true, // Show the search bar\r\n+                enableFormFilling: true, // Enable form filling in the viewer\r\n+                enableAutoSave: true, // Enable auto-save feature\r\n+                showDocumentInfo: true, // Show document information\r\n+                // Other viewer options...\r\n+            },\r\n         }, viewerConfig);\r\n \r\n         // Register save API handler with dynamic annotation message\r\n         this.registerSaveApiHandler();\r\n@@ -583,7 +747,12 @@\n                 enablePDFAnalytics: true,\r\n             }\r\n         );\r\n     }\r\n+\r\n+    // Event handler for input change\r\n+    onChange(event) {\r\n+        this.dynamicAnnotationMessage = event.target.value;\r\n+    }\r\n }\r\n \r\n export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713269743819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,758 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"hello\"; // Initialize dynamic annotation message\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: false, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler();\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+\r\n+        this.onChange = this.onChange.bind(this); // Bind the onChange method to the class instance\r\n+        this.inputElement = document.getElementsByClassName('ModernEditableTextComponent__textEditorPHItalic___hBycl'); // Replace 'ModernEditableTextComponent__textEditorPHItalic___hBycl' with the actual ID of your input element\r\n+\r\n+        if (!this.inputElement) {\r\n+            throw new Error(`Element with ID 'ModernEditableTextComponent__textEditorPHItalic___hBycl' not found.`);\r\n+        }\r\n+\r\n+        // Add event listener for input change\r\n+        this.inputElement.addEventListener('change', this.onChange);\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                showPageControls: true, // Show page navigation controls\r\n+                showToolbar: true, // Show the viewer's toolbar\r\n+                showReflowControl: true, // Show reflow control for text reflow\r\n+                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+                enableFormNavigation: true, // Enable form navigation controls\r\n+                enableAddTextComment: true, // Enable adding text comments\r\n+                enableAddStickyNote: true, // Enable adding sticky notes\r\n+                showDownloadButton: true, // Show the download button\r\n+                showPrintButton: true, // Show the print button\r\n+                showZoomButtons: true, // Show zoom in/out buttons\r\n+                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+                showLeftHandPanel: true, // Show the left-hand panel\r\n+                showRightHandPanel: true, // Show the right-hand panel\r\n+                showSearchBar: true, // Show the search bar\r\n+                enableFormFilling: true, // Enable form filling in the viewer\r\n+                enableAutoSave: true, // Enable auto-save feature\r\n+                showDocumentInfo: true, // Show document information\r\n+                // Other viewer options...\r\n+            },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+\r\n+    // Event handler for input change\r\n+    onChange(event) {\r\n+        this.dynamicAnnotationMessage = event.target.value;\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713270323038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n //                 });\r\n //             }\r\n //         });\r\n //         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//         this.dynamicAnnotationMessage = \"hello\"; // Initialize dynamic annotation message\r\n+//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n //     }\r\n \r\n //     // Method to check if AdobeDC SDK is ready\r\n //     ready() {\r\n@@ -588,9 +588,9 @@\n \r\n // export default ViewSDKClient;\r\n class ViewSDKClient {\r\n     constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n+        // Initialize properties\r\n         this.readyPromise = new Promise((resolve) => {\r\n             if (window.AdobeDC) {\r\n                 resolve();\r\n             } else {\r\n@@ -598,20 +598,10 @@\n                     resolve();\r\n                 });\r\n             }\r\n         });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-\r\n-        this.onChange = this.onChange.bind(this); // Bind the onChange method to the class instance\r\n-        this.inputElement = document.getElementsByClassName('ModernEditableTextComponent__textEditorPHItalic___hBycl'); // Replace 'ModernEditableTextComponent__textEditorPHItalic___hBycl' with the actual ID of your input element\r\n-\r\n-        if (!this.inputElement) {\r\n-            throw new Error(`Element with ID 'ModernEditableTextComponent__textEditorPHItalic___hBycl' not found.`);\r\n-        }\r\n-\r\n-        // Add event listener for input change\r\n-        this.inputElement.addEventListener('change', this.onChange);\r\n+        this.adobeDCView = undefined;\r\n+        this.dynamicAnnotationMessage = \"\";\r\n     }\r\n \r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n@@ -664,25 +654,8 @@\n             },\r\n             options: {\r\n                 enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n                 includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                showPageControls: true, // Show page navigation controls\r\n-                showToolbar: true, // Show the viewer's toolbar\r\n-                showReflowControl: true, // Show reflow control for text reflow\r\n-                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-                enableFormNavigation: true, // Enable form navigation controls\r\n-                enableAddTextComment: true, // Enable adding text comments\r\n-                enableAddStickyNote: true, // Enable adding sticky notes\r\n-                showDownloadButton: true, // Show the download button\r\n-                showPrintButton: true, // Show the print button\r\n-                showZoomButtons: true, // Show zoom in/out buttons\r\n-                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-                showLeftHandPanel: true, // Show the left-hand panel\r\n-                showRightHandPanel: true, // Show the right-hand panel\r\n-                showSearchBar: true, // Show the search bar\r\n-                enableFormFilling: true, // Enable form filling in the viewer\r\n-                enableAutoSave: true, // Enable auto-save feature\r\n-                showDocumentInfo: true, // Show document information\r\n                 // Other viewer options...\r\n             },\r\n         }, viewerConfig);\r\n \r\n@@ -694,9 +667,9 @@\n \r\n     // Method to register a save API handler with dynamic annotation message\r\n     registerSaveApiHandler() {\r\n         const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n+            return new Promise((resolve) => {\r\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n                     savedData[metaData.id] = content;\r\n@@ -716,12 +689,23 @@\n                     resolve(response);\r\n                 }, 2000);\r\n             });\r\n         };\r\n+\r\n+        // Updated to set dynamicAnnotationMessage before saving data\r\n+        const updatedSaveApiHandler = (metaData, content, options) => {\r\n+            // Set dynamicAnnotationMessage only if content contains a comment\r\n+            if (content && content.comments && content.comments.length > 0) {\r\n+                this.dynamicAnnotationMessage = content.comments[0].message;\r\n+            }\r\n+\r\n+            return saveApiHandler(metaData, content, options);\r\n+        };\r\n+\r\n         // Register save API handler with AdobeDC View object\r\n         this.adobeDCView.registerCallback(\r\n             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n+            updatedSaveApiHandler, // Use the updated save API handler\r\n             {}\r\n         );\r\n     }\r\n \r\n@@ -747,12 +731,7 @@\n                 enablePDFAnalytics: true,\r\n             }\r\n         );\r\n     }\r\n-\r\n-    // Event handler for input change\r\n-    onChange(event) {\r\n-        this.dynamicAnnotationMessage = event.target.value;\r\n-    }\r\n }\r\n \r\n export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713270410711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,738 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: false, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler();\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Initialize properties\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+        this.dynamicAnnotationMessage = \"\";\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                // Other viewer options...\r\n+            },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(content.comments)\r\n+            return new Promise((resolve) => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+\r\n+        // Updated to set dynamicAnnotationMessage before saving data\r\n+        const updatedSaveApiHandler = (metaData, content, options) => {\r\n+            // Set dynamicAnnotationMessage only if content contains a comment\r\n+            if (content && content.comments && content.comments.length > 0) {\r\n+                this.dynamicAnnotationMessage = content.comments[0].message;\r\n+            }\r\n+\r\n+            return saveApiHandler(metaData, content, options);\r\n+        };\r\n+\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            updatedSaveApiHandler, // Use the updated save API handler\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713270439765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,738 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: false, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler();\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Initialize properties\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined;\r\n+        this.dynamicAnnotationMessage = \"\";\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                // Other viewer options...\r\n+            },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(content.comments,\"pppp\")\r\n+            return new Promise((resolve) => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+\r\n+        // Updated to set dynamicAnnotationMessage before saving data\r\n+        const updatedSaveApiHandler = (metaData, content, options) => {\r\n+            // Set dynamicAnnotationMessage only if content contains a comment\r\n+            if (content && content.comments && content.comments.length > 0) {\r\n+                this.dynamicAnnotationMessage = content.comments[0].message;\r\n+            }\r\n+\r\n+            return saveApiHandler(metaData, content, options);\r\n+        };\r\n+console.log(\"fdddddddddddddd\", window.AdobeDC.View.Enum.CallbackType.SAVE_API)\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            updatedSaveApiHandler, // Use the updated save API handler\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713270787128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,749 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: false, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler();\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                showPageControls: true, // Show page navigation controls\r\n+                showToolbar: true, // Show the viewer's toolbar\r\n+                showReflowControl: true, // Show reflow control for text reflow\r\n+                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+                enableFormNavigation: true, // Enable form navigation controls\r\n+                enableAddTextComment: true, // Enable adding text comments\r\n+                enableAddStickyNote: true, // Enable adding sticky notes\r\n+                showDownloadButton: true, // Show the download button\r\n+                showPrintButton: true, // Show the print button\r\n+                showZoomButtons: true, // Show zoom in/out buttons\r\n+                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+                showLeftHandPanel: true, // Show the left-hand panel\r\n+                showRightHandPanel: true, // Show the right-hand panel\r\n+                showSearchBar: true, // Show the search bar\r\n+                enableFormFilling: true, // Enable form filling in the viewer\r\n+                enableAutoSave: true, // Enable auto-save feature\r\n+                showDocumentInfo: true, // Show document information\r\n+                // Add more options as needed based on your requirements\r\n+            },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+                    \r\n+                    // Get the value of ModernEditableTextComponent__textEditorPHItalic___hBycl class\r\n+                    const textEditorValue = document.querySelector('.ModernEditableTextComponent__textEditorPHItalic___hBycl').textContent;\r\n+                    \r\n+                    // Set the dynamic annotation message to the value of the class\r\n+                    this.dynamicAnnotationMessage = textEditorValue;\r\n+                    \r\n+                    // Set the dynamic annotation message in the response\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713270914052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -682,23 +682,33 @@\n         return previewFilePromise;\r\n     }\r\n \r\n     // Method to register a save API handler with dynamic annotation message\r\n+    // Method to register a save API handler with dynamic annotation message\r\n     registerSaveApiHandler() {\r\n         const saveApiHandler = (metaData, content, options) => {\r\n             return new Promise(resolve => {\r\n                 setTimeout(() => {\r\n                     const documentId = metaData.id;\r\n                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n                     savedData[metaData.id] = content;\r\n+\r\n                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-                    \r\n+\r\n                     // Get the value of ModernEditableTextComponent__textEditorPHItalic___hBycl class\r\n-                    const textEditorValue = document.querySelector('.ModernEditableTextComponent__textEditorPHItalic___hBycl').textContent;\r\n-                    \r\n-                    // Set the dynamic annotation message to the value of the class\r\n-                    this.dynamicAnnotationMessage = textEditorValue;\r\n-                    \r\n+                    const textEditorElements = document.getElementsByClassName('ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+\r\n+                    // Check if elements with the class exist and get the first one's text content\r\n+                    if (textEditorElements.length > 0) {\r\n+                        const textEditorValue = textEditorElements[0].textContent;\r\n+                        // Set the dynamic annotation message to the value of the class\r\n+                        this.dynamicAnnotationMessage = textEditorValue;\r\n+                    } else {\r\n+                        console.error('Element not found:', '.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                        // Optionally set a default value for this.dynamicAnnotationMessage\r\n+                        this.dynamicAnnotationMessage = 'Default annotation message';\r\n+                    }\r\n+\r\n                     // Set the dynamic annotation message in the response\r\n                     const response = {\r\n                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n                         data: {\r\n@@ -707,10 +717,10 @@\n                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n                             })\r\n                         },\r\n                     };\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n                     resolve(response);\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n                 }, 2000);\r\n             });\r\n         };\r\n         // Register save API handler with AdobeDC View object\r\n@@ -720,8 +730,9 @@\n             {}\r\n         );\r\n     }\r\n \r\n+\r\n     // Method to set dynamic annotation message\r\n     setDynamicAnnotationMessage(message) {\r\n         this.dynamicAnnotationMessage = message;\r\n     }\r\n"
                },
                {
                    "date": 1713271265219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -694,9 +694,9 @@\n \r\n                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n                     // Get the value of ModernEditableTextComponent__textEditorPHItalic___hBycl class\r\n-                    const textEditorElements = document.getElementsByClassName('ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                    const textEditorElements = document.getElementsByClassName('ModernEditableTextComponent__PostToolText___AYHrj');\r\n \r\n                     // Check if elements with the class exist and get the first one's text content\r\n                     if (textEditorElements.length > 0) {\r\n                         const textEditorValue = textEditorElements[0].textContent;\r\n@@ -757,2975 +757,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//     options: {\r\n-//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-//         showPageControls: true, // Show page navigation controls\r\n-//         showToolbar: true, // Show the viewer's toolbar\r\n-//         showReflowControl: true, // Show reflow control for text reflow\r\n-//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-//         enableFormNavigation: true, // Enable form navigation controls\r\n-//         enableAddTextComment: true, // Enable adding text comments\r\n-//         enableAddStickyNote: true, // Enable adding sticky notes\r\n-//         showDownloadButton: true, // Show the download button\r\n-//         showPrintButton: true, // Show the print button\r\n-//         showZoomButtons: true, // Show zoom in/out buttons\r\n-//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-//         showLeftHandPanel: true, // Show the left-hand panel\r\n-//         showRightHandPanel: true, // Show the right-hand panel\r\n-//         showSearchBar: true, // Show the search bar\r\n-//         enableFormFilling: true, // Enable form filling in the viewer\r\n-//         enableAutoSave: true, // Enable auto-save feature\r\n-//         showDocumentInfo: true, // Show document information\r\n-//         enablePDFAnalytics: true, // Enable PDF analytics\r\n-//         showAnnotationTools: false, // Show annotation tools\r\n-//         showSignaturePanel: true, // Show the signature panel\r\n-//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n-//         showRotateButton: true, // Show the rotate button\r\n-//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n-//         showFullScreenButton: true, // Show the full-screen button\r\n-//         enableAccessibility: true, // Enable accessibility features\r\n-//         showShareButton: true, // Show the share button\r\n-//         showOptimizedViewButton: true, // Show the optimized view button\r\n-//         showFormResetButton: true, // Show the form reset button\r\n-//         showFormSaveButton: true, // Show the form save button\r\n-//         enableMultiPageControl: true, // Enable multi-page control\r\n-//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-//         showOpenFileButton: true, // Show the open file button\r\n-//         showAddAttachmentButton: true, // Show the add attachment button\r\n-//         enableHighlightText: true, // Enable text highlighting\r\n-//         enableStrikeoutText: true, // Enable text strikeout\r\n-//         enableUnderlineText: true, // Enable text underlining\r\n-//         enableAreaHighlight: true, // Enable area highlighting\r\n-//         enableLinkAnnotation: true, // Enable link annotations\r\n-//         enableTextSelection: true, // Enable text selection\r\n-//         enablePanZoom: true, // Enable pan and zoom\r\n-//         enableTextAnnotation: true, // Enable text annotation\r\n-//         enableRedactText: true, // Enable text redaction\r\n-//         enableMeasureTools: true, // Enable measure tools\r\n-//         enableCommentingTools: true, // Enable commenting tools\r\n-//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-//         enableHandTool: true, // Enable hand tool for panning\r\n-//         enableZoomTools: true, // Enable zoom tools\r\n-//         enableRotatePages: true, // Enable page rotation\r\n-//         enableScrollZoom: true, // Enable scroll zoom\r\n-//         showAnnotationFilters: true, // Show annotation filters\r\n-//         enablePageViewTracking: true, // Enable page view tracking\r\n-//         enablePerformanceTracking: true, // Enable performance tracking\r\n-//         showTutorialButton: true, // Show the tutorial button\r\n-//         enableFormsTracking: true, // Enable forms tracking\r\n-//         enableTextExtraction: true, // Enable text extraction\r\n-//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-//         enablePDFConversion: true, // Enable PDF conversion\r\n-//         enablePDFSigning: true, // Enable PDF signing\r\n-//         enablePDFEditing: true, // Enable PDF editing\r\n-//         enablePDFCreation: true, // Enable PDF creation\r\n-//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-//         enablePDFRedaction: true, // Enable PDF redaction\r\n-//         enablePDFTextEditing: true, // Enable PDF text editing\r\n-//         enablePDFImageEditing: true, // Enable PDF image editing\r\n-//         enablePDFPageManagement: true, // Enable PDF page management\r\n-//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n-//         enablePDFStamping: true, // Enable PDF stamping\r\n-//         enablePDFSearch: true, // Enable PDF search\r\n-//         enablePDFCompression: true, // Enable PDF compression\r\n-//         enablePDFOptimization: true, // Enable PDF optimization\r\n-//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n-//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-//         enablePDFMerge: true, // Enable PDF merge\r\n-//         enablePDFSplit: true, // Enable PDF split\r\n-//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n-//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n-//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n-//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n-//         enablePDFTextSearch: true, // Enable PDF text search\r\n-//         enablePDFImageSearch: true, // Enable PDF image search\r\n-//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n-//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-//         enablePDFExport: true, // Enable PDF export\r\n-//         enablePDFImport: true, // Enable PDF import\r\n-//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-//         enablePDFEncryption: true, // Enable PDF encryption\r\n-//         enablePDFDecryption: true, // Enable PDF decryption\r\n-//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-//         enablePDFPageLayout: true, // Enable PDF page layout\r\n-//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-//         // Add more options as needed based on your requirements\r\n-//     },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler();\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to set dynamic annotation message\r\n-//     setDynamicAnnotationMessage(message) {\r\n-//         this.dynamicAnnotationMessage = message;\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Initialize properties\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-        this.dynamicAnnotationMessage = \"\";\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-            options: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                // Other viewer options...\r\n-            },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(content.comments,\"pppp\")\r\n-            return new Promise((resolve) => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-\r\n-        // Updated to set dynamicAnnotationMessage before saving data\r\n-        const updatedSaveApiHandler = (metaData, content, options) => {\r\n-            // Set dynamicAnnotationMessage only if content contains a comment\r\n-            if (content && content.comments && content.comments.length > 0) {\r\n-                this.dynamicAnnotationMessage = content.comments[0].message;\r\n-            }\r\n-\r\n-            return saveApiHandler(metaData, content, options);\r\n-        };\r\n-console.log(\"fdddddddddddddd\", window.AdobeDC.View.Enum.CallbackType.SAVE_API)\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            updatedSaveApiHandler, // Use the updated save API handler\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//     options: {\r\n-//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-//         showPageControls: true, // Show page navigation controls\r\n-//         showToolbar: true, // Show the viewer's toolbar\r\n-//         showReflowControl: true, // Show reflow control for text reflow\r\n-//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-//         enableFormNavigation: true, // Enable form navigation controls\r\n-//         enableAddTextComment: true, // Enable adding text comments\r\n-//         enableAddStickyNote: true, // Enable adding sticky notes\r\n-//         showDownloadButton: true, // Show the download button\r\n-//         showPrintButton: true, // Show the print button\r\n-//         showZoomButtons: true, // Show zoom in/out buttons\r\n-//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-//         showLeftHandPanel: true, // Show the left-hand panel\r\n-//         showRightHandPanel: true, // Show the right-hand panel\r\n-//         showSearchBar: true, // Show the search bar\r\n-//         enableFormFilling: true, // Enable form filling in the viewer\r\n-//         enableAutoSave: true, // Enable auto-save feature\r\n-//         showDocumentInfo: true, // Show document information\r\n-//         enablePDFAnalytics: true, // Enable PDF analytics\r\n-//         showAnnotationTools: false, // Show annotation tools\r\n-//         showSignaturePanel: true, // Show the signature panel\r\n-//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n-//         showRotateButton: true, // Show the rotate button\r\n-//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n-//         showFullScreenButton: true, // Show the full-screen button\r\n-//         enableAccessibility: true, // Enable accessibility features\r\n-//         showShareButton: true, // Show the share button\r\n-//         showOptimizedViewButton: true, // Show the optimized view button\r\n-//         showFormResetButton: true, // Show the form reset button\r\n-//         showFormSaveButton: true, // Show the form save button\r\n-//         enableMultiPageControl: true, // Enable multi-page control\r\n-//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-//         showOpenFileButton: true, // Show the open file button\r\n-//         showAddAttachmentButton: true, // Show the add attachment button\r\n-//         enableHighlightText: true, // Enable text highlighting\r\n-//         enableStrikeoutText: true, // Enable text strikeout\r\n-//         enableUnderlineText: true, // Enable text underlining\r\n-//         enableAreaHighlight: true, // Enable area highlighting\r\n-//         enableLinkAnnotation: true, // Enable link annotations\r\n-//         enableTextSelection: true, // Enable text selection\r\n-//         enablePanZoom: true, // Enable pan and zoom\r\n-//         enableTextAnnotation: true, // Enable text annotation\r\n-//         enableRedactText: true, // Enable text redaction\r\n-//         enableMeasureTools: true, // Enable measure tools\r\n-//         enableCommentingTools: true, // Enable commenting tools\r\n-//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-//         enableHandTool: true, // Enable hand tool for panning\r\n-//         enableZoomTools: true, // Enable zoom tools\r\n-//         enableRotatePages: true, // Enable page rotation\r\n-//         enableScrollZoom: true, // Enable scroll zoom\r\n-//         showAnnotationFilters: true, // Show annotation filters\r\n-//         enablePageViewTracking: true, // Enable page view tracking\r\n-//         enablePerformanceTracking: true, // Enable performance tracking\r\n-//         showTutorialButton: true, // Show the tutorial button\r\n-//         enableFormsTracking: true, // Enable forms tracking\r\n-//         enableTextExtraction: true, // Enable text extraction\r\n-//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-//         enablePDFConversion: true, // Enable PDF conversion\r\n-//         enablePDFSigning: true, // Enable PDF signing\r\n-//         enablePDFEditing: true, // Enable PDF editing\r\n-//         enablePDFCreation: true, // Enable PDF creation\r\n-//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-//         enablePDFRedaction: true, // Enable PDF redaction\r\n-//         enablePDFTextEditing: true, // Enable PDF text editing\r\n-//         enablePDFImageEditing: true, // Enable PDF image editing\r\n-//         enablePDFPageManagement: true, // Enable PDF page management\r\n-//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n-//         enablePDFStamping: true, // Enable PDF stamping\r\n-//         enablePDFSearch: true, // Enable PDF search\r\n-//         enablePDFCompression: true, // Enable PDF compression\r\n-//         enablePDFOptimization: true, // Enable PDF optimization\r\n-//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n-//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-//         enablePDFMerge: true, // Enable PDF merge\r\n-//         enablePDFSplit: true, // Enable PDF split\r\n-//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n-//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n-//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n-//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n-//         enablePDFTextSearch: true, // Enable PDF text search\r\n-//         enablePDFImageSearch: true, // Enable PDF image search\r\n-//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n-//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-//         enablePDFExport: true, // Enable PDF export\r\n-//         enablePDFImport: true, // Enable PDF import\r\n-//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-//         enablePDFEncryption: true, // Enable PDF encryption\r\n-//         enablePDFDecryption: true, // Enable PDF decryption\r\n-//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-//         enablePDFPageLayout: true, // Enable PDF page layout\r\n-//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-//         // Add more options as needed based on your requirements\r\n-//     },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler();\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to set dynamic annotation message\r\n-//     setDynamicAnnotationMessage(message) {\r\n-//         this.dynamicAnnotationMessage = message;\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Initialize properties\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-        this.dynamicAnnotationMessage = \"\";\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-            options: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                // Other viewer options...\r\n-            },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            console.log(content.comments)\r\n-            return new Promise((resolve) => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-\r\n-        // Updated to set dynamicAnnotationMessage before saving data\r\n-        const updatedSaveApiHandler = (metaData, content, options) => {\r\n-            // Set dynamicAnnotationMessage only if content contains a comment\r\n-            if (content && content.comments && content.comments.length > 0) {\r\n-                this.dynamicAnnotationMessage = content.comments[0].message;\r\n-            }\r\n-\r\n-            return saveApiHandler(metaData, content, options);\r\n-        };\r\n-\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            updatedSaveApiHandler, // Use the updated save API handler\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//     options: {\r\n-//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-//         showPageControls: true, // Show page navigation controls\r\n-//         showToolbar: true, // Show the viewer's toolbar\r\n-//         showReflowControl: true, // Show reflow control for text reflow\r\n-//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-//         enableFormNavigation: true, // Enable form navigation controls\r\n-//         enableAddTextComment: true, // Enable adding text comments\r\n-//         enableAddStickyNote: true, // Enable adding sticky notes\r\n-//         showDownloadButton: true, // Show the download button\r\n-//         showPrintButton: true, // Show the print button\r\n-//         showZoomButtons: true, // Show zoom in/out buttons\r\n-//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-//         showLeftHandPanel: true, // Show the left-hand panel\r\n-//         showRightHandPanel: true, // Show the right-hand panel\r\n-//         showSearchBar: true, // Show the search bar\r\n-//         enableFormFilling: true, // Enable form filling in the viewer\r\n-//         enableAutoSave: true, // Enable auto-save feature\r\n-//         showDocumentInfo: true, // Show document information\r\n-//         enablePDFAnalytics: true, // Enable PDF analytics\r\n-//         showAnnotationTools: false, // Show annotation tools\r\n-//         showSignaturePanel: true, // Show the signature panel\r\n-//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n-//         showRotateButton: true, // Show the rotate button\r\n-//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n-//         showFullScreenButton: true, // Show the full-screen button\r\n-//         enableAccessibility: true, // Enable accessibility features\r\n-//         showShareButton: true, // Show the share button\r\n-//         showOptimizedViewButton: true, // Show the optimized view button\r\n-//         showFormResetButton: true, // Show the form reset button\r\n-//         showFormSaveButton: true, // Show the form save button\r\n-//         enableMultiPageControl: true, // Enable multi-page control\r\n-//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-//         showOpenFileButton: true, // Show the open file button\r\n-//         showAddAttachmentButton: true, // Show the add attachment button\r\n-//         enableHighlightText: true, // Enable text highlighting\r\n-//         enableStrikeoutText: true, // Enable text strikeout\r\n-//         enableUnderlineText: true, // Enable text underlining\r\n-//         enableAreaHighlight: true, // Enable area highlighting\r\n-//         enableLinkAnnotation: true, // Enable link annotations\r\n-//         enableTextSelection: true, // Enable text selection\r\n-//         enablePanZoom: true, // Enable pan and zoom\r\n-//         enableTextAnnotation: true, // Enable text annotation\r\n-//         enableRedactText: true, // Enable text redaction\r\n-//         enableMeasureTools: true, // Enable measure tools\r\n-//         enableCommentingTools: true, // Enable commenting tools\r\n-//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-//         enableHandTool: true, // Enable hand tool for panning\r\n-//         enableZoomTools: true, // Enable zoom tools\r\n-//         enableRotatePages: true, // Enable page rotation\r\n-//         enableScrollZoom: true, // Enable scroll zoom\r\n-//         showAnnotationFilters: true, // Show annotation filters\r\n-//         enablePageViewTracking: true, // Enable page view tracking\r\n-//         enablePerformanceTracking: true, // Enable performance tracking\r\n-//         showTutorialButton: true, // Show the tutorial button\r\n-//         enableFormsTracking: true, // Enable forms tracking\r\n-//         enableTextExtraction: true, // Enable text extraction\r\n-//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-//         enablePDFConversion: true, // Enable PDF conversion\r\n-//         enablePDFSigning: true, // Enable PDF signing\r\n-//         enablePDFEditing: true, // Enable PDF editing\r\n-//         enablePDFCreation: true, // Enable PDF creation\r\n-//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-//         enablePDFRedaction: true, // Enable PDF redaction\r\n-//         enablePDFTextEditing: true, // Enable PDF text editing\r\n-//         enablePDFImageEditing: true, // Enable PDF image editing\r\n-//         enablePDFPageManagement: true, // Enable PDF page management\r\n-//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n-//         enablePDFStamping: true, // Enable PDF stamping\r\n-//         enablePDFSearch: true, // Enable PDF search\r\n-//         enablePDFCompression: true, // Enable PDF compression\r\n-//         enablePDFOptimization: true, // Enable PDF optimization\r\n-//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n-//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-//         enablePDFMerge: true, // Enable PDF merge\r\n-//         enablePDFSplit: true, // Enable PDF split\r\n-//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n-//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n-//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n-//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n-//         enablePDFTextSearch: true, // Enable PDF text search\r\n-//         enablePDFImageSearch: true, // Enable PDF image search\r\n-//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n-//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-//         enablePDFExport: true, // Enable PDF export\r\n-//         enablePDFImport: true, // Enable PDF import\r\n-//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-//         enablePDFEncryption: true, // Enable PDF encryption\r\n-//         enablePDFDecryption: true, // Enable PDF decryption\r\n-//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-//         enablePDFPageLayout: true, // Enable PDF page layout\r\n-//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-//         // Add more options as needed based on your requirements\r\n-//     },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler();\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to set dynamic annotation message\r\n-//     setDynamicAnnotationMessage(message) {\r\n-//         this.dynamicAnnotationMessage = message;\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Initialize properties\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined;\r\n-        this.dynamicAnnotationMessage = \"\";\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-            options: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                // Other viewer options...\r\n-            },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise((resolve) => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-\r\n-        // Updated to set dynamicAnnotationMessage before saving data\r\n-        const updatedSaveApiHandler = (metaData, content, options) => {\r\n-            // Set dynamicAnnotationMessage only if content contains a comment\r\n-            if (content && content.comments && content.comments.length > 0) {\r\n-                this.dynamicAnnotationMessage = content.comments[0].message;\r\n-            }\r\n-\r\n-            return saveApiHandler(metaData, content, options);\r\n-        };\r\n-\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            updatedSaveApiHandler, // Use the updated save API handler\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//         this.dynamicAnnotationMessage = \"hello\"; // Initialize dynamic annotation message\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//     options: {\r\n-//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-//         showPageControls: true, // Show page navigation controls\r\n-//         showToolbar: true, // Show the viewer's toolbar\r\n-//         showReflowControl: true, // Show reflow control for text reflow\r\n-//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-//         enableFormNavigation: true, // Enable form navigation controls\r\n-//         enableAddTextComment: true, // Enable adding text comments\r\n-//         enableAddStickyNote: true, // Enable adding sticky notes\r\n-//         showDownloadButton: true, // Show the download button\r\n-//         showPrintButton: true, // Show the print button\r\n-//         showZoomButtons: true, // Show zoom in/out buttons\r\n-//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-//         showLeftHandPanel: true, // Show the left-hand panel\r\n-//         showRightHandPanel: true, // Show the right-hand panel\r\n-//         showSearchBar: true, // Show the search bar\r\n-//         enableFormFilling: true, // Enable form filling in the viewer\r\n-//         enableAutoSave: true, // Enable auto-save feature\r\n-//         showDocumentInfo: true, // Show document information\r\n-//         enablePDFAnalytics: true, // Enable PDF analytics\r\n-//         showAnnotationTools: false, // Show annotation tools\r\n-//         showSignaturePanel: true, // Show the signature panel\r\n-//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n-//         showRotateButton: true, // Show the rotate button\r\n-//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n-//         showFullScreenButton: true, // Show the full-screen button\r\n-//         enableAccessibility: true, // Enable accessibility features\r\n-//         showShareButton: true, // Show the share button\r\n-//         showOptimizedViewButton: true, // Show the optimized view button\r\n-//         showFormResetButton: true, // Show the form reset button\r\n-//         showFormSaveButton: true, // Show the form save button\r\n-//         enableMultiPageControl: true, // Enable multi-page control\r\n-//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-//         showOpenFileButton: true, // Show the open file button\r\n-//         showAddAttachmentButton: true, // Show the add attachment button\r\n-//         enableHighlightText: true, // Enable text highlighting\r\n-//         enableStrikeoutText: true, // Enable text strikeout\r\n-//         enableUnderlineText: true, // Enable text underlining\r\n-//         enableAreaHighlight: true, // Enable area highlighting\r\n-//         enableLinkAnnotation: true, // Enable link annotations\r\n-//         enableTextSelection: true, // Enable text selection\r\n-//         enablePanZoom: true, // Enable pan and zoom\r\n-//         enableTextAnnotation: true, // Enable text annotation\r\n-//         enableRedactText: true, // Enable text redaction\r\n-//         enableMeasureTools: true, // Enable measure tools\r\n-//         enableCommentingTools: true, // Enable commenting tools\r\n-//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-//         enableHandTool: true, // Enable hand tool for panning\r\n-//         enableZoomTools: true, // Enable zoom tools\r\n-//         enableRotatePages: true, // Enable page rotation\r\n-//         enableScrollZoom: true, // Enable scroll zoom\r\n-//         showAnnotationFilters: true, // Show annotation filters\r\n-//         enablePageViewTracking: true, // Enable page view tracking\r\n-//         enablePerformanceTracking: true, // Enable performance tracking\r\n-//         showTutorialButton: true, // Show the tutorial button\r\n-//         enableFormsTracking: true, // Enable forms tracking\r\n-//         enableTextExtraction: true, // Enable text extraction\r\n-//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-//         enablePDFConversion: true, // Enable PDF conversion\r\n-//         enablePDFSigning: true, // Enable PDF signing\r\n-//         enablePDFEditing: true, // Enable PDF editing\r\n-//         enablePDFCreation: true, // Enable PDF creation\r\n-//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-//         enablePDFRedaction: true, // Enable PDF redaction\r\n-//         enablePDFTextEditing: true, // Enable PDF text editing\r\n-//         enablePDFImageEditing: true, // Enable PDF image editing\r\n-//         enablePDFPageManagement: true, // Enable PDF page management\r\n-//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n-//         enablePDFStamping: true, // Enable PDF stamping\r\n-//         enablePDFSearch: true, // Enable PDF search\r\n-//         enablePDFCompression: true, // Enable PDF compression\r\n-//         enablePDFOptimization: true, // Enable PDF optimization\r\n-//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n-//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-//         enablePDFMerge: true, // Enable PDF merge\r\n-//         enablePDFSplit: true, // Enable PDF split\r\n-//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n-//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n-//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n-//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n-//         enablePDFTextSearch: true, // Enable PDF text search\r\n-//         enablePDFImageSearch: true, // Enable PDF image search\r\n-//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n-//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-//         enablePDFExport: true, // Enable PDF export\r\n-//         enablePDFImport: true, // Enable PDF import\r\n-//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-//         enablePDFEncryption: true, // Enable PDF encryption\r\n-//         enablePDFDecryption: true, // Enable PDF decryption\r\n-//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-//         enablePDFPageLayout: true, // Enable PDF page layout\r\n-//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-//         // Add more options as needed based on your requirements\r\n-//     },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler();\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to set dynamic annotation message\r\n-//     setDynamicAnnotationMessage(message) {\r\n-//         this.dynamicAnnotationMessage = message;\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-\r\n-        this.onChange = this.onChange.bind(this); // Bind the onChange method to the class instance\r\n-        this.inputElement = document.getElementsByClassName('ModernEditableTextComponent__textEditorPHItalic___hBycl'); // Replace 'ModernEditableTextComponent__textEditorPHItalic___hBycl' with the actual ID of your input element\r\n-\r\n-        if (!this.inputElement) {\r\n-            throw new Error(`Element with ID 'ModernEditableTextComponent__textEditorPHItalic___hBycl' not found.`);\r\n-        }\r\n-\r\n-        // Add event listener for input change\r\n-        this.inputElement.addEventListener('change', this.onChange);\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-            options: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                showPageControls: true, // Show page navigation controls\r\n-                showToolbar: true, // Show the viewer's toolbar\r\n-                showReflowControl: true, // Show reflow control for text reflow\r\n-                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-                enableFormNavigation: true, // Enable form navigation controls\r\n-                enableAddTextComment: true, // Enable adding text comments\r\n-                enableAddStickyNote: true, // Enable adding sticky notes\r\n-                showDownloadButton: true, // Show the download button\r\n-                showPrintButton: true, // Show the print button\r\n-                showZoomButtons: true, // Show zoom in/out buttons\r\n-                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-                showLeftHandPanel: true, // Show the left-hand panel\r\n-                showRightHandPanel: true, // Show the right-hand panel\r\n-                showSearchBar: true, // Show the search bar\r\n-                enableFormFilling: true, // Enable form filling in the viewer\r\n-                enableAutoSave: true, // Enable auto-save feature\r\n-                showDocumentInfo: true, // Show document information\r\n-                // Other viewer options...\r\n-            },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-\r\n-    // Event handler for input change\r\n-    onChange(event) {\r\n-        this.dynamicAnnotationMessage = event.target.value;\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713271811166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,769 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: false, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler();\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                showPageControls: true, // Show page navigation controls\r\n+                showToolbar: true, // Show the viewer's toolbar\r\n+                showReflowControl: true, // Show reflow control for text reflow\r\n+                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+                enableFormNavigation: true, // Enable form navigation controls\r\n+                enableAddTextComment: true, // Enable adding text comments\r\n+                enableAddStickyNote: true, // Enable adding sticky notes\r\n+                showDownloadButton: true, // Show the download button\r\n+                showPrintButton: true, // Show the print button\r\n+                showZoomButtons: true, // Show zoom in/out buttons\r\n+                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+                showLeftHandPanel: true, // Show the left-hand panel\r\n+                showRightHandPanel: true, // Show the right-hand panel\r\n+                showSearchBar: true, // Show the search bar\r\n+                enableFormFilling: true, // Enable form filling in the viewer\r\n+                enableAutoSave: true, // Enable auto-save feature\r\n+                showDocumentInfo: true, // Show document information\r\n+                // Add more options as needed based on your requirements\r\n+            },\r\n+        }, viewerConfig);\r\n+        document.addEventListener('DOMContentLoaded', function() {\r\n+            // Find the element with class \"mycls\"\r\n+            const myElement = document.querySelector('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n+        \r\n+            // Add a click event listener to the element\r\n+            myElement.addEventListener('click', function(event) {\r\n+                console.log(event.target.value,event)\r\n+                // Your click event handling code goes here\r\n+            });\r\n+        });\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Get the value of ModernEditableTextComponent__textEditorPHItalic___hBycl class\r\n+                    const textEditorElements = document.getElementsByClassName('ModernEditableTextComponent__PostToolText___AYHrj');\r\n+\r\n+                    // Check if elements with the class exist and get the first one's text content\r\n+                    if (textEditorElements.length > 0) {\r\n+                        const textEditorValue = textEditorElements[0].textContent;\r\n+                        // Set the dynamic annotation message to the value of the class\r\n+                        this.dynamicAnnotationMessage = textEditorValue;\r\n+                    } else {\r\n+                        console.error('Element not found:', '.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                        // Optionally set a default value for this.dynamicAnnotationMessage\r\n+                        this.dynamicAnnotationMessage = 'Default annotation message';\r\n+                    }\r\n+\r\n+                    // Set the dynamic annotation message in the response\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713271923114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -676,9 +676,9 @@\n             },\r\n         }, viewerConfig);\r\n         document.addEventListener('DOMContentLoaded', function() {\r\n             // Find the element with class \"mycls\"\r\n-            const myElement = document.querySelector('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n+            const myElement = document.querySelector('.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n         \r\n             // Add a click event listener to the element\r\n             myElement.addEventListener('click', function(event) {\r\n                 console.log(event.target.value,event)\r\n@@ -766,764 +766,4 @@\n     }\r\n }\r\n \r\n export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//     options: {\r\n-//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-//         showPageControls: true, // Show page navigation controls\r\n-//         showToolbar: true, // Show the viewer's toolbar\r\n-//         showReflowControl: true, // Show reflow control for text reflow\r\n-//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-//         enableFormNavigation: true, // Enable form navigation controls\r\n-//         enableAddTextComment: true, // Enable adding text comments\r\n-//         enableAddStickyNote: true, // Enable adding sticky notes\r\n-//         showDownloadButton: true, // Show the download button\r\n-//         showPrintButton: true, // Show the print button\r\n-//         showZoomButtons: true, // Show zoom in/out buttons\r\n-//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-//         showLeftHandPanel: true, // Show the left-hand panel\r\n-//         showRightHandPanel: true, // Show the right-hand panel\r\n-//         showSearchBar: true, // Show the search bar\r\n-//         enableFormFilling: true, // Enable form filling in the viewer\r\n-//         enableAutoSave: true, // Enable auto-save feature\r\n-//         showDocumentInfo: true, // Show document information\r\n-//         enablePDFAnalytics: true, // Enable PDF analytics\r\n-//         showAnnotationTools: false, // Show annotation tools\r\n-//         showSignaturePanel: true, // Show the signature panel\r\n-//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n-//         showRotateButton: true, // Show the rotate button\r\n-//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n-//         showFullScreenButton: true, // Show the full-screen button\r\n-//         enableAccessibility: true, // Enable accessibility features\r\n-//         showShareButton: true, // Show the share button\r\n-//         showOptimizedViewButton: true, // Show the optimized view button\r\n-//         showFormResetButton: true, // Show the form reset button\r\n-//         showFormSaveButton: true, // Show the form save button\r\n-//         enableMultiPageControl: true, // Enable multi-page control\r\n-//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-//         showOpenFileButton: true, // Show the open file button\r\n-//         showAddAttachmentButton: true, // Show the add attachment button\r\n-//         enableHighlightText: true, // Enable text highlighting\r\n-//         enableStrikeoutText: true, // Enable text strikeout\r\n-//         enableUnderlineText: true, // Enable text underlining\r\n-//         enableAreaHighlight: true, // Enable area highlighting\r\n-//         enableLinkAnnotation: true, // Enable link annotations\r\n-//         enableTextSelection: true, // Enable text selection\r\n-//         enablePanZoom: true, // Enable pan and zoom\r\n-//         enableTextAnnotation: true, // Enable text annotation\r\n-//         enableRedactText: true, // Enable text redaction\r\n-//         enableMeasureTools: true, // Enable measure tools\r\n-//         enableCommentingTools: true, // Enable commenting tools\r\n-//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-//         enableHandTool: true, // Enable hand tool for panning\r\n-//         enableZoomTools: true, // Enable zoom tools\r\n-//         enableRotatePages: true, // Enable page rotation\r\n-//         enableScrollZoom: true, // Enable scroll zoom\r\n-//         showAnnotationFilters: true, // Show annotation filters\r\n-//         enablePageViewTracking: true, // Enable page view tracking\r\n-//         enablePerformanceTracking: true, // Enable performance tracking\r\n-//         showTutorialButton: true, // Show the tutorial button\r\n-//         enableFormsTracking: true, // Enable forms tracking\r\n-//         enableTextExtraction: true, // Enable text extraction\r\n-//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-//         enablePDFConversion: true, // Enable PDF conversion\r\n-//         enablePDFSigning: true, // Enable PDF signing\r\n-//         enablePDFEditing: true, // Enable PDF editing\r\n-//         enablePDFCreation: true, // Enable PDF creation\r\n-//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-//         enablePDFRedaction: true, // Enable PDF redaction\r\n-//         enablePDFTextEditing: true, // Enable PDF text editing\r\n-//         enablePDFImageEditing: true, // Enable PDF image editing\r\n-//         enablePDFPageManagement: true, // Enable PDF page management\r\n-//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n-//         enablePDFStamping: true, // Enable PDF stamping\r\n-//         enablePDFSearch: true, // Enable PDF search\r\n-//         enablePDFCompression: true, // Enable PDF compression\r\n-//         enablePDFOptimization: true, // Enable PDF optimization\r\n-//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n-//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-//         enablePDFMerge: true, // Enable PDF merge\r\n-//         enablePDFSplit: true, // Enable PDF split\r\n-//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n-//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n-//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n-//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n-//         enablePDFTextSearch: true, // Enable PDF text search\r\n-//         enablePDFImageSearch: true, // Enable PDF image search\r\n-//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n-//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-//         enablePDFExport: true, // Enable PDF export\r\n-//         enablePDFImport: true, // Enable PDF import\r\n-//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-//         enablePDFEncryption: true, // Enable PDF encryption\r\n-//         enablePDFDecryption: true, // Enable PDF decryption\r\n-//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-//         enablePDFPageLayout: true, // Enable PDF page layout\r\n-//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-//         // Add more options as needed based on your requirements\r\n-//     },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler();\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to set dynamic annotation message\r\n-//     setDynamicAnnotationMessage(message) {\r\n-//         this.dynamicAnnotationMessage = message;\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-            options: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                showPageControls: true, // Show page navigation controls\r\n-                showToolbar: true, // Show the viewer's toolbar\r\n-                showReflowControl: true, // Show reflow control for text reflow\r\n-                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-                enableFormNavigation: true, // Enable form navigation controls\r\n-                enableAddTextComment: true, // Enable adding text comments\r\n-                enableAddStickyNote: true, // Enable adding sticky notes\r\n-                showDownloadButton: true, // Show the download button\r\n-                showPrintButton: true, // Show the print button\r\n-                showZoomButtons: true, // Show zoom in/out buttons\r\n-                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-                showLeftHandPanel: true, // Show the left-hand panel\r\n-                showRightHandPanel: true, // Show the right-hand panel\r\n-                showSearchBar: true, // Show the search bar\r\n-                enableFormFilling: true, // Enable form filling in the viewer\r\n-                enableAutoSave: true, // Enable auto-save feature\r\n-                showDocumentInfo: true, // Show document information\r\n-                // Add more options as needed based on your requirements\r\n-            },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Get the value of ModernEditableTextComponent__textEditorPHItalic___hBycl class\r\n-                    const textEditorElements = document.getElementsByClassName('ModernEditableTextComponent__PostToolText___AYHrj');\r\n-\r\n-                    // Check if elements with the class exist and get the first one's text content\r\n-                    if (textEditorElements.length > 0) {\r\n-                        const textEditorValue = textEditorElements[0].textContent;\r\n-                        // Set the dynamic annotation message to the value of the class\r\n-                        this.dynamicAnnotationMessage = textEditorValue;\r\n-                    } else {\r\n-                        console.error('Element not found:', '.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n-                        // Optionally set a default value for this.dynamicAnnotationMessage\r\n-                        this.dynamicAnnotationMessage = 'Default annotation message';\r\n-                    }\r\n-\r\n-                    // Set the dynamic annotation message in the response\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713271992307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -610,12 +610,9 @@\n \r\n     // Method to preview a file\r\n     previewFile(divId, viewerConfig, url, data) {\r\n         // Log file information\r\n-        console.log(data.name, data);\r\n         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n         const config = {\r\n             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n         };\r\n \r\n@@ -674,15 +671,17 @@\n                 showDocumentInfo: true, // Show document information\r\n                 // Add more options as needed based on your requirements\r\n             },\r\n         }, viewerConfig);\r\n-        document.addEventListener('DOMContentLoaded', function() {\r\n+        document.addEventListener('DOMContentLoaded', function () {\r\n             // Find the element with class \"mycls\"\r\n-            const myElement = document.querySelector('.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n-        \r\n+            const myElement = document.querySelector('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n+\r\n             // Add a click event listener to the element\r\n-            myElement.addEventListener('click', function(event) {\r\n-                console.log(event.target.value,event)\r\n+            myElement.addEventListener('click', function (event) {\r\n+                console.log(event.target.value, event)\r\n+                const myVAlue = document.querySelector('.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                console.log(\"value \", myVAlue)\r\n                 // Your click event handling code goes here\r\n             });\r\n         });\r\n         // Register save API handler with dynamic annotation message\r\n"
                },
                {
                    "date": 1713272064994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,768 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: false, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler();\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                showPageControls: true, // Show page navigation controls\r\n+                showToolbar: true, // Show the viewer's toolbar\r\n+                showReflowControl: true, // Show reflow control for text reflow\r\n+                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+                enableFormNavigation: true, // Enable form navigation controls\r\n+                enableAddTextComment: true, // Enable adding text comments\r\n+                enableAddStickyNote: true, // Enable adding sticky notes\r\n+                showDownloadButton: true, // Show the download button\r\n+                showPrintButton: true, // Show the print button\r\n+                showZoomButtons: true, // Show zoom in/out buttons\r\n+                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+                showLeftHandPanel: true, // Show the left-hand panel\r\n+                showRightHandPanel: true, // Show the right-hand panel\r\n+                showSearchBar: true, // Show the search bar\r\n+                enableFormFilling: true, // Enable form filling in the viewer\r\n+                enableAutoSave: true, // Enable auto-save feature\r\n+                showDocumentInfo: true, // Show document information\r\n+                // Add more options as needed based on your requirements\r\n+            },\r\n+        }, viewerConfig);\r\n+        document.addEventListener('DOMContentLoaded', function () {\r\n+            // Find the element with class \"mycls\"\r\n+            const myElement = document.getElementsByClassName('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n+\r\n+            // Add a click event listener to the element\r\n+            myElement.addEventListener('click', function (event) {\r\n+                console.log(event.target.value, event)\r\n+                const myVAlue = document.getElementsByClassName('.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                console.log(\"value \", myVAlue)\r\n+                // Your click event handling code goes here\r\n+            });\r\n+        });\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Get the value of ModernEditableTextComponent__textEditorPHItalic___hBycl class\r\n+                    const textEditorElements = document.getElementsByClassName('ModernEditableTextComponent__PostToolText___AYHrj');\r\n+\r\n+                    // Check if elements with the class exist and get the first one's text content\r\n+                    if (textEditorElements.length > 0) {\r\n+                        const textEditorValue = textEditorElements[0].textContent;\r\n+                        // Set the dynamic annotation message to the value of the class\r\n+                        this.dynamicAnnotationMessage = textEditorValue;\r\n+                    } else {\r\n+                        console.error('Element not found:', '.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                        // Optionally set a default value for this.dynamicAnnotationMessage\r\n+                        this.dynamicAnnotationMessage = 'Default annotation message';\r\n+                    }\r\n+\r\n+                    // Set the dynamic annotation message in the response\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713272164754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -621,9 +621,20 @@\n         }\r\n \r\n         // Create AdobeDC View object\r\n         this.adobeDCView = new window.AdobeDC.View(config);\r\n+        document.addEventListener('DOMContentLoaded', function () {\r\n+            // Find the element with class \"mycls\"\r\n+            const myElement = document.getElementsByClassName('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n \r\n+            // Add a click event listener to the element\r\n+            myElement.addEventListener('click', function (event) {\r\n+                console.log(event.target.value, event)\r\n+                const myVAlue = document.getElementsByClassName('.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                console.log(\"value \", myVAlue)\r\n+                // Your click event handling code goes here\r\n+            });\r\n+        });\r\n         // Set viewer configuration\r\n         viewerConfig = {\r\n             ...viewerConfig,\r\n             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n@@ -671,20 +682,9 @@\n                 showDocumentInfo: true, // Show document information\r\n                 // Add more options as needed based on your requirements\r\n             },\r\n         }, viewerConfig);\r\n-        document.addEventListener('DOMContentLoaded', function () {\r\n-            // Find the element with class \"mycls\"\r\n-            const myElement = document.getElementsByClassName('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n-\r\n-            // Add a click event listener to the element\r\n-            myElement.addEventListener('click', function (event) {\r\n-                console.log(event.target.value, event)\r\n-                const myVAlue = document.getElementsByClassName('.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n-                console.log(\"value \", myVAlue)\r\n-                // Your click event handling code goes here\r\n-            });\r\n-        });\r\n+       \r\n         // Register save API handler with dynamic annotation message\r\n         this.registerSaveApiHandler();\r\n \r\n         return previewFilePromise;\r\n"
                },
                {
                    "date": 1713272353686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -600,29 +600,8 @@\n             }\r\n         });\r\n         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-    }\r\n-\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n         document.addEventListener('DOMContentLoaded', function () {\r\n             // Find the element with class \"mycls\"\r\n             const myElement = document.getElementsByClassName('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n \r\n@@ -633,745 +612,10 @@\n                 console.log(\"value \", myVAlue)\r\n                 // Your click event handling code goes here\r\n             });\r\n         });\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-            options: {\r\n-                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-                showPageControls: true, // Show page navigation controls\r\n-                showToolbar: true, // Show the viewer's toolbar\r\n-                showReflowControl: true, // Show reflow control for text reflow\r\n-                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-                enableFormNavigation: true, // Enable form navigation controls\r\n-                enableAddTextComment: true, // Enable adding text comments\r\n-                enableAddStickyNote: true, // Enable adding sticky notes\r\n-                showDownloadButton: true, // Show the download button\r\n-                showPrintButton: true, // Show the print button\r\n-                showZoomButtons: true, // Show zoom in/out buttons\r\n-                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-                showLeftHandPanel: true, // Show the left-hand panel\r\n-                showRightHandPanel: true, // Show the right-hand panel\r\n-                showSearchBar: true, // Show the search bar\r\n-                enableFormFilling: true, // Enable form filling in the viewer\r\n-                enableAutoSave: true, // Enable auto-save feature\r\n-                showDocumentInfo: true, // Show document information\r\n-                // Add more options as needed based on your requirements\r\n-            },\r\n-        }, viewerConfig);\r\n-       \r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n     }\r\n \r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Get the value of ModernEditableTextComponent__textEditorPHItalic___hBycl class\r\n-                    const textEditorElements = document.getElementsByClassName('ModernEditableTextComponent__PostToolText___AYHrj');\r\n-\r\n-                    // Check if elements with the class exist and get the first one's text content\r\n-                    if (textEditorElements.length > 0) {\r\n-                        const textEditorValue = textEditorElements[0].textContent;\r\n-                        // Set the dynamic annotation message to the value of the class\r\n-                        this.dynamicAnnotationMessage = textEditorValue;\r\n-                    } else {\r\n-                        console.error('Element not found:', '.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n-                        // Optionally set a default value for this.dynamicAnnotationMessage\r\n-                        this.dynamicAnnotationMessage = 'Default annotation message';\r\n-                    }\r\n-\r\n-                    // Set the dynamic annotation message in the response\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined;\r\n-//     }\r\n-\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration with all options enabled for all file types\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n-//             showAnnotationTools: true, // Show annotation tools\r\n-//             showDownloadPDF: true, // Show download PDF option\r\n-//             showPrintPDF: true, // Show print PDF option\r\n-//             enableFormFilling: true, // Enable form filling\r\n-//             showLeftHandPanel: true, // Show left-hand panel\r\n-//             showSearchPDF: true, // Show search PDF option\r\n-//             showDocumentInfo: true, // Show document information\r\n-//         };\r\n-\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             }\r\n-//         }, viewerConfig);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-//     }\r\n-\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, content, options);\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-// class ViewSDKClient {\r\n-//     constructor() {\r\n-//         // Promise that resolves when AdobeDC SDK is ready\r\n-//         this.readyPromise = new Promise((resolve) => {\r\n-//             if (window.AdobeDC) {\r\n-//                 resolve();\r\n-//             } else {\r\n-//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-//                     resolve();\r\n-//                 });\r\n-//             }\r\n-//         });\r\n-//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-//     }\r\n-\r\n-//     // Method to check if AdobeDC SDK is ready\r\n-//     ready() {\r\n-//         return this.readyPromise;\r\n-//     }\r\n-\r\n-//     // Method to preview a file\r\n-//     previewFile(divId, viewerConfig, url, data) {\r\n-//         // Log file information\r\n-//         console.log(data.name, data);\r\n-//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-//         console.log(\"File extension:\", fileExtension);\r\n-\r\n-//         const config = {\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//         };\r\n-\r\n-//         if (divId) {\r\n-//             config.divId = divId;\r\n-//         }\r\n-\r\n-//         // Create AdobeDC View object\r\n-//         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-//         // Set viewer configuration\r\n-//         viewerConfig = {\r\n-//             ...viewerConfig,\r\n-//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-//             showAnnotationTools: true,\r\n-//             showDownloadPDF: true,\r\n-//             showPrintPDF: true,\r\n-//             enableFormFilling: true,\r\n-//             showLeftHandPanel: true,\r\n-//             showSearchPDF: true,\r\n-//             showDocumentInfo: true,\r\n-//         };\r\n-\r\n-//         // Preview file using AdobeDC View object\r\n-//         const previewFilePromise = this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 location: {\r\n-//                     url: url,\r\n-//                     fileExtension: fileExtension,\r\n-//                     fileType: data.mimeType\r\n-//                 },\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name,\r\n-//                 id: data.id,\r\n-//             },\r\n-//     options: {\r\n-//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-//         showPageControls: true, // Show page navigation controls\r\n-//         showToolbar: true, // Show the viewer's toolbar\r\n-//         showReflowControl: true, // Show reflow control for text reflow\r\n-//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-//         enableFormNavigation: true, // Enable form navigation controls\r\n-//         enableAddTextComment: true, // Enable adding text comments\r\n-//         enableAddStickyNote: true, // Enable adding sticky notes\r\n-//         showDownloadButton: true, // Show the download button\r\n-//         showPrintButton: true, // Show the print button\r\n-//         showZoomButtons: true, // Show zoom in/out buttons\r\n-//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-//         showLeftHandPanel: true, // Show the left-hand panel\r\n-//         showRightHandPanel: true, // Show the right-hand panel\r\n-//         showSearchBar: true, // Show the search bar\r\n-//         enableFormFilling: true, // Enable form filling in the viewer\r\n-//         enableAutoSave: true, // Enable auto-save feature\r\n-//         showDocumentInfo: true, // Show document information\r\n-//         enablePDFAnalytics: true, // Enable PDF analytics\r\n-//         showAnnotationTools: false, // Show annotation tools\r\n-//         showSignaturePanel: true, // Show the signature panel\r\n-//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n-//         showRotateButton: true, // Show the rotate button\r\n-//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n-//         showFullScreenButton: true, // Show the full-screen button\r\n-//         enableAccessibility: true, // Enable accessibility features\r\n-//         showShareButton: true, // Show the share button\r\n-//         showOptimizedViewButton: true, // Show the optimized view button\r\n-//         showFormResetButton: true, // Show the form reset button\r\n-//         showFormSaveButton: true, // Show the form save button\r\n-//         enableMultiPageControl: true, // Enable multi-page control\r\n-//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-//         showOpenFileButton: true, // Show the open file button\r\n-//         showAddAttachmentButton: true, // Show the add attachment button\r\n-//         enableHighlightText: true, // Enable text highlighting\r\n-//         enableStrikeoutText: true, // Enable text strikeout\r\n-//         enableUnderlineText: true, // Enable text underlining\r\n-//         enableAreaHighlight: true, // Enable area highlighting\r\n-//         enableLinkAnnotation: true, // Enable link annotations\r\n-//         enableTextSelection: true, // Enable text selection\r\n-//         enablePanZoom: true, // Enable pan and zoom\r\n-//         enableTextAnnotation: true, // Enable text annotation\r\n-//         enableRedactText: true, // Enable text redaction\r\n-//         enableMeasureTools: true, // Enable measure tools\r\n-//         enableCommentingTools: true, // Enable commenting tools\r\n-//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-//         enableHandTool: true, // Enable hand tool for panning\r\n-//         enableZoomTools: true, // Enable zoom tools\r\n-//         enableRotatePages: true, // Enable page rotation\r\n-//         enableScrollZoom: true, // Enable scroll zoom\r\n-//         showAnnotationFilters: true, // Show annotation filters\r\n-//         enablePageViewTracking: true, // Enable page view tracking\r\n-//         enablePerformanceTracking: true, // Enable performance tracking\r\n-//         showTutorialButton: true, // Show the tutorial button\r\n-//         enableFormsTracking: true, // Enable forms tracking\r\n-//         enableTextExtraction: true, // Enable text extraction\r\n-//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-//         enablePDFConversion: true, // Enable PDF conversion\r\n-//         enablePDFSigning: true, // Enable PDF signing\r\n-//         enablePDFEditing: true, // Enable PDF editing\r\n-//         enablePDFCreation: true, // Enable PDF creation\r\n-//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-//         enablePDFRedaction: true, // Enable PDF redaction\r\n-//         enablePDFTextEditing: true, // Enable PDF text editing\r\n-//         enablePDFImageEditing: true, // Enable PDF image editing\r\n-//         enablePDFPageManagement: true, // Enable PDF page management\r\n-//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n-//         enablePDFStamping: true, // Enable PDF stamping\r\n-//         enablePDFSearch: true, // Enable PDF search\r\n-//         enablePDFCompression: true, // Enable PDF compression\r\n-//         enablePDFOptimization: true, // Enable PDF optimization\r\n-//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n-//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-//         enablePDFMerge: true, // Enable PDF merge\r\n-//         enablePDFSplit: true, // Enable PDF split\r\n-//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n-//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n-//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n-//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n-//         enablePDFTextSearch: true, // Enable PDF text search\r\n-//         enablePDFImageSearch: true, // Enable PDF image search\r\n-//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n-//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-//         enablePDFExport: true, // Enable PDF export\r\n-//         enablePDFImport: true, // Enable PDF import\r\n-//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-//         enablePDFEncryption: true, // Enable PDF encryption\r\n-//         enablePDFDecryption: true, // Enable PDF decryption\r\n-//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-//         enablePDFPageLayout: true, // Enable PDF page layout\r\n-//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-//         // Add more options as needed based on your requirements\r\n-//     },\r\n-//         }, viewerConfig);\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler();\r\n-\r\n-//         return previewFilePromise;\r\n-//     }\r\n-\r\n-//     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler() {\r\n-//         const saveApiHandler = (metaData, content, options) => {\r\n-//             return new Promise(resolve => {\r\n-//                 setTimeout(() => {\r\n-//                     const documentId = metaData.id;\r\n-//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-//                     savedData[metaData.id] = content;\r\n-//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-//                     // Set the dynamic annotation message\r\n-//                     const response = {\r\n-//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-//                         data: {\r\n-//                             metaData: Object.assign(metaData, {\r\n-//                                 updatedAt: new Date().getTime(),\r\n-//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-//                             })\r\n-//                         },\r\n-//                     };\r\n-//                     resolve(response);\r\n-//                 }, 2000);\r\n-//             });\r\n-//         };\r\n-//         // Register save API handler with AdobeDC View object\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-//             saveApiHandler,\r\n-//             {}\r\n-//         );\r\n-//     }\r\n-\r\n-//     // Method to set dynamic annotation message\r\n-//     setDynamicAnnotationMessage(message) {\r\n-//         this.dynamicAnnotationMessage = message;\r\n-//     }\r\n-\r\n-//     // Method to retrieve annotations from local storage\r\n-//     retrieveAnnotations(documentId) {\r\n-//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-//         return savedData[documentId] || {};\r\n-//     }\r\n-\r\n-//     // Method to register event handlers\r\n-//     registerEventsHandler() {\r\n-//         this.adobeDCView.registerCallback(\r\n-//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-//             event => {\r\n-//                 console.log(event);\r\n-//             },\r\n-//             {\r\n-//                 enablePDFAnalytics: true,\r\n-//             }\r\n-//         );\r\n-//     }\r\n-// }\r\n-\r\n-// export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-    }\r\n-\r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n         return this.readyPromise;\r\n     }\r\n@@ -1389,9 +633,9 @@\n         }\r\n \r\n         // Create AdobeDC View object\r\n         this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n+       \r\n         // Set viewer configuration\r\n         viewerConfig = {\r\n             ...viewerConfig,\r\n             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n@@ -1439,20 +683,9 @@\n                 showDocumentInfo: true, // Show document information\r\n                 // Add more options as needed based on your requirements\r\n             },\r\n         }, viewerConfig);\r\n-        document.addEventListener('DOMContentLoaded', function () {\r\n-            // Find the element with class \"mycls\"\r\n-            const myElement = document.querySelector('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n-\r\n-            // Add a click event listener to the element\r\n-            myElement.addEventListener('click', function (event) {\r\n-                console.log(event.target.value, event)\r\n-                const myVAlue = document.querySelector('.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n-                console.log(\"value \", myVAlue)\r\n-                // Your click event handling code goes here\r\n-            });\r\n-        });\r\n+       \r\n         // Register save API handler with dynamic annotation message\r\n         this.registerSaveApiHandler();\r\n \r\n         return previewFilePromise;\r\n"
                },
                {
                    "date": 1713272387300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -600,9 +600,9 @@\n             }\r\n         });\r\n         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-        document.addEventListener('DOMContentLoaded', function () {\r\n+        // document.addEventListener('DOMContentLoaded', function () {\r\n             // Find the element with class \"mycls\"\r\n             const myElement = document.getElementsByClassName('.ModernEditableTextComponent__PostToolText___AYHrj');\r\n \r\n             // Add a click event listener to the element\r\n@@ -611,9 +611,9 @@\n                 const myVAlue = document.getElementsByClassName('.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n                 console.log(\"value \", myVAlue)\r\n                 // Your click event handling code goes here\r\n             });\r\n-        });\r\n+        // });\r\n     }\r\n \r\n     // Method to check if AdobeDC SDK is ready\r\n     ready() {\r\n"
                },
                {
                    "date": 1713272816253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,769 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: false, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler();\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+        document.addEventListener('DOMContentLoaded', () => {\r\n+            // Find the element with class \"ModernEditableTextComponent__PostToolText___AYHrj\"\r\n+            const myElement = document.getElementsByClassName('ModernEditableTextComponent__PostToolText___AYHrj')[0];\r\n+\r\n+            // Add a click event listener to the element\r\n+            myElement.addEventListener('click', (event) => {\r\n+                console.log(event.target.value, event);\r\n+                const myValue = document.getElementsByClassName('ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                console.log(\"value \", myValue);\r\n+                // Your click event handling code goes here\r\n+            });\r\n+        });\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+       \r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+            options: {\r\n+                enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+                includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+                showPageControls: true, // Show page navigation controls\r\n+                showToolbar: true, // Show the viewer's toolbar\r\n+                showReflowControl: true, // Show reflow control for text reflow\r\n+                openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+                enableFormNavigation: true, // Enable form navigation controls\r\n+                enableAddTextComment: true, // Enable adding text comments\r\n+                enableAddStickyNote: true, // Enable adding sticky notes\r\n+                showDownloadButton: true, // Show the download button\r\n+                showPrintButton: true, // Show the print button\r\n+                showZoomButtons: true, // Show zoom in/out buttons\r\n+                defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+                showLeftHandPanel: true, // Show the left-hand panel\r\n+                showRightHandPanel: true, // Show the right-hand panel\r\n+                showSearchBar: true, // Show the search bar\r\n+                enableFormFilling: true, // Enable form filling in the viewer\r\n+                enableAutoSave: true, // Enable auto-save feature\r\n+                showDocumentInfo: true, // Show document information\r\n+                // Add more options as needed based on your requirements\r\n+            },\r\n+        }, viewerConfig);\r\n+       \r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Get the value of ModernEditableTextComponent__textEditorPHItalic___hBycl class\r\n+                    const textEditorElements = document.getElementsByClassName('ModernEditableTextComponent__PostToolText___AYHrj');\r\n+\r\n+                    // Check if elements with the class exist and get the first one's text content\r\n+                    if (textEditorElements.length > 0) {\r\n+                        const textEditorValue = textEditorElements[0].textContent;\r\n+                        // Set the dynamic annotation message to the value of the class\r\n+                        this.dynamicAnnotationMessage = textEditorValue;\r\n+                    } else {\r\n+                        console.error('Element not found:', '.ModernEditableTextComponent__textEditorPHItalic___hBycl');\r\n+                        // Optionally set a default value for this.dynamicAnnotationMessage\r\n+                        this.dynamicAnnotationMessage = 'Default annotation message';\r\n+                    }\r\n+\r\n+                    // Set the dynamic annotation message in the response\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713273122024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,603 @@\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined;\r\n+//     }\r\n+\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration with all options enabled for all file types\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE, // Display inline\r\n+//             showAnnotationTools: true, // Show annotation tools\r\n+//             showDownloadPDF: true, // Show download PDF option\r\n+//             showPrintPDF: true, // Show print PDF option\r\n+//             enableFormFilling: true, // Enable form filling\r\n+//             showLeftHandPanel: true, // Show left-hand panel\r\n+//             showSearchPDF: true, // Show search PDF option\r\n+//             showDocumentInfo: true, // Show document information\r\n+//         };\r\n+\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             }\r\n+//         }, viewerConfig);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     previewFileUsingFilePromise(divId, filePromise, data) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9b36f468d7a4e4e8b275f13728f1132\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+//     }\r\n+\r\n+//     registerSaveApiHandler() {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, content, options);\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, { updatedAt: new Date().getTime() })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+// class ViewSDKClient {\r\n+//     constructor() {\r\n+//         // Promise that resolves when AdobeDC SDK is ready\r\n+//         this.readyPromise = new Promise((resolve) => {\r\n+//             if (window.AdobeDC) {\r\n+//                 resolve();\r\n+//             } else {\r\n+//                 document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+//                     resolve();\r\n+//                 });\r\n+//             }\r\n+//         });\r\n+//         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//     }\r\n+\r\n+//     // Method to check if AdobeDC SDK is ready\r\n+//     ready() {\r\n+//         return this.readyPromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file\r\n+//     previewFile(divId, viewerConfig, url, data) {\r\n+//         // Log file information\r\n+//         console.log(data.name, data);\r\n+//         const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+//         console.log(\"File extension:\", fileExtension);\r\n+\r\n+//         const config = {\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//         };\r\n+\r\n+//         if (divId) {\r\n+//             config.divId = divId;\r\n+//         }\r\n+\r\n+//         // Create AdobeDC View object\r\n+//         this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+//         // Set viewer configuration\r\n+//         viewerConfig = {\r\n+//             ...viewerConfig,\r\n+//             embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+//             showAnnotationTools: true,\r\n+//             showDownloadPDF: true,\r\n+//             showPrintPDF: true,\r\n+//             enableFormFilling: true,\r\n+//             showLeftHandPanel: true,\r\n+//             showSearchPDF: true,\r\n+//             showDocumentInfo: true,\r\n+//         };\r\n+\r\n+//         // Preview file using AdobeDC View object\r\n+//         const previewFilePromise = this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 location: {\r\n+//                     url: url,\r\n+//                     fileExtension: fileExtension,\r\n+//                     fileType: data.mimeType\r\n+//                 },\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name,\r\n+//                 id: data.id,\r\n+//             },\r\n+//         }, viewerConfig);\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         const annotationMessage = \"This is a sample annotation message.\";\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+//         return previewFilePromise;\r\n+//     }\r\n+\r\n+//     // Method to preview a file using a file promise\r\n+//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+//         this.adobeDCView = new window.AdobeDC.View({\r\n+//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+//             divId,\r\n+//         });\r\n+\r\n+//         this.adobeDCView.previewFile({\r\n+//             content: {\r\n+//                 promise: filePromise,\r\n+//             },\r\n+//             metaData: {\r\n+//                 fileName: data.name\r\n+//             }\r\n+//         }, {});\r\n+\r\n+//         // Register save API handler with dynamic annotation message\r\n+//         this.registerSaveApiHandler(annotationMessage);\r\n+//     }\r\n+\r\n+//     // Method to register a save API handler with dynamic annotation message\r\n+//     registerSaveApiHandler(annotationMessage) {\r\n+//         const saveApiHandler = (metaData, content, options) => {\r\n+//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+//             return new Promise(resolve => {\r\n+//                 setTimeout(() => {\r\n+//                     const documentId = metaData.id;\r\n+//                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+//                     savedData[metaData.id] = content;\r\n+//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+//                     // Set the dynamic annotation message\r\n+//                     const response = {\r\n+//                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+//                         data: {\r\n+//                             metaData: Object.assign(metaData, {\r\n+//                                 updatedAt: new Date().getTime(),\r\n+//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                             })\r\n+//                         },\r\n+//                     };\r\n+//                     resolve(response);\r\n+//                 }, 2000);\r\n+//             });\r\n+//         };\r\n+//         // Register save API handler with AdobeDC View object\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+//             saveApiHandler,\r\n+//             {}\r\n+//         );\r\n+//     }\r\n+\r\n+//     // Method to retrieve annotations from local storage\r\n+//     retrieveAnnotations(documentId) {\r\n+//         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+//         return savedData[documentId] || {};\r\n+//     }\r\n+\r\n+//     // Method to register event handlers\r\n+//     registerEventsHandler() {\r\n+//         this.adobeDCView.registerCallback(\r\n+//             window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+//             event => {\r\n+//                 console.log(event);\r\n+//             },\r\n+//             {\r\n+//                 enablePDFAnalytics: true,\r\n+//             }\r\n+//         );\r\n+//     }\r\n+// }\r\n+\r\n+// export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+        this.handleClick = this.handleClick.bind(this);\r\n+    }\r\n+  // Method to attach onclick event to a specific element\r\n+  attachClickEventToElement(elementId) {\r\n+    const element = document.getElementsByClassName(\"ModernEditableTextComponent__PostToolText___AYHrj\");\r\n+    if (element) {\r\n+        element.addEventListener(\"click\", this.handleClick);\r\n+    } else {\r\n+        console.error(`Element with ID ${elementId} not found.`);\r\n+    }\r\n+}\r\n+  // Click event handler\r\n+  handleClick(event) {\r\n+    // Handle click event logic here\r\n+    console.log(\"Element clicked:\", event.target);\r\n+}\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+    options: {\r\n+        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+        showPageControls: true, // Show page navigation controls\r\n+        showToolbar: true, // Show the viewer's toolbar\r\n+        showReflowControl: true, // Show reflow control for text reflow\r\n+        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+        enableFormNavigation: true, // Enable form navigation controls\r\n+        enableAddTextComment: true, // Enable adding text comments\r\n+        enableAddStickyNote: true, // Enable adding sticky notes\r\n+        showDownloadButton: true, // Show the download button\r\n+        showPrintButton: true, // Show the print button\r\n+        showZoomButtons: true, // Show zoom in/out buttons\r\n+        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+        showLeftHandPanel: true, // Show the left-hand panel\r\n+        showRightHandPanel: true, // Show the right-hand panel\r\n+        showSearchBar: true, // Show the search bar\r\n+        enableFormFilling: true, // Enable form filling in the viewer\r\n+        enableAutoSave: true, // Enable auto-save feature\r\n+        showDocumentInfo: true, // Show document information\r\n+        enablePDFAnalytics: true, // Enable PDF analytics\r\n+        showAnnotationTools: true, // Show annotation tools\r\n+        showSignaturePanel: true, // Show the signature panel\r\n+        showThumbnailsPanel: true, // Show the thumbnails panel\r\n+        showRotateButton: true, // Show the rotate button\r\n+        showUndoRedoButtons: true, // Show undo/redo buttons\r\n+        showFullScreenButton: true, // Show the full-screen button\r\n+        enableAccessibility: true, // Enable accessibility features\r\n+        showShareButton: true, // Show the share button\r\n+        showOptimizedViewButton: true, // Show the optimized view button\r\n+        showFormResetButton: true, // Show the form reset button\r\n+        showFormSaveButton: true, // Show the form save button\r\n+        enableMultiPageControl: true, // Enable multi-page control\r\n+        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+        showOpenFileButton: true, // Show the open file button\r\n+        showAddAttachmentButton: true, // Show the add attachment button\r\n+        enableHighlightText: true, // Enable text highlighting\r\n+        enableStrikeoutText: true, // Enable text strikeout\r\n+        enableUnderlineText: true, // Enable text underlining\r\n+        enableAreaHighlight: true, // Enable area highlighting\r\n+        enableLinkAnnotation: true, // Enable link annotations\r\n+        enableTextSelection: true, // Enable text selection\r\n+        enablePanZoom: true, // Enable pan and zoom\r\n+        enableTextAnnotation: true, // Enable text annotation\r\n+        enableRedactText: true, // Enable text redaction\r\n+        enableMeasureTools: true, // Enable measure tools\r\n+        enableCommentingTools: true, // Enable commenting tools\r\n+        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+        enableHandTool: true, // Enable hand tool for panning\r\n+        enableZoomTools: true, // Enable zoom tools\r\n+        enableRotatePages: true, // Enable page rotation\r\n+        enableScrollZoom: true, // Enable scroll zoom\r\n+        showAnnotationFilters: true, // Show annotation filters\r\n+        enablePageViewTracking: true, // Enable page view tracking\r\n+        enablePerformanceTracking: true, // Enable performance tracking\r\n+        showTutorialButton: true, // Show the tutorial button\r\n+        enableFormsTracking: true, // Enable forms tracking\r\n+        enableTextExtraction: true, // Enable text extraction\r\n+        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+        enablePDFConversion: true, // Enable PDF conversion\r\n+        enablePDFSigning: true, // Enable PDF signing\r\n+        enablePDFEditing: true, // Enable PDF editing\r\n+        enablePDFCreation: true, // Enable PDF creation\r\n+        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+        enablePDFRedaction: true, // Enable PDF redaction\r\n+        enablePDFTextEditing: true, // Enable PDF text editing\r\n+        enablePDFImageEditing: true, // Enable PDF image editing\r\n+        enablePDFPageManagement: true, // Enable PDF page management\r\n+        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+        enablePDFWatermarking: true, // Enable PDF watermarking\r\n+        enablePDFStamping: true, // Enable PDF stamping\r\n+        enablePDFSearch: true, // Enable PDF search\r\n+        enablePDFCompression: true, // Enable PDF compression\r\n+        enablePDFOptimization: true, // Enable PDF optimization\r\n+        enablePDFAccessibility: true, // Enable PDF accessibility\r\n+        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+        enablePDFMerge: true, // Enable PDF merge\r\n+        enablePDFSplit: true, // Enable PDF split\r\n+        enablePDFPageRotation: true, // Enable PDF page rotation\r\n+        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+        enablePDFPageReordering: true, // Enable PDF page reordering\r\n+        enablePDFPageScaling: true, // Enable PDF page scaling\r\n+        enablePDFPageCropping: true, // Enable PDF page cropping\r\n+        enablePDFTextSearch: true, // Enable PDF text search\r\n+        enablePDFImageSearch: true, // Enable PDF image search\r\n+        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+        enablePDFCommentSearch: true, // Enable PDF comment search\r\n+        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+        enablePDFExport: true, // Enable PDF export\r\n+        enablePDFImport: true, // Enable PDF import\r\n+        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+        enablePDFEncryption: true, // Enable PDF encryption\r\n+        enablePDFDecryption: true, // Enable PDF decryption\r\n+        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+        enablePDFPageLayout: true, // Enable PDF page layout\r\n+        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+        // Add more options as needed based on your requirements\r\n+    },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler();\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler() {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to set dynamic annotation message\r\n+    setDynamicAnnotationMessage(message) {\r\n+        this.dynamicAnnotationMessage = message;\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n"
                },
                {
                    "date": 1713273588436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,156 @@\n //     }\r\n // }\r\n \r\n // export default ViewSDKClient;\r\n+class ViewSDKClient {\r\n+    constructor() {\r\n+        // Promise that resolves when AdobeDC SDK is ready\r\n+        this.readyPromise = new Promise((resolve) => {\r\n+            if (window.AdobeDC) {\r\n+                resolve();\r\n+            } else {\r\n+                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n+                    resolve();\r\n+                });\r\n+            }\r\n+        });\r\n+        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+    }\r\n+\r\n+    // Method to check if AdobeDC SDK is ready\r\n+    ready() {\r\n+        return this.readyPromise;\r\n+    }\r\n+\r\n+    // Method to preview a file\r\n+    previewFile(divId, viewerConfig, url, data) {\r\n+        // Log file information\r\n+        console.log(data.name, data);\r\n+        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n+        console.log(\"File extension:\", fileExtension);\r\n+\r\n+        const config = {\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+        };\r\n+\r\n+        if (divId) {\r\n+            config.divId = divId;\r\n+        }\r\n+\r\n+        // Create AdobeDC View object\r\n+        this.adobeDCView = new window.AdobeDC.View(config);\r\n+\r\n+        // Set viewer configuration\r\n+        viewerConfig = {\r\n+            ...viewerConfig,\r\n+            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n+            showAnnotationTools: true,\r\n+            showDownloadPDF: true,\r\n+            showPrintPDF: true,\r\n+            enableFormFilling: true,\r\n+            showLeftHandPanel: true,\r\n+            showSearchPDF: true,\r\n+            showDocumentInfo: true,\r\n+        };\r\n+\r\n+        // Preview file using AdobeDC View object\r\n+        const previewFilePromise = this.adobeDCView.previewFile({\r\n+            content: {\r\n+                location: {\r\n+                    url: url,\r\n+                    fileExtension: fileExtension,\r\n+                    fileType: data.mimeType\r\n+                },\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name,\r\n+                id: data.id,\r\n+            },\r\n+        }, viewerConfig);\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        const annotationMessage = \"This is a sample annotation message.\";\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+\r\n+        return previewFilePromise;\r\n+    }\r\n+\r\n+    // Method to preview a file using a file promise\r\n+    previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n+        this.adobeDCView = new window.AdobeDC.View({\r\n+            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n+            divId,\r\n+        });\r\n+\r\n+        this.adobeDCView.previewFile({\r\n+            content: {\r\n+                promise: filePromise,\r\n+            },\r\n+            metaData: {\r\n+                fileName: data.name\r\n+            }\r\n+        }, {});\r\n+\r\n+        // Register save API handler with dynamic annotation message\r\n+        this.registerSaveApiHandler(annotationMessage);\r\n+    }\r\n+\r\n+    // Method to register a save API handler with dynamic annotation message\r\n+    registerSaveApiHandler(annotationMessage) {\r\n+        const saveApiHandler = (metaData, content, options) => {\r\n+            console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n+            return new Promise(resolve => {\r\n+                setTimeout(() => {\r\n+                    const documentId = metaData.id;\r\n+                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n+                    savedData[metaData.id] = content;\r\n+                    console.log(annotationMessage, \"data\", savedData);\r\n+                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n+\r\n+                    // Set the dynamic annotation message\r\n+                    const response = {\r\n+                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n+                        data: {\r\n+                            metaData: Object.assign(metaData, {\r\n+                                updatedAt: new Date().getTime(),\r\n+                                message: annotationMessage // Set the annotation message dynamically\r\n+                            })\r\n+                        },\r\n+                    };\r\n+                    resolve(response);\r\n+                }, 2000);\r\n+            });\r\n+        };\r\n+        // Register save API handler with AdobeDC View object\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n+            saveApiHandler,\r\n+            {}\r\n+        );\r\n+    }\r\n+\r\n+    // Method to retrieve annotations from local storage\r\n+    retrieveAnnotations(documentId) {\r\n+        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n+        return savedData[documentId] || {};\r\n+    }\r\n+\r\n+    // Method to register event handlers\r\n+    registerEventsHandler() {\r\n+        this.adobeDCView.registerCallback(\r\n+            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n+            event => {\r\n+                console.log(event);\r\n+            },\r\n+            {\r\n+                enablePDFAnalytics: true,\r\n+            }\r\n+        );\r\n+    }\r\n+}\r\n+\r\n+export default ViewSDKClient;\r\n // class ViewSDKClient {\r\n //     constructor() {\r\n //         // Promise that resolves when AdobeDC SDK is ready\r\n //         this.readyPromise = new Promise((resolve) => {\r\n@@ -125,10 +273,25 @@\n //                 });\r\n //             }\r\n //         });\r\n //         this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n+//         this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n+//         this.handleClick = this.handleClick.bind(this);\r\n //     }\r\n-\r\n+//   // Method to attach onclick event to a specific element\r\n+//   attachClickEventToElement() {\r\n+//     const element = document.getElementsByClassName(\"ModernEditableTextComponent__PostToolText___AYHrj\");\r\n+//     if (element) {\r\n+//         element.addEventListener(\"click\", this.handleClick);\r\n+//     } else {\r\n+//         console.error(`Element with ID  not found.`);\r\n+//     }\r\n+// }\r\n+//   // Click event handler\r\n+//   handleClick(event) {\r\n+//     // Handle click event logic here\r\n+//     console.log(\"Element clicked:\", event.target);\r\n+// }\r\n //     // Method to check if AdobeDC SDK is ready\r\n //     ready() {\r\n //         return this.readyPromise;\r\n //     }\r\n@@ -176,56 +339,228 @@\n //             metaData: {\r\n //                 fileName: data.name,\r\n //                 id: data.id,\r\n //             },\r\n+//     options: {\r\n+//         enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n+//         includePDFAnnotations: true, // Include PDF annotations in the preview\r\n+//         showPageControls: true, // Show page navigation controls\r\n+//         showToolbar: true, // Show the viewer's toolbar\r\n+//         showReflowControl: true, // Show reflow control for text reflow\r\n+//         openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n+//         enableFormNavigation: true, // Enable form navigation controls\r\n+//         enableAddTextComment: true, // Enable adding text comments\r\n+//         enableAddStickyNote: true, // Enable adding sticky notes\r\n+//         showDownloadButton: true, // Show the download button\r\n+//         showPrintButton: true, // Show the print button\r\n+//         showZoomButtons: true, // Show zoom in/out buttons\r\n+//         defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n+//         showLeftHandPanel: true, // Show the left-hand panel\r\n+//         showRightHandPanel: true, // Show the right-hand panel\r\n+//         showSearchBar: true, // Show the search bar\r\n+//         enableFormFilling: true, // Enable form filling in the viewer\r\n+//         enableAutoSave: true, // Enable auto-save feature\r\n+//         showDocumentInfo: true, // Show document information\r\n+//         enablePDFAnalytics: true, // Enable PDF analytics\r\n+//         showAnnotationTools: true, // Show annotation tools\r\n+//         showSignaturePanel: true, // Show the signature panel\r\n+//         showThumbnailsPanel: true, // Show the thumbnails panel\r\n+//         showRotateButton: true, // Show the rotate button\r\n+//         showUndoRedoButtons: true, // Show undo/redo buttons\r\n+//         showFullScreenButton: true, // Show the full-screen button\r\n+//         enableAccessibility: true, // Enable accessibility features\r\n+//         showShareButton: true, // Show the share button\r\n+//         showOptimizedViewButton: true, // Show the optimized view button\r\n+//         showFormResetButton: true, // Show the form reset button\r\n+//         showFormSaveButton: true, // Show the form save button\r\n+//         enableMultiPageControl: true, // Enable multi-page control\r\n+//         enableBookmarkNavigation: true, // Enable bookmark navigation\r\n+//         showOpenFileButton: true, // Show the open file button\r\n+//         showAddAttachmentButton: true, // Show the add attachment button\r\n+//         enableHighlightText: true, // Enable text highlighting\r\n+//         enableStrikeoutText: true, // Enable text strikeout\r\n+//         enableUnderlineText: true, // Enable text underlining\r\n+//         enableAreaHighlight: true, // Enable area highlighting\r\n+//         enableLinkAnnotation: true, // Enable link annotations\r\n+//         enableTextSelection: true, // Enable text selection\r\n+//         enablePanZoom: true, // Enable pan and zoom\r\n+//         enableTextAnnotation: true, // Enable text annotation\r\n+//         enableRedactText: true, // Enable text redaction\r\n+//         enableMeasureTools: true, // Enable measure tools\r\n+//         enableCommentingTools: true, // Enable commenting tools\r\n+//         enableDigitalSignatureTools: true, // Enable digital signature tools\r\n+//         enableHandTool: true, // Enable hand tool for panning\r\n+//         enableZoomTools: true, // Enable zoom tools\r\n+//         enableRotatePages: true, // Enable page rotation\r\n+//         enableScrollZoom: true, // Enable scroll zoom\r\n+//         showAnnotationFilters: true, // Show annotation filters\r\n+//         enablePageViewTracking: true, // Enable page view tracking\r\n+//         enablePerformanceTracking: true, // Enable performance tracking\r\n+//         showTutorialButton: true, // Show the tutorial button\r\n+//         enableFormsTracking: true, // Enable forms tracking\r\n+//         enableTextExtraction: true, // Enable text extraction\r\n+//         enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n+//         enablePDFConversion: true, // Enable PDF conversion\r\n+//         enablePDFSigning: true, // Enable PDF signing\r\n+//         enablePDFEditing: true, // Enable PDF editing\r\n+//         enablePDFCreation: true, // Enable PDF creation\r\n+//         enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n+//         enablePDFRedaction: true, // Enable PDF redaction\r\n+//         enablePDFTextEditing: true, // Enable PDF text editing\r\n+//         enablePDFImageEditing: true, // Enable PDF image editing\r\n+//         enablePDFPageManagement: true, // Enable PDF page management\r\n+//         enablePDFPasswordProtection: true, // Enable PDF password protection\r\n+//         enablePDFPermissionManagement: true, // Enable PDF permission management\r\n+//         enablePDFWatermarking: true, // Enable PDF watermarking\r\n+//         enablePDFStamping: true, // Enable PDF stamping\r\n+//         enablePDFSearch: true, // Enable PDF search\r\n+//         enablePDFCompression: true, // Enable PDF compression\r\n+//         enablePDFOptimization: true, // Enable PDF optimization\r\n+//         enablePDFAccessibility: true, // Enable PDF accessibility\r\n+//         enablePDFPageExtraction: true, // Enable PDF page extraction\r\n+//         enablePDFMerge: true, // Enable PDF merge\r\n+//         enablePDFSplit: true, // Enable PDF split\r\n+//         enablePDFPageRotation: true, // Enable PDF page rotation\r\n+//         enablePDFPageInsertion: true, // Enable PDF page insertion\r\n+//         enablePDFPageDeletion: true, // Enable PDF page deletion\r\n+//         enablePDFPageReordering: true, // Enable PDF page reordering\r\n+//         enablePDFPageScaling: true, // Enable PDF page scaling\r\n+//         enablePDFPageCropping: true, // Enable PDF page cropping\r\n+//         enablePDFTextSearch: true, // Enable PDF text search\r\n+//         enablePDFImageSearch: true, // Enable PDF image search\r\n+//         enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n+//         enablePDFCommentSearch: true, // Enable PDF comment search\r\n+//         enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n+//         enablePDFContentRedaction: true, // Enable PDF content redaction\r\n+//         enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n+//         enablePDFTextExtraction: true, // Enable PDF text extraction\r\n+//         enablePDFImageExtraction: true, // Enable PDF image extraction\r\n+//         enablePDFPageNumbering: true, // Enable PDF page numbering\r\n+//         enablePDFExport: true, // Enable PDF export\r\n+//         enablePDFImport: true, // Enable PDF import\r\n+//         enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n+//         enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n+//         enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n+//         enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n+//         enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n+//         enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n+//         enablePDFEncryption: true, // Enable PDF encryption\r\n+//         enablePDFDecryption: true, // Enable PDF decryption\r\n+//         enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n+//         enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n+//         enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n+//         enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n+//         enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n+//         enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n+//         enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n+//         enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n+//         enablePDFPageLayout: true, // Enable PDF page layout\r\n+//         enablePDFTextFormatting: true, // Enable PDF text formatting\r\n+//         enablePDFImageFormatting: true, // Enable PDF image formatting\r\n+//         enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n+//         enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n+//         enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n+//         enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n+//         enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n+//         enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n+//         enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n+//         enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n+//         enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n+//         enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n+//         enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n+//         enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n+//         enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n+//         enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n+//         enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n+//         enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n+//         enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n+//         enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n+//         enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n+//         enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n+//         enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n+//         enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n+//         enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n+//         enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n+//         enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n+//         enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n+//         enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n+//         enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n+//         enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n+//         enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n+//         enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n+//         enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n+//         enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n+//         enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n+//         enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n+//         enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n+//         enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n+//         enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n+//         enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n+//         enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n+//         enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n+//         enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n+//         enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n+//         enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n+//         enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n+//         enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n+//         enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n+//         enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n+//         enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n+//         enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n+//         enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n+//         enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n+//         enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n+//         enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n+//         enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n+//         enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n+//         enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n+//         enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n+//         enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n+//         enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n+//         enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n+//         enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n+//         enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n+//         enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n+//         enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n+//         enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n+//         enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n+//         enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n+//         enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n+//         enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n+//         enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n+//         enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n+//         // Add more options as needed based on your requirements\r\n+//     },\r\n //         }, viewerConfig);\r\n \r\n //         // Register save API handler with dynamic annotation message\r\n-//         const annotationMessage = \"This is a sample annotation message.\";\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n+//         this.registerSaveApiHandler();\r\n \r\n //         return previewFilePromise;\r\n //     }\r\n \r\n-//     // Method to preview a file using a file promise\r\n-//     previewFileUsingFilePromise(divId, filePromise, data,annotationMessage) {\r\n-//         this.adobeDCView = new window.AdobeDC.View({\r\n-//             clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-//             divId,\r\n-//         });\r\n-\r\n-//         this.adobeDCView.previewFile({\r\n-//             content: {\r\n-//                 promise: filePromise,\r\n-//             },\r\n-//             metaData: {\r\n-//                 fileName: data.name\r\n-//             }\r\n-//         }, {});\r\n-\r\n-//         // Register save API handler with dynamic annotation message\r\n-//         this.registerSaveApiHandler(annotationMessage);\r\n-//     }\r\n-\r\n //     // Method to register a save API handler with dynamic annotation message\r\n-//     registerSaveApiHandler(annotationMessage) {\r\n+//     registerSaveApiHandler() {\r\n //         const saveApiHandler = (metaData, content, options) => {\r\n-//             console.log(metaData, \"content => \", content, \"Options:- \", options)\r\n //             return new Promise(resolve => {\r\n //                 setTimeout(() => {\r\n //                     const documentId = metaData.id;\r\n //                     const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n //                     savedData[metaData.id] = content;\r\n-//                     console.log(annotationMessage, \"data\", savedData);\r\n+//                     console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n //                     localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n \r\n //                     // Set the dynamic annotation message\r\n //                     const response = {\r\n //                         code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n //                         data: {\r\n //                             metaData: Object.assign(metaData, {\r\n //                                 updatedAt: new Date().getTime(),\r\n-//                                 message: annotationMessage // Set the annotation message dynamically\r\n+//                                 message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n //                             })\r\n //                         },\r\n //                     };\r\n //                     resolve(response);\r\n@@ -239,8 +574,13 @@\n //             {}\r\n //         );\r\n //     }\r\n \r\n+//     // Method to set dynamic annotation message\r\n+//     setDynamicAnnotationMessage(message) {\r\n+//         this.dynamicAnnotationMessage = message;\r\n+//     }\r\n+\r\n //     // Method to retrieve annotations from local storage\r\n //     retrieveAnnotations(documentId) {\r\n //         const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n //         return savedData[documentId] || {};\r\n@@ -260,344 +600,4 @@\n //     }\r\n // }\r\n \r\n // export default ViewSDKClient;\r\n-class ViewSDKClient {\r\n-    constructor() {\r\n-        // Promise that resolves when AdobeDC SDK is ready\r\n-        this.readyPromise = new Promise((resolve) => {\r\n-            if (window.AdobeDC) {\r\n-                resolve();\r\n-            } else {\r\n-                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n-                    resolve();\r\n-                });\r\n-            }\r\n-        });\r\n-        this.adobeDCView = undefined; // Initialize AdobeDC View object\r\n-        this.dynamicAnnotationMessage = \"\"; // Initialize dynamic annotation message\r\n-        this.handleClick = this.handleClick.bind(this);\r\n-    }\r\n-  // Method to attach onclick event to a specific element\r\n-  attachClickEventToElement(elementId) {\r\n-    const element = document.getElementsByClassName(\"ModernEditableTextComponent__PostToolText___AYHrj\");\r\n-    if (element) {\r\n-        element.addEventListener(\"click\", this.handleClick);\r\n-    } else {\r\n-        console.error(`Element with ID ${elementId} not found.`);\r\n-    }\r\n-}\r\n-  // Click event handler\r\n-  handleClick(event) {\r\n-    // Handle click event logic here\r\n-    console.log(\"Element clicked:\", event.target);\r\n-}\r\n-    // Method to check if AdobeDC SDK is ready\r\n-    ready() {\r\n-        return this.readyPromise;\r\n-    }\r\n-\r\n-    // Method to preview a file\r\n-    previewFile(divId, viewerConfig, url, data) {\r\n-        // Log file information\r\n-        console.log(data.name, data);\r\n-        const fileExtension = data.name.split('.').pop().toLowerCase();\r\n-        console.log(\"File extension:\", fileExtension);\r\n-\r\n-        const config = {\r\n-            clientId: \"d9e8b7bcb61b42b6a387bfa9cf16a75b\",\r\n-        };\r\n-\r\n-        if (divId) {\r\n-            config.divId = divId;\r\n-        }\r\n-\r\n-        // Create AdobeDC View object\r\n-        this.adobeDCView = new window.AdobeDC.View(config);\r\n-\r\n-        // Set viewer configuration\r\n-        viewerConfig = {\r\n-            ...viewerConfig,\r\n-            embedMode: window.AdobeDC.View.Enum.EmbedMode.INLINE,\r\n-            showAnnotationTools: true,\r\n-            showDownloadPDF: true,\r\n-            showPrintPDF: true,\r\n-            enableFormFilling: true,\r\n-            showLeftHandPanel: true,\r\n-            showSearchPDF: true,\r\n-            showDocumentInfo: true,\r\n-        };\r\n-\r\n-        // Preview file using AdobeDC View object\r\n-        const previewFilePromise = this.adobeDCView.previewFile({\r\n-            content: {\r\n-                location: {\r\n-                    url: url,\r\n-                    fileExtension: fileExtension,\r\n-                    fileType: data.mimeType\r\n-                },\r\n-            },\r\n-            metaData: {\r\n-                fileName: data.name,\r\n-                id: data.id,\r\n-            },\r\n-    options: {\r\n-        enableAnnotationAPIs: true, // Enable annotation APIs for the viewer\r\n-        includePDFAnnotations: true, // Include PDF annotations in the preview\r\n-        showPageControls: true, // Show page navigation controls\r\n-        showToolbar: true, // Show the viewer's toolbar\r\n-        showReflowControl: true, // Show reflow control for text reflow\r\n-        openThumbnailsPanel: true, // Open the thumbnails panel by default\r\n-        enableFormNavigation: true, // Enable form navigation controls\r\n-        enableAddTextComment: true, // Enable adding text comments\r\n-        enableAddStickyNote: true, // Enable adding sticky notes\r\n-        showDownloadButton: true, // Show the download button\r\n-        showPrintButton: true, // Show the print button\r\n-        showZoomButtons: true, // Show zoom in/out buttons\r\n-        defaultViewMode: window.AdobeDC.View.Enum.ViewMode.FIT_WIDTH, // Set default view mode\r\n-        showLeftHandPanel: true, // Show the left-hand panel\r\n-        showRightHandPanel: true, // Show the right-hand panel\r\n-        showSearchBar: true, // Show the search bar\r\n-        enableFormFilling: true, // Enable form filling in the viewer\r\n-        enableAutoSave: true, // Enable auto-save feature\r\n-        showDocumentInfo: true, // Show document information\r\n-        enablePDFAnalytics: true, // Enable PDF analytics\r\n-        showAnnotationTools: true, // Show annotation tools\r\n-        showSignaturePanel: true, // Show the signature panel\r\n-        showThumbnailsPanel: true, // Show the thumbnails panel\r\n-        showRotateButton: true, // Show the rotate button\r\n-        showUndoRedoButtons: true, // Show undo/redo buttons\r\n-        showFullScreenButton: true, // Show the full-screen button\r\n-        enableAccessibility: true, // Enable accessibility features\r\n-        showShareButton: true, // Show the share button\r\n-        showOptimizedViewButton: true, // Show the optimized view button\r\n-        showFormResetButton: true, // Show the form reset button\r\n-        showFormSaveButton: true, // Show the form save button\r\n-        enableMultiPageControl: true, // Enable multi-page control\r\n-        enableBookmarkNavigation: true, // Enable bookmark navigation\r\n-        showOpenFileButton: true, // Show the open file button\r\n-        showAddAttachmentButton: true, // Show the add attachment button\r\n-        enableHighlightText: true, // Enable text highlighting\r\n-        enableStrikeoutText: true, // Enable text strikeout\r\n-        enableUnderlineText: true, // Enable text underlining\r\n-        enableAreaHighlight: true, // Enable area highlighting\r\n-        enableLinkAnnotation: true, // Enable link annotations\r\n-        enableTextSelection: true, // Enable text selection\r\n-        enablePanZoom: true, // Enable pan and zoom\r\n-        enableTextAnnotation: true, // Enable text annotation\r\n-        enableRedactText: true, // Enable text redaction\r\n-        enableMeasureTools: true, // Enable measure tools\r\n-        enableCommentingTools: true, // Enable commenting tools\r\n-        enableDigitalSignatureTools: true, // Enable digital signature tools\r\n-        enableHandTool: true, // Enable hand tool for panning\r\n-        enableZoomTools: true, // Enable zoom tools\r\n-        enableRotatePages: true, // Enable page rotation\r\n-        enableScrollZoom: true, // Enable scroll zoom\r\n-        showAnnotationFilters: true, // Show annotation filters\r\n-        enablePageViewTracking: true, // Enable page view tracking\r\n-        enablePerformanceTracking: true, // Enable performance tracking\r\n-        showTutorialButton: true, // Show the tutorial button\r\n-        enableFormsTracking: true, // Enable forms tracking\r\n-        enableTextExtraction: true, // Enable text extraction\r\n-        enableDocumentStructureAnalysis: true, // Enable document structure analysis\r\n-        enablePDFConversion: true, // Enable PDF conversion\r\n-        enablePDFSigning: true, // Enable PDF signing\r\n-        enablePDFEditing: true, // Enable PDF editing\r\n-        enablePDFCreation: true, // Enable PDF creation\r\n-        enablePDFAnnotationEditing: true, // Enable PDF annotation editing\r\n-        enablePDFRedaction: true, // Enable PDF redaction\r\n-        enablePDFTextEditing: true, // Enable PDF text editing\r\n-        enablePDFImageEditing: true, // Enable PDF image editing\r\n-        enablePDFPageManagement: true, // Enable PDF page management\r\n-        enablePDFPasswordProtection: true, // Enable PDF password protection\r\n-        enablePDFPermissionManagement: true, // Enable PDF permission management\r\n-        enablePDFWatermarking: true, // Enable PDF watermarking\r\n-        enablePDFStamping: true, // Enable PDF stamping\r\n-        enablePDFSearch: true, // Enable PDF search\r\n-        enablePDFCompression: true, // Enable PDF compression\r\n-        enablePDFOptimization: true, // Enable PDF optimization\r\n-        enablePDFAccessibility: true, // Enable PDF accessibility\r\n-        enablePDFPageExtraction: true, // Enable PDF page extraction\r\n-        enablePDFMerge: true, // Enable PDF merge\r\n-        enablePDFSplit: true, // Enable PDF split\r\n-        enablePDFPageRotation: true, // Enable PDF page rotation\r\n-        enablePDFPageInsertion: true, // Enable PDF page insertion\r\n-        enablePDFPageDeletion: true, // Enable PDF page deletion\r\n-        enablePDFPageReordering: true, // Enable PDF page reordering\r\n-        enablePDFPageScaling: true, // Enable PDF page scaling\r\n-        enablePDFPageCropping: true, // Enable PDF page cropping\r\n-        enablePDFTextSearch: true, // Enable PDF text search\r\n-        enablePDFImageSearch: true, // Enable PDF image search\r\n-        enablePDFAnnotationSearch: true, // Enable PDF annotation search\r\n-        enablePDFCommentSearch: true, // Enable PDF comment search\r\n-        enablePDFBookmarkSearch: true, // Enable PDF bookmark search\r\n-        enablePDFContentRedaction: true, // Enable PDF content redaction\r\n-        enablePDFDocumentComparison: true, // Enable PDF document comparison\r\n-        enablePDFTextExtraction: true, // Enable PDF text extraction\r\n-        enablePDFImageExtraction: true, // Enable PDF image extraction\r\n-        enablePDFPageNumbering: true, // Enable PDF page numbering\r\n-        enablePDFExport: true, // Enable PDF export\r\n-        enablePDFImport: true, // Enable PDF import\r\n-        enablePDFSigningWorkflow: true, // Enable PDF signing workflow\r\n-        enablePDFAnnotationWorkflow: true, // Enable PDF annotation workflow\r\n-        enablePDFReviewWorkflow: true, // Enable PDF review workflow\r\n-        enablePDFApprovalWorkflow: true, // Enable PDF approval workflow\r\n-        enablePDFSharingWorkflow: true, // Enable PDF sharing workflow\r\n-        enablePDFPrintingWorkflow: true, // Enable PDF printing workflow\r\n-        enablePDFEncryption: true, // Enable PDF encryption\r\n-        enablePDFDecryption: true, // Enable PDF decryption\r\n-        enablePDFDigitalSignature: true, // Enable PDF digital signature\r\n-        enablePDFCertificateEncryption: true, // Enable PDF certificate encryption\r\n-        enablePDFPasswordEncryption: true, // Enable PDF password encryption\r\n-        enablePDFPublicKeyEncryption: true, // Enable PDF public key encryption\r\n-        enablePDFPrivateKeyEncryption: true, // Enable PDF private key encryption\r\n-        enablePDFPageNumberFormatting: true, // Enable PDF page number formatting\r\n-        enablePDFAnnotationFormatting: true, // Enable PDF annotation formatting\r\n-        enablePDFDocumentFormatting: true, // Enable PDF document formatting\r\n-        enablePDFPageLayout: true, // Enable PDF page layout\r\n-        enablePDFTextFormatting: true, // Enable PDF text formatting\r\n-        enablePDFImageFormatting: true, // Enable PDF image formatting\r\n-        enablePDFAnnotationVisibility: true, // Enable PDF annotation visibility\r\n-        enablePDFAnnotationExport: true, // Enable PDF annotation export\r\n-        enablePDFAnnotationImport: true, // Enable PDF annotation import\r\n-        enablePDFAnnotationCreation: true, // Enable PDF annotation creation\r\n-        enablePDFAnnotationModification: true, // Enable PDF annotation modification\r\n-        enablePDFAnnotationDeletion: true, // Enable PDF annotation deletion\r\n-        enablePDFAnnotationCollaboration: true, // Enable PDF annotation collaboration\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationApproval: true, // Enable PDF annotation approval\r\n-        enablePDFAnnotationSharing: true, // Enable PDF annotation sharing\r\n-        enablePDFAnnotationPrinting: true, // Enable PDF annotation printing\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationMarkup: true, // Enable PDF annotation markup\r\n-        enablePDFAnnotationCommenting: true, // Enable PDF annotation commenting\r\n-        enablePDFAnnotationStickyNotes: true, // Enable PDF annotation sticky notes\r\n-        enablePDFAnnotationTextHighlighting: true, // Enable PDF annotation text highlighting\r\n-        enablePDFAnnotationTextUnderlining: true, // Enable PDF annotation text underlining\r\n-        enablePDFAnnotationTextStrikethrough: true, // Enable PDF annotation text strikethrough\r\n-        enablePDFAnnotationTextInsertion: true, // Enable PDF annotation text insertion\r\n-        enablePDFAnnotationTextReplacement: true, // Enable PDF annotation text replacement\r\n-        enablePDFAnnotationTextRedaction: true, // Enable PDF annotation text redaction\r\n-        enablePDFAnnotationAreaHighlighting: true, // Enable PDF annotation area highlighting\r\n-        enablePDFAnnotationFreehandDrawing: true, // Enable PDF annotation freehand drawing\r\n-        enablePDFAnnotationLineDrawing: true, // Enable PDF annotation line drawing\r\n-        enablePDFAnnotationArrowDrawing: true, // Enable PDF annotation arrow drawing\r\n-        enablePDFAnnotationRectangleDrawing: true, // Enable PDF annotation rectangle drawing\r\n-        enablePDFAnnotationEllipseDrawing: true, // Enable PDF annotation ellipse drawing\r\n-        enablePDFAnnotationPolygonDrawing: true, // Enable PDF annotation polygon drawing\r\n-        enablePDFAnnotationPolylineDrawing: true, // Enable PDF annotation polyline drawing\r\n-        enablePDFAnnotationMeasurementTools: true, // Enable PDF annotation measurement tools\r\n-        enablePDFAnnotationCalibrationTools: true, // Enable PDF annotation calibration tools\r\n-        enablePDFAnnotationTextCommenting: true, // Enable PDF annotation text commenting\r\n-        enablePDFAnnotationVoiceCommenting: true, // Enable PDF annotation voice commenting\r\n-        enablePDFAnnotationImageStamping: true, // Enable PDF annotation image stamping\r\n-        enablePDFAnnotationSignatureStamping: true, // Enable PDF annotation signature stamping\r\n-        enablePDFAnnotationFileAttachment: true, // Enable PDF annotation file attachment\r\n-        enablePDFAnnotationTextAttachment: true, // Enable PDF annotation text attachment\r\n-        enablePDFAnnotationHyperlink: true, // Enable PDF annotation hyperlink\r\n-        enablePDFAnnotationPopup: true, // Enable PDF annotation popup\r\n-        enablePDFAnnotationRedaction: true, // Enable PDF annotation redaction\r\n-        enablePDFAnnotationRedactionOverlay: true, // Enable PDF annotation redaction overlay\r\n-        enablePDFAnnotationRedactionTextReplacement: true, // Enable PDF annotation redaction text replacement\r\n-        enablePDFAnnotationRedactionTextExtraction: true, // Enable PDF annotation redaction text extraction\r\n-        enablePDFAnnotationRedactionFullTextRedaction: true, // Enable PDF annotation redaction full text redaction\r\n-        enablePDFAnnotationReview: true, // Enable PDF annotation review\r\n-        enablePDFAnnotationReviewStamp: true, // Enable PDF annotation review stamp\r\n-        enablePDFAnnotationReviewHighlight: true, // Enable PDF annotation review highlight\r\n-        enablePDFAnnotationReviewStrikethrough: true, // Enable PDF annotation review strikethrough\r\n-        enablePDFAnnotationReviewUnderline: true, // Enable PDF annotation review underline\r\n-        enablePDFAnnotationReviewTextInsertion: true, // Enable PDF annotation review text insertion\r\n-        enablePDFAnnotationReviewTextReplacement: true, // Enable PDF annotation review text replacement\r\n-        enablePDFAnnotationReviewTextDeletion: true, // Enable PDF annotation review text deletion\r\n-        enablePDFAnnotationReviewTextRedaction: true, // Enable PDF annotation review text redaction\r\n-        enablePDFAnnotationReviewAreaHighlighting: true, // Enable PDF annotation review area highlighting\r\n-        enablePDFAnnotationReviewFreehandDrawing: true, // Enable PDF annotation review freehand drawing\r\n-        enablePDFAnnotationReviewLineDrawing: true, // Enable PDF annotation review line drawing\r\n-        enablePDFAnnotationReviewArrowDrawing: true, // Enable PDF annotation review arrow drawing\r\n-        enablePDFAnnotationReviewRectangleDrawing: true, // Enable PDF annotation review rectangle drawing\r\n-        enablePDFAnnotationReviewEllipseDrawing: true, // Enable PDF annotation review ellipse drawing\r\n-        enablePDFAnnotationReviewPolygonDrawing: true, // Enable PDF annotation review polygon drawing\r\n-        enablePDFAnnotationReviewPolylineDrawing: true, // Enable PDF annotation review polyline drawing\r\n-        enablePDFAnnotationReviewMeasurementTools: true, // Enable PDF annotation review measurement tools\r\n-        enablePDFAnnotationReviewCalibrationTools: true, // Enable PDF annotation review calibration tools\r\n-        enablePDFAnnotationReviewCommenting: true, // Enable PDF annotation review commenting\r\n-        enablePDFAnnotationReviewVoiceCommenting: true, // Enable PDF annotation review voice commenting\r\n-        enablePDFAnnotationReviewImageStamping: true, // Enable PDF annotation review image stamping\r\n-        enablePDFAnnotationReviewSignatureStamping: true, // Enable PDF annotation review signature stamping\r\n-        enablePDFAnnotationReviewFileAttachment: true, // Enable PDF annotation review file attachment\r\n-        enablePDFAnnotationReviewTextAttachment: true, // Enable PDF annotation review text attachment\r\n-        enablePDFAnnotationReviewHyperlink: true, // Enable PDF annotation review hyperlink\r\n-        enablePDFAnnotationReviewPopup: true, // Enable PDF annotation review popup\r\n-        enablePDFAnnotationReviewRedaction: true, // Enable PDF annotation review redaction\r\n-        enablePDFAnnotationReviewRedactionOverlay: true, // Enable PDF annotation review redaction overlay\r\n-        enablePDFAnnotationReviewRedactionTextReplacement: true, // Enable PDF annotation review redaction text replacement\r\n-        enablePDFAnnotationReviewRedactionTextExtraction: true, // Enable PDF annotation review redaction text extraction\r\n-        enablePDFAnnotationReviewRedactionFullTextRedaction: true, // Enable PDF annotation review redaction full text redaction\r\n-        // Add more options as needed based on your requirements\r\n-    },\r\n-        }, viewerConfig);\r\n-\r\n-        // Register save API handler with dynamic annotation message\r\n-        this.registerSaveApiHandler();\r\n-\r\n-        return previewFilePromise;\r\n-    }\r\n-\r\n-    // Method to register a save API handler with dynamic annotation message\r\n-    registerSaveApiHandler() {\r\n-        const saveApiHandler = (metaData, content, options) => {\r\n-            return new Promise(resolve => {\r\n-                setTimeout(() => {\r\n-                    const documentId = metaData.id;\r\n-                    const savedData = JSON.parse(localStorage.getItem(documentId)) || {};\r\n-                    savedData[metaData.id] = content;\r\n-                    console.log(this.dynamicAnnotationMessage, \"data\", savedData);\r\n-                    localStorage.setItem(`annotations${documentId}`, JSON.stringify(savedData));\r\n-\r\n-                    // Set the dynamic annotation message\r\n-                    const response = {\r\n-                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n-                        data: {\r\n-                            metaData: Object.assign(metaData, {\r\n-                                updatedAt: new Date().getTime(),\r\n-                                message: this.dynamicAnnotationMessage // Set the annotation message dynamically\r\n-                            })\r\n-                        },\r\n-                    };\r\n-                    resolve(response);\r\n-                }, 2000);\r\n-            });\r\n-        };\r\n-        // Register save API handler with AdobeDC View object\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n-            saveApiHandler,\r\n-            {}\r\n-        );\r\n-    }\r\n-\r\n-    // Method to set dynamic annotation message\r\n-    setDynamicAnnotationMessage(message) {\r\n-        this.dynamicAnnotationMessage = message;\r\n-    }\r\n-\r\n-    // Method to retrieve annotations from local storage\r\n-    retrieveAnnotations(documentId) {\r\n-        const savedData = JSON.parse(localStorage.getItem(`annotations${documentId}`)) || {};\r\n-        return savedData[documentId] || {};\r\n-    }\r\n-\r\n-    // Method to register event handlers\r\n-    registerEventsHandler() {\r\n-        this.adobeDCView.registerCallback(\r\n-            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n-            event => {\r\n-                console.log(event);\r\n-            },\r\n-            {\r\n-                enablePDFAnalytics: true,\r\n-            }\r\n-        );\r\n-    }\r\n-}\r\n-\r\n-export default ViewSDKClient;\r\n"
                }
            ],
            "date": 1712911622327,
            "name": "Commit-0",
            "content": "class ViewSDKClient {\r\n    constructor() {\r\n    this.readyPromise = new Promise((resolve) => {\r\n    if (window.AdobeDC) {\r\n    resolve();\r\n    } else {\r\n    document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n    resolve();\r\n    });\r\n    }\r\n    });\r\n    this.adobeDCView = undefined;\r\n    }\r\n    ready() {\r\n    return this.readyPromise;\r\n    }\r\n    previewFile(divId, viewerConfig, url) {\r\n    const config = {\r\n    clientId: \"5bfcbeb2d14c49bf95f73dc0eed7f390\",\r\n    };\r\n    if (divId) {\r\n    config.divId = divId;\r\n    }\r\n    this.adobeDCView = new window.AdobeDC.View(config);\r\n    const previewFilePromise = this.adobeDCView.previewFile({\r\n    content: {\r\n    location: {\r\n    url: url,\r\n    },\r\n    },\r\n    metaData: {\r\n    fileName: \"Menu.pdf\",\r\n    id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n    }\r\n    }, viewerConfig);\r\n    return previewFilePromise;\r\n    }\r\n    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n    this.adobeDCView = new window.AdobeDC.View({\r\n    clientId: \"5bfcbeb2d14c49bf95f73dc0eed7f390\",\r\n    divId,\r\n    });\r\n    this.adobeDCView.previewFile({\r\n    content: {\r\n    promise: filePromise,\r\n    },\r\n    metaData: {\r\n    fileName: fileName\r\n    }\r\n    }, {});\r\n    }\r\n    registerSaveApiHandler() {\r\n    const saveApiHandler = (metaData, content, options) => {\r\n    console.log(metaData, content, options);\r\n    return new Promise(resolve => {\r\n    setTimeout(() => {\r\n    const response = {\r\n    code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n    data: {\r\n    metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n    },\r\n    };\r\n    resolve(response);\r\n    }, 2000);\r\n    });\r\n    };\r\n    this.adobeDCView.registerCallback(\r\n    window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n    saveApiHandler,\r\n    {}\r\n    );\r\n    }\r\n    registerEventsHandler() {\r\n    this.adobeDCView.registerCallback(\r\n    window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n    event => {\r\n    console.log(event);\r\n    },\r\n    {\r\n    enablePDFAnalytics: true,\r\n    }\r\n    );\r\n    }\r\n    }\r\n    export default ViewSDKClient;"
        }
    ]
}