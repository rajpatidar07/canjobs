{
    "sourceFile": "src/components/common/AgentConversation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 93,
            "patches": [
                {
                    "date": 1708937504046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708937628940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n   }, [apicall]);\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"notes\");\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"mention_partner\");\n       if (res.data.status === (1 || \"1\")) {\n         setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n"
                },
                {
                    "date": 1708938131716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n   }, [apicall]);\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"mention_partner\");\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n       if (res.data.status === (1 || \"1\")) {\n         setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n"
                },
                {
                    "date": 1708938258126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,287 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          ? \"Message can not have a number.\"\n+          : value.length < 2\n+          ? \"Message should have 2 or more letters\"\n+          : /[^A-Za-z 0-9]/g.test(value)\n+          ? \"Cannot use special character \"\n+          : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  console.log( state.DocUrl)\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+          ? agent_id\n+          : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n+          base64Name.split(\";\")[1]\n+        }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"normal\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        <AddNotesConversation\n+          handleMessageSubmit={handleMessageSubmit}\n+          onInputChange={onInputChange}\n+          state={state}\n+          errors={errors}\n+          handleBulkFileChange={handleBulkFileChange}\n+          handleRemoveFile={handleRemoveFile}\n+          fileNames={fileNames}\n+        />\n+      </div>\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1708938331266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,286 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          ? \"Message can not have a number.\"\n+          : value.length < 2\n+          ? \"Message should have 2 or more letters\"\n+          : /[^A-Za-z 0-9]/g.test(value)\n+          ? \"Cannot use special character \"\n+          : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"notes\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+          ? agent_id\n+          : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"notes\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n+          base64Name.split(\";\")[1]\n+        }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"normal\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        <AddNotesConversation\n+          handleMessageSubmit={handleMessageSubmit}\n+          onInputChange={onInputChange}\n+          state={state}\n+          errors={errors}\n+          handleBulkFileChange={handleBulkFileChange}\n+          handleRemoveFile={handleRemoveFile}\n+          fileNames={fileNames}\n+        />\n+      </div>\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1708938397283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,295 +108,8 @@\n         state.subject, //subject\n         state.message, //Comment\n         0, //x_axis\n         0, //y_axis\n-        \"notes\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"normal\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        <AddNotesConversation\n-          handleMessageSubmit={handleMessageSubmit}\n-          onInputChange={onInputChange}\n-          state={state}\n-          errors={errors}\n-          handleBulkFileChange={handleBulkFileChange}\n-          handleRemoveFile={handleRemoveFile}\n-          fileNames={fileNames}\n-        />\n-      </div>\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  console.log( state.DocUrl)\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n         \"partner\", // Type for the api\n         user_type === \"admin\" ? admin_type : user_type, //sender type\n         user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n         userName, //assigned Admin or user Name,\n@@ -570,290 +283,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"normal\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        <AddNotesConversation\n-          handleMessageSubmit={handleMessageSubmit}\n-          onInputChange={onInputChange}\n-          state={state}\n-          errors={errors}\n-          handleBulkFileChange={handleBulkFileChange}\n-          handleRemoveFile={handleRemoveFile}\n-          fileNames={fileNames}\n-        />\n-      </div>\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1708938407365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n   }, [apicall]);\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"notes\");\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n       if (res.data.status === (1 || \"1\")) {\n         setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n"
                },
                {
                    "date": 1708938428418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n   }, [apicall]);\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"notes\");\n       if (res.data.status === (1 || \"1\")) {\n         setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n@@ -108,9 +108,9 @@\n         state.subject, //subject\n         state.message, //Comment\n         0, //x_axis\n         0, //y_axis\n-        \"partner\", // Type for the api\n+        \"notes\", // Type for the api\n         user_type === \"admin\" ? admin_type : user_type, //sender type\n         user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n         userName, //assigned Admin or user Name,\n         state.status, //follow up status\n"
                },
                {
                    "date": 1708938462656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,286 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          ? \"Message can not have a number.\"\n+          : value.length < 2\n+          ? \"Message should have 2 or more letters\"\n+          : /[^A-Za-z 0-9]/g.test(value)\n+          ? \"Cannot use special character \"\n+          : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+          ? agent_id\n+          : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n+          base64Name.split(\";\")[1]\n+        }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"normal\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        <AddNotesConversation\n+          handleMessageSubmit={handleMessageSubmit}\n+          onInputChange={onInputChange}\n+          state={state}\n+          errors={errors}\n+          handleBulkFileChange={handleBulkFileChange}\n+          handleRemoveFile={handleRemoveFile}\n+          fileNames={fileNames}\n+        />\n+      </div>\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1708938506379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,286 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          ? \"Message can not have a number.\"\n+          : value.length < 2\n+          ? \"Message should have 2 or more letters\"\n+          : /[^A-Za-z 0-9]/g.test(value)\n+          ? \"Cannot use special character \"\n+          : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+          ? agent_id\n+          : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n+          base64Name.split(\";\")[1]\n+        }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"normal\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        <AddNotesConversation\n+          handleMessageSubmit={handleMessageSubmit}\n+          onInputChange={onInputChange}\n+          state={state}\n+          errors={errors}\n+          handleBulkFileChange={handleBulkFileChange}\n+          handleRemoveFile={handleRemoveFile}\n+          fileNames={fileNames}\n+        />\n+      </div>\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1708944997562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,294 +76,13 @@\n     GetNotesData();\n     if (apicall === true) {\n       setApiCall(false);\n     }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n+    //Condition to clear docid from url after navigation from notification\n+    if (props.partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n     }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"normal\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        <AddNotesConversation\n-          handleMessageSubmit={handleMessageSubmit}\n-          onInputChange={onInputChange}\n-          state={state}\n-          errors={errors}\n-          handleBulkFileChange={handleBulkFileChange}\n-          handleRemoveFile={handleRemoveFile}\n-          fileNames={fileNames}\n-        />\n-      </div>\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n   }, [apicall]);\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n@@ -569,290 +288,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"notes\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"notes\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"normal\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        <AddNotesConversation\n-          handleMessageSubmit={handleMessageSubmit}\n-          onInputChange={onInputChange}\n-          state={state}\n-          errors={errors}\n-          handleBulkFileChange={handleBulkFileChange}\n-          handleRemoveFile={handleRemoveFile}\n-          fileNames={fileNames}\n-        />\n-      </div>\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1708945026581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n export default function AgentConversation({\n   userId,\n   userEmail,\n   userName,\n-  assignusertype,\n+  assignusertype,partnerChat\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n@@ -77,9 +77,9 @@\n     if (apicall === true) {\n       setApiCall(false);\n     }\n     //Condition to clear docid from url after navigation from notification\n-    if (props.partnerChat) {\n+    if (partnerChat) {\n       const newUrl = window.location.pathname;\n       window.history.replaceState({}, document.title, newUrl);\n     }\n   }, [apicall]);\n"
                },
                {
                    "date": 1709619488864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n export default function AgentConversation({\n   userId,\n   userEmail,\n   userName,\n-  assignusertype,partnerChat\n+  assignusertype,\n+  partnerChat\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n@@ -30,14 +31,14 @@\n       (value) =>\n         (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n           ? \"Message is required\"\n           : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n     ],\n     // status: [\n     //   (value) =>\n     //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n@@ -104,10 +105,10 @@\n       let res = await ADocAnnotation(\n         user_type === \"admin\"\n           ? admin_id\n           : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n+            ? agent_id\n+            : employee_id, //Sender id\n         \"\", //doc id\n         userId, //assigne dUserId\n         userEmail, //assigne email\n         state.subject, //subject\n@@ -214,11 +215,10 @@\n         const encoded = await convertToBase64(file);\n         const base64Name = encoded.base64;\n \n         // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n \n         // Use DocRealName as the key for DocFile\n         DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n         fileList.push({\n@@ -257,10 +257,10 @@\n           loginuser={\n             user_type === \"admin\"\n               ? admin_id\n               : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n+                ? agent_id\n+                : employee_id\n           }\n           loginusertype={user_type === \"admin\" ? admin_type : user_type}\n         />\n         <AddNotesConversation\n"
                },
                {
                    "date": 1709619549465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,8 +270,9 @@\n           errors={errors}\n           handleBulkFileChange={handleBulkFileChange}\n           handleRemoveFile={handleRemoveFile}\n           fileNames={fileNames}\n+          setState={setState}\n         />\n       </div>\n       {/*  <div className=\"chat-container col-md-6\">\n         <MessageList\n"
                },
                {
                    "date": 1709721594012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,292 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"normal\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+                ? agent_id\n+                : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        <AddNotesConversation\n+          handleMessageSubmit={handleMessageSubmit}\n+          onInputChange={onInputChange}\n+          state={state}\n+          errors={errors}\n+          handleBulkFileChange={handleBulkFileChange}\n+          handleRemoveFile={handleRemoveFile}\n+          fileNames={fileNames}\n+          setState={setState}\n+        />\n+      </div>\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711012006810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+console.log(reffer_by)\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"normal\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+                ? agent_id\n+                : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        <AddNotesConversation\n+          handleMessageSubmit={handleMessageSubmit}\n+          onInputChange={onInputChange}\n+          state={state}\n+          errors={errors}\n+          handleBulkFileChange={handleBulkFileChange}\n+          handleRemoveFile={handleRemoveFile}\n+          fileNames={fileNames}\n+          setState={setState}\n+        />\n+      </div>\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711012261222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,301 +15,9 @@\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n-console.log(reffer_by)\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n \n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"normal\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-                ? agent_id\n-                : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        <AddNotesConversation\n-          handleMessageSubmit={handleMessageSubmit}\n-          onInputChange={onInputChange}\n-          state={state}\n-          errors={errors}\n-          handleBulkFileChange={handleBulkFileChange}\n-          handleRemoveFile={handleRemoveFile}\n-          fileNames={fileNames}\n-          setState={setState}\n-        />\n-      </div>\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n   // INITIAL STATE ASSIGNMENT\n   const initialFormState = {\n     name: \"\",\n     status: \"normal\",\n@@ -540,9 +248,10 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n-\n+console.log(partnerChat,\n+  reffer_by)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       <div className=\"chat-container col-md-6\">\n         <MessageList\n@@ -582,296 +291,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"normal\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-                ? agent_id\n-                : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        <AddNotesConversation\n-          handleMessageSubmit={handleMessageSubmit}\n-          onInputChange={onInputChange}\n-          state={state}\n-          errors={errors}\n-          handleBulkFileChange={handleBulkFileChange}\n-          handleRemoveFile={handleRemoveFile}\n-          fileNames={fileNames}\n-          setState={setState}\n-        />\n-      </div>\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1711012493340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,35 +248,41 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n-console.log(partnerChat,\n-  reffer_by)\n+  console.log(\n+    reffer_by)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n-      <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"normal\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-                ? agent_id\n-                : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        <AddNotesConversation\n-          handleMessageSubmit={handleMessageSubmit}\n-          onInputChange={onInputChange}\n-          state={state}\n-          errors={errors}\n-          handleBulkFileChange={handleBulkFileChange}\n-          handleRemoveFile={handleRemoveFile}\n-          fileNames={fileNames}\n-          setState={setState}\n-        />\n-      </div>\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container col-md-6\">\n+          <p className=\"text center\">\n+            Please assign a partner first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n       {/*  <div className=\"chat-container col-md-6\">\n         <MessageList\n           data={allData.filter((item) => item.followup_status === \"private\")}\n           loginuser={\n"
                },
                {
                    "date": 1711012536265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,300 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container d-flex justify-content-center\">\n+          <p className=\"text center\">\n+            Please assign a partner first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711012586351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,313 +253,14 @@\n     reffer_by)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center\">\n-          <p className=\"text center\">\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center\">\n+          <p className=\"text-center\">\n             Please assign a partner first.\n           </p>\n         </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n \n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\"chat-container col-md-6\">\n-          <p className=\"text center\">\n-            Please assign a partner first.\n-          </p>\n-        </div>\n         : <div className=\"chat-container col-md-6\">\n           <MessageList\n             data={allData.filter((item) => item.followup_status === \"normal\")}\n             loginuser={\n"
                },
                {
                    "date": 1711012592026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,300 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center\">\n+          <p className=\"text-center\">\n+            Please assign a partner first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711012609474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n     reffer_by)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center\">\n+        ? <div className=\" d-flex justify-content-center align-items-center\">\n           <p className=\"text-center\">\n             Please assign a partner first.\n           </p>\n         </div>\n@@ -297,305 +297,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center\">\n-          <p className=\"text-center\">\n-            Please assign a partner first.\n-          </p>\n-        </div>\n-\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1711012621863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,300 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center\">\n+          <p className=\"text-center\">\n+            Please assign a partner first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711012941316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,300 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        \"partner\", // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            Please assign a partner first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711174386898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: \"normal\",\n+    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            Please assign a partner first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711174577000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            Please assign a partner first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711174658060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            Please assign a partner first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711174814508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            Please assign a {type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711175069356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"||reffer_by === undefined\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            Please assign a {type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711175084619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\"||reffer_by === undefined||!reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            Please assign a {type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711175216312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711175229209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711175860575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"\",\"\",\"\",assignusertype);\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711176396522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,301 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try { \n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711176741182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n   const GetNotesData = async () => {\n     try { \n       let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n       if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n+        setAllData(res.data.data.data);\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n       }\n     } catch (err) {\n"
                },
                {
                    "date": 1711176764655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,9 @@\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try { \n       let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      console.log(res.data.statu)\n       if (res.data.status === (1 || \"1\")) {\n         setAllData(res.data.data.data);\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n@@ -298,3613 +299,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"\",\"\",\"\",assignusertype);\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"||reffer_by === undefined||!reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            Please assign a {type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"||reffer_by === undefined\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            Please assign a {type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            Please assign a {type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type);\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            Please assign a partner first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            Please assign a partner first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            Please assign a partner first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            Please assign a partner first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center\">\n-          <p className=\"text-center\">\n-            Please assign a partner first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: \"normal\",\n-    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"partner\");\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        \"partner\", // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\"\n-        ? <div className=\" d-flex justify-content-center align-items-center\">\n-          <p className=\"text-center\">\n-            Please assign a partner first.\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1711176794711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try { \n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      console.log(res.statu)\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data);\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711176814996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try { \n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      console.log(res.status)\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data);\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711176846674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try { \n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      console.log(res.data)\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data);\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711176878877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try { \n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      console.log(res.data.status)\n+      if (res.data.status === (1 || \"1\")) {\n+        setAllData(res.data.data.data);\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711176906628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try { \n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      console.log(res.data.status)\n+      if (res.data.status === 1 ||res.data.status === \"1\") {\n+        setAllData(res.data.data.data);\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711176934548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try { \n       let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.data.status)\n+      console.log(res.data.status === 1 ,res.data.status === \"1\")\n       if (res.data.status === 1 ||res.data.status === \"1\") {\n         setAllData(res.data.data.data);\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n@@ -299,1514 +299,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try { \n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.data.status)\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data);\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try { \n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.data)\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data);\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try { \n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.status)\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data);\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try { \n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.statu)\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data);\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try { \n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.data.statu)\n-      if (res.data.status === (1 || \"1\")) {\n-        setAllData(res.data.data.data);\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1711177204467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     try { \n       let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n       console.log(res.data.status === 1 ,res.data.status === \"1\")\n       if (res.data.status === 1 ||res.data.status === \"1\") {\n-        setAllData(res.data.data.data);\n+        setAllData(res.data.data);\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n       }\n     } catch (err) {\n"
                },
                {
                    "date": 1711177242368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try { \n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      console.log(res.data.data)\n+      if (res.data.status === 1 ||res.data.status === \"1\") {\n+        setAllData(res.data.data);\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711177266308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     try { \n       let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n       console.log(res.data.data)\n       if (res.data.status === 1 ||res.data.status === \"1\") {\n-        setAllData(res.data.data);\n+        setAllData(res.data.data.data);\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n       }\n     } catch (err) {\n@@ -299,306 +299,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try { \n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.data.status === 1 ,res.data.status === \"1\")\n-      if (res.data.status === 1 ||res.data.status === \"1\") {\n-        setAllData(res.data.data);\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1711177359647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try { \n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n+      console.log(res.data.data.data)\n+      if (res.data.status === 1 ||res.data.status === \"1\") {\n+        setAllData(res.data.data.data);\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711177398054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,303 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type, \"\", \"\", \"DESC\", \"created_on\", \"\", assignusertype);\n+      console.log(res.data.data.data)\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data);\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={type === \"partnerChat\" ?\n+              allData : allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1711177446317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,11 +89,10 @@\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n       let res = await GetCommentsAndAssign(\"\", userId, \"\", type, \"\", \"\", \"DESC\", \"created_on\", \"\", assignusertype);\n-      console.log(res.data.data.data)\n       if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data);\n+        setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n       }\n     } catch (err) {\n@@ -300,608 +299,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try { \n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.data.data.data)\n-      if (res.data.status === 1 ||res.data.status === \"1\") {\n-        setAllData(res.data.data.data);\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try { \n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type,\"\",\"\",\"DESC\",\"created_on\",\"\",assignusertype);\n-      console.log(res.data.data)\n-      if (res.data.status === 1 ||res.data.status === \"1\") {\n-        setAllData(res.data.data.data);\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n-        </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1711177454651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n+    useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\"\", userId, \"\", type, \"\", \"\", \"DESC\", \"created_on\", \"\", assignusertype);\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        toast.success(\"Message sent Successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(\n+    reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+          </p>\n+        </div>\n+        : <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={type === \"partnerChat\" ?\n+              allData : allData.filter((item) => item.followup_status === \"normal\")}\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712035578928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   userName,\n   assignusertype,\n   partnerChat,\n   reffer_by,\n-  type\n+  type,\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n@@ -21,9 +21,12 @@\n   // INITIAL STATE ASSIGNMENT\n   const initialFormState = {\n     name: \"\",\n     status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n     subject: \"\",\n     message: \"\",\n     DocUrl: \"\",\n   };\n@@ -33,14 +36,14 @@\n       (value) =>\n         (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n           ? \"Message is required\"\n           : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n+          ? \"Message can not have a number.\"\n+          : value.length < 2\n+          ? \"Message should have 2 or more letters\"\n+          : /[^A-Za-z 0-9]/g.test(value)\n+          ? \"Cannot use special character \"\n+          : \"\",\n     ],\n     // status: [\n     //   (value) =>\n     //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n@@ -56,10 +59,14 @@\n     //       : null,\n     // ],\n   };\n   // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n \n   // Admin details\n   let admin_id = localStorage.getItem(\"admin_id\");\n   let admin_type = localStorage.getItem(\"admin_type\");\n@@ -88,9 +95,20 @@\n   }, [apicall]);\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type, \"\", \"\", \"DESC\", \"created_on\", \"\", assignusertype);\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        userId,\n+        \"\",\n+        type,\n+        \"\",\n+        \"\",\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype\n+      );\n       if (res.data.status === 1 || res.data.status === \"1\") {\n         setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n         setAllData([]);\n@@ -107,10 +125,10 @@\n       let res = await ADocAnnotation(\n         user_type === \"admin\"\n           ? admin_id\n           : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n+          ? agent_id\n+          : employee_id, //Sender id\n         \"\", //doc id\n         userId, //assigne dUserId\n         userEmail, //assigne email\n         state.subject, //subject\n@@ -128,12 +146,12 @@\n         user_type === \"admin\" ? admin_email : user_email, //Sender email,\n         \"\"\n       );\n       if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n         setApiCall(true);\n         setState(initialFormState);\n         setFileNames(\"\");\n       }\n@@ -217,10 +235,11 @@\n         const encoded = await convertToBase64(file);\n         const base64Name = encoded.base64;\n \n         // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n+          base64Name.split(\";\")[1]\n+        }`;\n \n         // Use DocRealName as the key for DocFile\n         DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n         fileList.push({\n@@ -249,28 +268,34 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n-  console.log(\n-    reffer_by)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by ? (\n+        <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n           <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n+            {user_type === \"agent\"\n+              ? \"Admin is not assigned.\"\n+              : ` Please assign a ${\n+                  type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n           </p>\n         </div>\n-        : <div className=\"chat-container col-md-6\">\n+      ) : (\n+        <div className=\"chat-container col-md-6\">\n           <MessageList\n-            data={type === \"partnerChat\" ?\n-              allData : allData.filter((item) => item.followup_status === \"normal\")}\n+            data={\n+              type === \"partnerChat\"\n+                ? allData\n+                : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n             loginuser={\n               user_type === \"admin\"\n                 ? admin_id\n                 : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n+                ? agent_id\n+                : employee_id\n             }\n             loginusertype={user_type === \"admin\" ? admin_type : user_type}\n           />\n           <AddNotesConversation\n@@ -282,311 +307,10 @@\n             handleRemoveFile={handleRemoveFile}\n             fileNames={fileNames}\n             setState={setState}\n           />\n-        </div>}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate: type === \"partnerChat\" ? \"\" : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState /*, setErrors*/, onInputChange, errors,/* validate*/ } =\n-    useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\"\", userId, \"\", type, \"\", \"\", \"DESC\", \"created_on\", \"\", assignusertype);\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        toast.success(\"Message sent Successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(\n-    reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        ? <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\" ? \"Admin is not assigned.\" : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"} first.`}\n-          </p>\n         </div>\n-        : <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={type === \"partnerChat\" ?\n-              allData : allData.filter((item) => item.followup_status === \"normal\")}\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>}\n+      )}\n       {/*  <div className=\"chat-container col-md-6\">\n         <MessageList\n           data={allData.filter((item) => item.followup_status === \"private\")}\n           loginuser={\n"
                },
                {
                    "date": 1712119894434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,330 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type,\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(10);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          ? \"Message can not have a number.\"\n+          : value.length < 2\n+          ? \"Message should have 2 or more letters\"\n+          : /[^A-Za-z 0-9]/g.test(value)\n+          ? \"Cannot use special character \"\n+          : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        userId,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+          ? agent_id\n+          : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        \"\"\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n+          base64Name.split(\";\")[1]\n+        }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by ? (\n+        <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\"\n+              ? \"Admin is not assigned.\"\n+              : ` Please assign a ${\n+                  type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+          </p>\n+        </div>\n+      ) : (\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              type === \"partnerChat\"\n+                ? allData\n+                : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                ? agent_id\n+                : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+            recordsPerPage={recordsPerPage}\n+             setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+      )}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712120113442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(10);\n+  const [recordsPerPage, setRecordsPerPage] = useState(20);\n   // INITIAL STATE ASSIGNMENT\n   const initialFormState = {\n     name: \"\",\n     status: type === \"partnerChat\" ? \"\" : \"normal\",\n"
                },
                {
                    "date": 1712127438352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,331 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type,\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(20);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          ? \"Message can not have a number.\"\n+          : value.length < 2\n+          ? \"Message should have 2 or more letters\"\n+          : /[^A-Za-z 0-9]/g.test(value)\n+          ? \"Cannot use special character \"\n+          : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        userId,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+          ? agent_id\n+          : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n+          base64Name.split(\";\")[1]\n+        }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by ? (\n+        <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\"\n+              ? \"Admin is not assigned.\"\n+              : ` Please assign a ${\n+                  type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+          </p>\n+        </div>\n+      ) : (\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              type === \"partnerChat\"\n+                ? allData\n+                : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                ? agent_id\n+                : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+            recordsPerPage={recordsPerPage}\n+             setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+      )}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712127449595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   assignusertype,\n   partnerChat,\n   reffer_by,\n   type,\n+  assigned_by_id\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n"
                },
                {
                    "date": 1712127825361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,662 +329,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type,\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(20);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        userId,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        assignusertype\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by ? (\n-        <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\"\n-              ? \"Admin is not assigned.\"\n-              : ` Please assign a ${\n-                  type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-          </p>\n-        </div>\n-      ) : (\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              type === \"partnerChat\"\n-                ? allData\n-                : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                ? agent_id\n-                : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-            recordsPerPage={recordsPerPage}\n-             setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-      )}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type,\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        userId,\n-        \"\",\n-        type,\n-        \"\",\n-        \"\",\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        assignusertype\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        \"\"\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by ? (\n-        <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\"\n-              ? \"Admin is not assigned.\"\n-              : ` Please assign a ${\n-                  type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-          </p>\n-        </div>\n-      ) : (\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              type === \"partnerChat\"\n-                ? allData\n-                : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                ? agent_id\n-                : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-      )}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712129335541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,331 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  assigned_by_id,\n+  type,\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(20);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          ? \"Message can not have a number.\"\n+          : value.length < 2\n+          ? \"Message should have 2 or more letters\"\n+          : /[^A-Za-z 0-9]/g.test(value)\n+          ? \"Cannot use special character \"\n+          : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        userId,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+          ? agent_id\n+          : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n+          base64Name.split(\";\")[1]\n+        }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id ? (\n+        <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+          <p className=\"text-center\">\n+            {user_type === \"agent\"\n+              ? \"Admin is not assigned.\"\n+              : ` Please assign a ${\n+                  type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+          </p>\n+        </div>\n+      ) : (\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              type === \"partnerChat\"\n+                ? allData\n+                : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                ? agent_id\n+                : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+            recordsPerPage={recordsPerPage}\n+             setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+      )}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712129586883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,11 @@\n   userEmail,\n   userName,\n   assignusertype,\n   partnerChat,\n-  assigned_by_id,\n+  reffer_by,\n   type,\n+  assigned_by_id\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n@@ -36,14 +37,14 @@\n       (value) =>\n         (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n           ? \"Message is required\"\n           : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n     ],\n     // status: [\n     //   (value) =>\n     //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n@@ -125,10 +126,10 @@\n       let res = await ADocAnnotation(\n         user_type === \"admin\"\n           ? admin_id\n           : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n+            ? agent_id\n+            : employee_id, //Sender id\n         \"\", //doc id\n         userId, //assigne dUserId\n         userEmail, //assigne email\n         state.subject, //subject\n@@ -236,11 +237,10 @@\n         const encoded = await convertToBase64(file);\n         const base64Name = encoded.base64;\n \n         // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n \n         // Use DocRealName as the key for DocFile\n         DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n         fileList.push({\n@@ -271,49 +271,50 @@\n     }\n   };\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n-      {assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id ? (\n-        <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\"\n-              ? \"Admin is not assigned.\"\n-              : ` Please assign a ${\n-                  type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+      {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n+        : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n                 } first.`}\n-          </p>\n-        </div>\n-      ) : (\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              type === \"partnerChat\"\n-                ? allData\n-                : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                ? agent_id\n-                : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-            recordsPerPage={recordsPerPage}\n-             setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-      )}\n+            </p>\n+          </div>\n+        ) : (\n+          <div className=\"chat-container col-md-6\">\n+            <MessageList\n+              data={\n+                type === \"partnerChat\"\n+                  ? allData\n+                  : allData.filter((item) => item.followup_status === \"normal\")\n+              }\n+              loginuser={\n+                user_type === \"admin\"\n+                  ? admin_id\n+                  : user_type === \"agent\"\n+                    ? agent_id\n+                    : employee_id\n+              }\n+              loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+              recordsPerPage={recordsPerPage}\n+              setRecordsPerPage={setRecordsPerPage}\n+            />\n+            <AddNotesConversation\n+              handleMessageSubmit={handleMessageSubmit}\n+              onInputChange={onInputChange}\n+              state={state}\n+              errors={errors}\n+              handleBulkFileChange={handleBulkFileChange}\n+              handleRemoveFile={handleRemoveFile}\n+              fileNames={fileNames}\n+              setState={setState}\n+            />\n+          </div>\n+        )}\n       {/*  <div className=\"chat-container col-md-6\">\n         <MessageList\n           data={allData.filter((item) => item.followup_status === \"private\")}\n           loginuser={\n"
                },
                {
                    "date": 1712129625749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,8 +269,9 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n+  console.log(type === \"partnerChat\",assigned_by_id,reffer_by)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n         : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n@@ -329,336 +330,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type,\n-  assigned_by_id\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(20);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Message can not have a number.\"\n-          : value.length < 2\n-          ? \"Message should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        userId,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        assignusertype\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-          ? agent_id\n-          : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {reffer_by === \"0\" || reffer_by === undefined || !reffer_by ? (\n-        <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-          <p className=\"text-center\">\n-            {user_type === \"agent\"\n-              ? \"Admin is not assigned.\"\n-              : ` Please assign a ${\n-                  type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-          </p>\n-        </div>\n-      ) : (\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              type === \"partnerChat\"\n-                ? allData\n-                : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                ? agent_id\n-                : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-            recordsPerPage={recordsPerPage}\n-             setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-      )}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712133501176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,334 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type,\n+  assigned_by_id\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(20);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        userId,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log(type === \"partnerChat\",assigned_by_id,reffer_by)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {/* {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n+        : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) : */}\n+         (\n+          <div className=\"chat-container col-md-6\">\n+            <MessageList\n+              data={\n+                type === \"partnerChat\"\n+                  ? allData\n+                  : allData.filter((item) => item.followup_status === \"normal\")\n+              }\n+              loginuser={\n+                user_type === \"admin\"\n+                  ? admin_id\n+                  : user_type === \"agent\"\n+                    ? agent_id\n+                    : employee_id\n+              }\n+              loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+              recordsPerPage={recordsPerPage}\n+              setRecordsPerPage={setRecordsPerPage}\n+            />\n+            <AddNotesConversation\n+              handleMessageSubmit={handleMessageSubmit}\n+              onInputChange={onInputChange}\n+              state={state}\n+              errors={errors}\n+              handleBulkFileChange={handleBulkFileChange}\n+              handleRemoveFile={handleRemoveFile}\n+              fileNames={fileNames}\n+              setState={setState}\n+            />\n+          </div>\n+        )}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712133507833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,8 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n-  console.log(type === \"partnerChat\",assigned_by_id,reffer_by)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {/* {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n         : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n@@ -331,337 +330,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type,\n-  assigned_by_id\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(20);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        userId,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        assignusertype\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  console.log(type === \"partnerChat\",assigned_by_id,reffer_by)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n-        : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) : (\n-          <div className=\"chat-container col-md-6\">\n-            <MessageList\n-              data={\n-                type === \"partnerChat\"\n-                  ? allData\n-                  : allData.filter((item) => item.followup_status === \"normal\")\n-              }\n-              loginuser={\n-                user_type === \"admin\"\n-                  ? admin_id\n-                  : user_type === \"agent\"\n-                    ? agent_id\n-                    : employee_id\n-              }\n-              loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-              recordsPerPage={recordsPerPage}\n-              setRecordsPerPage={setRecordsPerPage}\n-            />\n-            <AddNotesConversation\n-              handleMessageSubmit={handleMessageSubmit}\n-              onInputChange={onInputChange}\n-              state={state}\n-              errors={errors}\n-              handleBulkFileChange={handleBulkFileChange}\n-              handleRemoveFile={handleRemoveFile}\n-              fileNames={fileNames}\n-              setState={setState}\n-            />\n-          </div>\n-        )}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712133529687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,10 @@\n               fileNames={fileNames}\n               setState={setState}\n             />\n           </div>\n-        )}\n+        )\n+        {/* } */}\n       {/*  <div className=\"chat-container col-md-6\">\n         <MessageList\n           data={allData.filter((item) => item.followup_status === \"private\")}\n           loginuser={\n"
                },
                {
                    "date": 1712133547291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,334 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type,\n+  assigned_by_id\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(20);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        userId,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {/* {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n+        : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) : */}\n+         \n+          <div className=\"chat-container col-md-6\">\n+            <MessageList\n+              data={\n+                type === \"partnerChat\"\n+                  ? allData\n+                  : allData.filter((item) => item.followup_status === \"normal\")\n+              }\n+              loginuser={\n+                user_type === \"admin\"\n+                  ? admin_id\n+                  : user_type === \"agent\"\n+                    ? agent_id\n+                    : employee_id\n+              }\n+              loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+              recordsPerPage={recordsPerPage}\n+              setRecordsPerPage={setRecordsPerPage}\n+            />\n+            <AddNotesConversation\n+              handleMessageSubmit={handleMessageSubmit}\n+              onInputChange={onInputChange}\n+              state={state}\n+              errors={errors}\n+              handleBulkFileChange={handleBulkFileChange}\n+              handleRemoveFile={handleRemoveFile}\n+              fileNames={fileNames}\n+              setState={setState}\n+            />\n+          </div>\n+        \n+        {/* } */}\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712133649940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,8 +269,9 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n+  console.log(assigned_by_id)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {/* {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n         : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n@@ -331,338 +332,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type,\n-  assigned_by_id\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(20);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        userId,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        assignusertype\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {/* {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n-        : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) : */}\n-         (\n-          <div className=\"chat-container col-md-6\">\n-            <MessageList\n-              data={\n-                type === \"partnerChat\"\n-                  ? allData\n-                  : allData.filter((item) => item.followup_status === \"normal\")\n-              }\n-              loginuser={\n-                user_type === \"admin\"\n-                  ? admin_id\n-                  : user_type === \"agent\"\n-                    ? agent_id\n-                    : employee_id\n-              }\n-              loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-              recordsPerPage={recordsPerPage}\n-              setRecordsPerPage={setRecordsPerPage}\n-            />\n-            <AddNotesConversation\n-              handleMessageSubmit={handleMessageSubmit}\n-              onInputChange={onInputChange}\n-              state={state}\n-              errors={errors}\n-              handleBulkFileChange={handleBulkFileChange}\n-              handleRemoveFile={handleRemoveFile}\n-              fileNames={fileNames}\n-              setState={setState}\n-            />\n-          </div>\n-        )\n-        {/* } */}\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712133695197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,10 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n-  console.log(assigned_by_id)\n+  console.log(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n+  : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {/* {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n         : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n"
                },
                {
                    "date": 1712134107129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,10 @@\n   assignusertype,\n   partnerChat,\n   reffer_by,\n   type,\n-  assigned_by_id\n+  assigned_by_id,\n+  page\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n@@ -269,14 +270,13 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n-  console.log(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n-  : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n+\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n-      {/* {(type === \"partnerChat\" ? assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id\n-        : reffer_by === \"0\" || reffer_by === undefined || !reffer_by)\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n         ? (\n           <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n             <p className=\"text-center\">\n               {user_type === \"agent\"\n@@ -284,41 +284,41 @@\n                 : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n                 } first.`}\n             </p>\n           </div>\n-        ) : */}\n-         \n-          <div className=\"chat-container col-md-6\">\n-            <MessageList\n-              data={\n-                type === \"partnerChat\"\n-                  ? allData\n-                  : allData.filter((item) => item.followup_status === \"normal\")\n-              }\n-              loginuser={\n-                user_type === \"admin\"\n-                  ? admin_id\n-                  : user_type === \"agent\"\n-                    ? agent_id\n-                    : employee_id\n-              }\n-              loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-              recordsPerPage={recordsPerPage}\n-              setRecordsPerPage={setRecordsPerPage}\n-            />\n-            <AddNotesConversation\n-              handleMessageSubmit={handleMessageSubmit}\n-              onInputChange={onInputChange}\n-              state={state}\n-              errors={errors}\n-              handleBulkFileChange={handleBulkFileChange}\n-              handleRemoveFile={handleRemoveFile}\n-              fileNames={fileNames}\n-              setState={setState}\n-            />\n-          </div>\n-        \n-        {/* } */}\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              type === \"partnerChat\"\n+                ? allData\n+                : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n       {/*  <div className=\"chat-container col-md-6\">\n         <MessageList\n           data={allData.filter((item) => item.followup_status === \"private\")}\n           loginuser={\n"
                },
                {
                    "date": 1712134313361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,336 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChat,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(20);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChat) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        userId,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              type === \"partnerChat\"\n+                ? allData\n+                : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712134946805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n }) {\n   const [allData, setAllData] = useState([]);\n   const [apicall, setApiCall] = useState([]);\n   const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(20);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n   // INITIAL STATE ASSIGNMENT\n   const initialFormState = {\n     name: \"\",\n     status: type === \"partnerChat\" ? \"\" : \"normal\",\n@@ -333,340 +333,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(20);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        userId,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        assignusertype\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              type === \"partnerChat\"\n-                ? allData\n-                : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712137021329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,336 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        userId,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        userId, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        assignusertype, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              type === \"partnerChat\"\n+                ? allData\n+                : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712137713900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   const [recordsPerPage, setRecordsPerPage] = useState(30);\n   // INITIAL STATE ASSIGNMENT\n   const initialFormState = {\n     name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n     nxtfollowupdate:\n       type === \"partnerChat\"\n         ? \"\"\n         : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n@@ -289,11 +289,12 @@\n \n         <div className=\"chat-container col-md-6\">\n           <MessageList\n             data={\n-              type === \"partnerChat\"\n-                ? allData\n-                : allData.filter((item) => item.followup_status === \"normal\")\n+              // type === \"partnerChat\"\n+              //   ? \n+                allData\n+                // : allData.filter((item) => item.followup_status === \"normal\")\n             }\n             loginuser={\n               user_type === \"admin\"\n                 ? admin_id\n@@ -333,340 +334,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChat,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChat) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        userId,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        assignusertype\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              type === \"partnerChat\"\n-                ? allData\n-                : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712139023841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n           : user_type === \"agent\"\n             ? agent_id\n             : employee_id, //Sender id\n         \"\", //doc id\n-        userId, //assigne dUserId\n+        page === \"employeeProfile\" ? assigned_by_id : userId, //assigne dUserId\n         userEmail, //assigne email\n         state.subject, //subject\n         state.message, //Comment\n         0, //x_axis\n@@ -291,10 +291,10 @@\n           <MessageList\n             data={\n               // type === \"partnerChat\"\n               //   ? \n-                allData\n-                // : allData.filter((item) => item.followup_status === \"normal\")\n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n             }\n             loginuser={\n               user_type === \"admin\"\n                 ? admin_id\n"
                },
                {
                    "date": 1712139207134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,17 +99,18 @@\n   const GetNotesData = async () => {\n     try {\n       let res = await GetCommentsAndAssign(\n         \"\",\n-        userId,\n+        assigned_by_id,\n         \"\",\n         type,\n         \"1\",\n         recordsPerPage,\n         \"DESC\",\n         \"created_on\",\n         \"\",\n-        assignusertype\n+        assignusertype,\n+        userId\n       );\n       if (res.data.status === 1 || res.data.status === \"1\") {\n         setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n"
                },
                {
                    "date": 1712140412582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        assigned_by_id,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        assignusertype,\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        user_type, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712140985187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,10 +107,10 @@\n         recordsPerPage,\n         \"DESC\",\n         \"created_on\",\n         \"\",\n-        assignusertype,\n-        userId\n+        user_type,\n+        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id,\n       );\n       if (res.data.status === 1 || res.data.status === \"1\") {\n         setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n@@ -335,342 +335,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        assigned_by_id,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        assignusertype,\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        page === \"employeeProfile\" ? assigned_by_id : userId, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        assignusertype, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712141097371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,18 +99,18 @@\n   const GetNotesData = async () => {\n     try {\n       let res = await GetCommentsAndAssign(\n         \"\",\n-        assigned_by_id,\n+        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id,\n         \"\",\n         type,\n         \"1\",\n         recordsPerPage,\n         \"DESC\",\n         \"created_on\",\n         \"\",\n         user_type,\n-        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id,\n+        userId\n       );\n       if (res.data.status === 1 || res.data.status === \"1\") {\n         setAllData(res.data.data.data.reverse());\n       } else if (res.data.message === \"Task data not found\") {\n"
                },
                {
                    "date": 1712141206372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        user_type, //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712141423460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712142252606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,680 +335,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        user_type, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        user_type,\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        user_type, //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712142946206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,17 +99,17 @@\n   const GetNotesData = async () => {\n     try {\n       let res = await GetCommentsAndAssign(\n         \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id,\n+        page === \"employeeProfile\" && user_type === \"admin\" ? \"\" : assigned_by_id,\n         \"\",\n         type,\n         \"1\",\n         recordsPerPage,\n         \"DESC\",\n         \"created_on\",\n         \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\",\n+        page === \"employeeProfile\" && user_type === \"admin\" ? \"\" : \"agent\",\n         userId\n       );\n       if (res.data.status === 1 || res.data.status === \"1\") {\n         setAllData(res.data.data.data.reverse());\n"
                },
                {
                    "date": 1712143286432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        page === \"employeeProfile\" && user_type === \"admin\" || user_type === \"agent\" ? \"\" : assigned_by_id,\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        page === \"employeeProfile\" && user_type === \"admin\" || user_type === \"agent\" ? \"\" : \"agent\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712143622398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,355 +99,17 @@\n   const GetNotesData = async () => {\n     try {\n       let res = await GetCommentsAndAssign(\n         \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" || user_type === \"agent\" ? \"\" : assigned_by_id,\n         \"\",\n+        \"\",\n         type,\n         \"1\",\n         recordsPerPage,\n         \"DESC\",\n         \"created_on\",\n         \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" || user_type === \"agent\" ? \"\" : \"agent\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n         \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" ? \"\" : assigned_by_id,\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        page === \"employeeProfile\" && user_type === \"admin\" ? \"\" : \"agent\",\n         userId\n       );\n       if (res.data.status === 1 || res.data.status === \"1\") {\n         setAllData(res.data.data.data.reverse());\n"
                },
                {
                    "date": 1712145077023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     if (partnerChatNav) {\n       const newUrl = window.location.pathname;\n       window.history.replaceState({}, document.title, newUrl);\n     }\n-  }, [apicall]);\n+  }, [apicall,partnerChatNav]);\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n       let res = await GetCommentsAndAssign(\n"
                },
                {
                    "date": 1712154260795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     if (partnerChatNav) {\n       const newUrl = window.location.pathname;\n       window.history.replaceState({}, document.title, newUrl);\n     }\n-  }, [apicall,partnerChatNav]);\n+  }, [apicall, partnerChatNav]);\n   //   Get the notes list\n   const GetNotesData = async () => {\n     try {\n       let res = await GetCommentsAndAssign(\n@@ -131,26 +131,27 @@\n           : user_type === \"agent\"\n             ? agent_id\n             : employee_id, //Sender id\n         \"\", //doc id\n-        page === \"employeeProfile\" && user_type === \"admin\" ? reffer_by : assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n+        (page === \"employeeProfile\" || (page === \"agentProfile\") && user_type === \"admin\" ? reffer_by :\n+          assigned_by_id, //assigne dUserId\n+          userEmail, //assigne email\n+          state.subject, //subject\n+          state.message, //Comment\n+          0, //x_axis\n+          0, //y_axis\n+          type, // Type for the api\n+          user_type === \"admin\" ? admin_type : user_type, //sender type\n+          user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+          userName, //assigned Admin or user Name,\n+          state.status, //follow up status\n+          state.nxtfollowupdate, //Next follow up date\n+          page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n+          state.DocUrl,\n+          user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+          userId,//employee id\n+          assigned_by_id//user admin assigned id\n+        );\n       if (res.data.message === \"task inserted successfully!\") {\n         // toast.success(\"Message sent Successfully\", {\n         //   position: toast.POSITION.TOP_RIGHT,\n         //   autoClose: 1000,\n"
                },
                {
                    "date": 1712154339486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,339 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall, partnerChatNav]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        \"\",\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        \"\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        (page === \"employeeProfile\" || page === \"agentProfile\") && user_type === \"admin\" ? reffer_by :\n+          assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        (page === \"employeeProfile\" || page === \"agentProfile\") && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712154723470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,339 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall, partnerChatNav]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        \"\",\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        \"\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? reffer_by :\n+          assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712154743580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,9 @@\n     }\n   };\n   // Submit function to add notes conversation\n   const handleMessageSubmit = async (e) => {\n+    console.log(page === \"employeeProfile\"&& user_type === \"admin\" || page === \"agentProfile\"&& user_type === \"admin\"?1:0)\n     e.preventDefault();\n     // if (validate()) {\n     try {\n       let res = await ADocAnnotation(\n@@ -336,682 +337,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall, partnerChatNav]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        \"\",\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        \"\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        (page === \"employeeProfile\" || page === \"agentProfile\") && user_type === \"admin\" ? reffer_by :\n-          assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        (page === \"employeeProfile\" || page === \"agentProfile\") && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall, partnerChatNav]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        \"\",\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        \"\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        (page === \"employeeProfile\" || (page === \"agentProfile\") && user_type === \"admin\" ? reffer_by :\n-          assigned_by_id, //assigne dUserId\n-          userEmail, //assigne email\n-          state.subject, //subject\n-          state.message, //Comment\n-          0, //x_axis\n-          0, //y_axis\n-          type, // Type for the api\n-          user_type === \"admin\" ? admin_type : user_type, //sender type\n-          user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-          userName, //assigned Admin or user Name,\n-          state.status, //follow up status\n-          state.nxtfollowupdate, //Next follow up date\n-          page === \"employeeProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n-          state.DocUrl,\n-          user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-          userId,//employee id\n-          assigned_by_id//user admin assigned id\n-        );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712154799978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     }\n   };\n   // Submit function to add notes conversation\n   const handleMessageSubmit = async (e) => {\n-    console.log(page === \"employeeProfile\"&& user_type === \"admin\" || page === \"agentProfile\"&& user_type === \"admin\"?1:0)\n+    console.log(page === \"employeeProfile\"&& user_type === \"admin\" , page === \"agentProfile\"&& user_type === \"admin\")\n     e.preventDefault();\n     // if (validate()) {\n     try {\n       let res = await ADocAnnotation(\n"
                },
                {
                    "date": 1712154840878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall, partnerChatNav]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        \"\",\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        \"\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    console.log(page === \"employeeProfile\"&& user_type === \"admin\" , page === \"agentProfile\"&& user_type === \"admin\",page,user_type)\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? reffer_by :\n+          assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712204139057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,341 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall, partnerChatNav]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        \"\",\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        \"\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    console.log(page === \"employeeProfile\" && user_type === \"admin\", page === \"agentProfile\" && user_type === \"admin\", page, user_type)\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        (page === \"employeeProfile\" && user_type === \"admin\")\n+          || (page === \"agentProfile\" && user_type === \"admin\") ? reffer_by :\n+          assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712204162491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,342 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall, partnerChatNav]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        \"\",\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        \"\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    console.log(page === \"employeeProfile\" && user_type === \"admin\", page === \"agentProfile\" && user_type === \"admin\", page, user_type)\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        (page === \"employeeProfile\" && user_type === \"admin\")\n+          || (page === \"agentProfile\" && user_type === \"admin\") ? reffer_by :\n+          assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        (page === \"employeeProfile\" && user_type === \"admin\" )\n+        || (page === \"agentProfile\" && user_type === \"admin\") ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712204725792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,351 +146,10 @@\n         user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n         userName, //assigned Admin or user Name,\n         state.status, //follow up status\n         state.nxtfollowupdate, //Next follow up date\n-        (page === \"employeeProfile\" && user_type === \"admin\" )\n-        || (page === \"agentProfile\" && user_type === \"admin\") ? \"agent\" : \"admin\", //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall, partnerChatNav]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        \"\",\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        \"\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    console.log(page === \"employeeProfile\" && user_type === \"admin\", page === \"agentProfile\" && user_type === \"admin\", page, user_type)\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n         (page === \"employeeProfile\" && user_type === \"admin\")\n-          || (page === \"agentProfile\" && user_type === \"admin\") ? reffer_by :\n-          assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n+          || (page === \"agentProfile\" && user_type === \"admin\") ? \"agent\" : \"admin\", //Assign user type,\n         state.DocUrl,\n         user_type === \"admin\" ? admin_email : user_email, //Sender email,\n         userId,//employee id\n         assigned_by_id//user admin assigned id\n@@ -620,9 +279,9 @@\n \n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        : assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n         ? (\n           <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n             <p className=\"text-center\">\n               {user_type === \"agent\"\n@@ -680,684 +339,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall, partnerChatNav]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        \"\",\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        \"\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    console.log(page === \"employeeProfile\"&& user_type === \"admin\" , page === \"agentProfile\"&& user_type === \"admin\",page,user_type)\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? reffer_by :\n-          assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall, partnerChatNav]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        \"\",\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        \"\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    console.log(page === \"employeeProfile\"&& user_type === \"admin\" , page === \"agentProfile\"&& user_type === \"admin\")\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? reffer_by :\n-          assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        page === \"employeeProfile\" && user_type === \"admin\" || page === \"agentProfile\" && user_type === \"admin\" ? \"agent\" : \"admin\", //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712204744872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,343 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall, partnerChatNav]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        \"\",\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        \"\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    console.log(page === \"employeeProfile\" && user_type === \"admin\", page === \"agentProfile\" && user_type === \"admin\", page, user_type)\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        (page === \"employeeProfile\" && user_type === \"admin\")\n+          || (page === \"agentProfile\" && user_type === \"admin\") ? reffer_by :\n+          assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        (page === \"employeeProfile\" && user_type === \"admin\")\n+          || (page === \"agentProfile\" && user_type === \"admin\") ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" ?\n+        reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712204901381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,11 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n-\n+console.log((page === \"employeeProfile\" ?\n+reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+: assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)?\"p\":\"o\",page,reffer_by,assigned_by_id)\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {(page === \"employeeProfile\" ?\n         reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n@@ -340,346 +342,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall, partnerChatNav]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        \"\",\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        \"\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    console.log(page === \"employeeProfile\" && user_type === \"admin\", page === \"agentProfile\" && user_type === \"admin\", page, user_type)\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        (page === \"employeeProfile\" && user_type === \"admin\")\n-          || (page === \"agentProfile\" && user_type === \"admin\") ? reffer_by :\n-          assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        (page === \"employeeProfile\" && user_type === \"admin\")\n-          || (page === \"agentProfile\" && user_type === \"admin\") ? \"agent\" : \"admin\", //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ? reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                },
                {
                    "date": 1712205095744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,345 @@\n+import React, { useState, useEffect } from \"react\";\n+import MessageList from \"./MessageList\";\n+import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n+import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n+import useValidation from \"./useValidation\";\n+import moment from \"moment\";\n+import { toast } from \"react-toastify\";\n+export default function AgentConversation({\n+  userId,\n+  userEmail,\n+  userName,\n+  assignusertype,\n+  partnerChatNav,\n+  reffer_by,\n+  type,\n+  assigned_by_id,\n+  page\n+}) {\n+  const [allData, setAllData] = useState([]);\n+  const [apicall, setApiCall] = useState([]);\n+  const [fileNames, setFileNames] = useState([]);\n+  const [recordsPerPage, setRecordsPerPage] = useState(30);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    name: \"\",\n+    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n+    nxtfollowupdate:\n+      type === \"partnerChat\"\n+        ? \"\"\n+        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n+    subject: \"\",\n+    message: \"\",\n+    DocUrl: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    message: [\n+      (value) =>\n+        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n+          ? \"Message is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Message can not have a number.\"\n+            : value.length < 2\n+              ? \"Message should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    // status: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n+    // ],\n+    // subject: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n+    // ],\n+    // nxtfollowupdate: [\n+    //   (value) =>\n+    //     value === \"\" || value.trim() === \"\"\n+    //       ? \"Next follow Up Date is required\"\n+    //       : null,\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const {\n+    state,\n+    setState /*, setErrors*/,\n+    onInputChange,\n+    errors /* validate*/,\n+  } = useValidation(initialFormState, validators);\n+\n+  // Admin details\n+  let admin_id = localStorage.getItem(\"admin_id\");\n+  let admin_type = localStorage.getItem(\"admin_type\");\n+  let admin_name = localStorage.getItem(\"admin\");\n+  let admin_email = localStorage.getItem(\"admin_email\");\n+\n+  // User details\n+  let user_type = localStorage.getItem(\"userType\");\n+  let user_name = localStorage.getItem(\"name\");\n+  let employee_id = localStorage.getItem(\"employee_id\");\n+  let user_email = localStorage.getItem(\"email\");\n+  //Agent details\n+  let agent_id = localStorage.getItem(\"agent_id\");\n+\n+  //   Render data\n+  useEffect(() => {\n+    GetNotesData();\n+    if (apicall === true) {\n+      setApiCall(false);\n+    }\n+    //Condition to clear docid from url after navigation from notification\n+    if (partnerChatNav) {\n+      const newUrl = window.location.pathname;\n+      window.history.replaceState({}, document.title, newUrl);\n+    }\n+  }, [apicall, partnerChatNav]);\n+  //   Get the notes list\n+  const GetNotesData = async () => {\n+    try {\n+      let res = await GetCommentsAndAssign(\n+        \"\",\n+        \"\",\n+        \"\",\n+        type,\n+        \"1\",\n+        recordsPerPage,\n+        \"DESC\",\n+        \"created_on\",\n+        \"\",\n+        \"\",\n+        userId\n+      );\n+      if (res.data.status === 1 || res.data.status === \"1\") {\n+        setAllData(res.data.data.data.reverse());\n+      } else if (res.data.message === \"Task data not found\") {\n+        setAllData([]);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // Submit function to add notes conversation\n+  const handleMessageSubmit = async (e) => {\n+    console.log(page === \"employeeProfile\" && user_type === \"admin\", page === \"agentProfile\" && user_type === \"admin\", page, user_type)\n+    e.preventDefault();\n+    // if (validate()) {\n+    try {\n+      let res = await ADocAnnotation(\n+        user_type === \"admin\"\n+          ? admin_id\n+          : user_type === \"agent\"\n+            ? agent_id\n+            : employee_id, //Sender id\n+        \"\", //doc id\n+        (page === \"employeeProfile\" && user_type === \"admin\")\n+          || (page === \"agentProfile\" && user_type === \"admin\") ? reffer_by :\n+          assigned_by_id, //assigne dUserId\n+        userEmail, //assigne email\n+        state.subject, //subject\n+        state.message, //Comment\n+        0, //x_axis\n+        0, //y_axis\n+        type, // Type for the api\n+        user_type === \"admin\" ? admin_type : user_type, //sender type\n+        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n+        userName, //assigned Admin or user Name,\n+        state.status, //follow up status\n+        state.nxtfollowupdate, //Next follow up date\n+        (page === \"employeeProfile\" && user_type === \"admin\")\n+          || (page === \"agentProfile\" && user_type === \"admin\") ? \"agent\" : \"admin\", //Assign user type,\n+        state.DocUrl,\n+        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n+        userId,//employee id\n+        assigned_by_id//user admin assigned id\n+      );\n+      if (res.data.message === \"task inserted successfully!\") {\n+        // toast.success(\"Message sent Successfully\", {\n+        //   position: toast.POSITION.TOP_RIGHT,\n+        //   autoClose: 1000,\n+        // });\n+        setApiCall(true);\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+      //   console.log(res, \"This is the response\");\n+    } catch (err) {\n+      console.log(err);\n+      if (err.response.data.message === \"required fields cannot be blank\") {\n+        toast.error(\" Please try again later.\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setState(initialFormState);\n+        setFileNames(\"\");\n+      }\n+    }\n+    // }\n+  };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  /*On change fnction to upload bulk document in 1 array*/\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n+        fileList.push({\n+          // type: \"notes\",\n+          docName: DocRealName,\n+          docUrl: DocFile,\n+        });\n+      }\n+      let newFileNames = [];\n+      newFileNames.push(DocRealName);\n+      // Store the object of files\n+      setState({ ...state, DocUrl: fileList });\n+      setFileNames(newFileNames);\n+      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n+      // setShowSaveDoc(true);\n+    }\n+  };\n+\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...state.DocUrl };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setState({ ...state, DocUrl: newFileBase });\n+    setFileNames(newFileNames);\n+    if (newFileNames) {\n+      setState({ ...state, DocUrl: \"\" });\n+    }\n+  };\n+  console.log((page === \"employeeProfile\" ?\n+    reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+    : assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id) ? \"p\" : \"o\", page, reffer_by, assigned_by_id)\n+  return (\n+    <div className=\"chat_box_container bg-white row m-0\">\n+      {(page === \"employeeProfile\" && user_type === \"admin\" ?\n+        reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n+        : assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n+        ? (\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n+            <p className=\"text-center\">\n+              {user_type === \"agent\"\n+                ? \"Admin is not assigned.\"\n+                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n+                } first.`}\n+            </p>\n+          </div>\n+        ) :\n+\n+        <div className=\"chat-container col-md-6\">\n+          <MessageList\n+            data={\n+              // type === \"partnerChat\"\n+              //   ? \n+              allData\n+              // : allData.filter((item) => item.followup_status === \"normal\")\n+            }\n+            loginuser={\n+              user_type === \"admin\"\n+                ? admin_id\n+                : user_type === \"agent\"\n+                  ? agent_id\n+                  : employee_id\n+            }\n+            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n+            recordsPerPage={recordsPerPage}\n+            setRecordsPerPage={setRecordsPerPage}\n+          />\n+          <AddNotesConversation\n+            handleMessageSubmit={handleMessageSubmit}\n+            onInputChange={onInputChange}\n+            state={state}\n+            errors={errors}\n+            handleBulkFileChange={handleBulkFileChange}\n+            handleRemoveFile={handleRemoveFile}\n+            fileNames={fileNames}\n+            setState={setState}\n+          />\n+        </div>\n+\n+      }\n+      {/*  <div className=\"chat-container col-md-6\">\n+        <MessageList\n+          data={allData.filter((item) => item.followup_status === \"private\")}\n+          loginuser={\n+            user_type === \"admin\"\n+              ? admin_id\n+              : user_type === \"agent\"\n+              ? agent_id\n+              : employee_id\n+          }\n+          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n+        />\n+        </div>*/}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1712208576654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,11 +275,9 @@\n     if (newFileNames) {\n       setState({ ...state, DocUrl: \"\" });\n     }\n   };\n-  console.log((page === \"employeeProfile\" ?\n-    reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-    : assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id) ? \"p\" : \"o\", page, reffer_by, assigned_by_id)\n+\n   return (\n     <div className=\"chat_box_container bg-white row m-0\">\n       {(page === \"employeeProfile\" && user_type === \"admin\" ?\n         reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n@@ -342,349 +340,4 @@\n         </div>*/}\n     </div>\n   );\n }\n-import React, { useState, useEffect } from \"react\";\n-import MessageList from \"./MessageList\";\n-import { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\n-import AddNotesConversation from \"../forms/admin/AddNotesConversation\";\n-import useValidation from \"./useValidation\";\n-import moment from \"moment\";\n-import { toast } from \"react-toastify\";\n-export default function AgentConversation({\n-  userId,\n-  userEmail,\n-  userName,\n-  assignusertype,\n-  partnerChatNav,\n-  reffer_by,\n-  type,\n-  assigned_by_id,\n-  page\n-}) {\n-  const [allData, setAllData] = useState([]);\n-  const [apicall, setApiCall] = useState([]);\n-  const [fileNames, setFileNames] = useState([]);\n-  const [recordsPerPage, setRecordsPerPage] = useState(30);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    name: \"\",\n-    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n-    nxtfollowupdate:\n-      type === \"partnerChat\"\n-        ? \"\"\n-        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n-    subject: \"\",\n-    message: \"\",\n-    DocUrl: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    message: [\n-      (value) =>\n-        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n-          ? \"Message is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-            ? \"Message can not have a number.\"\n-            : value.length < 2\n-              ? \"Message should have 2 or more letters\"\n-              : /[^A-Za-z 0-9]/g.test(value)\n-                ? \"Cannot use special character \"\n-                : \"\",\n-    ],\n-    // status: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n-    // ],\n-    // subject: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n-    // ],\n-    // nxtfollowupdate: [\n-    //   (value) =>\n-    //     value === \"\" || value.trim() === \"\"\n-    //       ? \"Next follow Up Date is required\"\n-    //       : null,\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const {\n-    state,\n-    setState /*, setErrors*/,\n-    onInputChange,\n-    errors /* validate*/,\n-  } = useValidation(initialFormState, validators);\n-\n-  // Admin details\n-  let admin_id = localStorage.getItem(\"admin_id\");\n-  let admin_type = localStorage.getItem(\"admin_type\");\n-  let admin_name = localStorage.getItem(\"admin\");\n-  let admin_email = localStorage.getItem(\"admin_email\");\n-\n-  // User details\n-  let user_type = localStorage.getItem(\"userType\");\n-  let user_name = localStorage.getItem(\"name\");\n-  let employee_id = localStorage.getItem(\"employee_id\");\n-  let user_email = localStorage.getItem(\"email\");\n-  //Agent details\n-  let agent_id = localStorage.getItem(\"agent_id\");\n-\n-  //   Render data\n-  useEffect(() => {\n-    GetNotesData();\n-    if (apicall === true) {\n-      setApiCall(false);\n-    }\n-    //Condition to clear docid from url after navigation from notification\n-    if (partnerChatNav) {\n-      const newUrl = window.location.pathname;\n-      window.history.replaceState({}, document.title, newUrl);\n-    }\n-  }, [apicall, partnerChatNav]);\n-  //   Get the notes list\n-  const GetNotesData = async () => {\n-    try {\n-      let res = await GetCommentsAndAssign(\n-        \"\",\n-        \"\",\n-        \"\",\n-        type,\n-        \"1\",\n-        recordsPerPage,\n-        \"DESC\",\n-        \"created_on\",\n-        \"\",\n-        \"\",\n-        userId\n-      );\n-      if (res.data.status === 1 || res.data.status === \"1\") {\n-        setAllData(res.data.data.data.reverse());\n-      } else if (res.data.message === \"Task data not found\") {\n-        setAllData([]);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // Submit function to add notes conversation\n-  const handleMessageSubmit = async (e) => {\n-    console.log(page === \"employeeProfile\" && user_type === \"admin\", page === \"agentProfile\" && user_type === \"admin\", page, user_type)\n-    e.preventDefault();\n-    // if (validate()) {\n-    try {\n-      let res = await ADocAnnotation(\n-        user_type === \"admin\"\n-          ? admin_id\n-          : user_type === \"agent\"\n-            ? agent_id\n-            : employee_id, //Sender id\n-        \"\", //doc id\n-        (page === \"employeeProfile\" && user_type === \"admin\")\n-          || (page === \"agentProfile\" && user_type === \"admin\") ? reffer_by :\n-          assigned_by_id, //assigne dUserId\n-        userEmail, //assigne email\n-        state.subject, //subject\n-        state.message, //Comment\n-        0, //x_axis\n-        0, //y_axis\n-        type, // Type for the api\n-        user_type === \"admin\" ? admin_type : user_type, //sender type\n-        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n-        userName, //assigned Admin or user Name,\n-        state.status, //follow up status\n-        state.nxtfollowupdate, //Next follow up date\n-        (page === \"employeeProfile\" && user_type === \"admin\")\n-          || (page === \"agentProfile\" && user_type === \"admin\") ? \"agent\" : \"admin\", //Assign user type,\n-        state.DocUrl,\n-        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n-        userId,//employee id\n-        assigned_by_id//user admin assigned id\n-      );\n-      if (res.data.message === \"task inserted successfully!\") {\n-        // toast.success(\"Message sent Successfully\", {\n-        //   position: toast.POSITION.TOP_RIGHT,\n-        //   autoClose: 1000,\n-        // });\n-        setApiCall(true);\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-      //   console.log(res, \"This is the response\");\n-    } catch (err) {\n-      console.log(err);\n-      if (err.response.data.message === \"required fields cannot be blank\") {\n-        toast.error(\" Please try again later.\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        setState(initialFormState);\n-        setFileNames(\"\");\n-      }\n-    }\n-    // }\n-  };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  /*On change fnction to upload bulk document in 1 array*/\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n-          }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n-        fileList.push({\n-          // type: \"notes\",\n-          docName: DocRealName,\n-          docUrl: DocFile,\n-        });\n-      }\n-      let newFileNames = [];\n-      newFileNames.push(DocRealName);\n-      // Store the object of files\n-      setState({ ...state, DocUrl: fileList });\n-      setFileNames(newFileNames);\n-      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n-      // setShowSaveDoc(true);\n-    }\n-  };\n-\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...state.DocUrl };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setState({ ...state, DocUrl: newFileBase });\n-    setFileNames(newFileNames);\n-    if (newFileNames) {\n-      setState({ ...state, DocUrl: \"\" });\n-    }\n-  };\n-console.log((page === \"employeeProfile\" ?\n-reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-: assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)?\"p\":\"o\",page,reffer_by,assigned_by_id)\n-  return (\n-    <div className=\"chat_box_container bg-white row m-0\">\n-      {(page === \"employeeProfile\" ?\n-        reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n-        : assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n-        ? (\n-          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n-            <p className=\"text-center\">\n-              {user_type === \"agent\"\n-                ? \"Admin is not assigned.\"\n-                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n-                } first.`}\n-            </p>\n-          </div>\n-        ) :\n-\n-        <div className=\"chat-container col-md-6\">\n-          <MessageList\n-            data={\n-              // type === \"partnerChat\"\n-              //   ? \n-              allData\n-              // : allData.filter((item) => item.followup_status === \"normal\")\n-            }\n-            loginuser={\n-              user_type === \"admin\"\n-                ? admin_id\n-                : user_type === \"agent\"\n-                  ? agent_id\n-                  : employee_id\n-            }\n-            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n-            recordsPerPage={recordsPerPage}\n-            setRecordsPerPage={setRecordsPerPage}\n-          />\n-          <AddNotesConversation\n-            handleMessageSubmit={handleMessageSubmit}\n-            onInputChange={onInputChange}\n-            state={state}\n-            errors={errors}\n-            handleBulkFileChange={handleBulkFileChange}\n-            handleRemoveFile={handleRemoveFile}\n-            fileNames={fileNames}\n-            setState={setState}\n-          />\n-        </div>\n-\n-      }\n-      {/*  <div className=\"chat-container col-md-6\">\n-        <MessageList\n-          data={allData.filter((item) => item.followup_status === \"private\")}\n-          loginuser={\n-            user_type === \"admin\"\n-              ? admin_id\n-              : user_type === \"agent\"\n-              ? agent_id\n-              : employee_id\n-          }\n-          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n-        />\n-        </div>*/}\n-    </div>\n-  );\n-}\n"
                }
            ],
            "date": 1708937504046,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport MessageList from \"./MessageList\";\nimport { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\nimport AddNotesConversation from \"../forms/admin/AddNotesConversation\";\nimport useValidation from \"./useValidation\";\nimport moment from \"moment\";\nimport { toast } from \"react-toastify\";\nexport default function AgentConversation({\n  userId,\n  userEmail,\n  userName,\n  assignusertype,\n}) {\n  const [allData, setAllData] = useState([]);\n  const [apicall, setApiCall] = useState([]);\n  const [fileNames, setFileNames] = useState([]);\n\n  // INITIAL STATE ASSIGNMENT\n  const initialFormState = {\n    name: \"\",\n    status: \"normal\",\n    nxtfollowupdate: moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n    subject: \"\",\n    message: \"\",\n    DocUrl: \"\",\n  };\n  // VALIDATION CONDITIONS\n  const validators = {\n    message: [\n      (value) =>\n        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n          ? \"Message is required\"\n          : /[-]?\\d+(\\.\\d+)?/.test(value)\n          ? \"Message can not have a number.\"\n          : value.length < 2\n          ? \"Message should have 2 or more letters\"\n          : /[^A-Za-z 0-9]/g.test(value)\n          ? \"Cannot use special character \"\n          : \"\",\n    ],\n    // status: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n    // ],\n    // subject: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n    // ],\n    // nxtfollowupdate: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\"\n    //       ? \"Next follow Up Date is required\"\n    //       : null,\n    // ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState /*, setErrors*/, onInputChange, errors, validate } =\n    useValidation(initialFormState, validators);\n\n  // Admin details\n  let admin_id = localStorage.getItem(\"admin_id\");\n  let admin_type = localStorage.getItem(\"admin_type\");\n  let admin_name = localStorage.getItem(\"admin\");\n  let admin_email = localStorage.getItem(\"admin_email\");\n\n  // User details\n  let user_type = localStorage.getItem(\"userType\");\n  let user_name = localStorage.getItem(\"name\");\n  let employee_id = localStorage.getItem(\"employee_id\");\n  let user_email = localStorage.getItem(\"email\");\n  //Agent details\n  let agent_id = localStorage.getItem(\"agent_id\");\n\n  //   Render data\n  useEffect(() => {\n    GetNotesData();\n    if (apicall === true) {\n      setApiCall(false);\n    }\n  }, [apicall]);\n  //   Get the notes list\n  const GetNotesData = async () => {\n    try {\n      let res = await GetCommentsAndAssign(\"\", userId, \"\", \"notes\");\n      if (res.data.status === (1 || \"1\")) {\n        setAllData(res.data.data.data.reverse());\n      } else if (res.data.message === \"Task data not found\") {\n        setAllData([]);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  // Submit function to add notes conversation\n  const handleMessageSubmit = async (e) => {\n    e.preventDefault();\n    // if (validate()) {\n    try {\n      let res = await ADocAnnotation(\n        user_type === \"admin\"\n          ? admin_id\n          : user_type === \"agent\"\n          ? agent_id\n          : employee_id, //Sender id\n        \"\", //doc id\n        userId, //assigne dUserId\n        userEmail, //assigne email\n        state.subject, //subject\n        state.message, //Comment\n        0, //x_axis\n        0, //y_axis\n        \"partner\", // Type for the api\n        user_type === \"admin\" ? admin_type : user_type, //sender type\n        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n        userName, //assigned Admin or user Name,\n        state.status, //follow up status\n        state.nxtfollowupdate, //Next follow up date\n        assignusertype, //Assign user type,\n        state.DocUrl,\n        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n        \"\"\n      );\n      if (res.data.message === \"task inserted successfully!\") {\n        toast.success(\"Message sent Successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setApiCall(true);\n        setState(initialFormState);\n        setFileNames(\"\");\n      }\n      //   console.log(res, \"This is the response\");\n    } catch (err) {\n      console.log(err);\n      if (err.response.data.message === \"required fields cannot be blank\") {\n        toast.error(\" Please try again later.\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setState(initialFormState);\n        setFileNames(\"\");\n      }\n    }\n    // }\n  };\n  /*Function to convert file to base64 */\n  const convertToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.addEventListener(\"load\", () => {\n        resolve({ base64: fileReader.result });\n      });\n      fileReader.readAsDataURL(file);\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n  /*On change fnction to upload bulk document in 1 array*/\n  const handleBulkFileChange = async (event, id) => {\n    const files = event.target.files;\n    {\n      // Check the number of files selected\n      if (files.length > 15) {\n        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        return;\n      }\n\n      // Continue with file validation and processing\n      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n      const maxSize = 1024 * 8000; // 8 MB\n\n      const fileList = [];\n      let DocRealName;\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n\n        // Check file type\n        const fileType = `.${file.name.split(\".\").pop()}`;\n        if (!allowedTypes.includes(fileType.toLowerCase())) {\n          toast.error(\n            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            }\n          );\n          return;\n        }\n\n        // Check file size\n        if (file.size > maxSize) {\n          toast.error(\n            `Document size can't be more than 8 MB for file '${file.name}'`,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            }\n          );\n          return;\n        }\n\n        // Read file as data URL\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        const encoded = await convertToBase64(file);\n        const base64Name = encoded.base64;\n\n        // Construct file object with base64 data\n        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n          base64Name.split(\";\")[1]\n        }`;\n\n        // Use DocRealName as the key for DocFile\n        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n        fileList.push({\n          // type: \"notes\",\n          docName: DocRealName,\n          docUrl: DocFile,\n        });\n      }\n      let newFileNames = [];\n      newFileNames.push(DocRealName);\n      // Store the object of files\n      setState({ ...state, DocUrl: fileList });\n      setFileNames(newFileNames);\n      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n      // setShowSaveDoc(true);\n    }\n  };\n\n  //Function to Remove any attechment\n  const handleRemoveFile = (fileName) => {\n    const newFileBase = { ...state.DocUrl };\n    const newFileNames = fileNames.filter((name) => name !== fileName);\n    delete newFileBase[fileName];\n    setState({ ...state, DocUrl: newFileBase });\n    setFileNames(newFileNames);\n    if (newFileNames) {\n      setState({ ...state, DocUrl: \"\" });\n    }\n  };\n\n  return (\n    <div className=\"chat_box_container bg-white row m-0\">\n      <div className=\"chat-container col-md-6\">\n        <MessageList\n          data={allData.filter((item) => item.followup_status === \"normal\")}\n          loginuser={\n            user_type === \"admin\"\n              ? admin_id\n              : user_type === \"agent\"\n              ? agent_id\n              : employee_id\n          }\n          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n        />\n        <AddNotesConversation\n          handleMessageSubmit={handleMessageSubmit}\n          onInputChange={onInputChange}\n          state={state}\n          errors={errors}\n          handleBulkFileChange={handleBulkFileChange}\n          handleRemoveFile={handleRemoveFile}\n          fileNames={fileNames}\n        />\n      </div>\n      {/*  <div className=\"chat-container col-md-6\">\n        <MessageList\n          data={allData.filter((item) => item.followup_status === \"private\")}\n          loginuser={\n            user_type === \"admin\"\n              ? admin_id\n              : user_type === \"agent\"\n              ? agent_id\n              : employee_id\n          }\n          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n        />\n        </div>*/}\n    </div>\n  );\n}\n"
        }
    ]
}