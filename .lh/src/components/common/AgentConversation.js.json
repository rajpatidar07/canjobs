{
    "sourceFile": "src/components/common/AgentConversation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713876875729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713876875729,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport MessageList from \"./MessageList\";\nimport { GetCommentsAndAssign, ADocAnnotation } from \"../../api/api\";\nimport AddNotesConversation from \"../forms/admin/AddNotesConversation\";\nimport useValidation from \"./useValidation\";\nimport moment from \"moment\";\nimport { toast } from \"react-toastify\";\nexport default function AgentConversation({\n  userId,\n  userEmail,\n  userName,\n  assignusertype,\n  partnerChatNav,\n  reffer_by,\n  type,\n  assigned_by_id,\n  page\n}) {\n  const [allData, setAllData] = useState([]);\n  const [apicall, setApiCall] = useState([]);\n  const [fileNames, setFileNames] = useState([]);\n  const [recordsPerPage, setRecordsPerPage] = useState(30);\n  // INITIAL STATE ASSIGNMENT\n  const initialFormState = {\n    name: \"\",\n    // status: type === \"partnerChat\" ? \"\" : \"normal\",\n    nxtfollowupdate:\n      type === \"partnerChat\"\n        ? \"\"\n        : moment().add(1, \"week\").format(\"YYYY-MM-DD\"),\n    subject: \"\",\n    message: \"\",\n    DocUrl: \"\",\n  };\n  // VALIDATION CONDITIONS\n  const validators = {\n    message: [\n      (value) =>\n        (value === \"\" || value.trim() === \"\") && state.DocUrl === \"\"\n          ? \"Message is required\"\n          : /[-]?\\d+(\\.\\d+)?/.test(value)\n            ? \"Message can not have a number.\"\n            : value.length < 2\n              ? \"Message should have 2 or more letters\"\n              : /[^A-Za-z 0-9]/g.test(value)\n                ? \"Cannot use special character \"\n                : \"\",\n    ],\n    // status: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\" ? \"status is required\" : null,\n    // ],\n    // subject: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\" ? \"subject is required\" : null,\n    // ],\n    // nxtfollowupdate: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\"\n    //       ? \"Next follow Up Date is required\"\n    //       : null,\n    // ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const {\n    state,\n    setState /*, setErrors*/,\n    onInputChange,\n    errors /* validate*/,\n  } = useValidation(initialFormState, validators);\n\n  // Admin details\n  let admin_id = localStorage.getItem(\"admin_id\");\n  let admin_type = localStorage.getItem(\"admin_type\");\n  let admin_name = localStorage.getItem(\"admin\");\n  let admin_email = localStorage.getItem(\"admin_email\");\n\n  // User details\n  let user_type = localStorage.getItem(\"userType\");\n  let user_name = localStorage.getItem(\"name\");\n  let employee_id = localStorage.getItem(\"employee_id\");\n  let user_email = localStorage.getItem(\"email\");\n  //Agent details\n  let agent_id = localStorage.getItem(\"agent_id\");\n\n  //   Render data\n  useEffect(() => {\n    GetNotesData();\n    if (apicall === true) {\n      setApiCall(false);\n    }\n    //Condition to clear docid from url after navigation from notification\n    if (partnerChatNav) {\n      const newUrl = window.location.pathname;\n      window.history.replaceState({}, document.title, newUrl);\n    }\n    // eslint-disable-next-line\n  }, [apicall, partnerChatNav, userId]);\n  //   Get the notes list\n  const GetNotesData = async () => {\n    try {\n      let res = await GetCommentsAndAssign(\n        \"\",\n        \"\",\n        \"\",\n        type,\n        \"1\",\n        recordsPerPage,\n        \"DESC\",\n        \"created_on\",\n        \"\",\n        \"\",\n        userId\n      );\n      if (res.data.status === 1 || res.data.status === \"1\") {\n        setAllData(res.data.data.data.reverse());\n      } else if (res.data.message === \"Task data not found\") {\n        setAllData([]);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  // Submit function to add notes conversation\n  const handleMessageSubmit = async (e) => {\n    e.preventDefault();\n    // if (validate()) {\n    try {\n      let res = await ADocAnnotation(\n        user_type === \"admin\"\n          ? admin_id\n          : user_type === \"agent\"\n            ? agent_id\n            : employee_id, //Sender id\n        \"\", //doc id\n        (page === \"employeeProfile\" && user_type === \"admin\")\n          || (page === \"agentProfile\" && user_type === \"admin\") ? reffer_by :\n          assigned_by_id, //assigne dUserId\n        userEmail, //assigne email\n        state.subject, //subject\n        state.message, //Comment\n        0, //x_axis\n        0, //y_axis\n        type, // Type for the api\n        user_type === \"admin\" ? admin_type : user_type, //sender type\n        user_type === \"admin\" || user_type === \"agent\" ? admin_name : user_name, //sender name,\n        userName, //assigned Admin or user Name,\n        state.status, //follow up status\n        state.nxtfollowupdate, //Next follow up date\n        (page === \"employeeProfile\" && user_type === \"admin\")\n          || (page === \"agentProfile\" && user_type === \"admin\") ? \"agent\" : \"admin\", //Assign user type,\n        state.DocUrl,\n        user_type === \"admin\" ? admin_email : user_email, //Sender email,\n        userId,//employee id\n        assigned_by_id//user admin assigned id\n      );\n      if (res.data.message === \"task inserted successfully!\") {\n        // toast.success(\"Message sent Successfully\", {\n        //   position: toast.POSITION.TOP_RIGHT,\n        //   autoClose: 1000,\n        // });\n        setApiCall(true);\n        setState(initialFormState);\n        setFileNames(\"\");\n      }\n      //   console.log(res, \"This is the response\");\n    } catch (err) {\n      console.log(err);\n      if (err.response.data.message === \"required fields cannot be blank\") {\n        toast.error(\" Please try again later.\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setState(initialFormState);\n        setFileNames(\"\");\n      }\n    }\n    // }\n  };\n  /*Function to convert file to base64 */\n  const convertToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.addEventListener(\"load\", () => {\n        resolve({ base64: fileReader.result });\n      });\n      fileReader.readAsDataURL(file);\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n  /*On change fnction to upload bulk document in 1 array*/\n  const handleBulkFileChange = async (event, id) => {\n    const files = event.target.files;\n    {\n      // Check the number of files selected\n      if (files.length > 15) {\n        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        return;\n      }\n\n      // Continue with file validation and processing\n      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n      const maxSize = 1024 * 8000; // 8 MB\n\n      const fileList = [];\n      let DocRealName;\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n\n        // Check file type\n        const fileType = `.${file.name.split(\".\").pop()}`;\n        if (!allowedTypes.includes(fileType.toLowerCase())) {\n          toast.error(\n            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            }\n          );\n          return;\n        }\n\n        // Check file size\n        if (file.size > maxSize) {\n          toast.error(\n            `Document size can't be more than 8 MB for file '${file.name}'`,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            }\n          );\n          return;\n        }\n\n        // Read file as data URL\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        const encoded = await convertToBase64(file);\n        const base64Name = encoded.base64;\n\n        // Construct file object with base64 data\n        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n          }`;\n\n        // Use DocRealName as the key for DocFile\n        DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\n        fileList.push({\n          // type: \"notes\",\n          docName: DocRealName,\n          docUrl: DocFile,\n        });\n      }\n      let newFileNames = [];\n      newFileNames.push(DocRealName);\n      // Store the object of files\n      setState({ ...state, DocUrl: fileList });\n      setFileNames(newFileNames);\n      // bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\n      // setShowSaveDoc(true);\n    }\n  };\n\n  //Function to Remove any attechment\n  const handleRemoveFile = (fileName) => {\n    const newFileBase = { ...state.DocUrl };\n    const newFileNames = fileNames.filter((name) => name !== fileName);\n    delete newFileBase[fileName];\n    setState({ ...state, DocUrl: newFileBase });\n    setFileNames(newFileNames);\n    if (newFileNames) {\n      setState({ ...state, DocUrl: \"\" });\n    }\n  };\n\n  return (\n    <div className=\"chat_box_container bg-white row m-0\">\n      {(page === \"employeeProfile\" && user_type === \"admin\" ?\n        reffer_by === null || reffer_by === \"0\" || reffer_by === undefined || !reffer_by\n        : assigned_by_id === null || assigned_by_id === \"0\" || assigned_by_id === undefined || !assigned_by_id)\n        ? (\n          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\n            <p className=\"text-center\">\n              {user_type === \"agent\"\n                ? \"Admin is not assigned.\"\n                : ` Please assign a ${type === \"partnerChat\" ? \"Admin\" : \"partner\"\n                } first.`}\n            </p>\n          </div>\n        ) :\n\n        <div className=\"chat-container col-md-6\">\n          <MessageList\n            data={\n              // type === \"partnerChat\"\n              //   ? \n              allData\n              // : allData.filter((item) => item.followup_status === \"normal\")\n            }\n            loginuser={\n              user_type === \"admin\"\n                ? admin_id\n                : user_type === \"agent\"\n                  ? agent_id\n                  : employee_id\n            }\n            loginusertype={user_type === \"admin\" ? \"admin\" : user_type}\n            recordsPerPage={recordsPerPage}\n            setRecordsPerPage={setRecordsPerPage}\n          />\n          <AddNotesConversation\n            handleMessageSubmit={handleMessageSubmit}\n            onInputChange={onInputChange}\n            state={state}\n            errors={errors}\n            handleBulkFileChange={handleBulkFileChange}\n            handleRemoveFile={handleRemoveFile}\n            fileNames={fileNames}\n            setState={setState}\n          />\n        </div>\n\n      }\n      {/*  <div className=\"chat-container col-md-6\">\n        <MessageList\n          data={allData.filter((item) => item.followup_status === \"private\")}\n          loginuser={\n            user_type === \"admin\"\n              ? admin_id\n              : user_type === \"agent\"\n              ? agent_id\n              : employee_id\n          }\n          loginusertype={user_type === \"admin\" ? admin_type : user_type}\n        />\n        </div>*/}\n    </div>\n  );\n}\n"
        }
    ]
}