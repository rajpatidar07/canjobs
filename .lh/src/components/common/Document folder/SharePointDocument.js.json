{
    "sourceFile": "src/components/common/Document folder/SharePointDocument.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1713603341318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713603686279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,50 +56,50 @@\n   };\r\n   const DocTypeData =\r\n     emp_user_type === \"employer\"\r\n       ? [\r\n-          \"Business T2\",\r\n-          \"Recent PD7A\",\r\n-          \"Business T4\",\r\n-          \"Business Incorporation Certificate\",\r\n-          \"Employment Contract\",\r\n-          \"Schedule A\",\r\n-          \"Signed Job Offer\",\r\n-          \"PD7A of year\",\r\n-          \"T2 Schedule 100 and 125\",\r\n-          \"Certificate of incorporation\",\r\n-          \"Business license\",\r\n-          \"T4 summary of year\",\r\n-          \"Request for Exception from English Language Requirement for LMIA Application\",\r\n-          \"CPA Attestation Letter\",\r\n-          \"Representative Submission Letter\",\r\n-        ]\r\n+        \"Business T2\",\r\n+        \"Recent PD7A\",\r\n+        \"Business T4\",\r\n+        \"Business Incorporation Certificate\",\r\n+        \"Employment Contract\",\r\n+        \"Schedule A\",\r\n+        \"Signed Job Offer\",\r\n+        \"PD7A of year\",\r\n+        \"T2 Schedule 100 and 125\",\r\n+        \"Certificate of incorporation\",\r\n+        \"Business license\",\r\n+        \"T4 summary of year\",\r\n+        \"Request for Exception from English Language Requirement for LMIA Application\",\r\n+        \"CPA Attestation Letter\",\r\n+        \"Representative Submission Letter\",\r\n+      ]\r\n       : [\r\n-          \"passport\",\r\n-          \"drivers_license\",\r\n-          \"photograph\",\r\n-          \"immigration_status\",\r\n-          \"lmia\",\r\n-          \"job_offer_letter\",\r\n-          \"provincial_nominee_letter\",\r\n-          \"proof_of_funds\",\r\n-          \"proof_of_employment\",\r\n-          \"marriage_certificate\",\r\n-          \"education_metric\",\r\n-          \"education_higher_secondary\",\r\n-          \"education_graduation\",\r\n-          \"education_post_graduation\",\r\n-          \"resume_or_cv\",\r\n-          \"ielts\",\r\n-          \"medical\",\r\n-          \"police_clearance\",\r\n-          \"refusal_letter\",\r\n-          \"Employment Contract\",\r\n-          \"Reference Letters\",\r\n-          \"Client Info\",\r\n-          \"Representative Submission Letter\",\r\n-          \"Bank Statement\",\r\n-        ];\r\n+        \"passport\",\r\n+        \"drivers_license\",\r\n+        \"photograph\",\r\n+        \"immigration_status\",\r\n+        \"lmia\",\r\n+        \"job_offer_letter\",\r\n+        \"provincial_nominee_letter\",\r\n+        \"proof_of_funds\",\r\n+        \"proof_of_employment\",\r\n+        \"marriage_certificate\",\r\n+        \"education_metric\",\r\n+        \"education_higher_secondary\",\r\n+        \"education_graduation\",\r\n+        \"education_post_graduation\",\r\n+        \"resume_or_cv\",\r\n+        \"ielts\",\r\n+        \"medical\",\r\n+        \"police_clearance\",\r\n+        \"refusal_letter\",\r\n+        \"Employment Contract\",\r\n+        \"Reference Letters\",\r\n+        \"Client Info\",\r\n+        \"Representative Submission Letter\",\r\n+        \"Bank Statement\",\r\n+      ];\r\n \r\n   /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n   const AllShareType = async () => {\r\n     setDocLoder(true);\r\n@@ -307,26 +307,59 @@\n     <>\r\n       {folderId ? (\r\n         <div className=\"document_section\">\r\n           {docPreview ? (\r\n-            \r\n-            docTypePage === \"adobe\"?\r\n-            <PreviewDocument\r\n-              docData={docSingleDate}\r\n-              docId={docId ? docId : folderID}\r\n-              userId={user_id}\r\n-              docFile={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n-              setDocPreview={setDocPreview}\r\n-              setDocSingleDate={setDocSingleDate}\r\n-              setFolderID={setFolderID}\r\n-            />\r\n-            :\r\n+\r\n             <div className=\"App-viewer\">\r\n-              <PdfViewerComponent\r\n-                document={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n-              />\r\n-                          </div>\r\n-\r\n+              <div className=\"row m-0 bg-white document_preview_box h-100vh overflow-hidden\">\r\n+                <div\r\n+                  className={`${user_type === \"admin\"\r\n+                    ? \"col-md-8 col-lg-8 col-sm-9\"\r\n+                    : \"col-md-12 col-lg-12 col-sm-12\"\r\n+                    } p-2 bg-dark`}\r\n+                >\r\n+                  <div className=\"back_btn_div\">\r\n+                    <Link\r\n+                      className=\"rounded-circle\"\r\n+                      style={{\r\n+                        position: \"absolute\",\r\n+                        top: 5,\r\n+                        left: 5,\r\n+                        background: \"#fff\",\r\n+                        width: 30,\r\n+                        height: 30,\r\n+                        zIndex: 9999,\r\n+                        display: \"flex\",\r\n+                        justifyContent: \"center\",\r\n+                        alignItems: \"center\",\r\n+                      }}\r\n+                      to=\"\"\r\n+                      onClick={() => {\r\n+                        setDocSingleDate(\"\");\r\n+                        setDocPreview(false);\r\n+                        setFolderID(docData.parentReference.id);\r\n+                      }}\r\n+                    >\r\n+                      <IoMdArrowBack />\r\n+                    </Link>\r\n+                  </div>\r\n+                  {docTypePage === \"adobe\" ?\r\n+                    <PreviewDocument\r\n+                      docData={docSingleDate}\r\n+                      docId={docId ? docId : folderID}\r\n+                      userId={user_id}\r\n+                      docFile={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n+                      setDocPreview={setDocPreview}\r\n+                      setDocSingleDate={setDocSingleDate}\r\n+                      setFolderID={setFolderID}\r\n+                    />\r\n+                    :\r\n+                    <PdfViewerComponent\r\n+                      document={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n+                    />}\r\n+                </div>\r\n+              </div>\r\n+            </div>\r\n           ) : (\r\n             <div className={\"document_container bg-white\"}>\r\n               <div className=\"row m-0 bg-white justify-content-between p-2\">\r\n                 {/* Breadcrumbs */}\r\n"
                },
                {
                    "date": 1713603731558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n   AddSharePointDOcument,\r\n } from \"../../../api/api\";\r\n import { Dropdown, Form } from \"react-bootstrap\";\r\n import SAlert from \"../../common/sweetAlert\";\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import { Link } from 'react-router-dom';\r\n+import { IoMdArrowBack } from \"react-icons/io\";\r\n import FolderList from \"./FolderList\";\r\n import { toast } from \"react-toastify\";\r\n // import DocSaveForm from \"./DocSaveForm\";\r\n import Loader from \"../loader\";\r\n@@ -311,9 +311,9 @@\n \r\n             <div className=\"App-viewer\">\r\n               <div className=\"row m-0 bg-white document_preview_box h-100vh overflow-hidden\">\r\n                 <div\r\n-                  className={`${user_type === \"admin\"\r\n+                  className={`${localStorage.getItem(\"userType\") === \"admin\"\r\n                     ? \"col-md-8 col-lg-8 col-sm-9\"\r\n                     : \"col-md-12 col-lg-12 col-sm-12\"\r\n                     } p-2 bg-dark`}\r\n                 >\r\n"
                },
                {
                    "date": 1713603765007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,9 +335,9 @@\n                       to=\"\"\r\n                       onClick={() => {\r\n                         setDocSingleDate(\"\");\r\n                         setDocPreview(false);\r\n-                        setFolderID(docData.parentReference.id);\r\n+                        setFolderID(docSingleDate.parentReference.id);\r\n                       }}\r\n                     >\r\n                       <IoMdArrowBack />\r\n                     </Link>\r\n"
                },
                {
                    "date": 1713603804692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,515 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import {\r\n+  /*getSharePointFoldersList,*/ DeleteFolderOrDocument,\r\n+  getFolderBreadcrumb,\r\n+  AddSharePointFolders,\r\n+  getSharePointParticularFolders,\r\n+  AddSharePointDOcument,\r\n+} from \"../../../api/api\";\r\n+import { Dropdown, Form } from \"react-bootstrap\";\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+import { Link } from 'react-router-dom';\r\n+import { IoMdArrowBack } from \"react-icons/io\";\r\n+import FolderList from \"./FolderList\";\r\n+import { toast } from \"react-toastify\";\r\n+// import DocSaveForm from \"./DocSaveForm\";\r\n+import Loader from \"../loader\";\r\n+import Breadcrumbs from \"./Breadcrumb\";\r\n+import EditDocNameFOrm from \"./EditDocNameFOrm\";\r\n+import PreviewDocument from \"./PreviewDocument\";\r\n+import PdfViewerComponent from \"../../PdfViewerComponent\";\r\n+export default function SharePointDocument({\r\n+  emp_user_type,\r\n+  user_id,\r\n+  folderId,\r\n+  notification,\r\n+  docId,\r\n+  docTypePage\r\n+}) {\r\n+  const [docTypeName, setDocTypeName] = useState(\"\");\r\n+  const [newType, setNewType] = useState(\"\");\r\n+  const [docFileBase, setDocFileBase] = useState(\"\");\r\n+  const [folderID, setFolderID] = useState(folderId);\r\n+  const [apiCall, setApiCall] = useState(false);\r\n+  const [saveBtn, setSaveBtn] = useState(false);\r\n+  const [loadingBtn, setLoadingBtn] = useState(false);\r\n+  const [breadcrumbData, setBreadcrumbData] = useState(\"\");\r\n+  const [docTypeList, setDocTypeList] = useState([]);\r\n+  const [showDropDown, setShowDropDown] = useState(false);\r\n+  const [editNameForm, setEditNameForm] = useState(false);\r\n+  const [docSingleDate, setDocSingleDate] = useState(\"\");\r\n+  const [docPreview, setDocPreview] = useState(false);\r\n+  const [docLoder, setDocLoder] = useState(false);\r\n+  const [docBreadCrumbLoder, setBreadCrumbLoder] = useState(false);\r\n+  /*delete state */\r\n+  const [deleteAlert, setDeleteAlert] = useState(false);\r\n+  const [deleteData, setDeleteData] = useState();\r\n+  /*To Show the delete alert box */\r\n+  const ShowDeleteAlert = (e) => {\r\n+    setDeleteData(e);\r\n+    setDeleteAlert(true);\r\n+  };\r\n+  /*To cancel the delete alert box */\r\n+  const CancelDelete = () => {\r\n+    setDeleteAlert(false);\r\n+    setEditNameForm(false);\r\n+  };\r\n+  const DocTypeData =\r\n+    emp_user_type === \"employer\"\r\n+      ? [\r\n+        \"Business T2\",\r\n+        \"Recent PD7A\",\r\n+        \"Business T4\",\r\n+        \"Business Incorporation Certificate\",\r\n+        \"Employment Contract\",\r\n+        \"Schedule A\",\r\n+        \"Signed Job Offer\",\r\n+        \"PD7A of year\",\r\n+        \"T2 Schedule 100 and 125\",\r\n+        \"Certificate of incorporation\",\r\n+        \"Business license\",\r\n+        \"T4 summary of year\",\r\n+        \"Request for Exception from English Language Requirement for LMIA Application\",\r\n+        \"CPA Attestation Letter\",\r\n+        \"Representative Submission Letter\",\r\n+      ]\r\n+      : [\r\n+        \"passport\",\r\n+        \"drivers_license\",\r\n+        \"photograph\",\r\n+        \"immigration_status\",\r\n+        \"lmia\",\r\n+        \"job_offer_letter\",\r\n+        \"provincial_nominee_letter\",\r\n+        \"proof_of_funds\",\r\n+        \"proof_of_employment\",\r\n+        \"marriage_certificate\",\r\n+        \"education_metric\",\r\n+        \"education_higher_secondary\",\r\n+        \"education_graduation\",\r\n+        \"education_post_graduation\",\r\n+        \"resume_or_cv\",\r\n+        \"ielts\",\r\n+        \"medical\",\r\n+        \"police_clearance\",\r\n+        \"refusal_letter\",\r\n+        \"Employment Contract\",\r\n+        \"Reference Letters\",\r\n+        \"Client Info\",\r\n+        \"Representative Submission Letter\",\r\n+        \"Bank Statement\",\r\n+      ];\r\n+\r\n+  /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+  const AllShareType = async () => {\r\n+    setDocLoder(true);\r\n+    setBreadCrumbLoder(true);\r\n+    try {\r\n+      // if (folderID) {\r\n+      let res = await getSharePointParticularFolders(\r\n+        user_id,\r\n+        emp_user_type,\r\n+        // docId ? folderId :\r\n+\r\n+        folderID\r\n+      );\r\n+      if (res.data.status === 1) {\r\n+        setDocPreview(false);\r\n+        setDocTypeList(res.data.data);\r\n+        setShowDropDown(false);\r\n+        setDocLoder(false);\r\n+        if (notification === \"yes\") {\r\n+          if (res.data.data.find((item) => item.id === docId)) {\r\n+            setDocPreview(true);\r\n+            console.log(\"object\");\r\n+            setDocSingleDate(res.data.data.find((item) => item.id === docId));\r\n+            const newUrl = window.location.pathname;\r\n+            window.history.replaceState({}, document.title, newUrl);\r\n+          }\r\n+        }\r\n+        // setFolderID(res.data.data[0].parentReference.id)\r\n+      } else if (res.data.data === \"No Documents Found\") {\r\n+        setDocTypeList([]);\r\n+        setShowDropDown(false);\r\n+        setDocLoder(false);\r\n+      }\r\n+      // } else {\r\n+      //     let res = await getSharePointFoldersList(user_id, emp_user_type)\r\n+      //     if (res.data.status === 1) {\r\n+      //         setDocTypeList(res.data.data)\r\n+      //     }\r\n+      // }\r\n+    } catch (Err) {\r\n+      console.log(Err);\r\n+      setShowDropDown(false);\r\n+      setDocLoder(false);\r\n+    }\r\n+    /*Api for breadcrumb */\r\n+    try {\r\n+      let res = await getFolderBreadcrumb(folderID);\r\n+      setBreadcrumbData(res.data.data);\r\n+      setShowDropDown(false);\r\n+      setBreadCrumbLoder(false);\r\n+    } catch (err) {\r\n+      setBreadcrumbData([]);\r\n+      console.log(err);\r\n+      setShowDropDown(false);\r\n+      setBreadCrumbLoder(false);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    AllShareType();\r\n+    // if (notification === \"yes\") {\r\n+    //     setDocPreview(true)\r\n+    // }\r\n+    if (apiCall === true) {\r\n+      setApiCall(false);\r\n+    }\r\n+  }, [folderID, apiCall, docId]);\r\n+  /*On change fnction to upload bulk document in 1 array*/\r\n+  const handleBulkFileChange = async (event, id) => {\r\n+    const files = event.target.files;\r\n+    {\r\n+      // Check the number of files selected\r\n+      if (files.length > 30) {\r\n+        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        return;\r\n+      }\r\n+\r\n+      // Continue with file validation and processing\r\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+      const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+      const filebseList = [];\r\n+      for (let i = 0; i < files.length; i++) {\r\n+        const file = files[i];\r\n+        // Check file type\r\n+        const fileType = `.${file.name.split(\".\").pop()}`;\r\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+          toast.error(\r\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Check file size\r\n+        if (file.size > maxSize) {\r\n+          toast.error(\r\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Read file as data URL\r\n+        const reader = new FileReader();\r\n+        reader.readAsDataURL(file);\r\n+        //For drive uploade\r\n+        filebseList.push(file);\r\n+      }\r\n+      // Store the object of files\r\n+      setDocFileBase(filebseList);\r\n+      setSaveBtn(true);\r\n+      //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+    }\r\n+  };\r\n+  //Document Save Function\r\n+  const SaveBulkDocument = async () => {\r\n+    setLoadingBtn(true);\r\n+    setShowDropDown(false);\r\n+    try {\r\n+      let res = await AddSharePointDOcument(\r\n+        user_id,\r\n+        emp_user_type,\r\n+        folderID,\r\n+        docTypeName,\r\n+        docFileBase\r\n+      );\r\n+      if (res.data.message === \"Document Upload\") {\r\n+        toast.success(`Document Uploaded successfully`, {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        setApiCall(true);\r\n+        setLoadingBtn(false);\r\n+        setSaveBtn(false);\r\n+        setShowDropDown(false);\r\n+      }\r\n+    } catch (err) {\r\n+      console.log(err);\r\n+      setLoadingBtn(false);\r\n+      setSaveBtn(false);\r\n+      setShowDropDown(false);\r\n+    }\r\n+  };\r\n+  /*Had folder function */\r\n+  const handleDocTypeChange = async (selectedType) => {\r\n+    setDocTypeName(selectedType);\r\n+    setShowDropDown(false);\r\n+    if (selectedType === \"other\") {\r\n+      // If \"other\" is selected, clear newType\r\n+      setNewType(\"\");\r\n+    } else {\r\n+      try {\r\n+        let res = await AddSharePointFolders(selectedType, folderID);\r\n+        if (\r\n+          res.data.data.name &&\r\n+          res.data.message === \"Folder created successfully!\"\r\n+        ) {\r\n+          toast.success(`Type Created successfully`, {\r\n+            position: toast.POSITION.TOP_RIGHT,\r\n+            autoClose: 1000,\r\n+          });\r\n+          setApiCall(true);\r\n+        } else if (res.data.data.error.message === \"Name already exists\") {\r\n+          toast.error(`Type Already exists`, {\r\n+            position: toast.POSITION.TOP_RIGHT,\r\n+            autoClose: 1000,\r\n+          });\r\n+        }\r\n+      } catch (Err) {\r\n+        console.log(Err);\r\n+      }\r\n+    }\r\n+  };\r\n+  /*Type folder name function */\r\n+  const handleNewTypeChange = (e) => {\r\n+    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, \"\");\r\n+    setNewType(value);\r\n+  };\r\n+  /*To call Api to delete Folder or document */\r\n+  async function DeleteSharepointDocument(id, type) {\r\n+    try {\r\n+      const responseData = await DeleteFolderOrDocument(id, type);\r\n+      if (responseData.data.message === \"Document deleted successfully!\") {\r\n+        toast.error(\"Document deleted successfully!\", {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        CancelDelete();\r\n+        setApiCall(true);\r\n+      }\r\n+    } catch (err) {\r\n+      console.log(err);\r\n+    }\r\n+  }\r\n+  return (\r\n+    <>\r\n+      {folderId ? (\r\n+        <div className=\"document_section\">\r\n+          {docPreview ? (\r\n+\r\n+            <div className=\"App-viewer\">\r\n+              <div className=\"row m-0 bg-white document_preview_box h-100vh overflow-hidden\">\r\n+                <div\r\n+                  className={` p-2 bg-dark col-md-12 col-lg-12 col-sm-12`}\r\n+                >\r\n+                  <div className=\"back_btn_div\">\r\n+                    <Link\r\n+                      className=\"rounded-circle\"\r\n+                      style={{\r\n+                        position: \"absolute\",\r\n+                        top: 5,\r\n+                        left: 5,\r\n+                        background: \"#fff\",\r\n+                        width: 30,\r\n+                        height: 30,\r\n+                        zIndex: 9999,\r\n+                        display: \"flex\",\r\n+                        justifyContent: \"center\",\r\n+                        alignItems: \"center\",\r\n+                      }}\r\n+                      to=\"\"\r\n+                      onClick={() => {\r\n+                        setDocSingleDate(\"\");\r\n+                        setDocPreview(false);\r\n+                        setFolderID(docSingleDate.parentReference.id);\r\n+                      }}\r\n+                    >\r\n+                      <IoMdArrowBack />\r\n+                    </Link>\r\n+                  </div>\r\n+                  {docTypePage === \"adobe\" ?\r\n+                    <PreviewDocument\r\n+                      docData={docSingleDate}\r\n+                      docId={docId ? docId : folderID}\r\n+                      userId={user_id}\r\n+                      docFile={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n+                      setDocPreview={setDocPreview}\r\n+                      setDocSingleDate={setDocSingleDate}\r\n+                      setFolderID={setFolderID}\r\n+                    />\r\n+                    :\r\n+                    <PdfViewerComponent\r\n+                      document={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n+                    />}\r\n+                </div>\r\n+              </div>\r\n+            </div>\r\n+          ) : (\r\n+            <div className={\"document_container bg-white\"}>\r\n+              <div className=\"row m-0 bg-white justify-content-between p-2\">\r\n+                {/* Breadcrumbs */}\r\n+                {docBreadCrumbLoder ? (\r\n+                  <ul className=\"breadcrumb\">\r\n+                    <li\r\n+                      className=\"breadcrumb-item \"\r\n+                      style={{ padding: 5, margin: 0, borderRadius: 3 }}\r\n+                    >\r\n+                      <span\r\n+                        className=\"spinner-grow spinner-grow-sm\"\r\n+                        role=\"status\"\r\n+                        aria-hidden=\"true\"\r\n+                      ></span>\r\n+                      <span>Loading...</span>\r\n+                    </li>\r\n+                  </ul>\r\n+                ) : (\r\n+                  <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID}\r\n+                  />\r\n+                )}\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=\"new_folder_create d-flex\">\r\n+                  {docTypeName === \"other\" ? (\r\n+                    <>\r\n+                      <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        height={34}\r\n+                        style={{ Height: 34 }}\r\n+                        onChange={handleNewTypeChange}\r\n+                        className=\"px-2\"\r\n+                      />\r\n+                      <button\r\n+                        className=\"btn btn-sm btn-primary\"\r\n+                        type=\"button\"\r\n+                        style={{ maxHeight: 34, minWidth: \"auto\" }}\r\n+                        onClick={() => handleDocTypeChange(newType)}\r\n+                      >\r\n+                        Save\r\n+                      </button>\r\n+                      <button\r\n+                        className=\"btn btn-sm btn-secondry\"\r\n+                        type=\"button\"\r\n+                        style={{ maxHeight: 34, minWidth: \"auto\" }}\r\n+                        onClick={() => setDocTypeName(\"\")}\r\n+                      >\r\n+                        Cancel\r\n+                      </button>\r\n+                    </>\r\n+                  ) : (\r\n+                    <Dropdown>\r\n+                      <Dropdown.Toggle\r\n+                        variant=\"secondary\"\r\n+                        size={\"sm\"}\r\n+                        style={{ maxHeight: 34 }}\r\n+                        id=\"dropdown-basic\"\r\n+                      >\r\n+                        + Add New Folder\r\n+                      </Dropdown.Toggle>\r\n+                      <Dropdown.Menu\r\n+                        style={{ height: \"400px\", overflowY: \"scroll\" }}\r\n+                      >\r\n+                        <Dropdown.Item\r\n+                          onClick={() => handleDocTypeChange(\"\")}\r\n+                          key={-1}\r\n+                        >\r\n+                          Select Folder Name\r\n+                        </Dropdown.Item>\r\n+                        {DocTypeData.map((item, index) => (\r\n+                          <Dropdown.Item\r\n+                            onClick={() => handleDocTypeChange(item)}\r\n+                            key={index}\r\n+                            className=\"text-capitalize\"\r\n+                          >\r\n+                            {item.replaceAll(\"_\", \" \")}\r\n+                          </Dropdown.Item>\r\n+                        ))}\r\n+                        <Dropdown.Item\r\n+                          onClick={() => handleDocTypeChange(\"other\")}\r\n+                        >\r\n+                          Other\r\n+                        </Dropdown.Item>\r\n+                      </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"row m-0 bg-white px-2 pb-2 justify-content-center\">\r\n+                {/* List of documents docTypeList */}\r\n+                {docLoder ? (\r\n+                  <div className=\"table-responsive main_table_div\">\r\n+                    <Loader />\r\n+                  </div>\r\n+                ) : (\r\n+                  <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert}\r\n+                    setDocPreview={setDocPreview}\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument}\r\n+                    setSaveBtn={setSaveBtn}\r\n+                    setDocFileBase={setDocFileBase}\r\n+                  />\r\n+                )}\r\n+              </div>\r\n+              {editNameForm && (\r\n+                <EditDocNameFOrm\r\n+                  userId={user_id}\r\n+                  name={docSingleDate.name}\r\n+                  docId={docSingleDate.id}\r\n+                  userType={emp_user_type}\r\n+                  show={editNameForm}\r\n+                  close={() => setEditNameForm(false)}\r\n+                  setApiCall={setApiCall}\r\n+                  EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+              )}\r\n+              <SAlert\r\n+                show={deleteAlert}\r\n+                title={deleteData ? deleteData.name : \"\"}\r\n+                text=\"Are you Sure you want to delete !\"\r\n+                onConfirm={() =>\r\n+                  DeleteSharepointDocument(\r\n+                    deleteData.id,\r\n+                    deleteData.folder ? \"folder\" : \"document\"\r\n+                  )\r\n+                }\r\n+                showCancelButton={true}\r\n+                onCancel={() => CancelDelete()}\r\n+              />\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+      ) : (\r\n+        <div className=\"chat_box_container bg-white row m-0\">\r\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\r\n+            Update the user profile to get a folder\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1713603847889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n \r\n             <div className=\"App-viewer\">\r\n               <div className=\"row m-0 bg-white document_preview_box h-100vh overflow-hidden\">\r\n                 <div\r\n-                  className={` p-2 bg-dark col-md-12 col-lg-12 col-sm-12`}\r\n+                  className={` p-2 col-md-12 col-lg-12 col-sm-12`}\r\n                 >\r\n                   <div className=\"back_btn_div\">\r\n                     <Link\r\n                       className=\"rounded-circle\"\r\n"
                },
                {
                    "date": 1713876927109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,516 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import {\r\n+  /*getSharePointFoldersList,*/ DeleteFolderOrDocument,\r\n+  getFolderBreadcrumb,\r\n+  AddSharePointFolders,\r\n+  getSharePointParticularFolders,\r\n+  AddSharePointDOcument,\r\n+} from \"../../../api/api\";\r\n+import { Dropdown, Form } from \"react-bootstrap\";\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+import { Link } from 'react-router-dom';\r\n+import { IoMdArrowBack } from \"react-icons/io\";\r\n+import FolderList from \"./FolderList\";\r\n+import { toast } from \"react-toastify\";\r\n+// import DocSaveForm from \"./DocSaveForm\";\r\n+import Loader from \"../loader\";\r\n+import Breadcrumbs from \"./Breadcrumb\";\r\n+import EditDocNameFOrm from \"./EditDocNameFOrm\";\r\n+import PreviewDocument from \"./PreviewDocument\";\r\n+import PdfViewerComponent from \"../../PdfViewerComponent\";\r\n+export default function SharePointDocument({\r\n+  emp_user_type,\r\n+  user_id,\r\n+  folderId,\r\n+  notification,\r\n+  docId,\r\n+  docTypePage\r\n+}) {\r\n+  const [docTypeName, setDocTypeName] = useState(\"\");\r\n+  const [newType, setNewType] = useState(\"\");\r\n+  const [docFileBase, setDocFileBase] = useState(\"\");\r\n+  const [folderID, setFolderID] = useState(folderId);\r\n+  const [apiCall, setApiCall] = useState(false);\r\n+  const [saveBtn, setSaveBtn] = useState(false);\r\n+  const [loadingBtn, setLoadingBtn] = useState(false);\r\n+  const [breadcrumbData, setBreadcrumbData] = useState(\"\");\r\n+  const [docTypeList, setDocTypeList] = useState([]);\r\n+  const [showDropDown, setShowDropDown] = useState(false);\r\n+  const [editNameForm, setEditNameForm] = useState(false);\r\n+  const [docSingleDate, setDocSingleDate] = useState(\"\");\r\n+  const [docPreview, setDocPreview] = useState(false);\r\n+  const [docLoder, setDocLoder] = useState(false);\r\n+  const [docBreadCrumbLoder, setBreadCrumbLoder] = useState(false);\r\n+  /*delete state */\r\n+  const [deleteAlert, setDeleteAlert] = useState(false);\r\n+  const [deleteData, setDeleteData] = useState();\r\n+  /*To Show the delete alert box */\r\n+  const ShowDeleteAlert = (e) => {\r\n+    setDeleteData(e);\r\n+    setDeleteAlert(true);\r\n+  };\r\n+  /*To cancel the delete alert box */\r\n+  const CancelDelete = () => {\r\n+    setDeleteAlert(false);\r\n+    setEditNameForm(false);\r\n+  };\r\n+  const DocTypeData =\r\n+    emp_user_type === \"employer\"\r\n+      ? [\r\n+        \"Business T2\",\r\n+        \"Recent PD7A\",\r\n+        \"Business T4\",\r\n+        \"Business Incorporation Certificate\",\r\n+        \"Employment Contract\",\r\n+        \"Schedule A\",\r\n+        \"Signed Job Offer\",\r\n+        \"PD7A of year\",\r\n+        \"T2 Schedule 100 and 125\",\r\n+        \"Certificate of incorporation\",\r\n+        \"Business license\",\r\n+        \"T4 summary of year\",\r\n+        \"Request for Exception from English Language Requirement for LMIA Application\",\r\n+        \"CPA Attestation Letter\",\r\n+        \"Representative Submission Letter\",\r\n+      ]\r\n+      : [\r\n+        \"passport\",\r\n+        \"drivers_license\",\r\n+        \"photograph\",\r\n+        \"immigration_status\",\r\n+        \"lmia\",\r\n+        \"job_offer_letter\",\r\n+        \"provincial_nominee_letter\",\r\n+        \"proof_of_funds\",\r\n+        \"proof_of_employment\",\r\n+        \"marriage_certificate\",\r\n+        \"education_metric\",\r\n+        \"education_higher_secondary\",\r\n+        \"education_graduation\",\r\n+        \"education_post_graduation\",\r\n+        \"resume_or_cv\",\r\n+        \"ielts\",\r\n+        \"medical\",\r\n+        \"police_clearance\",\r\n+        \"refusal_letter\",\r\n+        \"Employment Contract\",\r\n+        \"Reference Letters\",\r\n+        \"Client Info\",\r\n+        \"Representative Submission Letter\",\r\n+        \"Bank Statement\",\r\n+      ];\r\n+\r\n+  /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+  const AllShareType = async () => {\r\n+    setDocLoder(true);\r\n+    setBreadCrumbLoder(true);\r\n+    try {\r\n+      // if (folderID) {\r\n+      let res = await getSharePointParticularFolders(\r\n+        user_id,\r\n+        emp_user_type,\r\n+        // docId ? folderId :\r\n+\r\n+        folderID\r\n+      );\r\n+      if (res.data.status === 1) {\r\n+        setDocPreview(false);\r\n+        setDocTypeList(res.data.data);\r\n+        setShowDropDown(false);\r\n+        setDocLoder(false);\r\n+        if (notification === \"yes\") {\r\n+          if (res.data.data.find((item) => item.id === docId)) {\r\n+            setDocPreview(true);\r\n+            console.log(\"object\");\r\n+            setDocSingleDate(res.data.data.find((item) => item.id === docId));\r\n+            const newUrl = window.location.pathname;\r\n+            window.history.replaceState({}, document.title, newUrl);\r\n+          }\r\n+        }\r\n+        // setFolderID(res.data.data[0].parentReference.id)\r\n+      } else if (res.data.data === \"No Documents Found\") {\r\n+        setDocTypeList([]);\r\n+        setShowDropDown(false);\r\n+        setDocLoder(false);\r\n+      }\r\n+      // } else {\r\n+      //     let res = await getSharePointFoldersList(user_id, emp_user_type)\r\n+      //     if (res.data.status === 1) {\r\n+      //         setDocTypeList(res.data.data)\r\n+      //     }\r\n+      // }\r\n+    } catch (Err) {\r\n+      console.log(Err);\r\n+      setShowDropDown(false);\r\n+      setDocLoder(false);\r\n+    }\r\n+    /*Api for breadcrumb */\r\n+    try {\r\n+      let res = await getFolderBreadcrumb(folderID);\r\n+      setBreadcrumbData(res.data.data);\r\n+      setShowDropDown(false);\r\n+      setBreadCrumbLoder(false);\r\n+    } catch (err) {\r\n+      setBreadcrumbData([]);\r\n+      console.log(err);\r\n+      setShowDropDown(false);\r\n+      setBreadCrumbLoder(false);\r\n+    }\r\n+  };\r\n+  useEffect(() => {\r\n+    AllShareType();\r\n+    // if (notification === \"yes\") {\r\n+    //     setDocPreview(true)\r\n+    // }\r\n+    if (apiCall === true) {\r\n+      setApiCall(false);\r\n+    }\r\n+    // eslint-disable-next-line\r\n+  }, [folderID, apiCall, docId]);\r\n+  /*On change fnction to upload bulk document in 1 array*/\r\n+  const handleBulkFileChange = async (event, id) => {\r\n+    const files = event.target.files;\r\n+    {\r\n+      // Check the number of files selected\r\n+      if (files.length > 30) {\r\n+        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        return;\r\n+      }\r\n+\r\n+      // Continue with file validation and processing\r\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+      const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+      const filebseList = [];\r\n+      for (let i = 0; i < files.length; i++) {\r\n+        const file = files[i];\r\n+        // Check file type\r\n+        const fileType = `.${file.name.split(\".\").pop()}`;\r\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+          toast.error(\r\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Check file size\r\n+        if (file.size > maxSize) {\r\n+          toast.error(\r\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Read file as data URL\r\n+        const reader = new FileReader();\r\n+        reader.readAsDataURL(file);\r\n+        //For drive uploade\r\n+        filebseList.push(file);\r\n+      }\r\n+      // Store the object of files\r\n+      setDocFileBase(filebseList);\r\n+      setSaveBtn(true);\r\n+      //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+    }\r\n+  };\r\n+  //Document Save Function\r\n+  const SaveBulkDocument = async () => {\r\n+    setLoadingBtn(true);\r\n+    setShowDropDown(false);\r\n+    try {\r\n+      let res = await AddSharePointDOcument(\r\n+        user_id,\r\n+        emp_user_type,\r\n+        folderID,\r\n+        docTypeName,\r\n+        docFileBase\r\n+      );\r\n+      if (res.data.message === \"Document Upload\") {\r\n+        toast.success(`Document Uploaded successfully`, {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        setApiCall(true);\r\n+        setLoadingBtn(false);\r\n+        setSaveBtn(false);\r\n+        setShowDropDown(false);\r\n+      }\r\n+    } catch (err) {\r\n+      console.log(err);\r\n+      setLoadingBtn(false);\r\n+      setSaveBtn(false);\r\n+      setShowDropDown(false);\r\n+    }\r\n+  };\r\n+  /*Had folder function */\r\n+  const handleDocTypeChange = async (selectedType) => {\r\n+    setDocTypeName(selectedType);\r\n+    setShowDropDown(false);\r\n+    if (selectedType === \"other\") {\r\n+      // If \"other\" is selected, clear newType\r\n+      setNewType(\"\");\r\n+    } else {\r\n+      try {\r\n+        let res = await AddSharePointFolders(selectedType, folderID);\r\n+        if (\r\n+          res.data.data.name &&\r\n+          res.data.message === \"Folder created successfully!\"\r\n+        ) {\r\n+          toast.success(`Type Created successfully`, {\r\n+            position: toast.POSITION.TOP_RIGHT,\r\n+            autoClose: 1000,\r\n+          });\r\n+          setApiCall(true);\r\n+        } else if (res.data.data.error.message === \"Name already exists\") {\r\n+          toast.error(`Type Already exists`, {\r\n+            position: toast.POSITION.TOP_RIGHT,\r\n+            autoClose: 1000,\r\n+          });\r\n+        }\r\n+      } catch (Err) {\r\n+        console.log(Err);\r\n+      }\r\n+    }\r\n+  };\r\n+  /*Type folder name function */\r\n+  const handleNewTypeChange = (e) => {\r\n+    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, \"\");\r\n+    setNewType(value);\r\n+  };\r\n+  /*To call Api to delete Folder or document */\r\n+  async function DeleteSharepointDocument(id, type) {\r\n+    try {\r\n+      const responseData = await DeleteFolderOrDocument(id, type);\r\n+      if (responseData.data.message === \"Document deleted successfully!\") {\r\n+        toast.error(\"Document deleted successfully!\", {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        CancelDelete();\r\n+        setApiCall(true);\r\n+      }\r\n+    } catch (err) {\r\n+      console.log(err);\r\n+    }\r\n+  }\r\n+  return (\r\n+    <>\r\n+      {folderId ? (\r\n+        <div className=\"document_section\">\r\n+          {docPreview ? (\r\n+\r\n+            <div className=\"App-viewer\">\r\n+              <div className=\"row m-0 bg-white document_preview_box h-100vh overflow-hidden\">\r\n+                <div\r\n+                  className={` p-2 col-md-12 col-lg-12 col-sm-12`}\r\n+                >\r\n+                  <div className=\"back_btn_div\">\r\n+                    <Link\r\n+                      className=\"rounded-circle\"\r\n+                      style={{\r\n+                        position: \"absolute\",\r\n+                        top: 5,\r\n+                        left: 5,\r\n+                        background: \"#fff\",\r\n+                        width: 30,\r\n+                        height: 30,\r\n+                        zIndex: 9999,\r\n+                        display: \"flex\",\r\n+                        justifyContent: \"center\",\r\n+                        alignItems: \"center\",\r\n+                      }}\r\n+                      to=\"\"\r\n+                      onClick={() => {\r\n+                        setDocSingleDate(\"\");\r\n+                        setDocPreview(false);\r\n+                        setFolderID(docSingleDate.parentReference.id);\r\n+                      }}\r\n+                    >\r\n+                      <IoMdArrowBack />\r\n+                    </Link>\r\n+                  </div>\r\n+                  {docTypePage === \"adobe\" ?\r\n+                    <PreviewDocument\r\n+                      docData={docSingleDate}\r\n+                      docId={docId ? docId : folderID}\r\n+                      userId={user_id}\r\n+                      docFile={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n+                      setDocPreview={setDocPreview}\r\n+                      setDocSingleDate={setDocSingleDate}\r\n+                      setFolderID={setFolderID}\r\n+                    />\r\n+                    :\r\n+                    <PdfViewerComponent\r\n+                      document={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n+                    />}\r\n+                </div>\r\n+              </div>\r\n+            </div>\r\n+          ) : (\r\n+            <div className={\"document_container bg-white\"}>\r\n+              <div className=\"row m-0 bg-white justify-content-between p-2\">\r\n+                {/* Breadcrumbs */}\r\n+                {docBreadCrumbLoder ? (\r\n+                  <ul className=\"breadcrumb\">\r\n+                    <li\r\n+                      className=\"breadcrumb-item \"\r\n+                      style={{ padding: 5, margin: 0, borderRadius: 3 }}\r\n+                    >\r\n+                      <span\r\n+                        className=\"spinner-grow spinner-grow-sm\"\r\n+                        role=\"status\"\r\n+                        aria-hidden=\"true\"\r\n+                      ></span>\r\n+                      <span>Loading...</span>\r\n+                    </li>\r\n+                  </ul>\r\n+                ) : (\r\n+                  <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID}\r\n+                  />\r\n+                )}\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=\"new_folder_create d-flex\">\r\n+                  {docTypeName === \"other\" ? (\r\n+                    <>\r\n+                      <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        height={34}\r\n+                        style={{ Height: 34 }}\r\n+                        onChange={handleNewTypeChange}\r\n+                        className=\"px-2\"\r\n+                      />\r\n+                      <button\r\n+                        className=\"btn btn-sm btn-primary\"\r\n+                        type=\"button\"\r\n+                        style={{ maxHeight: 34, minWidth: \"auto\" }}\r\n+                        onClick={() => handleDocTypeChange(newType)}\r\n+                      >\r\n+                        Save\r\n+                      </button>\r\n+                      <button\r\n+                        className=\"btn btn-sm btn-secondry\"\r\n+                        type=\"button\"\r\n+                        style={{ maxHeight: 34, minWidth: \"auto\" }}\r\n+                        onClick={() => setDocTypeName(\"\")}\r\n+                      >\r\n+                        Cancel\r\n+                      </button>\r\n+                    </>\r\n+                  ) : (\r\n+                    <Dropdown>\r\n+                      <Dropdown.Toggle\r\n+                        variant=\"secondary\"\r\n+                        size={\"sm\"}\r\n+                        style={{ maxHeight: 34 }}\r\n+                        id=\"dropdown-basic\"\r\n+                      >\r\n+                        + Add New Folder\r\n+                      </Dropdown.Toggle>\r\n+                      <Dropdown.Menu\r\n+                        style={{ height: \"400px\", overflowY: \"scroll\" }}\r\n+                      >\r\n+                        <Dropdown.Item\r\n+                          onClick={() => handleDocTypeChange(\"\")}\r\n+                          key={-1}\r\n+                        >\r\n+                          Select Folder Name\r\n+                        </Dropdown.Item>\r\n+                        {DocTypeData.map((item, index) => (\r\n+                          <Dropdown.Item\r\n+                            onClick={() => handleDocTypeChange(item)}\r\n+                            key={index}\r\n+                            className=\"text-capitalize\"\r\n+                          >\r\n+                            {item.replaceAll(\"_\", \" \")}\r\n+                          </Dropdown.Item>\r\n+                        ))}\r\n+                        <Dropdown.Item\r\n+                          onClick={() => handleDocTypeChange(\"other\")}\r\n+                        >\r\n+                          Other\r\n+                        </Dropdown.Item>\r\n+                      </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"row m-0 bg-white px-2 pb-2 justify-content-center\">\r\n+                {/* List of documents docTypeList */}\r\n+                {docLoder ? (\r\n+                  <div className=\"table-responsive main_table_div\">\r\n+                    <Loader />\r\n+                  </div>\r\n+                ) : (\r\n+                  <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert}\r\n+                    setDocPreview={setDocPreview}\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument}\r\n+                    setSaveBtn={setSaveBtn}\r\n+                    setDocFileBase={setDocFileBase}\r\n+                  />\r\n+                )}\r\n+              </div>\r\n+              {editNameForm && (\r\n+                <EditDocNameFOrm\r\n+                  userId={user_id}\r\n+                  name={docSingleDate.name}\r\n+                  docId={docSingleDate.id}\r\n+                  userType={emp_user_type}\r\n+                  show={editNameForm}\r\n+                  close={() => setEditNameForm(false)}\r\n+                  setApiCall={setApiCall}\r\n+                  EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+              )}\r\n+              <SAlert\r\n+                show={deleteAlert}\r\n+                title={deleteData ? deleteData.name : \"\"}\r\n+                text=\"Are you Sure you want to delete !\"\r\n+                onConfirm={() =>\r\n+                  DeleteSharepointDocument(\r\n+                    deleteData.id,\r\n+                    deleteData.folder ? \"folder\" : \"document\"\r\n+                  )\r\n+                }\r\n+                showCancelButton={true}\r\n+                onCancel={() => CancelDelete()}\r\n+              />\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+      ) : (\r\n+        <div className=\"chat_box_container bg-white row m-0\">\r\n+          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\r\n+            Update the user profile to get a folder\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1713603341318,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  /*getSharePointFoldersList,*/ DeleteFolderOrDocument,\r\n  getFolderBreadcrumb,\r\n  AddSharePointFolders,\r\n  getSharePointParticularFolders,\r\n  AddSharePointDOcument,\r\n} from \"../../../api/api\";\r\nimport { Dropdown, Form } from \"react-bootstrap\";\r\nimport SAlert from \"../../common/sweetAlert\";\r\n// import { Link } from 'react-router-dom';\r\n// import { GrLinkPrevious } from \"react-icons/gr\";\r\nimport FolderList from \"./FolderList\";\r\nimport { toast } from \"react-toastify\";\r\n// import DocSaveForm from \"./DocSaveForm\";\r\nimport Loader from \"../loader\";\r\nimport Breadcrumbs from \"./Breadcrumb\";\r\nimport EditDocNameFOrm from \"./EditDocNameFOrm\";\r\nimport PreviewDocument from \"./PreviewDocument\";\r\nimport PdfViewerComponent from \"../../PdfViewerComponent\";\r\nexport default function SharePointDocument({\r\n  emp_user_type,\r\n  user_id,\r\n  folderId,\r\n  notification,\r\n  docId,\r\n  docTypePage\r\n}) {\r\n  const [docTypeName, setDocTypeName] = useState(\"\");\r\n  const [newType, setNewType] = useState(\"\");\r\n  const [docFileBase, setDocFileBase] = useState(\"\");\r\n  const [folderID, setFolderID] = useState(folderId);\r\n  const [apiCall, setApiCall] = useState(false);\r\n  const [saveBtn, setSaveBtn] = useState(false);\r\n  const [loadingBtn, setLoadingBtn] = useState(false);\r\n  const [breadcrumbData, setBreadcrumbData] = useState(\"\");\r\n  const [docTypeList, setDocTypeList] = useState([]);\r\n  const [showDropDown, setShowDropDown] = useState(false);\r\n  const [editNameForm, setEditNameForm] = useState(false);\r\n  const [docSingleDate, setDocSingleDate] = useState(\"\");\r\n  const [docPreview, setDocPreview] = useState(false);\r\n  const [docLoder, setDocLoder] = useState(false);\r\n  const [docBreadCrumbLoder, setBreadCrumbLoder] = useState(false);\r\n  /*delete state */\r\n  const [deleteAlert, setDeleteAlert] = useState(false);\r\n  const [deleteData, setDeleteData] = useState();\r\n  /*To Show the delete alert box */\r\n  const ShowDeleteAlert = (e) => {\r\n    setDeleteData(e);\r\n    setDeleteAlert(true);\r\n  };\r\n  /*To cancel the delete alert box */\r\n  const CancelDelete = () => {\r\n    setDeleteAlert(false);\r\n    setEditNameForm(false);\r\n  };\r\n  const DocTypeData =\r\n    emp_user_type === \"employer\"\r\n      ? [\r\n          \"Business T2\",\r\n          \"Recent PD7A\",\r\n          \"Business T4\",\r\n          \"Business Incorporation Certificate\",\r\n          \"Employment Contract\",\r\n          \"Schedule A\",\r\n          \"Signed Job Offer\",\r\n          \"PD7A of year\",\r\n          \"T2 Schedule 100 and 125\",\r\n          \"Certificate of incorporation\",\r\n          \"Business license\",\r\n          \"T4 summary of year\",\r\n          \"Request for Exception from English Language Requirement for LMIA Application\",\r\n          \"CPA Attestation Letter\",\r\n          \"Representative Submission Letter\",\r\n        ]\r\n      : [\r\n          \"passport\",\r\n          \"drivers_license\",\r\n          \"photograph\",\r\n          \"immigration_status\",\r\n          \"lmia\",\r\n          \"job_offer_letter\",\r\n          \"provincial_nominee_letter\",\r\n          \"proof_of_funds\",\r\n          \"proof_of_employment\",\r\n          \"marriage_certificate\",\r\n          \"education_metric\",\r\n          \"education_higher_secondary\",\r\n          \"education_graduation\",\r\n          \"education_post_graduation\",\r\n          \"resume_or_cv\",\r\n          \"ielts\",\r\n          \"medical\",\r\n          \"police_clearance\",\r\n          \"refusal_letter\",\r\n          \"Employment Contract\",\r\n          \"Reference Letters\",\r\n          \"Client Info\",\r\n          \"Representative Submission Letter\",\r\n          \"Bank Statement\",\r\n        ];\r\n\r\n  /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n  const AllShareType = async () => {\r\n    setDocLoder(true);\r\n    setBreadCrumbLoder(true);\r\n    try {\r\n      // if (folderID) {\r\n      let res = await getSharePointParticularFolders(\r\n        user_id,\r\n        emp_user_type,\r\n        // docId ? folderId :\r\n\r\n        folderID\r\n      );\r\n      if (res.data.status === 1) {\r\n        setDocPreview(false);\r\n        setDocTypeList(res.data.data);\r\n        setShowDropDown(false);\r\n        setDocLoder(false);\r\n        if (notification === \"yes\") {\r\n          if (res.data.data.find((item) => item.id === docId)) {\r\n            setDocPreview(true);\r\n            console.log(\"object\");\r\n            setDocSingleDate(res.data.data.find((item) => item.id === docId));\r\n            const newUrl = window.location.pathname;\r\n            window.history.replaceState({}, document.title, newUrl);\r\n          }\r\n        }\r\n        // setFolderID(res.data.data[0].parentReference.id)\r\n      } else if (res.data.data === \"No Documents Found\") {\r\n        setDocTypeList([]);\r\n        setShowDropDown(false);\r\n        setDocLoder(false);\r\n      }\r\n      // } else {\r\n      //     let res = await getSharePointFoldersList(user_id, emp_user_type)\r\n      //     if (res.data.status === 1) {\r\n      //         setDocTypeList(res.data.data)\r\n      //     }\r\n      // }\r\n    } catch (Err) {\r\n      console.log(Err);\r\n      setShowDropDown(false);\r\n      setDocLoder(false);\r\n    }\r\n    /*Api for breadcrumb */\r\n    try {\r\n      let res = await getFolderBreadcrumb(folderID);\r\n      setBreadcrumbData(res.data.data);\r\n      setShowDropDown(false);\r\n      setBreadCrumbLoder(false);\r\n    } catch (err) {\r\n      setBreadcrumbData([]);\r\n      console.log(err);\r\n      setShowDropDown(false);\r\n      setBreadCrumbLoder(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    AllShareType();\r\n    // if (notification === \"yes\") {\r\n    //     setDocPreview(true)\r\n    // }\r\n    if (apiCall === true) {\r\n      setApiCall(false);\r\n    }\r\n  }, [folderID, apiCall, docId]);\r\n  /*On change fnction to upload bulk document in 1 array*/\r\n  const handleBulkFileChange = async (event, id) => {\r\n    const files = event.target.files;\r\n    {\r\n      // Check the number of files selected\r\n      if (files.length > 30) {\r\n        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Continue with file validation and processing\r\n      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n      const maxSize = 1024 * 8000; // 8 MB\r\n\r\n      const filebseList = [];\r\n      for (let i = 0; i < files.length; i++) {\r\n        const file = files[i];\r\n        // Check file type\r\n        const fileType = `.${file.name.split(\".\").pop()}`;\r\n        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n          toast.error(\r\n            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n            {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              autoClose: 1000,\r\n            }\r\n          );\r\n          return;\r\n        }\r\n\r\n        // Check file size\r\n        if (file.size > maxSize) {\r\n          toast.error(\r\n            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n            {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              autoClose: 1000,\r\n            }\r\n          );\r\n          return;\r\n        }\r\n\r\n        // Read file as data URL\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        //For drive uploade\r\n        filebseList.push(file);\r\n      }\r\n      // Store the object of files\r\n      setDocFileBase(filebseList);\r\n      setSaveBtn(true);\r\n      //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n    }\r\n  };\r\n  //Document Save Function\r\n  const SaveBulkDocument = async () => {\r\n    setLoadingBtn(true);\r\n    setShowDropDown(false);\r\n    try {\r\n      let res = await AddSharePointDOcument(\r\n        user_id,\r\n        emp_user_type,\r\n        folderID,\r\n        docTypeName,\r\n        docFileBase\r\n      );\r\n      if (res.data.message === \"Document Upload\") {\r\n        toast.success(`Document Uploaded successfully`, {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setApiCall(true);\r\n        setLoadingBtn(false);\r\n        setSaveBtn(false);\r\n        setShowDropDown(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      setLoadingBtn(false);\r\n      setSaveBtn(false);\r\n      setShowDropDown(false);\r\n    }\r\n  };\r\n  /*Had folder function */\r\n  const handleDocTypeChange = async (selectedType) => {\r\n    setDocTypeName(selectedType);\r\n    setShowDropDown(false);\r\n    if (selectedType === \"other\") {\r\n      // If \"other\" is selected, clear newType\r\n      setNewType(\"\");\r\n    } else {\r\n      try {\r\n        let res = await AddSharePointFolders(selectedType, folderID);\r\n        if (\r\n          res.data.data.name &&\r\n          res.data.message === \"Folder created successfully!\"\r\n        ) {\r\n          toast.success(`Type Created successfully`, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            autoClose: 1000,\r\n          });\r\n          setApiCall(true);\r\n        } else if (res.data.data.error.message === \"Name already exists\") {\r\n          toast.error(`Type Already exists`, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            autoClose: 1000,\r\n          });\r\n        }\r\n      } catch (Err) {\r\n        console.log(Err);\r\n      }\r\n    }\r\n  };\r\n  /*Type folder name function */\r\n  const handleNewTypeChange = (e) => {\r\n    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, \"\");\r\n    setNewType(value);\r\n  };\r\n  /*To call Api to delete Folder or document */\r\n  async function DeleteSharepointDocument(id, type) {\r\n    try {\r\n      const responseData = await DeleteFolderOrDocument(id, type);\r\n      if (responseData.data.message === \"Document deleted successfully!\") {\r\n        toast.error(\"Document deleted successfully!\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        CancelDelete();\r\n        setApiCall(true);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      {folderId ? (\r\n        <div className=\"document_section\">\r\n          {docPreview ? (\r\n            \r\n            docTypePage === \"adobe\"?\r\n            <PreviewDocument\r\n              docData={docSingleDate}\r\n              docId={docId ? docId : folderID}\r\n              userId={user_id}\r\n              docFile={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n              setDocPreview={setDocPreview}\r\n              setDocSingleDate={setDocSingleDate}\r\n              setFolderID={setFolderID}\r\n            />\r\n            :\r\n            <div className=\"App-viewer\">\r\n              <PdfViewerComponent\r\n                document={docSingleDate[\"@microsoft.graph.downloadUrl\"]}\r\n              />\r\n                          </div>\r\n\r\n          ) : (\r\n            <div className={\"document_container bg-white\"}>\r\n              <div className=\"row m-0 bg-white justify-content-between p-2\">\r\n                {/* Breadcrumbs */}\r\n                {docBreadCrumbLoder ? (\r\n                  <ul className=\"breadcrumb\">\r\n                    <li\r\n                      className=\"breadcrumb-item \"\r\n                      style={{ padding: 5, margin: 0, borderRadius: 3 }}\r\n                    >\r\n                      <span\r\n                        className=\"spinner-grow spinner-grow-sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                      ></span>\r\n                      <span>Loading...</span>\r\n                    </li>\r\n                  </ul>\r\n                ) : (\r\n                  <Breadcrumbs\r\n                    data={breadcrumbData}\r\n                    setFolderID={setFolderID}\r\n                  />\r\n                )}\r\n                {/* Button to add folder or type and upload documents */}\r\n                <div className=\"new_folder_create d-flex\">\r\n                  {docTypeName === \"other\" ? (\r\n                    <>\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        value={newType}\r\n                        placeholder=\"Enter new type\"\r\n                        height={34}\r\n                        style={{ Height: 34 }}\r\n                        onChange={handleNewTypeChange}\r\n                        className=\"px-2\"\r\n                      />\r\n                      <button\r\n                        className=\"btn btn-sm btn-primary\"\r\n                        type=\"button\"\r\n                        style={{ maxHeight: 34, minWidth: \"auto\" }}\r\n                        onClick={() => handleDocTypeChange(newType)}\r\n                      >\r\n                        Save\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-sm btn-secondry\"\r\n                        type=\"button\"\r\n                        style={{ maxHeight: 34, minWidth: \"auto\" }}\r\n                        onClick={() => setDocTypeName(\"\")}\r\n                      >\r\n                        Cancel\r\n                      </button>\r\n                    </>\r\n                  ) : (\r\n                    <Dropdown>\r\n                      <Dropdown.Toggle\r\n                        variant=\"secondary\"\r\n                        size={\"sm\"}\r\n                        style={{ maxHeight: 34 }}\r\n                        id=\"dropdown-basic\"\r\n                      >\r\n                        + Add New Folder\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu\r\n                        style={{ height: \"400px\", overflowY: \"scroll\" }}\r\n                      >\r\n                        <Dropdown.Item\r\n                          onClick={() => handleDocTypeChange(\"\")}\r\n                          key={-1}\r\n                        >\r\n                          Select Folder Name\r\n                        </Dropdown.Item>\r\n                        {DocTypeData.map((item, index) => (\r\n                          <Dropdown.Item\r\n                            onClick={() => handleDocTypeChange(item)}\r\n                            key={index}\r\n                            className=\"text-capitalize\"\r\n                          >\r\n                            {item.replaceAll(\"_\", \" \")}\r\n                          </Dropdown.Item>\r\n                        ))}\r\n                        <Dropdown.Item\r\n                          onClick={() => handleDocTypeChange(\"other\")}\r\n                        >\r\n                          Other\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"row m-0 bg-white px-2 pb-2 justify-content-center\">\r\n                {/* List of documents docTypeList */}\r\n                {docLoder ? (\r\n                  <div className=\"table-responsive main_table_div\">\r\n                    <Loader />\r\n                  </div>\r\n                ) : (\r\n                  <FolderList\r\n                    docTypeList={docTypeList}\r\n                    setFolderID={setFolderID}\r\n                    setDocTypeName={setDocTypeName}\r\n                    folderID={folderID}\r\n                    showDropDown={showDropDown}\r\n                    setShowDropDown={setShowDropDown}\r\n                    setDocSingleDate={setDocSingleDate}\r\n                    setEditNameForm={setEditNameForm}\r\n                    ShowDeleteAlert={ShowDeleteAlert}\r\n                    setDocPreview={setDocPreview}\r\n                    handleBulkFileChange={handleBulkFileChange}\r\n                    saveBtn={saveBtn}\r\n                    loadingBtn={loadingBtn}\r\n                    SaveBulkDocument={SaveBulkDocument}\r\n                    setSaveBtn={setSaveBtn}\r\n                    setDocFileBase={setDocFileBase}\r\n                  />\r\n                )}\r\n              </div>\r\n              {editNameForm && (\r\n                <EditDocNameFOrm\r\n                  userId={user_id}\r\n                  name={docSingleDate.name}\r\n                  docId={docSingleDate.id}\r\n                  userType={emp_user_type}\r\n                  show={editNameForm}\r\n                  close={() => setEditNameForm(false)}\r\n                  setApiCall={setApiCall}\r\n                  EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n                />\r\n              )}\r\n              <SAlert\r\n                show={deleteAlert}\r\n                title={deleteData ? deleteData.name : \"\"}\r\n                text=\"Are you Sure you want to delete !\"\r\n                onConfirm={() =>\r\n                  DeleteSharepointDocument(\r\n                    deleteData.id,\r\n                    deleteData.folder ? \"folder\" : \"document\"\r\n                  )\r\n                }\r\n                showCancelButton={true}\r\n                onCancel={() => CancelDelete()}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"chat_box_container bg-white row m-0\">\r\n          <div className=\"chat-container d-flex justify-content-center align-items-center w-100\">\r\n            Update the user profile to get a folder\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"
        }
    ]
}