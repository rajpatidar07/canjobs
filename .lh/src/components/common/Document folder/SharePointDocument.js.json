{
    "sourceFile": "src/components/common/Document folder/SharePointDocument.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1711975031349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711975226942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n import { AiOutlineCloudUpload } from \"react-icons/ai\"\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n     const [docFileBase, setDocFileBase] = useState('');\r\n@@ -183,48 +184,14 @@\n                             </Dropdown.Item>\r\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )} */}\r\n-                {/* Upload Document button and save button */}\r\n-                <form>\r\n-                    <div className=\"\">\r\n-                        <label className=\"btn btn-secondary doc_btn\">\r\n-                            <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n-                            <input\r\n-                                type=\"file\"\r\n-                                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n-                                style={{ display: \"none\" }}\r\n-                                onChange={(e) => {\r\n-                                    handleBulkFileChange(e);\r\n-                                }}\r\n-                                multiple\r\n-                            />\r\n-                            Upload New Documents\r\n-                        </label>\r\n-                    </div>\r\n-                    {saveBtn === true ?\r\n-                        <div className=\"doc_upload_col\">\r\n-                            {loadingBtn ?\r\n-                                <button\r\n-                                    className=\"btn btn-primary px-12\"\r\n-                                    type=\"button\"\r\n-                                    disabled\r\n-                                >\r\n-                                    <span\r\n-                                        className=\"spinner-border spinner-border-sm \"\r\n-                                        role=\"status\"\r\n-                                        aria-hidden=\"true\"\r\n-                                    ></span>\r\n-                                    <span className=\"sr-only\">Loading...</span>\r\n-                                </button>\r\n-                                : <button\r\n-                                    className=\"btn btn-primary doc_btn\"\r\n-                                    onClick={SaveBulkDocument}\r\n-                                >\r\n-                                    Save Documents\r\n-                                </button>}\r\n-                        </div> : null}\r\n-                </form>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n                 {folderID !== prevFolderID &&\r\n                     <Link onClick={() => setFolderID(prevFolderID)}>\r\n                         <GrLinkPrevious />\r\n                     </Link>}\r\n"
                },
                {
                    "date": 1711975382386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,16 @@\n             setSaveBtn(true)\r\n             //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n         }\r\n     };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        try {\r\n+            let res\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+        }\r\n+    }\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n     //         // If \"other\" is selected, clear newType\r\n"
                },
                {
                    "date": 1711975391550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n     };\r\n     //Document Save Function\r\n     const SaveBulkDocument = async () => {\r\n         try {\r\n-            let res\r\n+            // let res\r\n         } catch (err) {\r\n             console.log(err)\r\n         }\r\n     }\r\n"
                },
                {
                    "date": 1711975423989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,12 +142,15 @@\n         }\r\n     };\r\n     //Document Save Function\r\n     const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n         try {\r\n             // let res\r\n+            setLoadingBtn(false)\r\n         } catch (err) {\r\n             console.log(err)\r\n+            setLoadingBtn(false)\r\n         }\r\n     }\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n"
                },
                {
                    "date": 1711975430773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n // import { Dropdown, Form } from 'react-bootstrap';\r\n import { Link } from 'react-router-dom';\r\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import { AiOutlineCloudUpload } from \"react-icons/ai\"\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n import DocSaveForm from './DocSaveForm';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n"
                },
                {
                    "date": 1711975824349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,11 +145,13 @@\n         setLoadingBtn(true)\r\n         try {\r\n             // let res\r\n             setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n         } catch (err) {\r\n             console.log(err)\r\n             setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n         }\r\n     }\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n"
                },
                {
                    "date": 1711975985923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                    setFolderID(res.data.data[0].parentReference.id)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                }
            ],
            "date": 1711975031349,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n// import { Dropdown, Form } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { GrLinkPrevious } from \"react-icons/gr\";\r\nimport { AiOutlineCloudUpload } from \"react-icons/ai\"\r\nimport FolderList from './FolderList';\r\nimport { toast } from 'react-toastify';\r\nexport default function SharePointDocument({ emp_user_type, employee_id }) {\r\n    // const [docTypeName, setDocTypeName] = useState('');\r\n    // const [newType, setNewType] = useState('');\r\n    const [docFileBase, setDocFileBase] = useState('');\r\n    const [folderID, setFolderID] = useState('');\r\n    const [saveBtn, setSaveBtn] = useState(false);\r\n    const [loadingBtn, setLoadingBtn] = useState(false);\r\n    const [prevFolderID, setPrevFolderID] = useState('');\r\n    const [docTypeList, setDocTypeList] = useState([]);\r\n\r\n    // const DocTypeData =\r\n    //     emp_user_type === 'employer'\r\n    //         ? [\r\n    //             'Business T2',\r\n    //             'Recent PD7A',\r\n    //             'Business T4',\r\n    //             'Business Incorporation Certificate',\r\n    //             'Employment Contract',\r\n    //             'Schedule A',\r\n    //             'Signed Job Offer',\r\n    //             'PD7A of year',\r\n    //             'T2 Schedule 100 and 125',\r\n    //             'Certificate of incorporation',\r\n    //             'Business license',\r\n    //             'T4 summary of year',\r\n    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n    //             'CPA Attestation Letter',\r\n    //             'Representative Submission Letter',\r\n    //         ]\r\n    //         : [\r\n    //             'passport',\r\n    //             'drivers_license',\r\n    //             'photograph',\r\n    //             'immigration_status',\r\n    //             'lmia',\r\n    //             'job_offer_letter',\r\n    //             'provincial_nominee_letter',\r\n    //             'proof_of_funds',\r\n    //             'proof_of_employment',\r\n    //             'marriage_certificate',\r\n    //             'education_metric',\r\n    //             'education_higher_secondary',\r\n    //             'education_graduation',\r\n    //             'education_post_graduation',\r\n    //             'resume_or_cv',\r\n    //             'ielts',\r\n    //             'medical',\r\n    //             'police_clearance',\r\n    //             'refusal_letter',\r\n    //             'Employment Contract',\r\n    //             'Reference Letters',\r\n    //             'Client Info',\r\n    //             'Representative Submission Letter',\r\n    //             'Bank Statement',\r\n    //         ];\r\n    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n    const AllShareType = async () => {\r\n        try {\r\n            if (folderID) {\r\n                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n                if (res.data.status === 1) {\r\n                    setDocTypeList(res.data.data)\r\n                    setFolderID(res.data.data[0].parentReference.id)\r\n                }\r\n            } else {\r\n                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n                if (res.data.status === 1) {\r\n                    setDocTypeList(res.data.data)\r\n                }\r\n            }\r\n        } catch (Err) {\r\n            console.log(Err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        AllShareType()\r\n    }, [folderID])\r\n    /*On change fnction to upload bulk document in 1 array*/\r\n    const handleBulkFileChange = async (event, id) => {\r\n        const files = event.target.files;\r\n        {\r\n            // Check the number of files selected\r\n            if (files.length > 30) {\r\n                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n                    position: toast.POSITION.TOP_RIGHT,\r\n                    autoClose: 1000,\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Continue with file validation and processing\r\n            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n            const maxSize = 1024 * 8000; // 8 MB\r\n\r\n            const filebseList = [];\r\n            for (let i = 0; i < files.length; i++) {\r\n                const file = files[i];\r\n                // Check file type\r\n                const fileType = `.${file.name.split(\".\").pop()}`;\r\n                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n                    toast.error(\r\n                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n                        {\r\n                            position: toast.POSITION.TOP_RIGHT,\r\n                            autoClose: 1000,\r\n                        }\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                // Check file size\r\n                if (file.size > maxSize) {\r\n                    toast.error(\r\n                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n                        {\r\n                            position: toast.POSITION.TOP_RIGHT,\r\n                            autoClose: 1000,\r\n                        }\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                // Read file as data URL\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n                //For drive uploade\r\n                filebseList.push(file)\r\n            }\r\n            // Store the object of files\r\n            setDocFileBase(filebseList);\r\n            setSaveBtn(true)\r\n            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n        }\r\n    };\r\n    // const handleDocTypeChange = (selectedType) => {\r\n    //     setDocTypeName(selectedType);\r\n    //     if (selectedType === 'other') {\r\n    //         // If \"other\" is selected, clear newType\r\n    //         setNewType('');\r\n    //     }\r\n    // };\r\n\r\n    // const handleNewTypeChange = (e) => {\r\n    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n    //     setNewType(value);\r\n    // };\r\n    console.log(docFileBase)\r\n    return (\r\n        <div className={'document_container bg-white'}>\r\n            <div className=\"row m-0 bg-white\">\r\n                {/* Button to add folder or type and upload documents */}\r\n                {/* {docTypeName === 'other' ? (\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={newType}\r\n                        placeholder=\"Enter new type\"\r\n                        onChange={handleNewTypeChange}\r\n                    />\r\n                ) : (\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                            + Add New type\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n                                Select document\r\n                            </Dropdown.Item>\r\n                            {DocTypeData.map((item, index) => (\r\n                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n                                    {item.replaceAll(\"_\", \" \")}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n                                Other\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                )} */}\r\n                {/* Upload Document button and save button */}\r\n                <form>\r\n                    <div className=\"\">\r\n                        <label className=\"btn btn-secondary doc_btn\">\r\n                            <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n                            <input\r\n                                type=\"file\"\r\n                                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n                                style={{ display: \"none\" }}\r\n                                onChange={(e) => {\r\n                                    handleBulkFileChange(e);\r\n                                }}\r\n                                multiple\r\n                            />\r\n                            Upload New Documents\r\n                        </label>\r\n                    </div>\r\n                    {saveBtn === true ?\r\n                        <div className=\"doc_upload_col\">\r\n                            {loadingBtn ?\r\n                                <button\r\n                                    className=\"btn btn-primary px-12\"\r\n                                    type=\"button\"\r\n                                    disabled\r\n                                >\r\n                                    <span\r\n                                        className=\"spinner-border spinner-border-sm \"\r\n                                        role=\"status\"\r\n                                        aria-hidden=\"true\"\r\n                                    ></span>\r\n                                    <span className=\"sr-only\">Loading...</span>\r\n                                </button>\r\n                                : <button\r\n                                    className=\"btn btn-primary doc_btn\"\r\n                                    onClick={SaveBulkDocument}\r\n                                >\r\n                                    Save Documents\r\n                                </button>}\r\n                        </div> : null}\r\n                </form>\r\n                {folderID !== prevFolderID &&\r\n                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n                        <GrLinkPrevious />\r\n                    </Link>}\r\n                {/* List of documents docTypeList */}\r\n                <FolderList\r\n                    docTypeList={docTypeList}\r\n                    setFolderID={setFolderID}\r\n                    setPrevFolderID={setPrevFolderID} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"
        }
    ]
}