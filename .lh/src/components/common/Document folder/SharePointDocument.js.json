{
    "sourceFile": "src/components/common/Document folder/SharePointDocument.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 87,
            "patches": [
                {
                    "date": 1711975031349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711975226942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n import { AiOutlineCloudUpload } from \"react-icons/ai\"\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n     const [docFileBase, setDocFileBase] = useState('');\r\n@@ -183,48 +184,14 @@\n                             </Dropdown.Item>\r\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )} */}\r\n-                {/* Upload Document button and save button */}\r\n-                <form>\r\n-                    <div className=\"\">\r\n-                        <label className=\"btn btn-secondary doc_btn\">\r\n-                            <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n-                            <input\r\n-                                type=\"file\"\r\n-                                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n-                                style={{ display: \"none\" }}\r\n-                                onChange={(e) => {\r\n-                                    handleBulkFileChange(e);\r\n-                                }}\r\n-                                multiple\r\n-                            />\r\n-                            Upload New Documents\r\n-                        </label>\r\n-                    </div>\r\n-                    {saveBtn === true ?\r\n-                        <div className=\"doc_upload_col\">\r\n-                            {loadingBtn ?\r\n-                                <button\r\n-                                    className=\"btn btn-primary px-12\"\r\n-                                    type=\"button\"\r\n-                                    disabled\r\n-                                >\r\n-                                    <span\r\n-                                        className=\"spinner-border spinner-border-sm \"\r\n-                                        role=\"status\"\r\n-                                        aria-hidden=\"true\"\r\n-                                    ></span>\r\n-                                    <span className=\"sr-only\">Loading...</span>\r\n-                                </button>\r\n-                                : <button\r\n-                                    className=\"btn btn-primary doc_btn\"\r\n-                                    onClick={SaveBulkDocument}\r\n-                                >\r\n-                                    Save Documents\r\n-                                </button>}\r\n-                        </div> : null}\r\n-                </form>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n                 {folderID !== prevFolderID &&\r\n                     <Link onClick={() => setFolderID(prevFolderID)}>\r\n                         <GrLinkPrevious />\r\n                     </Link>}\r\n"
                },
                {
                    "date": 1711975382386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,16 @@\n             setSaveBtn(true)\r\n             //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n         }\r\n     };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        try {\r\n+            let res\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+        }\r\n+    }\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n     //         // If \"other\" is selected, clear newType\r\n"
                },
                {
                    "date": 1711975391550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n     };\r\n     //Document Save Function\r\n     const SaveBulkDocument = async () => {\r\n         try {\r\n-            let res\r\n+            // let res\r\n         } catch (err) {\r\n             console.log(err)\r\n         }\r\n     }\r\n"
                },
                {
                    "date": 1711975423989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,12 +142,15 @@\n         }\r\n     };\r\n     //Document Save Function\r\n     const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n         try {\r\n             // let res\r\n+            setLoadingBtn(false)\r\n         } catch (err) {\r\n             console.log(err)\r\n+            setLoadingBtn(false)\r\n         }\r\n     }\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n"
                },
                {
                    "date": 1711975430773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n // import { Dropdown, Form } from 'react-bootstrap';\r\n import { Link } from 'react-router-dom';\r\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import { AiOutlineCloudUpload } from \"react-icons/ai\"\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n import DocSaveForm from './DocSaveForm';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n"
                },
                {
                    "date": 1711975824349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,11 +145,13 @@\n         setLoadingBtn(true)\r\n         try {\r\n             // let res\r\n             setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n         } catch (err) {\r\n             console.log(err)\r\n             setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n         }\r\n     }\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n"
                },
                {
                    "date": 1711975985923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                    setFolderID(res.data.data[0].parentReference.id)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712048283558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,13 @@\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+export default function SharePointDocument({ emp_user_type, employee_id ,folderId}) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n     const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n     const [saveBtn, setSaveBtn] = useState(false);\r\n     const [loadingBtn, setLoadingBtn] = useState(false);\r\n     const [prevFolderID, setPrevFolderID] = useState('');\r\n     const [docTypeList, setDocTypeList] = useState([]);\r\n@@ -63,20 +63,20 @@\n     //         ];\r\n     /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n     const AllShareType = async () => {\r\n         try {\r\n-            if (folderID) {\r\n+            // if (folderID) {\r\n                 let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n                 if (res.data.status === 1) {\r\n                     setDocTypeList(res.data.data)\r\n                     setFolderID(res.data.data[0].parentReference.id)\r\n                 }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n         } catch (Err) {\r\n             console.log(Err)\r\n         }\r\n     }\r\n"
                },
                {
                    "date": 1712048315661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n             // if (folderID) {\r\n                 let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n                 if (res.data.status === 1) {\r\n                     setDocTypeList(res.data.data)\r\n-                    setFolderID(res.data.data[0].parentReference.id)\r\n+                    // setFolderID(res.data.data[0].parentReference.id)\r\n                 }\r\n             // } else {\r\n             //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n             //     if (res.data.status === 1) {\r\n@@ -215,222 +215,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                    setFolderID(res.data.data[0].parentReference.id)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712048431349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id ,folderId}) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                    // setFolderID(res.data.data[0].parentReference.id)\r\n+                }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                    {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712048439236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,20 +152,20 @@\n             setLoadingBtn(false)\r\n             setSaveBtn(false)\r\n         }\r\n     }\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n \r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n     console.log(docFileBase)\r\n     return (\r\n         <div className={'document_container bg-white'}>\r\n             <div className=\"row m-0 bg-white\">\r\n@@ -216,222 +216,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id ,folderId}) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                    // setFolderID(res.data.data[0].parentReference.id)\r\n-                }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712048447439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from 'react';\r\n import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n import { Link } from 'react-router-dom';\r\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n"
                },
                {
                    "date": 1712048464345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n+import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n import DocSaveForm from './DocSaveForm';\r\n export default function SharePointDocument({ emp_user_type, employee_id ,folderId}) {\r\n"
                },
                {
                    "date": 1712048566324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,8 +169,9 @@\n     return (\r\n         <div className={'document_container bg-white'}>\r\n             <div className=\"row m-0 bg-white\">\r\n                 {/* Button to add folder or type and upload documents */}\r\n+                <div className='overflow-auto'></div>\r\n                 {docTypeName === 'other' ? (\r\n                     <Form.Control\r\n                         type=\"text\"\r\n                         value={newType}\r\n"
                },
                {
                    "date": 1712048574616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id ,folderId}) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                    // setFolderID(res.data.data[0].parentReference.id)\r\n+                }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className='overflow-auto'>\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                    {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712048740543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+              \r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument}\r\n+                    docTypeName={docTypeName}\r\n+                    handleNewTypeChange={handleNewTypeChange}\r\n+                    newType={newType}\r\n+                    handleDocTypeChange={handleDocTypeChange}\r\n+                    DocTypeData={DocTypeData} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712048753764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from 'react';\r\n import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n // import { Link } from 'react-router-dom';\r\n // import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n@@ -194,445 +194,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id ,folderId}) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                    // setFolderID(res.data.data[0].parentReference.id)\r\n-                }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className='overflow-auto'>\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                    {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id ,folderId}) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                    // setFolderID(res.data.data[0].parentReference.id)\r\n-                }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className='overflow-auto'></div>\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                    {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712048847661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className='overflow-auto'>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <Form.Control\r\n+                            type=\"text\"\r\n+                            value={newType}\r\n+                            placeholder=\"Enter new type\"\r\n+                            onChange={handleNewTypeChange}\r\n+                        />\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712048950284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,209 +210,12 @@\n                     <Link onClick={() => setFolderID(prevFolderID)}>\r\n                         <GrLinkPrevious />\r\n                     </Link>} */}\r\n                 {/* List of documents docTypeList */}\r\n-                <FolderList\r\n+                {/* <FolderList\r\n                     docTypeList={docTypeList}\r\n                     setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-              \r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument}\r\n-                    docTypeName={docTypeName}\r\n-                    handleNewTypeChange={handleNewTypeChange}\r\n-                    newType={newType}\r\n-                    handleDocTypeChange={handleDocTypeChange}\r\n-                    DocTypeData={DocTypeData} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712048962624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,13 +199,13 @@\n                         </Dropdown>\r\n                     )}\r\n                 </div>\r\n                 {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n+                {/* <DocSaveForm\r\n                     handleBulkFileChange={handleBulkFileChange}\r\n                     saveBtn={saveBtn}\r\n                     loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n                 {/* Back button */}\r\n                 {/* {folderID !== prevFolderID &&\r\n                     <Link onClick={() => setFolderID(prevFolderID)}>\r\n                         <GrLinkPrevious />\r\n"
                },
                {
                    "date": 1712048980271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n     return (\r\n         <div className={'document_container bg-white'}>\r\n             <div className=\"row m-0 bg-white\">\r\n                 {/* Button to add folder or type and upload documents */}\r\n-                <div className='overflow-auto'>\r\n+                <div className=''>\r\n                     {docTypeName === 'other' ? (\r\n                         <Form.Control\r\n                             type=\"text\"\r\n                             value={newType}\r\n"
                },
                {
                    "date": 1712049190498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <Form.Control\r\n+                            type=\"text\"\r\n+                            value={newType}\r\n+                            placeholder=\"Enter new type\"\r\n+                            onChange={handleNewTypeChange}\r\n+                        />\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{height:\"450px\",overflowY:\"scroll\"}}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712049877583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,232 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                console.log(res)\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <div>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button onClick={() => handleDocTypeChange(newType)}>Save</button>\r\n+                        </div>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712049991098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,233 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    /*FUnction creat efolder or type of document */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                console.log(res)\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*FUnction to add new document type or folder */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <div>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button onClick={() => handleDocTypeChange(newType)}>Save</button>\r\n+                        </div>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712050282234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,233 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    /*FUnction creat efolder or type of document */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                console.log(res)\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*FUnction to add new document type or folder */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button onClick={() => handleDocTypeChange(newType)}>Save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712050316473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,229 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType,folderID)\r\n+                console.log(res)\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <Form.Control\r\n+                            type=\"text\"\r\n+                            value={newType}\r\n+                            placeholder=\"Enter new type\"\r\n+                            onChange={handleNewTypeChange}\r\n+                        />\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712050342718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n // import { Link } from 'react-router-dom';\r\n // import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n@@ -152,22 +152,14 @@\n             setLoadingBtn(false)\r\n             setSaveBtn(false)\r\n         }\r\n     }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n+    const handleDocTypeChange = (selectedType) => {\r\n         setDocTypeName(selectedType);\r\n         if (selectedType === 'other') {\r\n             // If \"other\" is selected, clear newType\r\n             setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType,folderID)\r\n-                console.log(res)\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n         }\r\n-\r\n     };\r\n \r\n     const handleNewTypeChange = (e) => {\r\n         const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n@@ -190,9 +182,9 @@\n                         <Dropdown>\r\n                             <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                 + Add New type\r\n                             </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n+                            <Dropdown.Menu style={{height:\"450px\",overflowY:\"scroll\"}}>\r\n                                 <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n                                     Select document\r\n                                 </Dropdown.Item>\r\n                                 {DocTypeData.map((item, index) => (\r\n"
                },
                {
                    "date": 1712050463903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,233 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                console.log(res)\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712050491615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,233 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                console.log(res)\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712050518974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n     };\r\n     console.log(docFileBase)\r\n     return (\r\n         <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh bg-white\">\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n                 {/* Button to add folder or type and upload documents */}\r\n                 <div className=''>\r\n                     {docTypeName === 'other' ? (\r\n                         <>\r\n@@ -194,9 +194,9 @@\n                         <Dropdown>\r\n                             <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                                 + Add New type\r\n                             </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n                                 <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n                                     Select document\r\n                                 </Dropdown.Item>\r\n                                 {DocTypeData.map((item, index) => (\r\n@@ -230,1598 +230,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                console.log(res)\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <Form.Control\r\n-                            type=\"text\"\r\n-                            value={newType}\r\n-                            placeholder=\"Enter new type\"\r\n-                            onChange={handleNewTypeChange}\r\n-                        />\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{height:\"450px\",overflowY:\"scroll\"}}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    /*FUnction creat efolder or type of document */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                console.log(res)\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*FUnction to add new document type or folder */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button onClick={() => handleDocTypeChange(newType)}>Save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    /*FUnction creat efolder or type of document */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                console.log(res)\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*FUnction to add new document type or folder */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <div>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button onClick={() => handleDocTypeChange(newType)}>Save</button>\r\n-                        </div>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                console.log(res)\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <div>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button onClick={() => handleDocTypeChange(newType)}>Save</button>\r\n-                        </div>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"450px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <Form.Control\r\n-                            type=\"text\"\r\n-                            value={newType}\r\n-                            placeholder=\"Enter new type\"\r\n-                            onChange={handleNewTypeChange}\r\n-                        />\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{height:\"450px\",overflowY:\"scroll\"}}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <Form.Control\r\n-                            type=\"text\"\r\n-                            value={newType}\r\n-                            placeholder=\"Enter new type\"\r\n-                            onChange={handleNewTypeChange}\r\n-                        />\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712051313818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n     const [docTypeName, setDocTypeName] = useState('');\r\n     const [newType, setNewType] = useState('');\r\n     const [docFileBase, setDocFileBase] = useState('');\r\n     const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n     const [saveBtn, setSaveBtn] = useState(false);\r\n     const [loadingBtn, setLoadingBtn] = useState(false);\r\n     const [prevFolderID, setPrevFolderID] = useState('');\r\n     const [docTypeList, setDocTypeList] = useState([]);\r\n@@ -81,9 +82,12 @@\n         }\r\n     }\r\n     useEffect(() => {\r\n         AllShareType()\r\n-    }, [folderID])\r\n+        if(apiCall ===true){\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID,apiCall])\r\n     /*On change fnction to upload bulk document in 1 array*/\r\n     const handleBulkFileChange = async (event, id) => {\r\n         const files = event.target.files;\r\n         {\r\n@@ -160,9 +164,19 @@\n             setNewType('');\r\n         } else {\r\n             try {\r\n                 let res = await AddSharePointFolders(selectedType, folderID)\r\n-                console.log(res)\r\n+                if(res.data.message ===\r\n+                    \"Folder created successfully!\"){\r\n+                        toast.success(\r\n+                            `Type Created successfully`,\r\n+                            {\r\n+                                position: toast.POSITION.TOP_RIGHT,\r\n+                                autoClose: 1000,\r\n+                            }\r\n+                        );\r\n+                        setApiCall(true)\r\n+                    }\r\n             } catch (Err) {\r\n                 console.log(Err)\r\n             }\r\n         }\r\n"
                },
                {
                    "date": 1712051318883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,247 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712051385051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n     const AllShareType = async () => {\r\n         try {\r\n             // if (folderID) {\r\n             let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            console.log(es.data.statu)\r\n             if (res.data.status === 1) {\r\n                 setDocTypeList(res.data.data)\r\n                 // setFolderID(res.data.data[0].parentReference.id)\r\n             }\r\n@@ -244,251 +245,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if(apiCall ===true){\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID,apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if(res.data.message ===\r\n-                    \"Folder created successfully!\"){\r\n-                        toast.success(\r\n-                            `Type Created successfully`,\r\n-                            {\r\n-                                position: toast.POSITION.TOP_RIGHT,\r\n-                                autoClose: 1000,\r\n-                            }\r\n-                        );\r\n-                        setApiCall(true)\r\n-                    }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712051404429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n     const AllShareType = async () => {\r\n         try {\r\n             // if (folderID) {\r\n             let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            console.log(es.data.statu)\r\n+            console.log(res.data.status)\r\n             if (res.data.status === 1) {\r\n                 setDocTypeList(res.data.data)\r\n                 // setFolderID(res.data.data[0].parentReference.id)\r\n             }\r\n"
                },
                {
                    "date": 1712051434530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,248 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            console.log(res.data.status === 1,res.data.data)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            // let res\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                {/* <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                {/* <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} /> */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712051476065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,271 +226,23 @@\n                         </Dropdown>\r\n                     )}\r\n                 </div>\r\n                 {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n+                <DocSaveForm\r\n                     handleBulkFileChange={handleBulkFileChange}\r\n                     saveBtn={saveBtn}\r\n                     loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n                 {/* Back button */}\r\n                 {/* {folderID !== prevFolderID &&\r\n                     <Link onClick={() => setFolderID(prevFolderID)}>\r\n                         <GrLinkPrevious />\r\n                     </Link>} */}\r\n                 {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n+                <FolderList\r\n                     docTypeList={docTypeList}\r\n                     setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            console.log(res.data.status)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                {/* <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} /> */}\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                {/* <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} /> */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712051592381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,10 @@\n             console.log(res.data.status === 1,res.data.data)\r\n             if (res.data.status === 1) {\r\n                 setDocTypeList(res.data.data)\r\n                 // setFolderID(res.data.data[0].parentReference.id)\r\n+            }else if(res.data.data=== 'No Documents Found'){\r\n+                setDocTypeList([])\r\n             }\r\n             // } else {\r\n             //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n             //     if (res.data.status === 1) {\r\n"
                },
                {
                    "date": 1712058835976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            console.log(res.data.status === 1, res.data.data)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            console.log(res)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712219847319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            console.log(res.data.status === 1, res.data.data)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setDocTypeName(res.data.data[0].parentReference.name)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            console.log(res)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712219905133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n         } catch (Err) {\r\n             console.log(Err)\r\n         }\r\n     }\r\n+    console.log(docTypeName)\r\n     useEffect(() => {\r\n         AllShareType()\r\n         if (apiCall === true) {\r\n             setApiCall(false)\r\n@@ -249,505 +250,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            console.log(res.data.status === 1, res.data.data)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            console.log(res)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            console.log(res.data.status === 1,res.data.data)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            }else if(res.data.data=== 'No Documents Found'){\r\n-                setDocTypeList([])\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            // let res\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712220518993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    console.log(docTypeName)\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            console.log(res)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID}\r\n+                    setDocTypeName={setDocTypeName} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712221211560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,260 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    console.log(docTypeName)\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID}\r\n+                    setDocTypeName={setDocTypeName} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712221506501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,8 +159,9 @@\n                         position: toast.POSITION.TOP_RIGHT,\r\n                         autoClose: 1000,\r\n                     }\r\n                 );\r\n+                setApiCall(true)\r\n                 setLoadingBtn(false)\r\n                 setSaveBtn(false)\r\n             }\r\n         } catch (err) {\r\n"
                },
                {
                    "date": 1712222057095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n // import { Link } from 'react-router-dom';\r\n // import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n@@ -81,10 +81,16 @@\n             // }\r\n         } catch (Err) {\r\n             console.log(Err)\r\n         }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = getFolderBreadcrumb(folderID)\r\n+            console.log(res)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+        }\r\n     }\r\n-    console.log(docTypeName)\r\n     useEffect(() => {\r\n         AllShareType()\r\n         if (apiCall === true) {\r\n             setApiCall(false)\r\n@@ -199,9 +205,8 @@\n     const handleNewTypeChange = (e) => {\r\n         const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n         setNewType(value);\r\n     };\r\n-    console.log(docFileBase)\r\n     return (\r\n         <div className={'document_container bg-white'}>\r\n             <div className=\"row h-100vh m-0 bg-white\">\r\n                 {/* Button to add folder or type and upload documents */}\r\n@@ -258,509 +263,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    console.log(docTypeName)\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            console.log(res)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID}\r\n-                    setDocTypeName={setDocTypeName} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            console.log(res.data.status === 1, res.data.data)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setDocTypeName(res.data.data[0].parentReference.name)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    console.log(docTypeName)\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            console.log(res)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712222080766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,266 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res =await getFolderBreadcrumb(folderID)\r\n+            console.log(res)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID}\r\n+                    setDocTypeName={setDocTypeName} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712222493659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,266 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res =await getFolderBreadcrumb(folderID)\r\n+            console.log(res)\r\n+            setBreadcrumbData(res.data.data)\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712222546339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n // import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n     const [docTypeName, setDocTypeName] = useState('');\r\n     const [newType, setNewType] = useState('');\r\n     const [docFileBase, setDocFileBase] = useState('');\r\n@@ -254,8 +255,10 @@\n                 {/* {folderID !== prevFolderID &&\r\n                     <Link onClick={() => setFolderID(prevFolderID)}>\r\n                         <GrLinkPrevious />\r\n                     </Link>} */}\r\n+                    {/* Breadcrumbs */}\r\n+                    <Breadcrumbs data={breadcrumbData}/>\r\n                 {/* List of documents docTypeList */}\r\n                 <FolderList\r\n                     docTypeList={docTypeList}\r\n                     setFolderID={setFolderID}\r\n@@ -263,536 +266,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res =await getFolderBreadcrumb(folderID)\r\n-            console.log(res)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID}\r\n-                    setDocTypeName={setDocTypeName} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = getFolderBreadcrumb(folderID)\r\n-            console.log(res)\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID}\r\n-                    setDocTypeName={setDocTypeName} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712222658980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,9 @@\n             let res =await getFolderBreadcrumb(folderID)\r\n             console.log(res)\r\n             setBreadcrumbData(res.data.data)\r\n         } catch (err) {\r\n+            setBreadcrumbData([])\r\n             console.log(err)\r\n         }\r\n     }\r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1712222719591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,10 +84,9 @@\n             console.log(Err)\r\n         }\r\n         /*Api for breadcrumb */\r\n         try {\r\n-            let res =await getFolderBreadcrumb(folderID)\r\n-            console.log(res)\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n             setBreadcrumbData(res.data.data)\r\n         } catch (err) {\r\n             setBreadcrumbData([])\r\n             console.log(err)\r\n@@ -256,10 +255,12 @@\n                 {/* {folderID !== prevFolderID &&\r\n                     <Link onClick={() => setFolderID(prevFolderID)}>\r\n                         <GrLinkPrevious />\r\n                     </Link>} */}\r\n-                    {/* Breadcrumbs */}\r\n-                    <Breadcrumbs data={breadcrumbData}/>\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n                 {/* List of documents docTypeList */}\r\n                 <FolderList\r\n                     docTypeList={docTypeList}\r\n                     setFolderID={setFolderID}\r\n"
                },
                {
                    "date": 1712224407296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,10 @@\n                 {/* List of documents docTypeList */}\r\n                 <FolderList\r\n                     docTypeList={docTypeList}\r\n                     setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName} />\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID} />\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1712225065564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,281 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    const handleDocTypeChange = async (selectedType) => {                                                             \r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Back button */}\r\n+                {/* {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>} */}\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712225199768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,281 +273,11 @@\n                 <FolderList\r\n                     docTypeList={docTypeList}\r\n                     setFolderID={setFolderID}\r\n                     setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID} />\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown} \r\n+                     setShowDropDown={setShowDropDown} />\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-        }\r\n-    }\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712225271954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,8 +163,9 @@\n     };\r\n     //Document Save Function\r\n     const SaveBulkDocument = async () => {\r\n         setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n         try {\r\n             let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n             if (res.data.message === \"Document Upload\") {\r\n                 toast.success(\r\n"
                },
                {
                    "date": 1712231354856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,13 +260,8 @@\n                     handleBulkFileChange={handleBulkFileChange}\r\n                     saveBtn={saveBtn}\r\n                     loadingBtn={loadingBtn}\r\n                     SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Back button */}\r\n-                {/* {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>} */}\r\n                 {/* Breadcrumbs */}\r\n                 <Breadcrumbs\r\n                     data={breadcrumbData}\r\n                     setFolderID={setFolderID} />\r\n"
                },
                {
                    "date": 1712231943689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n     const [loadingBtn, setLoadingBtn] = useState(false);\r\n     const [breadcrumbData, setBreadcrumbData] = useState('');\r\n     const [docTypeList, setDocTypeList] = useState([]);\r\n     const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n \r\n     const DocTypeData =\r\n         emp_user_type === 'employer'\r\n             ? [\r\n@@ -186,8 +187,9 @@\n             setSaveBtn(false)\r\n             setShowDropDown(false)\r\n         }\r\n     }\r\n+    /*Had folder function */\r\n     const handleDocTypeChange = async (selectedType) => {                                                             \r\n         setDocTypeName(selectedType);\r\n         setShowDropDown(false)\r\n         if (selectedType === 'other') {\r\n@@ -212,9 +214,9 @@\n             }\r\n         }\r\n \r\n     };\r\n-\r\n+/*Type folder name function */\r\n     const handleNewTypeChange = (e) => {\r\n         const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n         setNewType(value);\r\n     };\r\n@@ -271,9 +273,11 @@\n                     setFolderID={setFolderID}\r\n                     setDocTypeName={setDocTypeName}\r\n                     folderID={folderID}\r\n                     showDropDown={showDropDown} \r\n-                     setShowDropDown={setShowDropDown} />\r\n+                     setShowDropDown={setShowDropDown}\r\n+                     editNameForm={editNameForm}\r\n+                      setEditNameForm={setEditNameForm} />\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1712233090003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {                                                             \r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+/*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown} \r\n+                     setShowDropDown={setShowDropDown}\r\n+                     setDocSingleDate={setDocSingleDate}\r\n+                      setEditNameForm={setEditNameForm} />\r\n+            </div>\r\n+            {editNameForm&&\r\n+            <EditDocNameFOrm\r\n+            userId={employee_id}\r\n+            name={}\r\n+            docId={}\r\n+            userType={emp_user_type}\r\n+            />\r\n+            }\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712233145224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                />\r\n+            }\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712233217567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,295 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                />\r\n+            }\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712235035304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,8 +287,9 @@\n                     docId={docSingleDate.id}\r\n                     userType={emp_user_type}\r\n                     show={editNameForm}\r\n                     close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n                 />\r\n             }\r\n         </div>\r\n     );\r\n"
                },
                {
                    "date": 1712291764545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,8 +279,9 @@\n                     setShowDropDown={setShowDropDown}\r\n                     setDocSingleDate={setDocSingleDate}\r\n                     setEditNameForm={setEditNameForm} />\r\n             </div>\r\n+            {console.log(docSingleDate)}\r\n             {editNameForm &&\r\n                 <EditDocNameFOrm\r\n                     userId={employee_id}\r\n                     name={docSingleDate.name}\r\n@@ -293,873 +294,4 @@\n             }\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                />\r\n-            }\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {                                                             \r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-/*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown} \r\n-                     setShowDropDown={setShowDropDown}\r\n-                     setDocSingleDate={setDocSingleDate}\r\n-                      setEditNameForm={setEditNameForm} />\r\n-            </div>\r\n-            {editNameForm&&\r\n-            <EditDocNameFOrm\r\n-            userId={employee_id}\r\n-            name={}\r\n-            docId={}\r\n-            userType={emp_user_type}\r\n-            />\r\n-            }\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {                                                             \r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-/*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown} \r\n-                     setShowDropDown={setShowDropDown}\r\n-                     editNameForm={editNameForm}\r\n-                      setEditNameForm={setEditNameForm} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712291860776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,297 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712294048886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument,getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n // import { Link } from 'react-router-dom';\r\n // import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n@@ -20,9 +20,19 @@\n     const [docTypeList, setDocTypeList] = useState([]);\r\n     const [showDropDown, setShowDropDown] = useState(false);\r\n     const [editNameForm, setEditNameForm] = useState(false)\r\n     const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-\r\n+  /*delete state */\r\n+  const [deleteAlert, setDeleteAlert] = useState(false);\r\n+  const [deleteId, setDeleteID] = useState();\r\n+  const [deleteName, setDeleteName] = useState(\"\");\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteID(e.id);\r\n+        setDeleteName(e.name);\r\n+        setDeleteAlert(true);\r\n+      };\r\n+    \r\n     const DocTypeData =\r\n         emp_user_type === 'employer'\r\n             ? [\r\n                 'Business T2',\r\n@@ -221,8 +231,24 @@\n     const handleNewTypeChange = (e) => {\r\n         const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n         setNewType(value);\r\n     };\r\n+      /*To call Api to delete employee */\r\n+  async function DeleteSharepointDocument(e) {\r\n+    try {\r\n+      const responseData = await DeleteFolderOrDocument(e);\r\n+    //   if (responseData.message === \"Employee has been deleted\") {\r\n+    //     toast.error(\"Candidate deleted Successfully\", {\r\n+    //       position: toast.POSITION.TOP_RIGHT,\r\n+    //       autoClose: 1000,\r\n+    //     });\r\n+    //     setDeleteAlert(false);\r\n+    //     setApiCall(true);\r\n+    //   }\r\n+    } catch (err) {\r\n+      console.log(err);\r\n+    }\r\n+  }\r\n     return (\r\n         <div className={'document_container bg-white'}>\r\n             <div className=\"row h-100vh m-0 bg-white\">\r\n                 {/* Button to add folder or type and upload documents */}\r\n@@ -277,9 +303,10 @@\n                     folderID={folderID}\r\n                     showDropDown={showDropDown}\r\n                     setShowDropDown={setShowDropDown}\r\n                     setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm} />\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n             </div>\r\n             {editNameForm &&\r\n                 <EditDocNameFOrm\r\n                     userId={employee_id}\r\n@@ -291,304 +318,15 @@\n                     setApiCall={setApiCall}\r\n                     EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n                 />\r\n             }\r\n+            <SAlert\r\n+        show={deleteAlert}\r\n+        title={deleteName}\r\n+        text=\"Are you Sure you want to delete !\"\r\n+        onConfirm={() => DeleteSharepointDocument(deleteId)}\r\n+        showCancelButton={true}\r\n+        onCancel={CancelDelete}\r\n+      />\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm} />\r\n-            </div>\r\n-            {console.log(docSingleDate)}\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                />\r\n-            }\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712294319820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,330 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument,getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+  /*delete state */\r\n+  const [deleteAlert, setDeleteAlert] = useState(false);\r\n+  const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+      };\r\n+    \r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+      /*To call Api to delete employee */\r\n+  async function DeleteSharepointDocument(e) {\r\n+    try {\r\n+      const responseData = await DeleteFolderOrDocument(e);\r\n+    //   if (responseData.message === \"Employee has been deleted\") {\r\n+    //     toast.error(\"Candidate deleted Successfully\", {\r\n+    //       position: toast.POSITION.TOP_RIGHT,\r\n+    //       autoClose: 1000,\r\n+    //     });\r\n+    //     setDeleteAlert(false);\r\n+    //     setApiCall(true);\r\n+    //   }\r\n+    } catch (err) {\r\n+      console.log(err);\r\n+    }\r\n+  }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            <SAlert\r\n+        show={deleteAlert}\r\n+        title={deleteName}\r\n+        text=\"Are you Sure you want to delete !\"\r\n+        onConfirm={() => DeleteSharepointDocument(deleteId)}\r\n+        showCancelButton={true}\r\n+        onCancel={()=>setDeleteAlert(false)}\r\n+      />\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712294358881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,11 +318,11 @@\n                 />\r\n             }\r\n             <SAlert\r\n         show={deleteAlert}\r\n-        title={deleteName}\r\n+        title={deleteData.name}\r\n         text=\"Are you Sure you want to delete !\"\r\n-        onConfirm={() => DeleteSharepointDocument(deleteId)}\r\n+        onConfirm={() => DeleteSharepointDocument(deleteData.id,deleteData.folder? \"folder\" : \"file\")}\r\n         showCancelButton={true}\r\n         onCancel={()=>setDeleteAlert(false)}\r\n       />\r\n         </div>\r\n"
                },
                {
                    "date": 1712294396668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,331 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete employee */\r\n+    async function DeleteSharepointDocument(e) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(e);\r\n+            //   if (responseData.message === \"Employee has been deleted\") {\r\n+            //     toast.error(\"Candidate deleted Successfully\", {\r\n+            //       position: toast.POSITION.TOP_RIGHT,\r\n+            //       autoClose: 1000,\r\n+            //     });\r\n+            //     setDeleteAlert(false);\r\n+            //     setApiCall(true);\r\n+            //   }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            <SAlert\r\n+                show={deleteAlert}\r\n+                title={deleteData.name}\r\n+                text=\"Are you Sure you want to delete !\"\r\n+                onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"file\")}\r\n+                showCancelButton={true}\r\n+                onCancel={() => setDeleteAlert(false)}\r\n+            />\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712294413632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect } from 'react';\r\n import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n-import SAlert from \"../common/sweetAlert\";\r\n+import SAlert from \"../../common/sweetAlert\";\r\n // import { Link } from 'react-router-dom';\r\n // import { GrLinkPrevious } from \"react-icons/gr\";\r\n import FolderList from './FolderList';\r\n import { toast } from 'react-toastify';\r\n@@ -328,666 +328,4 @@\n             />\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument,getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-  /*delete state */\r\n-  const [deleteAlert, setDeleteAlert] = useState(false);\r\n-  const [deleteData, setDeleteData] = useState();\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteData(e);\r\n-        setDeleteAlert(true);\r\n-      };\r\n-    \r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-      /*To call Api to delete employee */\r\n-  async function DeleteSharepointDocument(e) {\r\n-    try {\r\n-      const responseData = await DeleteFolderOrDocument(e);\r\n-    //   if (responseData.message === \"Employee has been deleted\") {\r\n-    //     toast.error(\"Candidate deleted Successfully\", {\r\n-    //       position: toast.POSITION.TOP_RIGHT,\r\n-    //       autoClose: 1000,\r\n-    //     });\r\n-    //     setDeleteAlert(false);\r\n-    //     setApiCall(true);\r\n-    //   }\r\n-    } catch (err) {\r\n-      console.log(err);\r\n-    }\r\n-  }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            <SAlert\r\n-        show={deleteAlert}\r\n-        title={deleteData.name}\r\n-        text=\"Are you Sure you want to delete !\"\r\n-        onConfirm={() => DeleteSharepointDocument(deleteData.id,deleteData.folder? \"folder\" : \"file\")}\r\n-        showCancelButton={true}\r\n-        onCancel={()=>setDeleteAlert(false)}\r\n-      />\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument,getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-  /*delete state */\r\n-  const [deleteAlert, setDeleteAlert] = useState(false);\r\n-  const [deleteId, setDeleteID] = useState();\r\n-  const [deleteName, setDeleteName] = useState(\"\");\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteID(e.id);\r\n-        setDeleteName(e.name);\r\n-        setDeleteAlert(true);\r\n-      };\r\n-    \r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-      /*To call Api to delete employee */\r\n-  async function DeleteSharepointDocument(e) {\r\n-    try {\r\n-      const responseData = await DeleteFolderOrDocument(e);\r\n-    //   if (responseData.message === \"Employee has been deleted\") {\r\n-    //     toast.error(\"Candidate deleted Successfully\", {\r\n-    //       position: toast.POSITION.TOP_RIGHT,\r\n-    //       autoClose: 1000,\r\n-    //     });\r\n-    //     setDeleteAlert(false);\r\n-    //     setApiCall(true);\r\n-    //   }\r\n-    } catch (err) {\r\n-      console.log(err);\r\n-    }\r\n-  }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            <SAlert\r\n-        show={deleteAlert}\r\n-        title={deleteName}\r\n-        text=\"Are you Sure you want to delete !\"\r\n-        onConfirm={() => DeleteSharepointDocument(deleteId)}\r\n-        showCancelButton={true}\r\n-        onCancel={CancelDelete}\r\n-      />\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712294451592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,8 +317,9 @@\n                     setApiCall={setApiCall}\r\n                     EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n                 />\r\n             }\r\n+            {console.log(deleteData)}\r\n             <SAlert\r\n                 show={deleteAlert}\r\n                 title={deleteData.name}\r\n                 text=\"Are you Sure you want to delete !\"\r\n"
                },
                {
                    "date": 1712294506643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,332 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete employee */\r\n+    async function DeleteSharepointDocument(e) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(e);\r\n+            //   if (responseData.message === \"Employee has been deleted\") {\r\n+            //     toast.error(\"Candidate deleted Successfully\", {\r\n+            //       position: toast.POSITION.TOP_RIGHT,\r\n+            //       autoClose: 1000,\r\n+            //     });\r\n+            //     setDeleteAlert(false);\r\n+            //     setApiCall(true);\r\n+            //   }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"file\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={() => setDeleteAlert(false)}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712294521862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,343 +322,11 @@\n                 <SAlert\r\n                     show={deleteAlert}\r\n                     title={deleteData.name}\r\n                     text=\"Are you Sure you want to delete !\"\r\n-                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"file\")}\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n                     showCancelButton={true}\r\n                     onCancel={() => setDeleteAlert(false)}\r\n                 />}\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import SAlert from \"../../common/sweetAlert\";\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-    /*delete state */\r\n-    const [deleteAlert, setDeleteAlert] = useState(false);\r\n-    const [deleteData, setDeleteData] = useState();\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteData(e);\r\n-        setDeleteAlert(true);\r\n-    };\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    /*To call Api to delete employee */\r\n-    async function DeleteSharepointDocument(e) {\r\n-        try {\r\n-            const responseData = await DeleteFolderOrDocument(e);\r\n-            //   if (responseData.message === \"Employee has been deleted\") {\r\n-            //     toast.error(\"Candidate deleted Successfully\", {\r\n-            //       position: toast.POSITION.TOP_RIGHT,\r\n-            //       autoClose: 1000,\r\n-            //     });\r\n-            //     setDeleteAlert(false);\r\n-            //     setApiCall(true);\r\n-            //   }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-        }\r\n-    }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            {console.log(deleteData)}\r\n-            <SAlert\r\n-                show={deleteAlert}\r\n-                title={deleteData.name}\r\n-                text=\"Are you Sure you want to delete !\"\r\n-                onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"file\")}\r\n-                showCancelButton={true}\r\n-                onCancel={() => setDeleteAlert(false)}\r\n-            />\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712294584192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,11 +231,11 @@\n         const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n         setNewType(value);\r\n     };\r\n     /*To call Api to delete employee */\r\n-    async function DeleteSharepointDocument(e) {\r\n+    async function DeleteSharepointDocument(id, type) {\r\n         try {\r\n-            const responseData = await DeleteFolderOrDocument(e);\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n             //   if (responseData.message === \"Employee has been deleted\") {\r\n             //     toast.error(\"Candidate deleted Successfully\", {\r\n             //       position: toast.POSITION.TOP_RIGHT,\r\n             //       autoClose: 1000,\r\n"
                },
                {
                    "date": 1712294594197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,333 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete employee */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            console.log(responseData)\r\n+            //   if (responseData.message === \"Employee has been deleted\") {\r\n+            //     toast.error(\"Candidate deleted Successfully\", {\r\n+            //       position: toast.POSITION.TOP_RIGHT,\r\n+            //       autoClose: 1000,\r\n+            //     });\r\n+            //     setDeleteAlert(false);\r\n+            //     setApiCall(true);\r\n+            //   }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={() => setDeleteAlert(false)}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712294710517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,335 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete employee */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            console.log(responseData)\r\n+            if (responseData.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={() => setDeleteAlert(false)}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712294723976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,334 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete Folder or document */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            if (responseData.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={() => setDeleteAlert(false)}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712294768270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n     /*To call Api to delete Folder or document */\r\n     async function DeleteSharepointDocument(id, type) {\r\n         try {\r\n             const responseData = await DeleteFolderOrDocument(id, type);\r\n-            if (responseData.message ===\r\n+            if (responseData.data.message ===\r\n                 \"Document deleted successfully!\") {\r\n                 toast.error(\r\n                     \"Document deleted successfully!\", {\r\n                     position: toast.POSITION.TOP_RIGHT,\r\n@@ -331,1004 +331,4 @@\n                 />}\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import SAlert from \"../../common/sweetAlert\";\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-    /*delete state */\r\n-    const [deleteAlert, setDeleteAlert] = useState(false);\r\n-    const [deleteData, setDeleteData] = useState();\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteData(e);\r\n-        setDeleteAlert(true);\r\n-    };\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    /*To call Api to delete employee */\r\n-    async function DeleteSharepointDocument(id, type) {\r\n-        try {\r\n-            const responseData = await DeleteFolderOrDocument(id, type);\r\n-            console.log(responseData)\r\n-            if (responseData.message ===\r\n-                \"Document deleted successfully!\") {\r\n-                toast.error(\r\n-                    \"Document deleted successfully!\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                setDeleteAlert(false);\r\n-                setApiCall(true);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-        }\r\n-    }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            {deleteAlert &&\r\n-                <SAlert\r\n-                    show={deleteAlert}\r\n-                    title={deleteData.name}\r\n-                    text=\"Are you Sure you want to delete !\"\r\n-                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n-                    showCancelButton={true}\r\n-                    onCancel={() => setDeleteAlert(false)}\r\n-                />}\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import SAlert from \"../../common/sweetAlert\";\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-    /*delete state */\r\n-    const [deleteAlert, setDeleteAlert] = useState(false);\r\n-    const [deleteData, setDeleteData] = useState();\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteData(e);\r\n-        setDeleteAlert(true);\r\n-    };\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    /*To call Api to delete employee */\r\n-    async function DeleteSharepointDocument(id, type) {\r\n-        try {\r\n-            const responseData = await DeleteFolderOrDocument(id, type);\r\n-            console.log(responseData)\r\n-            //   if (responseData.message === \"Employee has been deleted\") {\r\n-            //     toast.error(\"Candidate deleted Successfully\", {\r\n-            //       position: toast.POSITION.TOP_RIGHT,\r\n-            //       autoClose: 1000,\r\n-            //     });\r\n-            //     setDeleteAlert(false);\r\n-            //     setApiCall(true);\r\n-            //   }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-        }\r\n-    }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            {deleteAlert &&\r\n-                <SAlert\r\n-                    show={deleteAlert}\r\n-                    title={deleteData.name}\r\n-                    text=\"Are you Sure you want to delete !\"\r\n-                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n-                    showCancelButton={true}\r\n-                    onCancel={() => setDeleteAlert(false)}\r\n-                />}\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import SAlert from \"../../common/sweetAlert\";\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-    /*delete state */\r\n-    const [deleteAlert, setDeleteAlert] = useState(false);\r\n-    const [deleteData, setDeleteData] = useState();\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteData(e);\r\n-        setDeleteAlert(true);\r\n-    };\r\n-\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    /*To call Api to delete employee */\r\n-    async function DeleteSharepointDocument(id, type) {\r\n-        try {\r\n-            const responseData = await DeleteFolderOrDocument(id, type);\r\n-            //   if (responseData.message === \"Employee has been deleted\") {\r\n-            //     toast.error(\"Candidate deleted Successfully\", {\r\n-            //       position: toast.POSITION.TOP_RIGHT,\r\n-            //       autoClose: 1000,\r\n-            //     });\r\n-            //     setDeleteAlert(false);\r\n-            //     setApiCall(true);\r\n-            //   }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-        }\r\n-    }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            {deleteAlert &&\r\n-                <SAlert\r\n-                    show={deleteAlert}\r\n-                    title={deleteData.name}\r\n-                    text=\"Are you Sure you want to delete !\"\r\n-                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n-                    showCancelButton={true}\r\n-                    onCancel={() => setDeleteAlert(false)}\r\n-                />}\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712294927747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,12 @@\n     const ShowDeleteAlert = (e) => {\r\n         setDeleteData(e);\r\n         setDeleteAlert(true);\r\n     };\r\n-\r\n+  /*To cancel the delete alert box */\r\n+  const CancelDelete = () => {\r\n+    setDeleteAlert(false);\r\n+  };\r\n     const DocTypeData =\r\n         emp_user_type === 'employer'\r\n             ? [\r\n                 'Business T2',\r\n@@ -326,9 +329,9 @@\n                     title={deleteData.name}\r\n                     text=\"Are you Sure you want to delete !\"\r\n                     onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n                     showCancelButton={true}\r\n-                    onCancel={() => setDeleteAlert(false)}\r\n+                    onCancel={CancelDelete}\r\n                 />}\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1712294993561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+  /*To cancel the delete alert box */\r\n+  const CancelDelete = () => {\r\n+    setDeleteAlert(false);\r\n+  };\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete Folder or document */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            if (responseData.data.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={()=>CancelDelete()}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712295015635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,12 +29,12 @@\n     const ShowDeleteAlert = (e) => {\r\n         setDeleteData(e);\r\n         setDeleteAlert(true);\r\n     };\r\n-  /*To cancel the delete alert box */\r\n-  const CancelDelete = () => {\r\n-    setDeleteAlert(false);\r\n-  };\r\n+    /*To cancel the delete alert box */\r\n+    const CancelDelete = () => {\r\n+        setDeleteAlert(false);\r\n+    };\r\n     const DocTypeData =\r\n         emp_user_type === 'employer'\r\n             ? [\r\n                 'Business T2',\r\n@@ -329,9 +329,9 @@\n                     title={deleteData.name}\r\n                     text=\"Are you Sure you want to delete !\"\r\n                     onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n                     showCancelButton={true}\r\n-                    onCancel={()=>CancelDelete()}\r\n+                    onCancel={() => CancelDelete()}\r\n                 />}\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1712295203300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,9 +329,9 @@\n                     title={deleteData.name}\r\n                     text=\"Are you Sure you want to delete !\"\r\n                     onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n                     showCancelButton={true}\r\n-                    onCancel={() => CancelDelete()}\r\n+                    onCancel={console.log(\"object\")}\r\n                 />}\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1712295258834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+    /*To cancel the delete alert box */\r\n+    const CancelDelete = () => {\r\n+        setDeleteAlert(false);\r\n+    };\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete Folder or document */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            if (responseData.data.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={()=>console.log(\"object\")}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712295317933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,683 +329,9 @@\n                     title={deleteData.name}\r\n                     text=\"Are you Sure you want to delete !\"\r\n                     onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n                     showCancelButton={true}\r\n-                    onCancel={()=>console.log(\"object\")}\r\n+                    onCancel={()=>CancelDelete()}\r\n                 />}\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import SAlert from \"../../common/sweetAlert\";\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-    /*delete state */\r\n-    const [deleteAlert, setDeleteAlert] = useState(false);\r\n-    const [deleteData, setDeleteData] = useState();\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteData(e);\r\n-        setDeleteAlert(true);\r\n-    };\r\n-    /*To cancel the delete alert box */\r\n-    const CancelDelete = () => {\r\n-        setDeleteAlert(false);\r\n-    };\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    /*To call Api to delete Folder or document */\r\n-    async function DeleteSharepointDocument(id, type) {\r\n-        try {\r\n-            const responseData = await DeleteFolderOrDocument(id, type);\r\n-            if (responseData.data.message ===\r\n-                \"Document deleted successfully!\") {\r\n-                toast.error(\r\n-                    \"Document deleted successfully!\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                setDeleteAlert(false);\r\n-                setApiCall(true);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-        }\r\n-    }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            {deleteAlert &&\r\n-                <SAlert\r\n-                    show={deleteAlert}\r\n-                    title={deleteData.name}\r\n-                    text=\"Are you Sure you want to delete !\"\r\n-                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n-                    showCancelButton={true}\r\n-                    onCancel={console.log(\"object\")}\r\n-                />}\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import SAlert from \"../../common/sweetAlert\";\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-    /*delete state */\r\n-    const [deleteAlert, setDeleteAlert] = useState(false);\r\n-    const [deleteData, setDeleteData] = useState();\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteData(e);\r\n-        setDeleteAlert(true);\r\n-    };\r\n-  /*To cancel the delete alert box */\r\n-  const CancelDelete = () => {\r\n-    setDeleteAlert(false);\r\n-  };\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    /*To call Api to delete Folder or document */\r\n-    async function DeleteSharepointDocument(id, type) {\r\n-        try {\r\n-            const responseData = await DeleteFolderOrDocument(id, type);\r\n-            if (responseData.data.message ===\r\n-                \"Document deleted successfully!\") {\r\n-                toast.error(\r\n-                    \"Document deleted successfully!\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                setDeleteAlert(false);\r\n-                setApiCall(true);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-        }\r\n-    }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            {deleteAlert &&\r\n-                <SAlert\r\n-                    show={deleteAlert}\r\n-                    title={deleteData.name}\r\n-                    text=\"Are you Sure you want to delete !\"\r\n-                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n-                    showCancelButton={true}\r\n-                    onCancel={CancelDelete}\r\n-                />}\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1712295327042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+    /*To cancel the delete alert box */\r\n+    const CancelDelete = () => {\r\n+        console.log(\"ccccccc\")\r\n+        // setDeleteAlert(false);\r\n+    };\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete Folder or document */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            if (responseData.data.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={()=>CancelDelete()}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712295357218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,346 +31,9 @@\n         setDeleteAlert(true);\r\n     };\r\n     /*To cancel the delete alert box */\r\n     const CancelDelete = () => {\r\n-        console.log(\"ccccccc\")\r\n-        // setDeleteAlert(false);\r\n-    };\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            // if (folderID) {\r\n-            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-                setShowDropDown(false)\r\n-                // setFolderID(res.data.data[0].parentReference.id)\r\n-            } else if (res.data.data === 'No Documents Found') {\r\n-                setDocTypeList([])\r\n-                setShowDropDown(false)\r\n-            }\r\n-            // } else {\r\n-            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            //     if (res.data.status === 1) {\r\n-            //         setDocTypeList(res.data.data)\r\n-            //     }\r\n-            // }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-        /*Api for breadcrumb */\r\n-        try {\r\n-            let res = await getFolderBreadcrumb(folderID)\r\n-            setBreadcrumbData(res.data.data)\r\n-            setShowDropDown(false)\r\n-        } catch (err) {\r\n-            setBreadcrumbData([])\r\n-            console.log(err)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-        if (apiCall === true) {\r\n-            setApiCall(false)\r\n-        }\r\n-    }, [folderID, apiCall])\r\n-    /*On change fnction to upload bulk document in 1 array*/\r\n-    const handleBulkFileChange = async (event, id) => {\r\n-        const files = event.target.files;\r\n-        {\r\n-            // Check the number of files selected\r\n-            if (files.length > 30) {\r\n-                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                return;\r\n-            }\r\n-\r\n-            // Continue with file validation and processing\r\n-            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-            const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-            const filebseList = [];\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const file = files[i];\r\n-                // Check file type\r\n-                const fileType = `.${file.name.split(\".\").pop()}`;\r\n-                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-                    toast.error(\r\n-                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Check file size\r\n-                if (file.size > maxSize) {\r\n-                    toast.error(\r\n-                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    return;\r\n-                }\r\n-\r\n-                // Read file as data URL\r\n-                const reader = new FileReader();\r\n-                reader.readAsDataURL(file);\r\n-                //For drive uploade\r\n-                filebseList.push(file)\r\n-            }\r\n-            // Store the object of files\r\n-            setDocFileBase(filebseList);\r\n-            setSaveBtn(true)\r\n-            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-        }\r\n-    };\r\n-    //Document Save Function\r\n-    const SaveBulkDocument = async () => {\r\n-        setLoadingBtn(true)\r\n-        setShowDropDown(false)\r\n-        try {\r\n-            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n-            if (res.data.message === \"Document Upload\") {\r\n-                toast.success(\r\n-                    `Document Uploaded successfully`,\r\n-                    {\r\n-                        position: toast.POSITION.TOP_RIGHT,\r\n-                        autoClose: 1000,\r\n-                    }\r\n-                );\r\n-                setApiCall(true)\r\n-                setLoadingBtn(false)\r\n-                setSaveBtn(false)\r\n-                setShowDropDown(false)\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err)\r\n-            setLoadingBtn(false)\r\n-            setSaveBtn(false)\r\n-            setShowDropDown(false)\r\n-        }\r\n-    }\r\n-    /*Had folder function */\r\n-    const handleDocTypeChange = async (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        setShowDropDown(false)\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        } else {\r\n-            try {\r\n-                let res = await AddSharePointFolders(selectedType, folderID)\r\n-                if (res.data.message ===\r\n-                    \"Folder created successfully!\") {\r\n-                    toast.success(\r\n-                        `Type Created successfully`,\r\n-                        {\r\n-                            position: toast.POSITION.TOP_RIGHT,\r\n-                            autoClose: 1000,\r\n-                        }\r\n-                    );\r\n-                    setApiCall(true)\r\n-                }\r\n-            } catch (Err) {\r\n-                console.log(Err)\r\n-            }\r\n-        }\r\n-\r\n-    };\r\n-    /*Type folder name function */\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-    /*To call Api to delete Folder or document */\r\n-    async function DeleteSharepointDocument(id, type) {\r\n-        try {\r\n-            const responseData = await DeleteFolderOrDocument(id, type);\r\n-            if (responseData.data.message ===\r\n-                \"Document deleted successfully!\") {\r\n-                toast.error(\r\n-                    \"Document deleted successfully!\", {\r\n-                    position: toast.POSITION.TOP_RIGHT,\r\n-                    autoClose: 1000,\r\n-                });\r\n-                setDeleteAlert(false);\r\n-                setApiCall(true);\r\n-            }\r\n-        } catch (err) {\r\n-            console.log(err);\r\n-        }\r\n-    }\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row h-100vh m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                <div className=''>\r\n-                    {docTypeName === 'other' ? (\r\n-                        <>\r\n-                            <Form.Control\r\n-                                type=\"text\"\r\n-                                value={newType}\r\n-                                placeholder=\"Enter new type\"\r\n-                                onChange={handleNewTypeChange}\r\n-                            />\r\n-                            <button type='button'\r\n-                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n-                        </>\r\n-                    ) : (\r\n-                        <Dropdown>\r\n-                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                                + Add New type\r\n-                            </Dropdown.Toggle>\r\n-                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                    Select document\r\n-                                </Dropdown.Item>\r\n-                                {DocTypeData.map((item, index) => (\r\n-                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                        {item.replaceAll(\"_\", \" \")}\r\n-                                    </Dropdown.Item>\r\n-                                ))}\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                    Other\r\n-                                </Dropdown.Item>\r\n-                            </Dropdown.Menu>\r\n-                        </Dropdown>\r\n-                    )}\r\n-                </div>\r\n-                {/* Upload Document form*/}\r\n-                <DocSaveForm\r\n-                    handleBulkFileChange={handleBulkFileChange}\r\n-                    saveBtn={saveBtn}\r\n-                    loadingBtn={loadingBtn}\r\n-                    SaveBulkDocument={SaveBulkDocument} />\r\n-                {/* Breadcrumbs */}\r\n-                <Breadcrumbs\r\n-                    data={breadcrumbData}\r\n-                    setFolderID={setFolderID} />\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setDocTypeName={setDocTypeName}\r\n-                    folderID={folderID}\r\n-                    showDropDown={showDropDown}\r\n-                    setShowDropDown={setShowDropDown}\r\n-                    setDocSingleDate={setDocSingleDate}\r\n-                    setEditNameForm={setEditNameForm}\r\n-                    ShowDeleteAlert={ShowDeleteAlert} />\r\n-            </div>\r\n-            {editNameForm &&\r\n-                <EditDocNameFOrm\r\n-                    userId={employee_id}\r\n-                    name={docSingleDate.name}\r\n-                    docId={docSingleDate.id}\r\n-                    userType={emp_user_type}\r\n-                    show={editNameForm}\r\n-                    close={() => setEditNameForm(false)}\r\n-                    setApiCall={setApiCall}\r\n-                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n-                />\r\n-            }\r\n-            {deleteAlert &&\r\n-                <SAlert\r\n-                    show={deleteAlert}\r\n-                    title={deleteData.name}\r\n-                    text=\"Are you Sure you want to delete !\"\r\n-                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n-                    showCancelButton={true}\r\n-                    onCancel={()=>CancelDelete()}\r\n-                />}\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import SAlert from \"../../common/sweetAlert\";\r\n-// import { Link } from 'react-router-dom';\r\n-// import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './FolderList';\r\n-import { toast } from 'react-toastify';\r\n-import DocSaveForm from './DocSaveForm';\r\n-import Breadcrumbs from './Breadcrumb';\r\n-import EditDocNameFOrm from './EditDocNameFOrm';\r\n-export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState(folderId);\r\n-    const [apiCall, setApiCall] = useState(false);\r\n-    const [saveBtn, setSaveBtn] = useState(false);\r\n-    const [loadingBtn, setLoadingBtn] = useState(false);\r\n-    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const [showDropDown, setShowDropDown] = useState(false);\r\n-    const [editNameForm, setEditNameForm] = useState(false)\r\n-    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n-    /*delete state */\r\n-    const [deleteAlert, setDeleteAlert] = useState(false);\r\n-    const [deleteData, setDeleteData] = useState();\r\n-    /*To Show the delete alert box */\r\n-    const ShowDeleteAlert = (e) => {\r\n-        setDeleteData(e);\r\n-        setDeleteAlert(true);\r\n-    };\r\n-    /*To cancel the delete alert box */\r\n-    const CancelDelete = () => {\r\n+        console.log(\"ccccccc\",deleteAlert)\r\n         setDeleteAlert(false);\r\n     };\r\n     const DocTypeData =\r\n         emp_user_type === 'employer'\r\n"
                },
                {
                    "date": 1712295408338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+    /*To cancel the delete alert box */\r\n+    const CancelDelete = () => {\r\n+        setDeleteAlert(false);\r\n+        console.log(\"ccccccc\",deleteAlert)\r\n+    };\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete Folder or document */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            if (responseData.data.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={()=>CancelDelete()}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712295432949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,338 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+    /*To cancel the delete alert box */\r\n+    const CancelDelete = () => {\r\n+        setDeleteAlert(false);\r\n+    };\r\n+    console.log(\"ccccccc\",deleteAlert)\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete Folder or document */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            if (responseData.data.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={()=>CancelDelete()}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712295469143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+    /*To cancel the delete alert box */\r\n+    const CancelDelete = () => {\r\n+        setDeleteAlert(false);\r\n+    };\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete Folder or document */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            if (responseData.data.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            {deleteAlert===true &&\r\n+                <SAlert\r\n+                    show={deleteAlert}\r\n+                    title={deleteData.name}\r\n+                    text=\"Are you Sure you want to delete !\"\r\n+                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                    showCancelButton={true}\r\n+                    onCancel={()=>CancelDelete()}\r\n+                />}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1712295573939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,16 +322,15 @@\n                     setApiCall={setApiCall}\r\n                     EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n                 />\r\n             }\r\n-            {deleteAlert === true &&\r\n-                <SAlert\r\n-                    show={deleteAlert}\r\n-                    title={deleteData.name}\r\n-                    text=\"Are you Sure you want to delete !\"\r\n-                    onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n-                    showCancelButton={true}\r\n-                    onCancel={() => CancelDelete()}\r\n-                />}\r\n+            <SAlert\r\n+                show={deleteAlert}\r\n+                title={deleteData ? deleteData.name : \"\"}\r\n+                text=\"Are you Sure you want to delete !\"\r\n+                onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                showCancelButton={true}\r\n+                onCancel={() => CancelDelete()}\r\n+            />\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1712295613825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { /*getSharePointFoldersList,*/DeleteFolderOrDocument, getFolderBreadcrumb, AddSharePointFolders, getSharePointParticularFolders, AddSharePointDOcument } from '../../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import SAlert from \"../../common/sweetAlert\";\r\n+// import { Link } from 'react-router-dom';\r\n+// import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './FolderList';\r\n+import { toast } from 'react-toastify';\r\n+import DocSaveForm from './DocSaveForm';\r\n+import Breadcrumbs from './Breadcrumb';\r\n+import EditDocNameFOrm from './EditDocNameFOrm';\r\n+export default function SharePointDocument({ emp_user_type, employee_id, folderId }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState(folderId);\r\n+    const [apiCall, setApiCall] = useState(false);\r\n+    const [saveBtn, setSaveBtn] = useState(false);\r\n+    const [loadingBtn, setLoadingBtn] = useState(false);\r\n+    const [breadcrumbData, setBreadcrumbData] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const [showDropDown, setShowDropDown] = useState(false);\r\n+    const [editNameForm, setEditNameForm] = useState(false)\r\n+    const [docSingleDate, setDocSingleDate] = useState(\"\")\r\n+    /*delete state */\r\n+    const [deleteAlert, setDeleteAlert] = useState(false);\r\n+    const [deleteData, setDeleteData] = useState();\r\n+    /*To Show the delete alert box */\r\n+    const ShowDeleteAlert = (e) => {\r\n+        setDeleteData(e);\r\n+        setDeleteAlert(true);\r\n+    };\r\n+    /*To cancel the delete alert box */\r\n+    const CancelDelete = () => {\r\n+        setDeleteAlert(false);\r\n+        setEditNameForm(false)\r\n+    };\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            // if (folderID) {\r\n+            let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+                setShowDropDown(false)\r\n+                // setFolderID(res.data.data[0].parentReference.id)\r\n+            } else if (res.data.data === 'No Documents Found') {\r\n+                setDocTypeList([])\r\n+                setShowDropDown(false)\r\n+            }\r\n+            // } else {\r\n+            //     let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            //     if (res.data.status === 1) {\r\n+            //         setDocTypeList(res.data.data)\r\n+            //     }\r\n+            // }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+        /*Api for breadcrumb */\r\n+        try {\r\n+            let res = await getFolderBreadcrumb(folderID)\r\n+            setBreadcrumbData(res.data.data)\r\n+            setShowDropDown(false)\r\n+        } catch (err) {\r\n+            setBreadcrumbData([])\r\n+            console.log(err)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+        if (apiCall === true) {\r\n+            setApiCall(false)\r\n+        }\r\n+    }, [folderID, apiCall])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            const filebseList = [];\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            setSaveBtn(true)\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };\r\n+    //Document Save Function\r\n+    const SaveBulkDocument = async () => {\r\n+        setLoadingBtn(true)\r\n+        setShowDropDown(false)\r\n+        try {\r\n+            let res = await AddSharePointDOcument(employee_id, emp_user_type, folderID, docTypeName, docFileBase)\r\n+            if (res.data.message === \"Document Upload\") {\r\n+                toast.success(\r\n+                    `Document Uploaded successfully`,\r\n+                    {\r\n+                        position: toast.POSITION.TOP_RIGHT,\r\n+                        autoClose: 1000,\r\n+                    }\r\n+                );\r\n+                setApiCall(true)\r\n+                setLoadingBtn(false)\r\n+                setSaveBtn(false)\r\n+                setShowDropDown(false)\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err)\r\n+            setLoadingBtn(false)\r\n+            setSaveBtn(false)\r\n+            setShowDropDown(false)\r\n+        }\r\n+    }\r\n+    /*Had folder function */\r\n+    const handleDocTypeChange = async (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        setShowDropDown(false)\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        } else {\r\n+            try {\r\n+                let res = await AddSharePointFolders(selectedType, folderID)\r\n+                if (res.data.message ===\r\n+                    \"Folder created successfully!\") {\r\n+                    toast.success(\r\n+                        `Type Created successfully`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    setApiCall(true)\r\n+                }\r\n+            } catch (Err) {\r\n+                console.log(Err)\r\n+            }\r\n+        }\r\n+\r\n+    };\r\n+    /*Type folder name function */\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+    /*To call Api to delete Folder or document */\r\n+    async function DeleteSharepointDocument(id, type) {\r\n+        try {\r\n+            const responseData = await DeleteFolderOrDocument(id, type);\r\n+            if (responseData.data.message ===\r\n+                \"Document deleted successfully!\") {\r\n+                toast.error(\r\n+                    \"Document deleted successfully!\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                setDeleteAlert(false);\r\n+                setApiCall(true);\r\n+            }\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+    }\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row h-100vh m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                <div className=''>\r\n+                    {docTypeName === 'other' ? (\r\n+                        <>\r\n+                            <Form.Control\r\n+                                type=\"text\"\r\n+                                value={newType}\r\n+                                placeholder=\"Enter new type\"\r\n+                                onChange={handleNewTypeChange}\r\n+                            />\r\n+                            <button type='button'\r\n+                                onClick={() => handleDocTypeChange(newType)}>save</button>\r\n+                        </>\r\n+                    ) : (\r\n+                        <Dropdown>\r\n+                            <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                                + Add New type\r\n+                            </Dropdown.Toggle>\r\n+                            <Dropdown.Menu style={{ height: \"400px\", overflowY: \"scroll\" }}>\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                    Select document\r\n+                                </Dropdown.Item>\r\n+                                {DocTypeData.map((item, index) => (\r\n+                                    <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                        {item.replaceAll(\"_\", \" \")}\r\n+                                    </Dropdown.Item>\r\n+                                ))}\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                    Other\r\n+                                </Dropdown.Item>\r\n+                            </Dropdown.Menu>\r\n+                        </Dropdown>\r\n+                    )}\r\n+                </div>\r\n+                {/* Upload Document form*/}\r\n+                <DocSaveForm\r\n+                    handleBulkFileChange={handleBulkFileChange}\r\n+                    saveBtn={saveBtn}\r\n+                    loadingBtn={loadingBtn}\r\n+                    SaveBulkDocument={SaveBulkDocument} />\r\n+                {/* Breadcrumbs */}\r\n+                <Breadcrumbs\r\n+                    data={breadcrumbData}\r\n+                    setFolderID={setFolderID} />\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setDocTypeName={setDocTypeName}\r\n+                    folderID={folderID}\r\n+                    showDropDown={showDropDown}\r\n+                    setShowDropDown={setShowDropDown}\r\n+                    setDocSingleDate={setDocSingleDate}\r\n+                    setEditNameForm={setEditNameForm}\r\n+                    ShowDeleteAlert={ShowDeleteAlert} />\r\n+            </div>\r\n+            {editNameForm &&\r\n+                <EditDocNameFOrm\r\n+                    userId={employee_id}\r\n+                    name={docSingleDate.name}\r\n+                    docId={docSingleDate.id}\r\n+                    userType={emp_user_type}\r\n+                    show={editNameForm}\r\n+                    close={() => setEditNameForm(false)}\r\n+                    setApiCall={setApiCall}\r\n+                    EditNameType={docSingleDate.folder ? \"folder\" : \"file\"}\r\n+                />\r\n+            }\r\n+            <SAlert\r\n+                show={deleteAlert}\r\n+                title={deleteData ? deleteData.name : \"\"}\r\n+                text=\"Are you Sure you want to delete !\"\r\n+                onConfirm={() => DeleteSharepointDocument(deleteData.id, deleteData.folder ? \"folder\" : \"document\")}\r\n+                showCancelButton={true}\r\n+                onCancel={() => CancelDelete()}\r\n+            />\r\n+        </div>\r\n+    );\r\n+}\r\n"
                }
            ],
            "date": 1711975031349,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { getSharePointFoldersList, getSharePointParticularFolders } from '../../../api/api';\r\n// import { Dropdown, Form } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { GrLinkPrevious } from \"react-icons/gr\";\r\nimport { AiOutlineCloudUpload } from \"react-icons/ai\"\r\nimport FolderList from './FolderList';\r\nimport { toast } from 'react-toastify';\r\nexport default function SharePointDocument({ emp_user_type, employee_id }) {\r\n    // const [docTypeName, setDocTypeName] = useState('');\r\n    // const [newType, setNewType] = useState('');\r\n    const [docFileBase, setDocFileBase] = useState('');\r\n    const [folderID, setFolderID] = useState('');\r\n    const [saveBtn, setSaveBtn] = useState(false);\r\n    const [loadingBtn, setLoadingBtn] = useState(false);\r\n    const [prevFolderID, setPrevFolderID] = useState('');\r\n    const [docTypeList, setDocTypeList] = useState([]);\r\n\r\n    // const DocTypeData =\r\n    //     emp_user_type === 'employer'\r\n    //         ? [\r\n    //             'Business T2',\r\n    //             'Recent PD7A',\r\n    //             'Business T4',\r\n    //             'Business Incorporation Certificate',\r\n    //             'Employment Contract',\r\n    //             'Schedule A',\r\n    //             'Signed Job Offer',\r\n    //             'PD7A of year',\r\n    //             'T2 Schedule 100 and 125',\r\n    //             'Certificate of incorporation',\r\n    //             'Business license',\r\n    //             'T4 summary of year',\r\n    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n    //             'CPA Attestation Letter',\r\n    //             'Representative Submission Letter',\r\n    //         ]\r\n    //         : [\r\n    //             'passport',\r\n    //             'drivers_license',\r\n    //             'photograph',\r\n    //             'immigration_status',\r\n    //             'lmia',\r\n    //             'job_offer_letter',\r\n    //             'provincial_nominee_letter',\r\n    //             'proof_of_funds',\r\n    //             'proof_of_employment',\r\n    //             'marriage_certificate',\r\n    //             'education_metric',\r\n    //             'education_higher_secondary',\r\n    //             'education_graduation',\r\n    //             'education_post_graduation',\r\n    //             'resume_or_cv',\r\n    //             'ielts',\r\n    //             'medical',\r\n    //             'police_clearance',\r\n    //             'refusal_letter',\r\n    //             'Employment Contract',\r\n    //             'Reference Letters',\r\n    //             'Client Info',\r\n    //             'Representative Submission Letter',\r\n    //             'Bank Statement',\r\n    //         ];\r\n    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n    const AllShareType = async () => {\r\n        try {\r\n            if (folderID) {\r\n                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n                if (res.data.status === 1) {\r\n                    setDocTypeList(res.data.data)\r\n                    setFolderID(res.data.data[0].parentReference.id)\r\n                }\r\n            } else {\r\n                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n                if (res.data.status === 1) {\r\n                    setDocTypeList(res.data.data)\r\n                }\r\n            }\r\n        } catch (Err) {\r\n            console.log(Err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        AllShareType()\r\n    }, [folderID])\r\n    /*On change fnction to upload bulk document in 1 array*/\r\n    const handleBulkFileChange = async (event, id) => {\r\n        const files = event.target.files;\r\n        {\r\n            // Check the number of files selected\r\n            if (files.length > 30) {\r\n                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n                    position: toast.POSITION.TOP_RIGHT,\r\n                    autoClose: 1000,\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Continue with file validation and processing\r\n            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n            const maxSize = 1024 * 8000; // 8 MB\r\n\r\n            const filebseList = [];\r\n            for (let i = 0; i < files.length; i++) {\r\n                const file = files[i];\r\n                // Check file type\r\n                const fileType = `.${file.name.split(\".\").pop()}`;\r\n                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n                    toast.error(\r\n                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n                        {\r\n                            position: toast.POSITION.TOP_RIGHT,\r\n                            autoClose: 1000,\r\n                        }\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                // Check file size\r\n                if (file.size > maxSize) {\r\n                    toast.error(\r\n                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n                        {\r\n                            position: toast.POSITION.TOP_RIGHT,\r\n                            autoClose: 1000,\r\n                        }\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                // Read file as data URL\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(file);\r\n                //For drive uploade\r\n                filebseList.push(file)\r\n            }\r\n            // Store the object of files\r\n            setDocFileBase(filebseList);\r\n            setSaveBtn(true)\r\n            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n        }\r\n    };\r\n    // const handleDocTypeChange = (selectedType) => {\r\n    //     setDocTypeName(selectedType);\r\n    //     if (selectedType === 'other') {\r\n    //         // If \"other\" is selected, clear newType\r\n    //         setNewType('');\r\n    //     }\r\n    // };\r\n\r\n    // const handleNewTypeChange = (e) => {\r\n    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n    //     setNewType(value);\r\n    // };\r\n    console.log(docFileBase)\r\n    return (\r\n        <div className={'document_container bg-white'}>\r\n            <div className=\"row m-0 bg-white\">\r\n                {/* Button to add folder or type and upload documents */}\r\n                {/* {docTypeName === 'other' ? (\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={newType}\r\n                        placeholder=\"Enter new type\"\r\n                        onChange={handleNewTypeChange}\r\n                    />\r\n                ) : (\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                            + Add New type\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n                                Select document\r\n                            </Dropdown.Item>\r\n                            {DocTypeData.map((item, index) => (\r\n                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n                                    {item.replaceAll(\"_\", \" \")}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n                                Other\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                )} */}\r\n                {/* Upload Document button and save button */}\r\n                <form>\r\n                    <div className=\"\">\r\n                        <label className=\"btn btn-secondary doc_btn\">\r\n                            <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n                            <input\r\n                                type=\"file\"\r\n                                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n                                style={{ display: \"none\" }}\r\n                                onChange={(e) => {\r\n                                    handleBulkFileChange(e);\r\n                                }}\r\n                                multiple\r\n                            />\r\n                            Upload New Documents\r\n                        </label>\r\n                    </div>\r\n                    {saveBtn === true ?\r\n                        <div className=\"doc_upload_col\">\r\n                            {loadingBtn ?\r\n                                <button\r\n                                    className=\"btn btn-primary px-12\"\r\n                                    type=\"button\"\r\n                                    disabled\r\n                                >\r\n                                    <span\r\n                                        className=\"spinner-border spinner-border-sm \"\r\n                                        role=\"status\"\r\n                                        aria-hidden=\"true\"\r\n                                    ></span>\r\n                                    <span className=\"sr-only\">Loading...</span>\r\n                                </button>\r\n                                : <button\r\n                                    className=\"btn btn-primary doc_btn\"\r\n                                    onClick={SaveBulkDocument}\r\n                                >\r\n                                    Save Documents\r\n                                </button>}\r\n                        </div> : null}\r\n                </form>\r\n                {folderID !== prevFolderID &&\r\n                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n                        <GrLinkPrevious />\r\n                    </Link>}\r\n                {/* List of documents docTypeList */}\r\n                <FolderList\r\n                    docTypeList={docTypeList}\r\n                    setFolderID={setFolderID}\r\n                    setPrevFolderID={setPrevFolderID} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"
        }
    ]
}