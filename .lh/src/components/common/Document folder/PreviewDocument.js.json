{
    "sourceFile": "src/components/common/Document folder/PreviewDocument.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1713602314592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713603581621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -548,33 +548,33 @@\n     //       ? \"col-md-8 col-lg-8 col-sm-9\"\r\n     //       : \"col-md-12 col-lg-12 col-sm-12\"\r\n     //       } p-2 bg-dark`}\r\n     //   >\r\n-    //     <div className=\"back_btn_div\">\r\n-    //       <Link\r\n-    //         className=\"rounded-circle\"\r\n-    //         style={{\r\n-    //           position: \"absolute\",\r\n-    //           top: 5,\r\n-    //           left: 5,\r\n-    //           background: \"#fff\",\r\n-    //           width: 30,\r\n-    //           height: 30,\r\n-    //           zIndex: 9999,\r\n-    //           display: \"flex\",\r\n-    //           justifyContent: \"center\",\r\n-    //           alignItems: \"center\",\r\n-    //         }}\r\n-    //         to=\"\"\r\n-    //         onClick={() => {\r\n-    //           setDocSingleDate(\"\");\r\n-    //           setDocPreview(false);\r\n-    //           setFolderID(docData.parentReference.id);\r\n-    //         }}\r\n-    //       >\r\n-    //         <IoMdArrowBack />\r\n-    //       </Link>\r\n-    //     </div>\r\n+        // <div className=\"back_btn_div\">\r\n+        //   <Link\r\n+        //     className=\"rounded-circle\"\r\n+        //     style={{\r\n+        //       position: \"absolute\",\r\n+        //       top: 5,\r\n+        //       left: 5,\r\n+        //       background: \"#fff\",\r\n+        //       width: 30,\r\n+        //       height: 30,\r\n+        //       zIndex: 9999,\r\n+        //       display: \"flex\",\r\n+        //       justifyContent: \"center\",\r\n+        //       alignItems: \"center\",\r\n+        //     }}\r\n+        //     to=\"\"\r\n+        //     onClick={() => {\r\n+        //       setDocSingleDate(\"\");\r\n+        //       setDocPreview(false);\r\n+        //       setFolderID(docData.parentReference.id);\r\n+        //     }}\r\n+        //   >\r\n+        //     <IoMdArrowBack />\r\n+        //   </Link>\r\n+        // </div>\r\n     //     {\r\n     //       // loading === true ? (\r\n     //       //     <Loader />\r\n     //       // ) :\r\n"
                },
                {
                    "date": 1713603644299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -548,33 +548,33 @@\n     //       ? \"col-md-8 col-lg-8 col-sm-9\"\r\n     //       : \"col-md-12 col-lg-12 col-sm-12\"\r\n     //       } p-2 bg-dark`}\r\n     //   >\r\n-        // <div className=\"back_btn_div\">\r\n-        //   <Link\r\n-        //     className=\"rounded-circle\"\r\n-        //     style={{\r\n-        //       position: \"absolute\",\r\n-        //       top: 5,\r\n-        //       left: 5,\r\n-        //       background: \"#fff\",\r\n-        //       width: 30,\r\n-        //       height: 30,\r\n-        //       zIndex: 9999,\r\n-        //       display: \"flex\",\r\n-        //       justifyContent: \"center\",\r\n-        //       alignItems: \"center\",\r\n-        //     }}\r\n-        //     to=\"\"\r\n-        //     onClick={() => {\r\n-        //       setDocSingleDate(\"\");\r\n-        //       setDocPreview(false);\r\n-        //       setFolderID(docData.parentReference.id);\r\n-        //     }}\r\n-        //   >\r\n-        //     <IoMdArrowBack />\r\n-        //   </Link>\r\n-        // </div>\r\n+    //     <div className=\"back_btn_div\">\r\n+    //       <Link\r\n+    //         className=\"rounded-circle\"\r\n+    //         style={{\r\n+    //           position: \"absolute\",\r\n+    //           top: 5,\r\n+    //           left: 5,\r\n+    //           background: \"#fff\",\r\n+    //           width: 30,\r\n+    //           height: 30,\r\n+    //           zIndex: 9999,\r\n+    //           display: \"flex\",\r\n+    //           justifyContent: \"center\",\r\n+    //           alignItems: \"center\",\r\n+    //         }}\r\n+    //         to=\"\"\r\n+    //         onClick={() => {\r\n+    //           setDocSingleDate(\"\");\r\n+    //           setDocPreview(false);\r\n+    //           setFolderID(docData.parentReference.id);\r\n+    //         }}\r\n+    //       >\r\n+    //         <IoMdArrowBack />\r\n+    //       </Link>\r\n+    //     </div>\r\n     //     {\r\n     //       // loading === true ? (\r\n     //       //     <Loader />\r\n     //       // ) :\r\n"
                },
                {
                    "date": 1713876905916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n     // setFolderID(\"\")\r\n     // if (commenAapiCall === true) {\r\n     //   setCommentApiCall(false);\r\n     // }\r\n+    // eslint-disable-next-line\r\n   }, [docData.id/*docId, commenAapiCall, adminid, annotationStatus*/]);\r\n   // /*Function to get document url */\r\n   // // const GetDocUrl = async () => {\r\n   // //   try {\r\n"
                }
            ],
            "date": 1713602314592,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect/*, useRef */} from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import CommentBox from \"../CommentBox\";\r\nimport {\r\n  // getallAdminData,\r\n  // GetReplyCommit,\r\n  // ADocAnnotation,\r\n  // UpdateDocuentcommentAssign,\r\n  // SendReplyCommit,\r\n  GetCommentsAndAssign,\r\n  // GetSharePointDocUrl\r\n} from \"../../../api/api\";\r\n// import LazyLoad from \"react-lazy-load\";\r\n// import { toast } from \"react-toastify\";\r\n// // import FileViewer from \"react-file-viewer\";\r\n// // import Verified from \"../../media/verified.png\";\r\n// import { MdAddComment } from \"react-icons/md\";\r\n// import { RxCrossCircled } from \"react-icons/rx\";\r\n// import { FaFlag } from \"react-icons/fa\";\r\n// import { IoMdArrowBack } from \"react-icons/io\";\r\n// import { usePdf } from 'react-pdf-js';\r\nimport AdobePDFViewer from \"../Adobe/adobeFile\";\r\n// import Apryse from \"../Adobe/apryse\";\r\nexport default function PreviewDocument({\r\n  // setFolderID,\r\n  docData,\r\n  // docId,\r\n  userId,\r\n  docFile,\r\n  // setDocPreview,\r\n  // setDocSingleDate,\r\n}) {\r\n  // let admin_id = localStorage.getItem(\"admin_id\");\r\n  // let user_type = localStorage.getItem(\"userType\");\r\n  // // let docFileExt = docData.file.mimeType.split(\"/\")[1];\r\n  // // const [loading, setLoading] = useState(false)\r\n  // const [commenAapiCall, setCommentApiCall] = useState(\"\");\r\n  // const [imageAnnotations, setImageAnnotations] = useState([]);\r\n  // const [comments, setComments] = useState(\"\");\r\n  // const [replyComment, setReplyComment] = useState(\"\");\r\n  const [commentsList, setCommentsList] = useState([]);\r\n  // const [selectedAnnotation, setSelectedAnnotation] = useState(null);\r\n  // const [isAnnotationMode, setAnnotationMode] = useState(false);\r\n  // let [allAdmin, setAllAdmin] = useState([]);\r\n  // let [adminid, setAdminId] = useState();\r\n  // const [selectedAdmin, setSelectedAdmin] = useState(\"\");\r\n  // const [selectedAdminReply, setSelectedAdminReplye] = useState(\"\");\r\n  // const [addCommentFlag, setAddCommentFlag] = useState(false);\r\n  // const [filteredEmails, setFilteredEmails] = useState([]);\r\n  // const fileViewerRef = useRef(null);\r\n  // let [annotationStatus, setAnnotationStatus] = useState();\r\n  // let [replyCommentClick, setReplyCommentClick] = useState();\r\n  // const [commentsReplyList, setCommentsReplyList] = useState([]);\r\n  // // const [actualDocFile, setActualDocFile] = useState(\"\");\r\n  // //USeEffect foe commet list\r\n  useEffect(() => {\r\n    // setSelectedAnnotation(null);\r\n    getCommentsList();\r\n    // AdminData()\r\n    // GetDocUrl()\r\n    // setFolderID(\"\")\r\n    // if (commenAapiCall === true) {\r\n    //   setCommentApiCall(false);\r\n    // }\r\n  }, [docData.id/*docId, commenAapiCall, adminid, annotationStatus*/]);\r\n  // /*Function to get document url */\r\n  // // const GetDocUrl = async () => {\r\n  // //   try {\r\n  // //     let res = await GetSharePointDocUrl(docData.id);\r\n  // //     console.log(res.data.data.getUrl);\r\n  // //     setActualDocFile(res.data.data.getUrl)\r\n  // //     setActualDocFile(res.data.data.getUrl + \"&withCredentials=true\")\r\n  // //   } catch (err) {\r\n  // //     console.log(err)\r\n  // //     setActualDocFile()\r\n  // //   }\r\n  // // }\r\n  // /*Function to get admin list */\r\n  // const AdminData = async () => {\r\n  //   try {\r\n  //     const userData = await getallAdminData();\r\n  //     if (userData.data.length === 0) {\r\n  //       setAllAdmin([]);\r\n  //     } else {\r\n  //       // const filteredData = userData.data.filter(item => item.admin_type === \"manager\");\r\n  //       setAllAdmin(userData.data);\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n  // /*onchange Function to set email or any other comment  */\r\n  // const handleInputChange = (event, type) => {\r\n  //   const inputValue = event.target.value;\r\n  //   // Update the input value\r\n  //   if (type === \"reply\") {\r\n  //     setReplyComment(inputValue);\r\n  //   } else {\r\n  //     setComments(inputValue);\r\n  //   }\r\n\r\n  //   let lastChar = inputValue.slice(-1);\r\n  //   const atIndex = inputValue.indexOf(\"@\");\r\n\r\n  //   if (lastChar === \"@\" || inputValue.includes(\"@\")) {\r\n  //     AdminData();\r\n  //     if (allAdmin) {\r\n  //       // Filter admin emails based on input\r\n  //       let filteredAdminEmails = allAdmin.filter(\r\n  //         (admin) =>\r\n  //           admin.email.toLowerCase().includes(\r\n  //             String(inputValue)\r\n  //               .substring(atIndex + 1)\r\n  //               .toLowerCase()\r\n  //           ) ||\r\n  //           admin.name.toLowerCase().includes(\r\n  //             String(inputValue)\r\n  //               .substring(atIndex + 1)\r\n  //               .toLowerCase()\r\n  //           )\r\n  //       );\r\n\r\n  //       // Update the filtered emails\r\n  //       setFilteredEmails(filteredAdminEmails);\r\n  //     }\r\n  //   } else {\r\n  //     setFilteredEmails([]);\r\n  //   }\r\n  // };\r\n  // /*Function to get the email to assign */\r\n  // const handleEmailClick = (email, type) => {\r\n  //   // Set the selected admin and update the input value\r\n  //   if (type === \"reply\") {\r\n  //     setSelectedAdminReplye((prevValue) => prevValue + email + \",\");\r\n  //     setReplyComment((prevValue) => `${prevValue} ${email} `);\r\n  //   } else {\r\n  //     setSelectedAdmin((prevValue) => prevValue + email + \",\");\r\n  //     setComments((prevValue) => `${prevValue} ${email} `);\r\n  //   }\r\n  //   setFilteredEmails([]);\r\n  // };\r\n  // /*Function to get the email to input on hover */\r\n  // const handleEmailMouseOver = (email, type) => {\r\n  //   // Highlight the email on mouseover\r\n  //   if (type === \"reply\") {\r\n  //     setSelectedAdminReplye(email);\r\n  //   } else {\r\n  //     setSelectedAdmin(email);\r\n  //   }\r\n  // };\r\n  // // Handle click event on the FileViewer to capture annotations\r\n  // const handleFileViewerClick = (e) => {\r\n  //   if (isAnnotationMode) {\r\n  //     const rect = fileViewerRef.current.getBoundingClientRect();\r\n  //     const x_axis = e.clientX - rect.left;\r\n  //     const y_axis = e.clientY - rect.top;\r\n  //     handleFlagClick({ x_axis, y_axis });\r\n  //     setImageAnnotations([...imageAnnotations, { x_axis, y_axis }]);\r\n  //     setAddCommentFlag(true);\r\n  //   }\r\n  // };\r\n\r\n  // // Handle flag click to select the annotation and toggle the form visibility for image annotation\r\n  // const handleFlagClick = (annotation) => {\r\n  //   setSelectedAnnotation(annotation);\r\n  // };\r\n  // // Generate a list of comments from the state for image annotation\r\n  const getCommentsList = async () => {\r\n    if (docData.id) {\r\n      try {\r\n        let res = await GetCommentsAndAssign(\r\n          docData.id,//docId,\r\n         \"\",// adminid,\r\n         \"\",// annotationStatus,\r\n          \"document\"\r\n        );\r\n        if (res.data.status === (1 || \"1\")) {\r\n          setCommentsList(res.data.data.data);\r\n          // setImageAnnotations(res.data.data.data);\r\n        } else if (res.data.message === \"Task data not found\") {\r\n          setCommentsList([]);\r\n          // setImageAnnotations([]);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        setCommentsList([]);\r\n        // setImageAnnotations([]);\r\n      }\r\n    } else {\r\n      setCommentsList([]);\r\n      // setImageAnnotations([]);\r\n    }\r\n  };\r\n\r\n  // // Generate a list of comments reply\r\n  // const getCommentsReplyList = async () => {\r\n  //   if (docData.id) {\r\n  //     try {\r\n  //       let res = await GetReplyCommit(docData.id, adminid, annotationStatus);\r\n  //       if (res.data.status === (1 || \"1\")) {\r\n  //         setCommentsReplyList(res.data.data);\r\n  //       }\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //       setCommentsReplyList([]);\r\n  //     }\r\n  //   } else {\r\n  //     setCommentsReplyList([]);\r\n  //   }\r\n  // };\r\n\r\n  // /*Major api's for annotations */\r\n  // // Function to add annotation based on conditions\r\n  // const addAnnotation = async (annotation) => {\r\n  //   setAddCommentFlag(false);\r\n  //   // Retrieve data from local storage\r\n\r\n  //   const subject = \"\";\r\n  //   const comment = comments; ///\\S+@\\S+\\.\\S+/.test(comments) ? \"\" : comments;\r\n  //   let DocId = docData.id//docId;\r\n  //   //   ? docId\r\n  //   //   : docData.find((item) => item.type === docName).id;\r\n  //   let sender = allAdmin.find((item) => item.admin_id === admin_id)\r\n  //     ? allAdmin.find((item) => item.admin_id === admin_id).name\r\n  //     : \"\";\r\n  //   let senderEmail = allAdmin.find((item) => item.admin_id === admin_id)\r\n  //     ? allAdmin.find((item) => item.admin_id === admin_id).email\r\n  //     : \"\";\r\n  //   const AdminType = localStorage.getItem(\"admin_type\");\r\n  //   // Variables for mentionaing admins\r\n  //   const email = selectedAdmin || \"\"; ///\\S+@\\S+\\.\\S+/.test(comments) ? comments : \"\";\r\n  //   let assignedAdminName = allAdmin.filter((item) =>\r\n  //     selectedAdmin.includes(item.email)\r\n  //   )\r\n  //     ? allAdmin\r\n  //       .filter((item) => selectedAdmin.includes(item.email))\r\n  //       .map((admin) => admin.name)\r\n  //       .join(\",\")\r\n  //     : \"\";\r\n  //   const assignedUserId = allAdmin.filter((item) =>\r\n  //     selectedAdmin.includes(item.email)\r\n  //   )\r\n  //     ? allAdmin\r\n  //       .filter((item) => selectedAdmin.includes(item.email))\r\n  //       .map((admin) => admin.admin_id)\r\n  //       .join(\",\")\r\n  //     : \"\";\r\n  //   const assignedUserType = \"admin\";\r\n  //   // allAdmin.filter((item) =>\r\n  //   //   selectedAdmin.includes(item.email)\r\n  //   // )\r\n  //   //   ? allAdmin\r\n  //   //     .filter((item) => selectedAdmin.includes(item.email))\r\n  //   //     .map((admin) => admin.admin_type)\r\n  //   //     .join(\",\")\r\n  //   //   : \"\";\r\n  //   // Send data to the API\r\n  //   if ((comment === \"\" && email === \"\") ||\r\n  //     (comment.includes(\"@\") && !/\\S+@\\S+\\.\\S+/.test(comment))) {\r\n  //     toast.error(\"Comment or email cannot be empty!\", {\r\n  //       position: toast.POSITION.TOP_RIGHT,\r\n  //       autoClose: 2000,\r\n  //     });\r\n  //   } else {\r\n  //     try {\r\n  //       let res = await ADocAnnotation(\r\n  //         admin_id,\r\n  //         DocId,\r\n  //         assignedUserId,\r\n  //         email,\r\n  //         subject,\r\n  //         comment,\r\n  //         annotation.x_axis,\r\n  //         annotation.y_axis,\r\n  //         \"document\",\r\n  //         AdminType, //sender type\r\n  //         sender, //sender name,\r\n  //         assignedAdminName, //assigned Admin or user Name,\r\n  //         \"\", //follow up status(for notes only)\r\n  //         \"\", //Next follow up date(for notes only)\r\n  //         assignedUserType, //Assign user type,\r\n  //         \"\", //Document url(for notes only)\r\n  //         senderEmail, //Sender email\r\n  //         userId, //employee id,\r\n  //         \"\", //assigned_by_id\r\n  //         docData.parentReference.id // document parent code\r\n  //       );\r\n  //       if (res.data.message === \"task inserted successfully!\") {\r\n  //         toast.success(\"Comment uploaded Successfully\", {\r\n  //           position: toast.POSITION.TOP_RIGHT,\r\n  //           autoClose: 1000,\r\n  //         });\r\n  //         setSelectedAnnotation(null);\r\n  //         setComments(\"\");\r\n  //         setCommentApiCall(true);\r\n  //         setSelectedAdmin(\"\");\r\n  //         setAnnotationMode(!isAnnotationMode);\r\n  //         setFilteredEmails([]);\r\n  //         // setNotificationApiCall(true);\r\n  //         localStorage.setItem(\"callNotification\", true);\r\n  //       }\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //       if (err.response.data.message === \"required fields cannot be blank\") {\r\n  //         toast.error(\" Please try again later.\", {\r\n  //           position: toast.POSITION.TOP_RIGHT,\r\n  //           autoClose: 1000,\r\n  //         });\r\n  //         setSelectedAnnotation(null);\r\n  //         setComments(\"\");\r\n  //         setSelectedAdmin(\"\");\r\n  //         setCommentApiCall(true);\r\n  //         setAnnotationMode(!isAnnotationMode);\r\n  //         setAddCommentFlag();\r\n  //         setFilteredEmails([]);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   // Update state to include the new annotation\r\n  //   // setImageAnnotations([...imageAnnotations, { x, y }]);\r\n  // };\r\n  // /* Function to update comment and assign */\r\n  // const OnHandleUpdateComment = async (originalData) => {\r\n  //   let updatedData;\r\n  //   //Condtion to update x and y axis on documet update\r\n  //   if (originalData === (docData[0] === docData ? docData.id : docId)) {\r\n  //     updatedData = { doc_id: originalData, x_axis: 0, y_axis: 0 };\r\n  //   } else {\r\n  //     updatedData = { ...originalData };\r\n  //     updatedData.status = originalData.status === \"1\" ? \"0\" : \"1\";\r\n  //   }\r\n  //   try {\r\n  //     // Call the API with the updated data\r\n  //     let res = await UpdateDocuentcommentAssign(updatedData);\r\n  //     if (res.message === \"Task updated successfully!\") {\r\n  //       toast.success(\"Task completed Successfully\", {\r\n  //         position: toast.POSITION.TOP_RIGHT,\r\n  //         autoClose: 1000,\r\n  //       });\r\n  //       setSelectedAnnotation(null);\r\n  //       setComments(\"\");\r\n  //       setCommentApiCall(true);\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n  // /*Function to delete document comments*/\r\n  // // const OnDeleteComment = async (docId) => {\r\n  // //   try {\r\n  // //     let res = await DeleteCommentsAndAssign(docId);\r\n  // //     console.log(res);\r\n  // //   } catch (err) {\r\n  // //     console.log(err);\r\n  // //   }\r\n  // // };\r\n  // /*Function to set the color code to the background of the user name */\r\n  // const determineBackgroundColor = (commentItem) => {\r\n  //   const colorClasses = [\r\n  //     \"bg-primary-opacity-7\",\r\n  //     \"bg-warning-opacity-7\",\r\n  //     \"bg-orange-opacity-6\",\r\n  //     \"bg-info-opacity-7\",\r\n  //     \"bg-secondary-opacity-7\",\r\n  //     \"bg-danger-opacity-6\",\r\n  //     \"bg-info-opacity-visible\",\r\n  //   ];\r\n\r\n  //   const assignedUserId = commentItem.assigned_to_user_id;\r\n\r\n  //   // Create a mapping dynamically based on assignedUserId\r\n  //   const userColorMap = {};\r\n\r\n  //   // Check if assignedUserId is present in the mapping\r\n  //   if (assignedUserId && userColorMap.hasOwnProperty(assignedUserId)) {\r\n  //     return userColorMap[assignedUserId];\r\n  //   }\r\n\r\n  //   // If not found in the mapping, use the colorClasses logic\r\n  //   const id = commentItem.id;\r\n  //   const hashCode = (str) => {\r\n  //     let hash = 0;\r\n  //     for (let i = 0; i < str.length; i++) {\r\n  //       const char = str.charCodeAt(i);\r\n  //       hash = (hash << 5) - hash + char;\r\n  //     }\r\n  //     return hash;\r\n  //   };\r\n\r\n  //   const hash = Math.abs(hashCode(id.toString()));\r\n  //   const index = hash % colorClasses.length;\r\n\r\n  //   return colorClasses[index];\r\n  // };\r\n  // /*Function to reply for the comment */\r\n  // const ReplyAnnotation = async (data) => {\r\n  //   // let emailrejex = /\\S+@\\S+\\.\\S+/;\r\n  //   // let id = emailrejex.test(selectedAdminReply)\r\n  //   //   ? allAdmin.find((item) => item.email === selectedAdminReply).admin_id\r\n  //   //   : data.assined_to_user_id;\r\n  //   // let adminType = emailrejex.test(selectedAdminReply)\r\n  //   //   ? allAdmin.find((item) => item.email === selectedAdminReply).admin_type\r\n  //   //   : \"admin\";\r\n  //   let sender = allAdmin.find((item) => item.admin_id === admin_id)\r\n  //     ? allAdmin.find((item) => item.admin_id === admin_id).name\r\n  //     : \"\";\r\n  //   let senderId = allAdmin.find((item) => item.admin_id === admin_id)\r\n  //     ? allAdmin.find((item) => item.admin_id === admin_id).admin_id\r\n  //     : \"\";\r\n  //   let senderEmail = allAdmin.find((item) => item.admin_id === admin_id)\r\n  //     ? allAdmin.find((item) => item.admin_id === admin_id).email\r\n  //     : \"\";\r\n  //   let senderType = allAdmin.find((item) => item.admin_id === admin_id)\r\n  //     ? allAdmin.find((item) => item.admin_id === admin_id).admin_type\r\n  //     : \"\";\r\n  //   // let assignedAdminName = allAdmin.find(\r\n  //   //   (item) => item.email === selectedAdminReply\r\n  //   // )\r\n  //   //   ? allAdmin.find((item) => item.email === selectedAdminReply).name\r\n  //   //   : \"\";\r\n  //   // Variables for mentioning admins\r\n  //   const email = selectedAdminReply || \"\"; ///\\S+@\\S+\\.\\S+/.test(comments) ? comments : \"\";\r\n  //   let assignedAdminName = allAdmin.filter((item) =>\r\n  //     selectedAdminReply.includes(item.email)\r\n  //   )\r\n  //     ? allAdmin\r\n  //       .filter((item) => selectedAdminReply.includes(item.email))\r\n  //       .map((admin) => admin.name)\r\n  //       .join(\",\")\r\n  //     : \"\";\r\n  //   const assignedUserId = allAdmin.filter((item) =>\r\n  //     selectedAdminReply.includes(item.email)\r\n  //   )\r\n  //     ? allAdmin\r\n  //       .filter((item) => selectedAdminReply.includes(item.email))\r\n  //       .map((admin) => admin.admin_id)\r\n  //       .join(\",\")\r\n  //     : \"\";\r\n  //   const AdminType = //localStorage.getItem(\"admin_type\");\r\n  //     allAdmin.filter((item) => selectedAdminReply.includes(item.email))\r\n  //       ? allAdmin\r\n  //         .filter((item) => selectedAdminReply.includes(item.email))\r\n  //         .map((admin) => admin.admin_type)\r\n  //         .join(\",\")\r\n  //       : \"\";\r\n  //   if (replyComment === \"\" && email === \"\") {\r\n  //     toast.error(\"Comment or email cannot be empty!\", {\r\n  //       position: toast.POSITION.TOP_RIGHT,\r\n  //       autoClose: 1000,\r\n  //     });\r\n  //   } else {\r\n  //     try {\r\n  //       let res = await SendReplyCommit(\r\n  //         data,\r\n  //         email,\r\n  //         replyComment,\r\n  //         assignedUserId,\r\n  //         AdminType,\r\n  //         sender,\r\n  //         assignedAdminName,\r\n  //         \"document\",\r\n  //         senderId,\r\n  //         senderEmail,\r\n  //         senderType,\r\n  //         userId //Userid\r\n  //       );\r\n  //       if (res.data.message === \"message sent successfully!\") {\r\n  //         toast.success(\"Replied Successfully\", {\r\n  //           position: toast.POSITION.TOP_RIGHT,\r\n  //           autoClose: 1000,\r\n  //         });\r\n  //         // setNotificationApiCall(true);\r\n  //         localStorage.setItem(\"callNotification\", true);\r\n  //         setReplyComment(\"\");\r\n  //         getCommentsReplyList();\r\n  //         setSelectedAdminReplye(\"\");\r\n  //         setFilteredEmails([]);\r\n  //       }\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //       setSelectedAdminReplye(\"\");\r\n  //       setFilteredEmails([]);\r\n  //     }\r\n  //   }\r\n  // };\r\n  /*PDF canvas code */\r\n  // const canvasEl = useRef(null);\r\n  // const [page, setPage] = useState(1);\r\n  // const [pages, setPages] = useState(null);\r\n  // if (docFileExt === \"pdf\") {\r\n  //   // eslint-disable-next-line\r\n  //   const [loading, numPages] = usePdf({\r\n  //     canvasEl,\r\n  //     file: docFile,\r\n  //     page,\r\n\r\n  //   });\r\n  //   useEffect(() => {\r\n  //     setPages(numPages);\r\n  //   }, [numPages]);\r\n\r\n  // }\r\n  /*FUnction to render pagination for pdf document */\r\n  // const renderPagination = (page, pages) => {\r\n  //   if (!pages) {\r\n  //     return null;\r\n  //   }\r\n  //   let previousButton = <span className=\"previous\" onClick={() => setPage(page - 1)}>\r\n  //     <Link to=\"\"><i className=\"fa fa-arrow-left\"></i> Previous</Link>\r\n  //   </span>;\r\n  //   if (page === 1) {\r\n  //     previousButton = <span className=\"previous disabled\">\r\n  //       <Link to=\"\"><i className=\"fa fa-arrow-left\"></i> Previous</Link>\r\n  //     </span>;\r\n  //   }\r\n  //   let nextButton = <span className=\"next\" onClick={() => setPage(page + 1)}>\r\n  //     <Link to=\"\">Next <i className=\"fa fa-arrow-right\"></i></Link>\r\n  //   </span>;\r\n  //   if (page === pages) {\r\n  //     nextButton = <span className=\"next disabled\">\r\n  //       <Link to=\"\">Next <i className=\"fa fa-arrow-right\"></i></Link>\r\n  //     </span>;\r\n  //   }\r\n  //   return (\r\n  //     <nav>\r\n  //       <p className=\"pager row text-center d-flex justify-content-between\">\r\n  //         {previousButton}\r\n  //         {nextButton}\r\n  //       </p>\r\n  //     </nav>\r\n  //   );\r\n  // }\r\n\r\n  return (\r\n    /*Adobe viwer */\r\n    <AdobePDFViewer\r\n    url={docFile} \r\n    data={docData}\r\n    userId={userId}\r\n    commentsList={commentsList} />\r\n    /*Apryse Viewer */\r\n    // <Apryse\r\n    //   url={docFile} data={docData}\r\n    // />\r\n    // <div className=\"row m-0 bg-white document_preview_box h-100vh overflow-hidden\">\r\n    //   <div\r\n    //     className={`${user_type === \"admin\"\r\n    //       ? \"col-md-8 col-lg-8 col-sm-9\"\r\n    //       : \"col-md-12 col-lg-12 col-sm-12\"\r\n    //       } p-2 bg-dark`}\r\n    //   >\r\n    //     <div className=\"back_btn_div\">\r\n    //       <Link\r\n    //         className=\"rounded-circle\"\r\n    //         style={{\r\n    //           position: \"absolute\",\r\n    //           top: 5,\r\n    //           left: 5,\r\n    //           background: \"#fff\",\r\n    //           width: 30,\r\n    //           height: 30,\r\n    //           zIndex: 9999,\r\n    //           display: \"flex\",\r\n    //           justifyContent: \"center\",\r\n    //           alignItems: \"center\",\r\n    //         }}\r\n    //         to=\"\"\r\n    //         onClick={() => {\r\n    //           setDocSingleDate(\"\");\r\n    //           setDocPreview(false);\r\n    //           setFolderID(docData.parentReference.id);\r\n    //         }}\r\n    //       >\r\n    //         <IoMdArrowBack />\r\n    //       </Link>\r\n    //     </div>\r\n    //     {\r\n    //       // loading === true ? (\r\n    //       //     <Loader />\r\n    //       // ) :\r\n    //       docFile ? (\r\n    //         <div>\r\n    //           <div\r\n    //             id=\"annotation-container\"\r\n    //             style={{\r\n    //               position: \"relative\",\r\n    //               width: \"100%\",\r\n    //             }}\r\n    //           >\r\n    //             <div\r\n    //               className=\"d-flex justify-content-center position-relative\"\r\n    //               style={{\r\n    //                 height: \"calc(100vh - 150px)\",\r\n    //                 overflowY: \"auto\",\r\n    //               }}\r\n    //             >\r\n    //               {/* <RenderNewDocFile /> */}\r\n    //               <React.Fragment>\r\n    //                 {docFile ? (\r\n    //                   <>\r\n    //                     <div\r\n    //                       className=\"w-100\"\r\n    //                       ref={fileViewerRef}\r\n    //                       onClick={handleFileViewerClick}\r\n    //                     >\r\n\r\n    //                       <LazyLoad\r\n    //                         height={\"100%\"}\r\n    //                         offsetVertical={\"100%\"}\r\n    //                         debounce={false}\r\n    //                       >\r\n\r\n    //                         {/* {docData &&\r\n    //                           (docData.name &&\r\n    //                             docData.name.toLowerCase().includes(\"imm\") ? (\r\n    //                             <iframe\r\n    //                               src={docFile}\r\n    //                               style={{\r\n    //                                 height: \"calc(100vh - 200px)\",\r\n    //                                 overflowY: \"auto\",\r\n    //                               }}\r\n    //                               width={\"100%\"}\r\n    //                               title={docData.name}\r\n    //                             ></iframe>\r\n    //                           ) : (\r\n    //                             <>\r\n    //                               {docFileExt === \"pdf\" ?\r\n    //                                 <div className=\"col\">\r\n    //                                   <canvas ref={canvasEl} />\r\n    //                                   <div>\r\n    //                                     {renderPagination(page, pages)}\r\n    //                                   </div>\r\n    //                                 </div>\r\n    //                                 : <FileViewer\r\n    //                                   key={docData.id}\r\n    //                                   fileType={\r\n    //                                     docFileExt ===\r\n    //                                       \"vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n    //                                       ? \"docx\"\r\n    //                                       : docFileExt\r\n    //                                   }\r\n    //                                   filePath={`${docFile}&bytes=0-1023`}\r\n    //                                   errorComponent={() => (\r\n    //                                     <div>Error loading document</div>\r\n    //                                   )}\r\n    //                                   onError={(error) =>\r\n    //                                     console.error(\r\n    //                                       \"Error loading document:\",\r\n    //                                       error\r\n    //                                     )\r\n    //                                   }\r\n    //                                 />}\r\n\r\n    //                             </>\r\n    //                           ))} */}\r\n    //                       </LazyLoad>\r\n    //                     </div>\r\n    //                   </>\r\n    //                 ) : (\r\n    //                   <div className=\"text-center mt-5\">No document found</div>\r\n    //                 )}\r\n    //               </React.Fragment>\r\n    //               <Link\r\n    //                 to=\"\"\r\n    //                 className={` ${user_type === \"admin\"\r\n    //                   ? `btn-sm mt-7 doc_btn ${isAnnotationMode ? \"btn-primary \" : \"btn-secondary\"\r\n    //                   }`\r\n    //                   : \"d-none\"\r\n    //                   }`}\r\n    //                 style={{\r\n    //                   position: \"absolute\",\r\n    //                   top: \"10&\",\r\n    //                   right: \"0\",\r\n    //                   zIndex: \"99\",\r\n    //                 }}\r\n    //                 onClick={() => {\r\n    //                   setAnnotationMode(!isAnnotationMode);\r\n    //                   setComments(\"\");\r\n    //                   setReplyCommentClick();\r\n    //                   setAddCommentFlag(false);\r\n    //                   //condition if the pdf is of imm\r\n    //                   if (\r\n    //                     docData.name &&\r\n    //                     !isAnnotationMode &&\r\n    //                     docData.name.toLowerCase().includes(\"imm\")\r\n    //                   ) {\r\n    //                     handleFlagClick({ x_axis: 1, y_axis: 1 });\r\n    //                   } else setSelectedAnnotation(null);\r\n    //                 }}\r\n    //               >\r\n    //                 {isAnnotationMode ? <RxCrossCircled /> : <MdAddComment />}\r\n    //               </Link>\r\n    //             </div>\r\n    //             {/* Transparent overlay for capturing click events */}\r\n    //             {docFile && user_type === \"admin\" && (\r\n    //               <>\r\n    //                 {isAnnotationMode && (\r\n    //                   <div\r\n    //                     style={{\r\n    //                       position: \"absolute\",\r\n    //                       top: 0,\r\n    //                       left: 0,\r\n    //                       width: \"100%\",\r\n    //                       height: \"100%\",\r\n    //                       pointerEvents: \"none\",\r\n    //                     }}\r\n    //                   />\r\n    //                 )}\r\n\r\n    //                 {imageAnnotations.map((annotation, index) => (\r\n    //                   <div\r\n    //                     key={index}\r\n    //                     style={{\r\n    //                       position: \"absolute\",\r\n    //                       left: annotation.x_axis - 5,\r\n    //                       top: annotation.y_axis - 5,\r\n    //                       cursor: \"pointer\",\r\n    //                     }}\r\n    //                     onClick={() => handleFlagClick(annotation)}\r\n    //                   >\r\n    //                     <FaFlag\r\n    //                       className=\"\"\r\n    //                       style={{\r\n    //                         color:\r\n    //                           selectedAnnotation &&\r\n    //                             selectedAnnotation.x_axis === annotation.x_axis &&\r\n    //                             selectedAnnotation.y_axis === annotation.y_axis\r\n    //                             ? \"blue\"\r\n    //                             : annotation.status === \"1\"\r\n    //                               ? \"green\"\r\n    //                               : \"red\",\r\n    //                         display:\r\n    //                           annotation.status === \"1\" ? \"none\" : \"block\",\r\n    //                       }}\r\n    //                     />\r\n    //                   </div>\r\n    //                 ))}\r\n    //               </>\r\n    //             )}\r\n    //           </div>\r\n    //         </div>\r\n    //       ) : (\r\n    //         <div className=\"text-center mt-5\">No document found</div>\r\n    //       )\r\n    //     }\r\n    //   </div>\r\n    //   <div className=\"col-md-4 col-lg-4 col-sm-3 px-2 py-2 comments_and_replies\">\r\n    //     {docFile &&\r\n    //       user_type === \"admin\" &&\r\n    //       selectedAnnotation && //condition for imm pdf\r\n    //       (docData.name && docData.name.toLowerCase().includes(\"imm\")\r\n    //         ? replyCommentClick === undefined ||\r\n    //         replyCommentClick === \"\" ||\r\n    //         replyCommentClick === null\r\n    //         : addCommentFlag === true) ? (\r\n    //       <div\r\n    //         style={\r\n    //           {\r\n    //             // position: \"absolute\",\r\n    //             // left: selectedAnnotation.x_axis + 10,\r\n    //             // top: selectedAnnotation.y_axis + 20,\r\n    //             // zIndex: 1,\r\n    //           }\r\n    //         }\r\n    //         className=\"pt-0 pb-5\"\r\n    //       >\r\n    //         <form\r\n    //           className=\"comment-form\"\r\n    //           onSubmit={(e) => {\r\n    //             e.preventDefault();\r\n    //             addAnnotation(selectedAnnotation);\r\n    //           }}\r\n    //         >\r\n    //           <div className=\"comment-input-container m-0 mb-2\">\r\n    //             <label className=\"m-0\">\r\n    //               <b> Add Annotation:</b>\r\n    //             </label>\r\n    //             <input\r\n    //               type=\"text\"\r\n    //               value={comments || \"\"}\r\n    //               onChange={handleInputChange}\r\n    //               placeholder=\"Comments or add others with @\"\r\n    //               className=\"comment-input\"\r\n    //             />\r\n    //             {filteredEmails.length > 0 && (\r\n    //               <ul className=\"email-suggestions\">\r\n    //                 {filteredEmails.map((email) => (\r\n    //                   <li\r\n    //                     key={email.email}\r\n    //                     onClick={() => handleEmailClick(email.email)}\r\n    //                     onMouseOver={() => handleEmailMouseOver(email.email)}\r\n    //                     className=\"email-suggestion-item\"\r\n    //                   >\r\n    //                     <strong>{email.name}</strong>\r\n    //                   </li>\r\n    //                 ))}\r\n    //               </ul>\r\n    //             )}\r\n    //           </div>\r\n    //           <div className=\"button-container mx-0\">\r\n    //             <button\r\n    //               type=\"submit\"\r\n    //               // onClick={(e) => {\r\n    //               //   e.preventDefault();\r\n    //               //   addAnnotation(selectedAnnotation);\r\n\r\n    //               // }}\r\n    //               className=\"btn-sm btn-primary save-comment-btn\"\r\n    //             >\r\n    //               Save Comment\r\n    //             </button>\r\n    //             <button\r\n    //               className=\"btn-sm btn-light cancel-btn\"\r\n    //               onClick={() => {\r\n    //                 setAddCommentFlag();\r\n    //                 setSelectedAnnotation(null);\r\n    //                 setComments(\"\");\r\n    //                 setAnnotationMode(!isAnnotationMode);\r\n    //                 setFilteredEmails([]);\r\n    //               }}\r\n    //             >\r\n    //               Cancel\r\n    //             </button>\r\n    //           </div>\r\n    //         </form>\r\n    //       </div>\r\n    //     ) : null}\r\n    //     {/* Comment box */}\r\n    //     {user_type === \"admin\" ? (\r\n    //       <CommentBox\r\n    //         commentsReplyList={commentsReplyList}\r\n    //         docData={docData}\r\n    //         adminid={adminid}\r\n    //         setAdminId={setAdminId}\r\n    //         allAdmin={allAdmin}\r\n    //         annotationStatus={annotationStatus}\r\n    //         setAnnotationStatus={setAnnotationStatus}\r\n    //         commentsList={commentsList}\r\n    //         selectedAnnotation={selectedAnnotation}\r\n    //         setSelectedAnnotation={setSelectedAnnotation}\r\n    //         OnHandleUpdateComment={OnHandleUpdateComment}\r\n    //         determineBackgroundColor={determineBackgroundColor}\r\n    //         setReplyCommentClick={setReplyCommentClick}\r\n    //         replyCommentClick={replyCommentClick}\r\n    //         replyComment={replyComment}\r\n    //         handleInputChange={handleInputChange}\r\n    //         filteredEmails={filteredEmails}\r\n    //         handleEmailClick={handleEmailClick}\r\n    //         handleEmailMouseOver={handleEmailMouseOver}\r\n    //         ReplyAnnotation={ReplyAnnotation}\r\n    //         getCommentsReplyList={getCommentsReplyList}\r\n    //         setAddCommentFlag={setAddCommentFlag}\r\n    //         setFilteredEmails={setFilteredEmails}\r\n    //         docTypData={docData}\r\n    //       // setHide={setHide}\r\n    //       />\r\n    //     ) : null}\r\n    //   </div>\r\n    // </div>\r\n  );\r\n}\r\n"
        }
    ]
}