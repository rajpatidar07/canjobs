{
    "sourceFile": "src/components/common/Stripe.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1709013450446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709105439211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n                 confirmParams: {\n                   // save_payment_method: true,\n                   //Aws: https://canpathwaysjobs.com\n                   //Vercel: https://canjobs.vercel.app\n-                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n+                  return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n                 },\n                 // amount: amount,\n               });\n               if (res_data.error) {\n"
                },
                {
                    "date": 1709122668397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import { loadStripe } from \"@stripe/stripe-js\";\n+import React, { useState } from \"react\";\n+import {\n+  PaymentElement,\n+  Elements,\n+  useStripe,\n+  useElements,\n+} from \"@stripe/react-stripe-js\";\n+import { AddStripePalpay } from \"../../api/api.js\";\n+const CheckoutForm = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const stripe = useStripe();\n+  const elements = useElements();\n+  const [errorMessage, setErrorMessage] = useState(null);\n+  const handleSubmit = async (event) => {\n+    event.preventDefault();\n+    if (elements == null) {\n+      return;\n+    }\n+    // return false;\n+    // Trigger form validation and wallet collection\n+    try {\n+      const { error: submitError } = await elements.submit();\n+      console.log(submitError);\n+      if (submitError) {\n+        // Show error to your customer\n+        setErrorMessage(submitError.message);\n+        return;\n+      } else {\n+        if (amount === 0 || amount === \"\" || amount === \"0\") {\n+          setErrors({\n+            ...errors,\n+            amount: \"Please set the amount before payment\",\n+          });\n+        } else {\n+          try {\n+            let tokenData = await AddStripePalpay(amount);\n+            let clientSecret = tokenData.data.message;\n+            try {\n+              const res_data = await stripe.confirmPayment({\n+                //`Elements` instance that was used to create the Payment Element\n+                elements,\n+                clientSecret,\n+                confirmParams: {\n+                  // save_payment_method: true,\n+                  //Aws: https://canpathwaysjobs.com\n+                  //Vercel: https://canjobs.vercel.app\n+                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n+                },\n+                // amount: amount,\n+              });\n+              if (res_data.error) {\n+                setErrorMessage(res_data.error.message);\n+              } else {\n+              }\n+            } catch (Err) {\n+              console.log(Err);\n+            }\n+          } catch (err) {\n+            console.log(err);\n+          }\n+        }\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <PaymentElement />\n+      <button\n+        type=\"button\"\n+        onClick={handleSubmit}\n+        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+        disabled={!stripe || !elements}\n+        title=\"Stripe pay\"\n+      >\n+        pay\n+      </button>\n+      {/* Show error message to your customers */}\n+      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n+    </div>\n+  );\n+};\n+\n+const stripePromise = loadStripe(\n+  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+);\n+\n+const StripePay = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const amountInCents = Math.round(amount * 100);\n+  const options = {\n+    mode: \"payment\",\n+    amount: amountInCents,\n+    currency: \"usd\",\n+    // Fully customizable with appearance API.\n+    appearance: {\n+      /*...*/\n+    },\n+  };\n+  return (\n+    <Elements\n+      stripe={stripePromise}\n+      options={options}\n+      mode={\"payment\"}\n+      amount={amountInCents}\n+    >\n+      <CheckoutForm\n+        amount={amountInCents}\n+        getAmt={getAmt}\n+        setErrors={setErrors}\n+        errors={errors}\n+        setApicall={setApicall}\n+        setState={setState}\n+        state={state}\n+        setStripePayment={setStripePayment}\n+      />\n+    </Elements>\n+  );\n+};\n+export default StripePay;\n+// StripePay.js\n+// import React, { useState } from \"react\";\n+// import { loadStripe } from \"@stripe/stripe-js\";\n+// import { Elements } from \"@stripe/react-stripe-js\";\n+// import {\n+//   PaymentElement,\n+//   useStripe,\n+//   useElements,\n+// } from \"@stripe/react-stripe-js\";\n+// import { AddStripePalpay } from \"../../api/api.js\";\n+// import { FaStripe } from \"react-icons/fa\";\n+\n+// const stripePromise = loadStripe(\n+//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+// );\n+\n+// const StripePay = ({ amount, setErrors }) => {\n+//   const options = {\n+//     mode: \"payment\",\n+//     amount: 80, // Default amount, you can pass it as a prop\n+//     currency: \"usd\", // Default currency, you can pass it as a prop\n+//     // Additional configuration options\n+//   };\n+//   const stripe = useStripe();\n+//   const elements = useElements();\n+//   const [errorMessage, setErrorMessage] = useState(null);\n+\n+//   const handleSubmit = async (event) => {\n+//     event.preventDefault();\n+\n+//     if (!elements) {\n+//       return;\n+//     }\n+\n+//     const { error: submitError } = await elements.submit();\n+\n+//     if (submitError) {\n+//       setErrorMessage(submitError.message);\n+//       return;\n+//     }\n+\n+//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n+//       setErrors({\n+//         amount: \"Please set the amount before payment\",\n+//       });\n+//     } else {\n+//       try {\n+//         const tokenData = await AddStripePalpay(amount);\n+//         console.log(tokenData);\n+//         const clientSecret = tokenData.data.message;\n+\n+//         const res_data = await stripe.confirmPayment({\n+//           elements,\n+//           clientSecret,\n+//           confirmParams: {\n+//             return_url: \"https://www.indiakinursery.com\",\n+//           },\n+//         });\n+\n+//         if (res_data.error) {\n+//           setErrorMessage(res_data.error);\n+//         } else {\n+//           // Handle successful payment\n+//         }\n+//       } catch (error) {\n+//         console.error(\"Error confirming payment:\", error);\n+//         setErrorMessage(\"An error occurred while processing your payment.\");\n+//       }\n+//     }\n+//   };\n+\n+//   return (\n+//     <Elements stripe={stripePromise} options={options}>\n+//       <div>\n+//         <PaymentElement />\n+//         <button\n+//           type=\"button\"\n+//           onClick={handleSubmit}\n+//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+//           disabled={!stripe || !elements}\n+//           title=\"Stripe pay\"\n+//         >\n+//           <FaStripe style={{ fontSize: \"2em\" }} />\n+//         </button>\n+//         {errorMessage && <div>{errorMessage}</div>}\n+//       </div>\n+//     </Elements>\n+//   );\n+// };\n+\n+// export default StripePay;\n"
                },
                {
                    "date": 1709125469389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import { loadStripe } from \"@stripe/stripe-js\";\n+import React, { useState } from \"react\";\n+import {\n+  PaymentElement,\n+  Elements,\n+  useStripe,\n+  useElements,\n+} from \"@stripe/react-stripe-js\";\n+import { AddStripePalpay } from \"../../api/api.js\";\n+const CheckoutForm = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const stripe = useStripe();\n+  const elements = useElements();\n+  const [errorMessage, setErrorMessage] = useState(null);\n+  const handleSubmit = async (event) => {\n+    event.preventDefault();\n+    if (elements == null) {\n+      return;\n+    }\n+    // return false;\n+    // Trigger form validation and wallet collection\n+    try {\n+      const { error: submitError } = await elements.submit();\n+      console.log(submitError);\n+      if (submitError) {\n+        // Show error to your customer\n+        setErrorMessage(submitError.message);\n+        return;\n+      } else {\n+        if (amount === 0 || amount === \"\" || amount === \"0\") {\n+          setErrors({\n+            ...errors,\n+            amount: \"Please set the amount before payment\",\n+          });\n+        } else {\n+          try {\n+            let tokenData = await AddStripePalpay(amount);\n+            let clientSecret = tokenData.data.message;\n+            try {\n+              const res_data = await stripe.confirmPayment({\n+                //`Elements` instance that was used to create the Payment Element\n+                elements,\n+                clientSecret,\n+                confirmParams: {\n+                  // save_payment_method: true,\n+                  //Aws: https://canpathwaysjobs.com\n+                  //Vercel: https://canjobs.vercel.app\n+                  return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n+                },\n+                // amount: amount,\n+              });\n+              if (res_data.error) {\n+                setErrorMessage(res_data.error.message);\n+              } else {\n+              }\n+            } catch (Err) {\n+              console.log(Err);\n+            }\n+          } catch (err) {\n+            console.log(err);\n+          }\n+        }\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <PaymentElement />\n+      <button\n+        type=\"button\"\n+        onClick={handleSubmit}\n+        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+        disabled={!stripe || !elements}\n+        title=\"Stripe pay\"\n+      >\n+        pay\n+      </button>\n+      {/* Show error message to your customers */}\n+      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n+    </div>\n+  );\n+};\n+\n+const stripePromise = loadStripe(\n+  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+);\n+\n+const StripePay = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const amountInCents = Math.round(amount * 100);\n+  const options = {\n+    mode: \"payment\",\n+    amount: amountInCents,\n+    currency: \"usd\",\n+    // Fully customizable with appearance API.\n+    appearance: {\n+      /*...*/\n+    },\n+  };\n+  return (\n+    <Elements\n+      stripe={stripePromise}\n+      options={options}\n+      mode={\"payment\"}\n+      amount={amountInCents}\n+    >\n+      <CheckoutForm\n+        amount={amountInCents}\n+        getAmt={getAmt}\n+        setErrors={setErrors}\n+        errors={errors}\n+        setApicall={setApicall}\n+        setState={setState}\n+        state={state}\n+        setStripePayment={setStripePayment}\n+      />\n+    </Elements>\n+  );\n+};\n+export default StripePay;\n+// StripePay.js\n+// import React, { useState } from \"react\";\n+// import { loadStripe } from \"@stripe/stripe-js\";\n+// import { Elements } from \"@stripe/react-stripe-js\";\n+// import {\n+//   PaymentElement,\n+//   useStripe,\n+//   useElements,\n+// } from \"@stripe/react-stripe-js\";\n+// import { AddStripePalpay } from \"../../api/api.js\";\n+// import { FaStripe } from \"react-icons/fa\";\n+\n+// const stripePromise = loadStripe(\n+//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+// );\n+\n+// const StripePay = ({ amount, setErrors }) => {\n+//   const options = {\n+//     mode: \"payment\",\n+//     amount: 80, // Default amount, you can pass it as a prop\n+//     currency: \"usd\", // Default currency, you can pass it as a prop\n+//     // Additional configuration options\n+//   };\n+//   const stripe = useStripe();\n+//   const elements = useElements();\n+//   const [errorMessage, setErrorMessage] = useState(null);\n+\n+//   const handleSubmit = async (event) => {\n+//     event.preventDefault();\n+\n+//     if (!elements) {\n+//       return;\n+//     }\n+\n+//     const { error: submitError } = await elements.submit();\n+\n+//     if (submitError) {\n+//       setErrorMessage(submitError.message);\n+//       return;\n+//     }\n+\n+//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n+//       setErrors({\n+//         amount: \"Please set the amount before payment\",\n+//       });\n+//     } else {\n+//       try {\n+//         const tokenData = await AddStripePalpay(amount);\n+//         console.log(tokenData);\n+//         const clientSecret = tokenData.data.message;\n+\n+//         const res_data = await stripe.confirmPayment({\n+//           elements,\n+//           clientSecret,\n+//           confirmParams: {\n+//             return_url: \"https://www.indiakinursery.com\",\n+//           },\n+//         });\n+\n+//         if (res_data.error) {\n+//           setErrorMessage(res_data.error);\n+//         } else {\n+//           // Handle successful payment\n+//         }\n+//       } catch (error) {\n+//         console.error(\"Error confirming payment:\", error);\n+//         setErrorMessage(\"An error occurred while processing your payment.\");\n+//       }\n+//     }\n+//   };\n+\n+//   return (\n+//     <Elements stripe={stripePromise} options={options}>\n+//       <div>\n+//         <PaymentElement />\n+//         <button\n+//           type=\"button\"\n+//           onClick={handleSubmit}\n+//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+//           disabled={!stripe || !elements}\n+//           title=\"Stripe pay\"\n+//         >\n+//           <FaStripe style={{ fontSize: \"2em\" }} />\n+//         </button>\n+//         {errorMessage && <div>{errorMessage}</div>}\n+//       </div>\n+//     </Elements>\n+//   );\n+// };\n+\n+// export default StripePay;\n"
                },
                {
                    "date": 1709126008057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import { loadStripe } from \"@stripe/stripe-js\";\n+import React, { useState } from \"react\";\n+import {\n+  PaymentElement,\n+  Elements,\n+  useStripe,\n+  useElements,\n+} from \"@stripe/react-stripe-js\";\n+import { AddStripePalpay } from \"../../api/api.js\";\n+const CheckoutForm = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const stripe = useStripe();\n+  const elements = useElements();\n+  const [errorMessage, setErrorMessage] = useState(null);\n+  const handleSubmit = async (event) => {\n+    event.preventDefault();\n+    if (elements == null) {\n+      return;\n+    }\n+    // return false;\n+    // Trigger form validation and wallet collection\n+    try {\n+      const { error: submitError } = await elements.submit();\n+      console.log(submitError);\n+      if (submitError) {\n+        // Show error to your customer\n+        setErrorMessage(submitError.message);\n+        return;\n+      } else {\n+        if (amount === 0 || amount === \"\" || amount === \"0\") {\n+          setErrors({\n+            ...errors,\n+            amount: \"Please set the amount before payment\",\n+          });\n+        } else {\n+          try {\n+            let tokenData = await AddStripePalpay(amount);\n+            let clientSecret = tokenData.data.message;\n+            try {\n+              const res_data = await stripe.confirmPayment({\n+                //`Elements` instance that was used to create the Payment Element\n+                elements,\n+                clientSecret,\n+                confirmParams: {\n+                  // save_payment_method: true,\n+                  //Aws: https://canpathwaysjobs.com\n+                  //Vercel: https://canjobs.vercel.app\n+                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n+                },\n+                // amount: amount,\n+              });\n+              if (res_data.error) {\n+                setErrorMessage(res_data.error.message);\n+              } else {\n+              }\n+            } catch (Err) {\n+              console.log(Err);\n+            }\n+          } catch (err) {\n+            console.log(err);\n+          }\n+        }\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <PaymentElement />\n+      <button\n+        type=\"button\"\n+        onClick={handleSubmit}\n+        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+        disabled={!stripe || !elements}\n+        title=\"Stripe pay\"\n+      >\n+        pay\n+      </button>\n+      {/* Show error message to your customers */}\n+      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n+    </div>\n+  );\n+};\n+\n+const stripePromise = loadStripe(\n+  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+);\n+\n+const StripePay = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const amountInCents = Math.round(amount * 100);\n+  const options = {\n+    mode: \"payment\",\n+    amount: amountInCents,\n+    currency: \"usd\",\n+    // Fully customizable with appearance API.\n+    appearance: {\n+      /*...*/\n+    },\n+  };\n+  return (\n+    <Elements\n+      stripe={stripePromise}\n+      options={options}\n+      mode={\"payment\"}\n+      amount={amountInCents}\n+    >\n+      <CheckoutForm\n+        amount={amountInCents}\n+        getAmt={getAmt}\n+        setErrors={setErrors}\n+        errors={errors}\n+        setApicall={setApicall}\n+        setState={setState}\n+        state={state}\n+        setStripePayment={setStripePayment}\n+      />\n+    </Elements>\n+  );\n+};\n+export default StripePay;\n+// StripePay.js\n+// import React, { useState } from \"react\";\n+// import { loadStripe } from \"@stripe/stripe-js\";\n+// import { Elements } from \"@stripe/react-stripe-js\";\n+// import {\n+//   PaymentElement,\n+//   useStripe,\n+//   useElements,\n+// } from \"@stripe/react-stripe-js\";\n+// import { AddStripePalpay } from \"../../api/api.js\";\n+// import { FaStripe } from \"react-icons/fa\";\n+\n+// const stripePromise = loadStripe(\n+//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+// );\n+\n+// const StripePay = ({ amount, setErrors }) => {\n+//   const options = {\n+//     mode: \"payment\",\n+//     amount: 80, // Default amount, you can pass it as a prop\n+//     currency: \"usd\", // Default currency, you can pass it as a prop\n+//     // Additional configuration options\n+//   };\n+//   const stripe = useStripe();\n+//   const elements = useElements();\n+//   const [errorMessage, setErrorMessage] = useState(null);\n+\n+//   const handleSubmit = async (event) => {\n+//     event.preventDefault();\n+\n+//     if (!elements) {\n+//       return;\n+//     }\n+\n+//     const { error: submitError } = await elements.submit();\n+\n+//     if (submitError) {\n+//       setErrorMessage(submitError.message);\n+//       return;\n+//     }\n+\n+//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n+//       setErrors({\n+//         amount: \"Please set the amount before payment\",\n+//       });\n+//     } else {\n+//       try {\n+//         const tokenData = await AddStripePalpay(amount);\n+//         console.log(tokenData);\n+//         const clientSecret = tokenData.data.message;\n+\n+//         const res_data = await stripe.confirmPayment({\n+//           elements,\n+//           clientSecret,\n+//           confirmParams: {\n+//             return_url: \"https://www.indiakinursery.com\",\n+//           },\n+//         });\n+\n+//         if (res_data.error) {\n+//           setErrorMessage(res_data.error);\n+//         } else {\n+//           // Handle successful payment\n+//         }\n+//       } catch (error) {\n+//         console.error(\"Error confirming payment:\", error);\n+//         setErrorMessage(\"An error occurred while processing your payment.\");\n+//       }\n+//     }\n+//   };\n+\n+//   return (\n+//     <Elements stripe={stripePromise} options={options}>\n+//       <div>\n+//         <PaymentElement />\n+//         <button\n+//           type=\"button\"\n+//           onClick={handleSubmit}\n+//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+//           disabled={!stripe || !elements}\n+//           title=\"Stripe pay\"\n+//         >\n+//           <FaStripe style={{ fontSize: \"2em\" }} />\n+//         </button>\n+//         {errorMessage && <div>{errorMessage}</div>}\n+//       </div>\n+//     </Elements>\n+//   );\n+// };\n+\n+// export default StripePay;\n"
                },
                {
                    "date": 1709126252494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,238 +52,8 @@\n                 confirmParams: {\n                   // save_payment_method: true,\n                   //Aws: https://canpathwaysjobs.com\n                   //Vercel: https://canjobs.vercel.app\n-                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n-                },\n-                // amount: amount,\n-              });\n-              if (res_data.error) {\n-                setErrorMessage(res_data.error.message);\n-              } else {\n-              }\n-            } catch (Err) {\n-              console.log(Err);\n-            }\n-          } catch (err) {\n-            console.log(err);\n-          }\n-        }\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <PaymentElement />\n-      <button\n-        type=\"button\"\n-        onClick={handleSubmit}\n-        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-        disabled={!stripe || !elements}\n-        title=\"Stripe pay\"\n-      >\n-        pay\n-      </button>\n-      {/* Show error message to your customers */}\n-      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n-    </div>\n-  );\n-};\n-\n-const stripePromise = loadStripe(\n-  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-);\n-\n-const StripePay = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const amountInCents = Math.round(amount * 100);\n-  const options = {\n-    mode: \"payment\",\n-    amount: amountInCents,\n-    currency: \"usd\",\n-    // Fully customizable with appearance API.\n-    appearance: {\n-      /*...*/\n-    },\n-  };\n-  return (\n-    <Elements\n-      stripe={stripePromise}\n-      options={options}\n-      mode={\"payment\"}\n-      amount={amountInCents}\n-    >\n-      <CheckoutForm\n-        amount={amountInCents}\n-        getAmt={getAmt}\n-        setErrors={setErrors}\n-        errors={errors}\n-        setApicall={setApicall}\n-        setState={setState}\n-        state={state}\n-        setStripePayment={setStripePayment}\n-      />\n-    </Elements>\n-  );\n-};\n-export default StripePay;\n-// StripePay.js\n-// import React, { useState } from \"react\";\n-// import { loadStripe } from \"@stripe/stripe-js\";\n-// import { Elements } from \"@stripe/react-stripe-js\";\n-// import {\n-//   PaymentElement,\n-//   useStripe,\n-//   useElements,\n-// } from \"@stripe/react-stripe-js\";\n-// import { AddStripePalpay } from \"../../api/api.js\";\n-// import { FaStripe } from \"react-icons/fa\";\n-\n-// const stripePromise = loadStripe(\n-//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-// );\n-\n-// const StripePay = ({ amount, setErrors }) => {\n-//   const options = {\n-//     mode: \"payment\",\n-//     amount: 80, // Default amount, you can pass it as a prop\n-//     currency: \"usd\", // Default currency, you can pass it as a prop\n-//     // Additional configuration options\n-//   };\n-//   const stripe = useStripe();\n-//   const elements = useElements();\n-//   const [errorMessage, setErrorMessage] = useState(null);\n-\n-//   const handleSubmit = async (event) => {\n-//     event.preventDefault();\n-\n-//     if (!elements) {\n-//       return;\n-//     }\n-\n-//     const { error: submitError } = await elements.submit();\n-\n-//     if (submitError) {\n-//       setErrorMessage(submitError.message);\n-//       return;\n-//     }\n-\n-//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n-//       setErrors({\n-//         amount: \"Please set the amount before payment\",\n-//       });\n-//     } else {\n-//       try {\n-//         const tokenData = await AddStripePalpay(amount);\n-//         console.log(tokenData);\n-//         const clientSecret = tokenData.data.message;\n-\n-//         const res_data = await stripe.confirmPayment({\n-//           elements,\n-//           clientSecret,\n-//           confirmParams: {\n-//             return_url: \"https://www.indiakinursery.com\",\n-//           },\n-//         });\n-\n-//         if (res_data.error) {\n-//           setErrorMessage(res_data.error);\n-//         } else {\n-//           // Handle successful payment\n-//         }\n-//       } catch (error) {\n-//         console.error(\"Error confirming payment:\", error);\n-//         setErrorMessage(\"An error occurred while processing your payment.\");\n-//       }\n-//     }\n-//   };\n-\n-//   return (\n-//     <Elements stripe={stripePromise} options={options}>\n-//       <div>\n-//         <PaymentElement />\n-//         <button\n-//           type=\"button\"\n-//           onClick={handleSubmit}\n-//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-//           disabled={!stripe || !elements}\n-//           title=\"Stripe pay\"\n-//         >\n-//           <FaStripe style={{ fontSize: \"2em\" }} />\n-//         </button>\n-//         {errorMessage && <div>{errorMessage}</div>}\n-//       </div>\n-//     </Elements>\n-//   );\n-// };\n-\n-// export default StripePay;\n-import { loadStripe } from \"@stripe/stripe-js\";\n-import React, { useState } from \"react\";\n-import {\n-  PaymentElement,\n-  Elements,\n-  useStripe,\n-  useElements,\n-} from \"@stripe/react-stripe-js\";\n-import { AddStripePalpay } from \"../../api/api.js\";\n-const CheckoutForm = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const stripe = useStripe();\n-  const elements = useElements();\n-  const [errorMessage, setErrorMessage] = useState(null);\n-  const handleSubmit = async (event) => {\n-    event.preventDefault();\n-    if (elements == null) {\n-      return;\n-    }\n-    // return false;\n-    // Trigger form validation and wallet collection\n-    try {\n-      const { error: submitError } = await elements.submit();\n-      console.log(submitError);\n-      if (submitError) {\n-        // Show error to your customer\n-        setErrorMessage(submitError.message);\n-        return;\n-      } else {\n-        if (amount === 0 || amount === \"\" || amount === \"0\") {\n-          setErrors({\n-            ...errors,\n-            amount: \"Please set the amount before payment\",\n-          });\n-        } else {\n-          try {\n-            let tokenData = await AddStripePalpay(amount);\n-            let clientSecret = tokenData.data.message;\n-            try {\n-              const res_data = await stripe.confirmPayment({\n-                //`Elements` instance that was used to create the Payment Element\n-                elements,\n-                clientSecret,\n-                confirmParams: {\n-                  // save_payment_method: true,\n-                  //Aws: https://canpathwaysjobs.com\n-                  //Vercel: https://canjobs.vercel.app\n                   return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n                 },\n                 // amount: amount,\n               });\n@@ -457,464 +227,4 @@\n //   );\n // };\n \n // export default StripePay;\n-import { loadStripe } from \"@stripe/stripe-js\";\n-import React, { useState } from \"react\";\n-import {\n-  PaymentElement,\n-  Elements,\n-  useStripe,\n-  useElements,\n-} from \"@stripe/react-stripe-js\";\n-import { AddStripePalpay } from \"../../api/api.js\";\n-const CheckoutForm = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const stripe = useStripe();\n-  const elements = useElements();\n-  const [errorMessage, setErrorMessage] = useState(null);\n-  const handleSubmit = async (event) => {\n-    event.preventDefault();\n-    if (elements == null) {\n-      return;\n-    }\n-    // return false;\n-    // Trigger form validation and wallet collection\n-    try {\n-      const { error: submitError } = await elements.submit();\n-      console.log(submitError);\n-      if (submitError) {\n-        // Show error to your customer\n-        setErrorMessage(submitError.message);\n-        return;\n-      } else {\n-        if (amount === 0 || amount === \"\" || amount === \"0\") {\n-          setErrors({\n-            ...errors,\n-            amount: \"Please set the amount before payment\",\n-          });\n-        } else {\n-          try {\n-            let tokenData = await AddStripePalpay(amount);\n-            let clientSecret = tokenData.data.message;\n-            try {\n-              const res_data = await stripe.confirmPayment({\n-                //`Elements` instance that was used to create the Payment Element\n-                elements,\n-                clientSecret,\n-                confirmParams: {\n-                  // save_payment_method: true,\n-                  //Aws: https://canpathwaysjobs.com\n-                  //Vercel: https://canjobs.vercel.app\n-                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n-                },\n-                // amount: amount,\n-              });\n-              if (res_data.error) {\n-                setErrorMessage(res_data.error.message);\n-              } else {\n-              }\n-            } catch (Err) {\n-              console.log(Err);\n-            }\n-          } catch (err) {\n-            console.log(err);\n-          }\n-        }\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <PaymentElement />\n-      <button\n-        type=\"button\"\n-        onClick={handleSubmit}\n-        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-        disabled={!stripe || !elements}\n-        title=\"Stripe pay\"\n-      >\n-        pay\n-      </button>\n-      {/* Show error message to your customers */}\n-      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n-    </div>\n-  );\n-};\n-\n-const stripePromise = loadStripe(\n-  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-);\n-\n-const StripePay = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const amountInCents = Math.round(amount * 100);\n-  const options = {\n-    mode: \"payment\",\n-    amount: amountInCents,\n-    currency: \"usd\",\n-    // Fully customizable with appearance API.\n-    appearance: {\n-      /*...*/\n-    },\n-  };\n-  return (\n-    <Elements\n-      stripe={stripePromise}\n-      options={options}\n-      mode={\"payment\"}\n-      amount={amountInCents}\n-    >\n-      <CheckoutForm\n-        amount={amountInCents}\n-        getAmt={getAmt}\n-        setErrors={setErrors}\n-        errors={errors}\n-        setApicall={setApicall}\n-        setState={setState}\n-        state={state}\n-        setStripePayment={setStripePayment}\n-      />\n-    </Elements>\n-  );\n-};\n-export default StripePay;\n-// StripePay.js\n-// import React, { useState } from \"react\";\n-// import { loadStripe } from \"@stripe/stripe-js\";\n-// import { Elements } from \"@stripe/react-stripe-js\";\n-// import {\n-//   PaymentElement,\n-//   useStripe,\n-//   useElements,\n-// } from \"@stripe/react-stripe-js\";\n-// import { AddStripePalpay } from \"../../api/api.js\";\n-// import { FaStripe } from \"react-icons/fa\";\n-\n-// const stripePromise = loadStripe(\n-//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-// );\n-\n-// const StripePay = ({ amount, setErrors }) => {\n-//   const options = {\n-//     mode: \"payment\",\n-//     amount: 80, // Default amount, you can pass it as a prop\n-//     currency: \"usd\", // Default currency, you can pass it as a prop\n-//     // Additional configuration options\n-//   };\n-//   const stripe = useStripe();\n-//   const elements = useElements();\n-//   const [errorMessage, setErrorMessage] = useState(null);\n-\n-//   const handleSubmit = async (event) => {\n-//     event.preventDefault();\n-\n-//     if (!elements) {\n-//       return;\n-//     }\n-\n-//     const { error: submitError } = await elements.submit();\n-\n-//     if (submitError) {\n-//       setErrorMessage(submitError.message);\n-//       return;\n-//     }\n-\n-//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n-//       setErrors({\n-//         amount: \"Please set the amount before payment\",\n-//       });\n-//     } else {\n-//       try {\n-//         const tokenData = await AddStripePalpay(amount);\n-//         console.log(tokenData);\n-//         const clientSecret = tokenData.data.message;\n-\n-//         const res_data = await stripe.confirmPayment({\n-//           elements,\n-//           clientSecret,\n-//           confirmParams: {\n-//             return_url: \"https://www.indiakinursery.com\",\n-//           },\n-//         });\n-\n-//         if (res_data.error) {\n-//           setErrorMessage(res_data.error);\n-//         } else {\n-//           // Handle successful payment\n-//         }\n-//       } catch (error) {\n-//         console.error(\"Error confirming payment:\", error);\n-//         setErrorMessage(\"An error occurred while processing your payment.\");\n-//       }\n-//     }\n-//   };\n-\n-//   return (\n-//     <Elements stripe={stripePromise} options={options}>\n-//       <div>\n-//         <PaymentElement />\n-//         <button\n-//           type=\"button\"\n-//           onClick={handleSubmit}\n-//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-//           disabled={!stripe || !elements}\n-//           title=\"Stripe pay\"\n-//         >\n-//           <FaStripe style={{ fontSize: \"2em\" }} />\n-//         </button>\n-//         {errorMessage && <div>{errorMessage}</div>}\n-//       </div>\n-//     </Elements>\n-//   );\n-// };\n-\n-// export default StripePay;\n-import { loadStripe } from \"@stripe/stripe-js\";\n-import React, { useState } from \"react\";\n-import {\n-  PaymentElement,\n-  Elements,\n-  useStripe,\n-  useElements,\n-} from \"@stripe/react-stripe-js\";\n-import { AddStripePalpay } from \"../../api/api.js\";\n-const CheckoutForm = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const stripe = useStripe();\n-  const elements = useElements();\n-  const [errorMessage, setErrorMessage] = useState(null);\n-  const handleSubmit = async (event) => {\n-    event.preventDefault();\n-    if (elements == null) {\n-      return;\n-    }\n-    // return false;\n-    // Trigger form validation and wallet collection\n-    try {\n-      const { error: submitError } = await elements.submit();\n-      console.log(submitError);\n-      if (submitError) {\n-        // Show error to your customer\n-        setErrorMessage(submitError.message);\n-        return;\n-      } else {\n-        if (amount === 0 || amount === \"\" || amount === \"0\") {\n-          setErrors({\n-            ...errors,\n-            amount: \"Please set the amount before payment\",\n-          });\n-        } else {\n-          try {\n-            let tokenData = await AddStripePalpay(amount);\n-            let clientSecret = tokenData.data.message;\n-            try {\n-              const res_data = await stripe.confirmPayment({\n-                //`Elements` instance that was used to create the Payment Element\n-                elements,\n-                clientSecret,\n-                confirmParams: {\n-                  // save_payment_method: true,\n-                  //Aws: https://canpathwaysjobs.com\n-                  //Vercel: https://canjobs.vercel.app\n-                  return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n-                },\n-                // amount: amount,\n-              });\n-              if (res_data.error) {\n-                setErrorMessage(res_data.error.message);\n-              } else {\n-              }\n-            } catch (Err) {\n-              console.log(Err);\n-            }\n-          } catch (err) {\n-            console.log(err);\n-          }\n-        }\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <PaymentElement />\n-      <button\n-        type=\"button\"\n-        onClick={handleSubmit}\n-        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-        disabled={!stripe || !elements}\n-        title=\"Stripe pay\"\n-      >\n-        pay\n-      </button>\n-      {/* Show error message to your customers */}\n-      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n-    </div>\n-  );\n-};\n-\n-const stripePromise = loadStripe(\n-  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-);\n-\n-const StripePay = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const amountInCents = Math.round(amount * 100);\n-  const options = {\n-    mode: \"payment\",\n-    amount: amountInCents,\n-    currency: \"usd\",\n-    // Fully customizable with appearance API.\n-    appearance: {\n-      /*...*/\n-    },\n-  };\n-  return (\n-    <Elements\n-      stripe={stripePromise}\n-      options={options}\n-      mode={\"payment\"}\n-      amount={amountInCents}\n-    >\n-      <CheckoutForm\n-        amount={amountInCents}\n-        getAmt={getAmt}\n-        setErrors={setErrors}\n-        errors={errors}\n-        setApicall={setApicall}\n-        setState={setState}\n-        state={state}\n-        setStripePayment={setStripePayment}\n-      />\n-    </Elements>\n-  );\n-};\n-export default StripePay;\n-// StripePay.js\n-// import React, { useState } from \"react\";\n-// import { loadStripe } from \"@stripe/stripe-js\";\n-// import { Elements } from \"@stripe/react-stripe-js\";\n-// import {\n-//   PaymentElement,\n-//   useStripe,\n-//   useElements,\n-// } from \"@stripe/react-stripe-js\";\n-// import { AddStripePalpay } from \"../../api/api.js\";\n-// import { FaStripe } from \"react-icons/fa\";\n-\n-// const stripePromise = loadStripe(\n-//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-// );\n-\n-// const StripePay = ({ amount, setErrors }) => {\n-//   const options = {\n-//     mode: \"payment\",\n-//     amount: 80, // Default amount, you can pass it as a prop\n-//     currency: \"usd\", // Default currency, you can pass it as a prop\n-//     // Additional configuration options\n-//   };\n-//   const stripe = useStripe();\n-//   const elements = useElements();\n-//   const [errorMessage, setErrorMessage] = useState(null);\n-\n-//   const handleSubmit = async (event) => {\n-//     event.preventDefault();\n-\n-//     if (!elements) {\n-//       return;\n-//     }\n-\n-//     const { error: submitError } = await elements.submit();\n-\n-//     if (submitError) {\n-//       setErrorMessage(submitError.message);\n-//       return;\n-//     }\n-\n-//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n-//       setErrors({\n-//         amount: \"Please set the amount before payment\",\n-//       });\n-//     } else {\n-//       try {\n-//         const tokenData = await AddStripePalpay(amount);\n-//         console.log(tokenData);\n-//         const clientSecret = tokenData.data.message;\n-\n-//         const res_data = await stripe.confirmPayment({\n-//           elements,\n-//           clientSecret,\n-//           confirmParams: {\n-//             return_url: \"https://www.indiakinursery.com\",\n-//           },\n-//         });\n-\n-//         if (res_data.error) {\n-//           setErrorMessage(res_data.error);\n-//         } else {\n-//           // Handle successful payment\n-//         }\n-//       } catch (error) {\n-//         console.error(\"Error confirming payment:\", error);\n-//         setErrorMessage(\"An error occurred while processing your payment.\");\n-//       }\n-//     }\n-//   };\n-\n-//   return (\n-//     <Elements stripe={stripePromise} options={options}>\n-//       <div>\n-//         <PaymentElement />\n-//         <button\n-//           type=\"button\"\n-//           onClick={handleSubmit}\n-//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-//           disabled={!stripe || !elements}\n-//           title=\"Stripe pay\"\n-//         >\n-//           <FaStripe style={{ fontSize: \"2em\" }} />\n-//         </button>\n-//         {errorMessage && <div>{errorMessage}</div>}\n-//       </div>\n-//     </Elements>\n-//   );\n-// };\n-\n-// export default StripePay;\n"
                },
                {
                    "date": 1709126438478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import { loadStripe } from \"@stripe/stripe-js\";\n+import React, { useState } from \"react\";\n+import {\n+  PaymentElement,\n+  Elements,\n+  useStripe,\n+  useElements,\n+} from \"@stripe/react-stripe-js\";\n+import { AddStripePalpay } from \"../../api/api.js\";\n+const CheckoutForm = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const stripe = useStripe();\n+  const elements = useElements();\n+  const [errorMessage, setErrorMessage] = useState(null);\n+  const handleSubmit = async (event) => {\n+    event.preventDefault();\n+    if (elements == null) {\n+      return;\n+    }\n+    // return false;\n+    // Trigger form validation and wallet collection\n+    try {\n+      const { error: submitError } = await elements.submit();\n+      console.log(submitError);\n+      if (submitError) {\n+        // Show error to your customer\n+        setErrorMessage(submitError.message);\n+        return;\n+      } else {\n+        if (amount === 0 || amount === \"\" || amount === \"0\") {\n+          setErrors({\n+            ...errors,\n+            amount: \"Please set the amount before payment\",\n+          });\n+        } else {\n+          try {\n+            let tokenData = await AddStripePalpay(amount);\n+            let clientSecret = tokenData.data.message;\n+            try {\n+              const res_data = await stripe.confirmPayment({\n+                //`Elements` instance that was used to create the Payment Element\n+                elements,\n+                clientSecret,\n+                confirmParams: {\n+                  // save_payment_method: true,\n+                  //Aws: https://canpathwaysjobs.com\n+                  //Vercel: https://canjobs.vercel.app\n+                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n+                },\n+                // amount: amount,\n+              });\n+              if (res_data.error) {\n+                setErrorMessage(res_data.error.message);\n+              } else {\n+              }\n+            } catch (Err) {\n+              console.log(Err);\n+            }\n+          } catch (err) {\n+            console.log(err);\n+          }\n+        }\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <PaymentElement />\n+      <button\n+        type=\"button\"\n+        onClick={handleSubmit}\n+        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+        disabled={!stripe || !elements}\n+        title=\"Stripe pay\"\n+      >\n+        pay\n+      </button>\n+      {/* Show error message to your customers */}\n+      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n+    </div>\n+  );\n+};\n+\n+const stripePromise = loadStripe(\n+  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+);\n+\n+const StripePay = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const amountInCents = Math.round(amount * 100);\n+  const options = {\n+    mode: \"payment\",\n+    amount: amountInCents,\n+    currency: \"usd\",\n+    // Fully customizable with appearance API.\n+    appearance: {\n+      /*...*/\n+    },\n+  };\n+  return (\n+    <Elements\n+      stripe={stripePromise}\n+      options={options}\n+      mode={\"payment\"}\n+      amount={amountInCents}\n+    >\n+      <CheckoutForm\n+        amount={amountInCents}\n+        getAmt={getAmt}\n+        setErrors={setErrors}\n+        errors={errors}\n+        setApicall={setApicall}\n+        setState={setState}\n+        state={state}\n+        setStripePayment={setStripePayment}\n+      />\n+    </Elements>\n+  );\n+};\n+export default StripePay;\n+// StripePay.js\n+// import React, { useState } from \"react\";\n+// import { loadStripe } from \"@stripe/stripe-js\";\n+// import { Elements } from \"@stripe/react-stripe-js\";\n+// import {\n+//   PaymentElement,\n+//   useStripe,\n+//   useElements,\n+// } from \"@stripe/react-stripe-js\";\n+// import { AddStripePalpay } from \"../../api/api.js\";\n+// import { FaStripe } from \"react-icons/fa\";\n+\n+// const stripePromise = loadStripe(\n+//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+// );\n+\n+// const StripePay = ({ amount, setErrors }) => {\n+//   const options = {\n+//     mode: \"payment\",\n+//     amount: 80, // Default amount, you can pass it as a prop\n+//     currency: \"usd\", // Default currency, you can pass it as a prop\n+//     // Additional configuration options\n+//   };\n+//   const stripe = useStripe();\n+//   const elements = useElements();\n+//   const [errorMessage, setErrorMessage] = useState(null);\n+\n+//   const handleSubmit = async (event) => {\n+//     event.preventDefault();\n+\n+//     if (!elements) {\n+//       return;\n+//     }\n+\n+//     const { error: submitError } = await elements.submit();\n+\n+//     if (submitError) {\n+//       setErrorMessage(submitError.message);\n+//       return;\n+//     }\n+\n+//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n+//       setErrors({\n+//         amount: \"Please set the amount before payment\",\n+//       });\n+//     } else {\n+//       try {\n+//         const tokenData = await AddStripePalpay(amount);\n+//         console.log(tokenData);\n+//         const clientSecret = tokenData.data.message;\n+\n+//         const res_data = await stripe.confirmPayment({\n+//           elements,\n+//           clientSecret,\n+//           confirmParams: {\n+//             return_url: \"https://www.indiakinursery.com\",\n+//           },\n+//         });\n+\n+//         if (res_data.error) {\n+//           setErrorMessage(res_data.error);\n+//         } else {\n+//           // Handle successful payment\n+//         }\n+//       } catch (error) {\n+//         console.error(\"Error confirming payment:\", error);\n+//         setErrorMessage(\"An error occurred while processing your payment.\");\n+//       }\n+//     }\n+//   };\n+\n+//   return (\n+//     <Elements stripe={stripePromise} options={options}>\n+//       <div>\n+//         <PaymentElement />\n+//         <button\n+//           type=\"button\"\n+//           onClick={handleSubmit}\n+//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+//           disabled={!stripe || !elements}\n+//           title=\"Stripe pay\"\n+//         >\n+//           <FaStripe style={{ fontSize: \"2em\" }} />\n+//         </button>\n+//         {errorMessage && <div>{errorMessage}</div>}\n+//       </div>\n+//     </Elements>\n+//   );\n+// };\n+\n+// export default StripePay;\n"
                },
                {
                    "date": 1709281913146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,238 +52,8 @@\n                 confirmParams: {\n                   // save_payment_method: true,\n                   //Aws: https://canpathwaysjobs.com\n                   //Vercel: https://canjobs.vercel.app\n-                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n-                },\n-                // amount: amount,\n-              });\n-              if (res_data.error) {\n-                setErrorMessage(res_data.error.message);\n-              } else {\n-              }\n-            } catch (Err) {\n-              console.log(Err);\n-            }\n-          } catch (err) {\n-            console.log(err);\n-          }\n-        }\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <PaymentElement />\n-      <button\n-        type=\"button\"\n-        onClick={handleSubmit}\n-        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-        disabled={!stripe || !elements}\n-        title=\"Stripe pay\"\n-      >\n-        pay\n-      </button>\n-      {/* Show error message to your customers */}\n-      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n-    </div>\n-  );\n-};\n-\n-const stripePromise = loadStripe(\n-  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-);\n-\n-const StripePay = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const amountInCents = Math.round(amount * 100);\n-  const options = {\n-    mode: \"payment\",\n-    amount: amountInCents,\n-    currency: \"usd\",\n-    // Fully customizable with appearance API.\n-    appearance: {\n-      /*...*/\n-    },\n-  };\n-  return (\n-    <Elements\n-      stripe={stripePromise}\n-      options={options}\n-      mode={\"payment\"}\n-      amount={amountInCents}\n-    >\n-      <CheckoutForm\n-        amount={amountInCents}\n-        getAmt={getAmt}\n-        setErrors={setErrors}\n-        errors={errors}\n-        setApicall={setApicall}\n-        setState={setState}\n-        state={state}\n-        setStripePayment={setStripePayment}\n-      />\n-    </Elements>\n-  );\n-};\n-export default StripePay;\n-// StripePay.js\n-// import React, { useState } from \"react\";\n-// import { loadStripe } from \"@stripe/stripe-js\";\n-// import { Elements } from \"@stripe/react-stripe-js\";\n-// import {\n-//   PaymentElement,\n-//   useStripe,\n-//   useElements,\n-// } from \"@stripe/react-stripe-js\";\n-// import { AddStripePalpay } from \"../../api/api.js\";\n-// import { FaStripe } from \"react-icons/fa\";\n-\n-// const stripePromise = loadStripe(\n-//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-// );\n-\n-// const StripePay = ({ amount, setErrors }) => {\n-//   const options = {\n-//     mode: \"payment\",\n-//     amount: 80, // Default amount, you can pass it as a prop\n-//     currency: \"usd\", // Default currency, you can pass it as a prop\n-//     // Additional configuration options\n-//   };\n-//   const stripe = useStripe();\n-//   const elements = useElements();\n-//   const [errorMessage, setErrorMessage] = useState(null);\n-\n-//   const handleSubmit = async (event) => {\n-//     event.preventDefault();\n-\n-//     if (!elements) {\n-//       return;\n-//     }\n-\n-//     const { error: submitError } = await elements.submit();\n-\n-//     if (submitError) {\n-//       setErrorMessage(submitError.message);\n-//       return;\n-//     }\n-\n-//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n-//       setErrors({\n-//         amount: \"Please set the amount before payment\",\n-//       });\n-//     } else {\n-//       try {\n-//         const tokenData = await AddStripePalpay(amount);\n-//         console.log(tokenData);\n-//         const clientSecret = tokenData.data.message;\n-\n-//         const res_data = await stripe.confirmPayment({\n-//           elements,\n-//           clientSecret,\n-//           confirmParams: {\n-//             return_url: \"https://www.indiakinursery.com\",\n-//           },\n-//         });\n-\n-//         if (res_data.error) {\n-//           setErrorMessage(res_data.error);\n-//         } else {\n-//           // Handle successful payment\n-//         }\n-//       } catch (error) {\n-//         console.error(\"Error confirming payment:\", error);\n-//         setErrorMessage(\"An error occurred while processing your payment.\");\n-//       }\n-//     }\n-//   };\n-\n-//   return (\n-//     <Elements stripe={stripePromise} options={options}>\n-//       <div>\n-//         <PaymentElement />\n-//         <button\n-//           type=\"button\"\n-//           onClick={handleSubmit}\n-//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-//           disabled={!stripe || !elements}\n-//           title=\"Stripe pay\"\n-//         >\n-//           <FaStripe style={{ fontSize: \"2em\" }} />\n-//         </button>\n-//         {errorMessage && <div>{errorMessage}</div>}\n-//       </div>\n-//     </Elements>\n-//   );\n-// };\n-\n-// export default StripePay;\n-import { loadStripe } from \"@stripe/stripe-js\";\n-import React, { useState } from \"react\";\n-import {\n-  PaymentElement,\n-  Elements,\n-  useStripe,\n-  useElements,\n-} from \"@stripe/react-stripe-js\";\n-import { AddStripePalpay } from \"../../api/api.js\";\n-const CheckoutForm = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const stripe = useStripe();\n-  const elements = useElements();\n-  const [errorMessage, setErrorMessage] = useState(null);\n-  const handleSubmit = async (event) => {\n-    event.preventDefault();\n-    if (elements == null) {\n-      return;\n-    }\n-    // return false;\n-    // Trigger form validation and wallet collection\n-    try {\n-      const { error: submitError } = await elements.submit();\n-      console.log(submitError);\n-      if (submitError) {\n-        // Show error to your customer\n-        setErrorMessage(submitError.message);\n-        return;\n-      } else {\n-        if (amount === 0 || amount === \"\" || amount === \"0\") {\n-          setErrors({\n-            ...errors,\n-            amount: \"Please set the amount before payment\",\n-          });\n-        } else {\n-          try {\n-            let tokenData = await AddStripePalpay(amount);\n-            let clientSecret = tokenData.data.message;\n-            try {\n-              const res_data = await stripe.confirmPayment({\n-                //`Elements` instance that was used to create the Payment Element\n-                elements,\n-                clientSecret,\n-                confirmParams: {\n-                  // save_payment_method: true,\n-                  //Aws: https://canpathwaysjobs.com\n-                  //Vercel: https://canjobs.vercel.app\n                   return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n                 },\n                 // amount: amount,\n               });\n"
                },
                {
                    "date": 1709289148661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n                 confirmParams: {\n                   // save_payment_method: true,\n                   //Aws: https://canpathwaysjobs.com\n                   //Vercel: https://canjobs.vercel.app\n-                  return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n+                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n                 },\n                 // amount: amount,\n               });\n               if (res_data.error) {\n"
                },
                {
                    "date": 1709291154796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import { loadStripe } from \"@stripe/stripe-js\";\n+import React, { useState } from \"react\";\n+import {\n+  PaymentElement,\n+  Elements,\n+  useStripe,\n+  useElements,\n+} from \"@stripe/react-stripe-js\";\n+import { AddStripePalpay } from \"../../api/api.js\";\n+const CheckoutForm = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const stripe = useStripe();\n+  const elements = useElements();\n+  const [errorMessage, setErrorMessage] = useState(null);\n+  const handleSubmit = async (event) => {\n+    event.preventDefault();\n+    if (elements == null) {\n+      return;\n+    }\n+    // return false;\n+    // Trigger form validation and wallet collection\n+    try {\n+      const { error: submitError } = await elements.submit();\n+      console.log(submitError);\n+      if (submitError) {\n+        // Show error to your customer\n+        setErrorMessage(submitError.message);\n+        return;\n+      } else {\n+        if (amount === 0 || amount === \"\" || amount === \"0\") {\n+          setErrors({\n+            ...errors,\n+            amount: \"Please set the amount before payment\",\n+          });\n+        } else {\n+          try {\n+            let tokenData = await AddStripePalpay(amount);\n+            let clientSecret = tokenData.data.message;\n+            try {\n+              const res_data = await stripe.confirmPayment({\n+                //`Elements` instance that was used to create the Payment Element\n+                elements,\n+                clientSecret,\n+                confirmParams: {\n+                  // save_payment_method: true,\n+                  //Aws: https://canpathwaysjobs.com\n+                  //Vercel: https://canjobs.vercel.app\n+                  return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n+                },\n+                // amount: amount,\n+              });\n+              if (res_data.error) {\n+                setErrorMessage(res_data.error.message);\n+              } else {\n+              }\n+            } catch (Err) {\n+              console.log(Err);\n+            }\n+          } catch (err) {\n+            console.log(err);\n+          }\n+        }\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <PaymentElement />\n+      <button\n+        type=\"button\"\n+        onClick={handleSubmit}\n+        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+        disabled={!stripe || !elements}\n+        title=\"Stripe pay\"\n+      >\n+        pay\n+      </button>\n+      {/* Show error message to your customers */}\n+      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n+    </div>\n+  );\n+};\n+\n+const stripePromise = loadStripe(\n+  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+);\n+\n+const StripePay = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const amountInCents = Math.round(amount * 100);\n+  const options = {\n+    mode: \"payment\",\n+    amount: amountInCents,\n+    currency: \"usd\",\n+    // Fully customizable with appearance API.\n+    appearance: {\n+      /*...*/\n+    },\n+  };\n+  return (\n+    <Elements\n+      stripe={stripePromise}\n+      options={options}\n+      mode={\"payment\"}\n+      amount={amountInCents}\n+    >\n+      <CheckoutForm\n+        amount={amountInCents}\n+        getAmt={getAmt}\n+        setErrors={setErrors}\n+        errors={errors}\n+        setApicall={setApicall}\n+        setState={setState}\n+        state={state}\n+        setStripePayment={setStripePayment}\n+      />\n+    </Elements>\n+  );\n+};\n+export default StripePay;\n+// StripePay.js\n+// import React, { useState } from \"react\";\n+// import { loadStripe } from \"@stripe/stripe-js\";\n+// import { Elements } from \"@stripe/react-stripe-js\";\n+// import {\n+//   PaymentElement,\n+//   useStripe,\n+//   useElements,\n+// } from \"@stripe/react-stripe-js\";\n+// import { AddStripePalpay } from \"../../api/api.js\";\n+// import { FaStripe } from \"react-icons/fa\";\n+\n+// const stripePromise = loadStripe(\n+//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+// );\n+\n+// const StripePay = ({ amount, setErrors }) => {\n+//   const options = {\n+//     mode: \"payment\",\n+//     amount: 80, // Default amount, you can pass it as a prop\n+//     currency: \"usd\", // Default currency, you can pass it as a prop\n+//     // Additional configuration options\n+//   };\n+//   const stripe = useStripe();\n+//   const elements = useElements();\n+//   const [errorMessage, setErrorMessage] = useState(null);\n+\n+//   const handleSubmit = async (event) => {\n+//     event.preventDefault();\n+\n+//     if (!elements) {\n+//       return;\n+//     }\n+\n+//     const { error: submitError } = await elements.submit();\n+\n+//     if (submitError) {\n+//       setErrorMessage(submitError.message);\n+//       return;\n+//     }\n+\n+//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n+//       setErrors({\n+//         amount: \"Please set the amount before payment\",\n+//       });\n+//     } else {\n+//       try {\n+//         const tokenData = await AddStripePalpay(amount);\n+//         console.log(tokenData);\n+//         const clientSecret = tokenData.data.message;\n+\n+//         const res_data = await stripe.confirmPayment({\n+//           elements,\n+//           clientSecret,\n+//           confirmParams: {\n+//             return_url: \"https://www.indiakinursery.com\",\n+//           },\n+//         });\n+\n+//         if (res_data.error) {\n+//           setErrorMessage(res_data.error);\n+//         } else {\n+//           // Handle successful payment\n+//         }\n+//       } catch (error) {\n+//         console.error(\"Error confirming payment:\", error);\n+//         setErrorMessage(\"An error occurred while processing your payment.\");\n+//       }\n+//     }\n+//   };\n+\n+//   return (\n+//     <Elements stripe={stripePromise} options={options}>\n+//       <div>\n+//         <PaymentElement />\n+//         <button\n+//           type=\"button\"\n+//           onClick={handleSubmit}\n+//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+//           disabled={!stripe || !elements}\n+//           title=\"Stripe pay\"\n+//         >\n+//           <FaStripe style={{ fontSize: \"2em\" }} />\n+//         </button>\n+//         {errorMessage && <div>{errorMessage}</div>}\n+//       </div>\n+//     </Elements>\n+//   );\n+// };\n+\n+// export default StripePay;\n"
                },
                {
                    "date": 1709352355586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,238 +52,8 @@\n                 confirmParams: {\n                   // save_payment_method: true,\n                   //Aws: https://canpathwaysjobs.com\n                   //Vercel: https://canjobs.vercel.app\n-                  return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n-                },\n-                // amount: amount,\n-              });\n-              if (res_data.error) {\n-                setErrorMessage(res_data.error.message);\n-              } else {\n-              }\n-            } catch (Err) {\n-              console.log(Err);\n-            }\n-          } catch (err) {\n-            console.log(err);\n-          }\n-        }\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <PaymentElement />\n-      <button\n-        type=\"button\"\n-        onClick={handleSubmit}\n-        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-        disabled={!stripe || !elements}\n-        title=\"Stripe pay\"\n-      >\n-        pay\n-      </button>\n-      {/* Show error message to your customers */}\n-      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n-    </div>\n-  );\n-};\n-\n-const stripePromise = loadStripe(\n-  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-);\n-\n-const StripePay = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const amountInCents = Math.round(amount * 100);\n-  const options = {\n-    mode: \"payment\",\n-    amount: amountInCents,\n-    currency: \"usd\",\n-    // Fully customizable with appearance API.\n-    appearance: {\n-      /*...*/\n-    },\n-  };\n-  return (\n-    <Elements\n-      stripe={stripePromise}\n-      options={options}\n-      mode={\"payment\"}\n-      amount={amountInCents}\n-    >\n-      <CheckoutForm\n-        amount={amountInCents}\n-        getAmt={getAmt}\n-        setErrors={setErrors}\n-        errors={errors}\n-        setApicall={setApicall}\n-        setState={setState}\n-        state={state}\n-        setStripePayment={setStripePayment}\n-      />\n-    </Elements>\n-  );\n-};\n-export default StripePay;\n-// StripePay.js\n-// import React, { useState } from \"react\";\n-// import { loadStripe } from \"@stripe/stripe-js\";\n-// import { Elements } from \"@stripe/react-stripe-js\";\n-// import {\n-//   PaymentElement,\n-//   useStripe,\n-//   useElements,\n-// } from \"@stripe/react-stripe-js\";\n-// import { AddStripePalpay } from \"../../api/api.js\";\n-// import { FaStripe } from \"react-icons/fa\";\n-\n-// const stripePromise = loadStripe(\n-//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-// );\n-\n-// const StripePay = ({ amount, setErrors }) => {\n-//   const options = {\n-//     mode: \"payment\",\n-//     amount: 80, // Default amount, you can pass it as a prop\n-//     currency: \"usd\", // Default currency, you can pass it as a prop\n-//     // Additional configuration options\n-//   };\n-//   const stripe = useStripe();\n-//   const elements = useElements();\n-//   const [errorMessage, setErrorMessage] = useState(null);\n-\n-//   const handleSubmit = async (event) => {\n-//     event.preventDefault();\n-\n-//     if (!elements) {\n-//       return;\n-//     }\n-\n-//     const { error: submitError } = await elements.submit();\n-\n-//     if (submitError) {\n-//       setErrorMessage(submitError.message);\n-//       return;\n-//     }\n-\n-//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n-//       setErrors({\n-//         amount: \"Please set the amount before payment\",\n-//       });\n-//     } else {\n-//       try {\n-//         const tokenData = await AddStripePalpay(amount);\n-//         console.log(tokenData);\n-//         const clientSecret = tokenData.data.message;\n-\n-//         const res_data = await stripe.confirmPayment({\n-//           elements,\n-//           clientSecret,\n-//           confirmParams: {\n-//             return_url: \"https://www.indiakinursery.com\",\n-//           },\n-//         });\n-\n-//         if (res_data.error) {\n-//           setErrorMessage(res_data.error);\n-//         } else {\n-//           // Handle successful payment\n-//         }\n-//       } catch (error) {\n-//         console.error(\"Error confirming payment:\", error);\n-//         setErrorMessage(\"An error occurred while processing your payment.\");\n-//       }\n-//     }\n-//   };\n-\n-//   return (\n-//     <Elements stripe={stripePromise} options={options}>\n-//       <div>\n-//         <PaymentElement />\n-//         <button\n-//           type=\"button\"\n-//           onClick={handleSubmit}\n-//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-//           disabled={!stripe || !elements}\n-//           title=\"Stripe pay\"\n-//         >\n-//           <FaStripe style={{ fontSize: \"2em\" }} />\n-//         </button>\n-//         {errorMessage && <div>{errorMessage}</div>}\n-//       </div>\n-//     </Elements>\n-//   );\n-// };\n-\n-// export default StripePay;\n-import { loadStripe } from \"@stripe/stripe-js\";\n-import React, { useState } from \"react\";\n-import {\n-  PaymentElement,\n-  Elements,\n-  useStripe,\n-  useElements,\n-} from \"@stripe/react-stripe-js\";\n-import { AddStripePalpay } from \"../../api/api.js\";\n-const CheckoutForm = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const stripe = useStripe();\n-  const elements = useElements();\n-  const [errorMessage, setErrorMessage] = useState(null);\n-  const handleSubmit = async (event) => {\n-    event.preventDefault();\n-    if (elements == null) {\n-      return;\n-    }\n-    // return false;\n-    // Trigger form validation and wallet collection\n-    try {\n-      const { error: submitError } = await elements.submit();\n-      console.log(submitError);\n-      if (submitError) {\n-        // Show error to your customer\n-        setErrorMessage(submitError.message);\n-        return;\n-      } else {\n-        if (amount === 0 || amount === \"\" || amount === \"0\") {\n-          setErrors({\n-            ...errors,\n-            amount: \"Please set the amount before payment\",\n-          });\n-        } else {\n-          try {\n-            let tokenData = await AddStripePalpay(amount);\n-            let clientSecret = tokenData.data.message;\n-            try {\n-              const res_data = await stripe.confirmPayment({\n-                //`Elements` instance that was used to create the Payment Element\n-                elements,\n-                clientSecret,\n-                confirmParams: {\n-                  // save_payment_method: true,\n-                  //Aws: https://canpathwaysjobs.com\n-                  //Vercel: https://canjobs.vercel.app\n                   return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n                 },\n                 // amount: amount,\n               });\n"
                },
                {
                    "date": 1709361026421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+import { loadStripe } from \"@stripe/stripe-js\";\n+import React, { useState } from \"react\";\n+import {\n+  PaymentElement,\n+  Elements,\n+  useStripe,\n+  useElements,\n+} from \"@stripe/react-stripe-js\";\n+import { AddStripePalpay } from \"../../api/api.js\";\n+const CheckoutForm = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const stripe = useStripe();\n+  const elements = useElements();\n+  const [errorMessage, setErrorMessage] = useState(null);\n+  const handleSubmit = async (event) => {\n+    event.preventDefault();\n+    if (elements == null) {\n+      return;\n+    }\n+    // return false;\n+    // Trigger form validation and wallet collection\n+    try {\n+      const { error: submitError } = await elements.submit();\n+      console.log(submitError);\n+      if (submitError) {\n+        // Show error to your customer\n+        setErrorMessage(submitError.message);\n+        return;\n+      } else {\n+        if (amount === 0 || amount === \"\" || amount === \"0\") {\n+          setErrors({\n+            ...errors,\n+            amount: \"Please set the amount before payment\",\n+          });\n+        } else {\n+          try {\n+            let tokenData = await AddStripePalpay(amount);\n+            let clientSecret = tokenData.data.message;\n+            try {\n+              const res_data = await stripe.confirmPayment({\n+                //`Elements` instance that was used to create the Payment Element\n+                elements,\n+                clientSecret,\n+                confirmParams: {\n+                  // save_payment_method: true,\n+                  //Aws: https://canpathwaysjobs.com\n+                  //Vercel: https://canjobs.vercel.app\n+                  return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n+                },\n+                // amount: amount,\n+              });\n+              if (res_data.error) {\n+                setErrorMessage(res_data.error.message);\n+              } else {\n+              }\n+            } catch (Err) {\n+              console.log(Err);\n+            }\n+          } catch (err) {\n+            console.log(err);\n+          }\n+        }\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <PaymentElement />\n+      <button\n+        type=\"button\"\n+        onClick={handleSubmit}\n+        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+        disabled={!stripe || !elements}\n+        title=\"Stripe pay\"\n+      >\n+        pay\n+      </button>\n+      {/* Show error message to your customers */}\n+      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n+    </div>\n+  );\n+};\n+\n+const stripePromise = loadStripe(\n+  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+);\n+\n+const StripePay = ({\n+  amount,\n+  getAmt,\n+  setErrors,\n+  errors,\n+  setApicall,\n+  setState,\n+  state,\n+  setStripePayment,\n+}) => {\n+  const amountInCents = Math.round(amount * 100);\n+  const options = {\n+    mode: \"payment\",\n+    amount: amountInCents,\n+    currency: \"usd\",\n+    // Fully customizable with appearance API.\n+    appearance: {\n+      /*...*/\n+    },\n+  };\n+  return (\n+    <Elements\n+      stripe={stripePromise}\n+      options={options}\n+      mode={\"payment\"}\n+      amount={amountInCents}\n+    >\n+      <CheckoutForm\n+        amount={amountInCents}\n+        getAmt={getAmt}\n+        setErrors={setErrors}\n+        errors={errors}\n+        setApicall={setApicall}\n+        setState={setState}\n+        state={state}\n+        setStripePayment={setStripePayment}\n+      />\n+    </Elements>\n+  );\n+};\n+export default StripePay;\n+// StripePay.js\n+// import React, { useState } from \"react\";\n+// import { loadStripe } from \"@stripe/stripe-js\";\n+// import { Elements } from \"@stripe/react-stripe-js\";\n+// import {\n+//   PaymentElement,\n+//   useStripe,\n+//   useElements,\n+// } from \"@stripe/react-stripe-js\";\n+// import { AddStripePalpay } from \"../../api/api.js\";\n+// import { FaStripe } from \"react-icons/fa\";\n+\n+// const stripePromise = loadStripe(\n+//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n+// );\n+\n+// const StripePay = ({ amount, setErrors }) => {\n+//   const options = {\n+//     mode: \"payment\",\n+//     amount: 80, // Default amount, you can pass it as a prop\n+//     currency: \"usd\", // Default currency, you can pass it as a prop\n+//     // Additional configuration options\n+//   };\n+//   const stripe = useStripe();\n+//   const elements = useElements();\n+//   const [errorMessage, setErrorMessage] = useState(null);\n+\n+//   const handleSubmit = async (event) => {\n+//     event.preventDefault();\n+\n+//     if (!elements) {\n+//       return;\n+//     }\n+\n+//     const { error: submitError } = await elements.submit();\n+\n+//     if (submitError) {\n+//       setErrorMessage(submitError.message);\n+//       return;\n+//     }\n+\n+//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n+//       setErrors({\n+//         amount: \"Please set the amount before payment\",\n+//       });\n+//     } else {\n+//       try {\n+//         const tokenData = await AddStripePalpay(amount);\n+//         console.log(tokenData);\n+//         const clientSecret = tokenData.data.message;\n+\n+//         const res_data = await stripe.confirmPayment({\n+//           elements,\n+//           clientSecret,\n+//           confirmParams: {\n+//             return_url: \"https://www.indiakinursery.com\",\n+//           },\n+//         });\n+\n+//         if (res_data.error) {\n+//           setErrorMessage(res_data.error);\n+//         } else {\n+//           // Handle successful payment\n+//         }\n+//       } catch (error) {\n+//         console.error(\"Error confirming payment:\", error);\n+//         setErrorMessage(\"An error occurred while processing your payment.\");\n+//       }\n+//     }\n+//   };\n+\n+//   return (\n+//     <Elements stripe={stripePromise} options={options}>\n+//       <div>\n+//         <PaymentElement />\n+//         <button\n+//           type=\"button\"\n+//           onClick={handleSubmit}\n+//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n+//           disabled={!stripe || !elements}\n+//           title=\"Stripe pay\"\n+//         >\n+//           <FaStripe style={{ fontSize: \"2em\" }} />\n+//         </button>\n+//         {errorMessage && <div>{errorMessage}</div>}\n+//       </div>\n+//     </Elements>\n+//   );\n+// };\n+\n+// export default StripePay;\n"
                },
                {
                    "date": 1710412010387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,238 +52,8 @@\n                 confirmParams: {\n                   // save_payment_method: true,\n                   //Aws: https://canpathwaysjobs.com\n                   //Vercel: https://canjobs.vercel.app\n-                  return_url: `https://canpathwaysjobs.com${window.location.pathname}`,\n-                },\n-                // amount: amount,\n-              });\n-              if (res_data.error) {\n-                setErrorMessage(res_data.error.message);\n-              } else {\n-              }\n-            } catch (Err) {\n-              console.log(Err);\n-            }\n-          } catch (err) {\n-            console.log(err);\n-          }\n-        }\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      <PaymentElement />\n-      <button\n-        type=\"button\"\n-        onClick={handleSubmit}\n-        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-        disabled={!stripe || !elements}\n-        title=\"Stripe pay\"\n-      >\n-        pay\n-      </button>\n-      {/* Show error message to your customers */}\n-      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n-    </div>\n-  );\n-};\n-\n-const stripePromise = loadStripe(\n-  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-);\n-\n-const StripePay = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const amountInCents = Math.round(amount * 100);\n-  const options = {\n-    mode: \"payment\",\n-    amount: amountInCents,\n-    currency: \"usd\",\n-    // Fully customizable with appearance API.\n-    appearance: {\n-      /*...*/\n-    },\n-  };\n-  return (\n-    <Elements\n-      stripe={stripePromise}\n-      options={options}\n-      mode={\"payment\"}\n-      amount={amountInCents}\n-    >\n-      <CheckoutForm\n-        amount={amountInCents}\n-        getAmt={getAmt}\n-        setErrors={setErrors}\n-        errors={errors}\n-        setApicall={setApicall}\n-        setState={setState}\n-        state={state}\n-        setStripePayment={setStripePayment}\n-      />\n-    </Elements>\n-  );\n-};\n-export default StripePay;\n-// StripePay.js\n-// import React, { useState } from \"react\";\n-// import { loadStripe } from \"@stripe/stripe-js\";\n-// import { Elements } from \"@stripe/react-stripe-js\";\n-// import {\n-//   PaymentElement,\n-//   useStripe,\n-//   useElements,\n-// } from \"@stripe/react-stripe-js\";\n-// import { AddStripePalpay } from \"../../api/api.js\";\n-// import { FaStripe } from \"react-icons/fa\";\n-\n-// const stripePromise = loadStripe(\n-//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n-// );\n-\n-// const StripePay = ({ amount, setErrors }) => {\n-//   const options = {\n-//     mode: \"payment\",\n-//     amount: 80, // Default amount, you can pass it as a prop\n-//     currency: \"usd\", // Default currency, you can pass it as a prop\n-//     // Additional configuration options\n-//   };\n-//   const stripe = useStripe();\n-//   const elements = useElements();\n-//   const [errorMessage, setErrorMessage] = useState(null);\n-\n-//   const handleSubmit = async (event) => {\n-//     event.preventDefault();\n-\n-//     if (!elements) {\n-//       return;\n-//     }\n-\n-//     const { error: submitError } = await elements.submit();\n-\n-//     if (submitError) {\n-//       setErrorMessage(submitError.message);\n-//       return;\n-//     }\n-\n-//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n-//       setErrors({\n-//         amount: \"Please set the amount before payment\",\n-//       });\n-//     } else {\n-//       try {\n-//         const tokenData = await AddStripePalpay(amount);\n-//         console.log(tokenData);\n-//         const clientSecret = tokenData.data.message;\n-\n-//         const res_data = await stripe.confirmPayment({\n-//           elements,\n-//           clientSecret,\n-//           confirmParams: {\n-//             return_url: \"https://www.indiakinursery.com\",\n-//           },\n-//         });\n-\n-//         if (res_data.error) {\n-//           setErrorMessage(res_data.error);\n-//         } else {\n-//           // Handle successful payment\n-//         }\n-//       } catch (error) {\n-//         console.error(\"Error confirming payment:\", error);\n-//         setErrorMessage(\"An error occurred while processing your payment.\");\n-//       }\n-//     }\n-//   };\n-\n-//   return (\n-//     <Elements stripe={stripePromise} options={options}>\n-//       <div>\n-//         <PaymentElement />\n-//         <button\n-//           type=\"button\"\n-//           onClick={handleSubmit}\n-//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n-//           disabled={!stripe || !elements}\n-//           title=\"Stripe pay\"\n-//         >\n-//           <FaStripe style={{ fontSize: \"2em\" }} />\n-//         </button>\n-//         {errorMessage && <div>{errorMessage}</div>}\n-//       </div>\n-//     </Elements>\n-//   );\n-// };\n-\n-// export default StripePay;\n-import { loadStripe } from \"@stripe/stripe-js\";\n-import React, { useState } from \"react\";\n-import {\n-  PaymentElement,\n-  Elements,\n-  useStripe,\n-  useElements,\n-} from \"@stripe/react-stripe-js\";\n-import { AddStripePalpay } from \"../../api/api.js\";\n-const CheckoutForm = ({\n-  amount,\n-  getAmt,\n-  setErrors,\n-  errors,\n-  setApicall,\n-  setState,\n-  state,\n-  setStripePayment,\n-}) => {\n-  const stripe = useStripe();\n-  const elements = useElements();\n-  const [errorMessage, setErrorMessage] = useState(null);\n-  const handleSubmit = async (event) => {\n-    event.preventDefault();\n-    if (elements == null) {\n-      return;\n-    }\n-    // return false;\n-    // Trigger form validation and wallet collection\n-    try {\n-      const { error: submitError } = await elements.submit();\n-      console.log(submitError);\n-      if (submitError) {\n-        // Show error to your customer\n-        setErrorMessage(submitError.message);\n-        return;\n-      } else {\n-        if (amount === 0 || amount === \"\" || amount === \"0\") {\n-          setErrors({\n-            ...errors,\n-            amount: \"Please set the amount before payment\",\n-          });\n-        } else {\n-          try {\n-            let tokenData = await AddStripePalpay(amount);\n-            let clientSecret = tokenData.data.message;\n-            try {\n-              const res_data = await stripe.confirmPayment({\n-                //`Elements` instance that was used to create the Payment Element\n-                elements,\n-                clientSecret,\n-                confirmParams: {\n-                  // save_payment_method: true,\n-                  //Aws: https://canpathwaysjobs.com\n-                  //Vercel: https://canjobs.vercel.app\n                   return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n                 },\n                 // amount: amount,\n               });\n"
                }
            ],
            "date": 1709013450446,
            "name": "Commit-0",
            "content": "import { loadStripe } from \"@stripe/stripe-js\";\nimport React, { useState } from \"react\";\nimport {\n  PaymentElement,\n  Elements,\n  useStripe,\n  useElements,\n} from \"@stripe/react-stripe-js\";\nimport { AddStripePalpay } from \"../../api/api.js\";\nconst CheckoutForm = ({\n  amount,\n  getAmt,\n  setErrors,\n  errors,\n  setApicall,\n  setState,\n  state,\n  setStripePayment,\n}) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [errorMessage, setErrorMessage] = useState(null);\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (elements == null) {\n      return;\n    }\n    // return false;\n    // Trigger form validation and wallet collection\n    try {\n      const { error: submitError } = await elements.submit();\n      console.log(submitError);\n      if (submitError) {\n        // Show error to your customer\n        setErrorMessage(submitError.message);\n        return;\n      } else {\n        if (amount === 0 || amount === \"\" || amount === \"0\") {\n          setErrors({\n            ...errors,\n            amount: \"Please set the amount before payment\",\n          });\n        } else {\n          try {\n            let tokenData = await AddStripePalpay(amount);\n            let clientSecret = tokenData.data.message;\n            try {\n              const res_data = await stripe.confirmPayment({\n                //`Elements` instance that was used to create the Payment Element\n                elements,\n                clientSecret,\n                confirmParams: {\n                  // save_payment_method: true,\n                  //Aws: https://canpathwaysjobs.com\n                  //Vercel: https://canjobs.vercel.app\n                  return_url: `https://canjobs.vercel.app${window.location.pathname}`,\n                },\n                // amount: amount,\n              });\n              if (res_data.error) {\n                setErrorMessage(res_data.error.message);\n              } else {\n              }\n            } catch (Err) {\n              console.log(Err);\n            }\n          } catch (err) {\n            console.log(err);\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div>\n      <PaymentElement />\n      <button\n        type=\"button\"\n        onClick={handleSubmit}\n        className=\"btn btn-primary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n        disabled={!stripe || !elements}\n        title=\"Stripe pay\"\n      >\n        pay\n      </button>\n      {/* Show error message to your customers */}\n      {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nconst stripePromise = loadStripe(\n  \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n);\n\nconst StripePay = ({\n  amount,\n  getAmt,\n  setErrors,\n  errors,\n  setApicall,\n  setState,\n  state,\n  setStripePayment,\n}) => {\n  const amountInCents = Math.round(amount * 100);\n  const options = {\n    mode: \"payment\",\n    amount: amountInCents,\n    currency: \"usd\",\n    // Fully customizable with appearance API.\n    appearance: {\n      /*...*/\n    },\n  };\n  return (\n    <Elements\n      stripe={stripePromise}\n      options={options}\n      mode={\"payment\"}\n      amount={amountInCents}\n    >\n      <CheckoutForm\n        amount={amountInCents}\n        getAmt={getAmt}\n        setErrors={setErrors}\n        errors={errors}\n        setApicall={setApicall}\n        setState={setState}\n        state={state}\n        setStripePayment={setStripePayment}\n      />\n    </Elements>\n  );\n};\nexport default StripePay;\n// StripePay.js\n// import React, { useState } from \"react\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements } from \"@stripe/react-stripe-js\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n// } from \"@stripe/react-stripe-js\";\n// import { AddStripePalpay } from \"../../api/api.js\";\n// import { FaStripe } from \"react-icons/fa\";\n\n// const stripePromise = loadStripe(\n//   \"pk_test_51OOcaLA8p1T9ETlDszUVaF66gGesKprD6MVlSF2oecCY9P6qpcOZoZfb3dZ5QvlRPamQcDhwbz71sIVUzCfZe1YZ00XaboPbmY\"\n// );\n\n// const StripePay = ({ amount, setErrors }) => {\n//   const options = {\n//     mode: \"payment\",\n//     amount: 80, // Default amount, you can pass it as a prop\n//     currency: \"usd\", // Default currency, you can pass it as a prop\n//     // Additional configuration options\n//   };\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const [errorMessage, setErrorMessage] = useState(null);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     if (!elements) {\n//       return;\n//     }\n\n//     const { error: submitError } = await elements.submit();\n\n//     if (submitError) {\n//       setErrorMessage(submitError.message);\n//       return;\n//     }\n\n//     if (amount === 0 || amount === \"\" || amount === \"0\") {\n//       setErrors({\n//         amount: \"Please set the amount before payment\",\n//       });\n//     } else {\n//       try {\n//         const tokenData = await AddStripePalpay(amount);\n//         console.log(tokenData);\n//         const clientSecret = tokenData.data.message;\n\n//         const res_data = await stripe.confirmPayment({\n//           elements,\n//           clientSecret,\n//           confirmParams: {\n//             return_url: \"https://www.indiakinursery.com\",\n//           },\n//         });\n\n//         if (res_data.error) {\n//           setErrorMessage(res_data.error);\n//         } else {\n//           // Handle successful payment\n//         }\n//       } catch (error) {\n//         console.error(\"Error confirming payment:\", error);\n//         setErrorMessage(\"An error occurred while processing your payment.\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <Elements stripe={stripePromise} options={options}>\n//       <div>\n//         <PaymentElement />\n//         <button\n//           type=\"button\"\n//           onClick={handleSubmit}\n//           className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n//           disabled={!stripe || !elements}\n//           title=\"Stripe pay\"\n//         >\n//           <FaStripe style={{ fontSize: \"2em\" }} />\n//         </button>\n//         {errorMessage && <div>{errorMessage}</div>}\n//       </div>\n//     </Elements>\n//   );\n// };\n\n// export default StripePay;\n"
        }
    ]
}