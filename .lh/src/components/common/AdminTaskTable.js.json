{
    "sourceFile": "src/components/common/AdminTaskTable.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1709721454022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1709721454022,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport Loader from \"./loader\";\nimport { Link } from \"react-router-dom\";\nimport { GetCommentsAndAssign } from \"../../api/api\";\nimport Pagination from \"./pagination\";\nexport default function AdminTaskTable(props) {\n  const [taskData, setTaskData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [taskStatus/*, setTaskStatus*/] = useState(\"\");\n  const [columnName, setcolumnName] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState(\"ASC\");\n\n  /*Pagination states */\n  const [totalData, setTotalData] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [recordsPerPage] = useState(10);\n  /*Pagination Calculation */\n  const nPages = Math.ceil(totalData / recordsPerPage);\n\n  let adminEmail = localStorage.getItem(\"admin_id\");\n  // Generate a list of admin;s task\n  const getCommentsList = async () => {\n    try {\n      let res = await GetCommentsAndAssign(\n        \"\",\n        adminEmail,\n        taskStatus,\n        \"document\",\n        currentPage,\n        recordsPerPage,\n        sortOrder,\n        columnName,\n        props.filter_by_time\n      );\n      if (res.data.status === (1 || \"1\")) {\n        setTaskData(res.data.data.data);\n        setIsLoading(false);\n        setTotalData(res.data.data.total_rows);\n      } else if (res.data.message === \"Task data not found\") {\n        setIsLoading(false);\n        setTaskData([]);\n        setTotalData(0);\n      }\n    } catch (err) {\n      console.log(err);\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    getCommentsList();\n  }, [taskStatus, props.filter_by_time, currentPage, sortOrder, columnName]);\n  /*Sorting Function */\n  const handleSort = (columnName) => {\n    setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\n    setcolumnName(columnName);\n  };\n  return (\n    <div className=\"bg-white shadow-8 datatable_div  pt-7 rounded pb-8 px-2 \">\n      <div className=\"table-responsive main_table_div\">\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <table className=\"table table-striped main_data_table\">\n            <thead>\n              <tr className=\"\">\n                <th\n                  scope=\"col\"\n                  className=\" border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"task_creator_user_name\");\n                      props.setpageNo(1);\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Assigned By\"\n                  >\n                    Assigned By\n                  </Link>\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\" border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"assigned_to_name\");\n                      props.setpageNo(1);\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Assigned To\"\n                  >\n                    Assigned To\n                  </Link>\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"subject_description\");\n                      props.setpageNo(1);\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Description\"\n                  >\n                    Description\n                  </Link>\n                </th>\n                {/* {props.heading === \"Dashboard\" ? (\n                    \"\"\n                  ) : (\n                    <th\n                      scope=\"col\"\n                      className=\"border-0 font-size-4 font-weight-normal\"\n                    >\n                      <Link\n                        to={\"\"}\n                        onClick={() => {\n                          handleSort(\"type\");\n                          props.setpageNo(1);\n                        }}\n                        className=\"text-gray\"\n                        title=\"Sort by Type\"\n                      >\n                        Type\n                      </Link>\n                    </th>\n                  )} */}\n                {\n                  <th\n                    scope=\"col\"\n                    className=\"border-0 font-size-4 font-weight-normal\"\n                  >\n                    <Link\n                      to={\"\"}\n                      onClick={() => {\n                        handleSort(\"status\");\n                        props.setpageNo(1);\n                      }}\n                      className=\"text-gray\"\n                      title=\"Sort by Status\"\n                    >\n                      Status\n                    </Link>\n                  </th>\n                }\n                {/* {props.heading === \"Dashboard\" ? (\n                  \"\"\n                ) : (\n                  <th\n                    scope=\"col\"\n                    className=\"border-0 font-size-4 font-weight-normal\"\n                  >\n                    <Link\n                      to={\"\"}\n                      // onClick={() => {\n                      //   handleSort(\"country\");\n                      //   props.setpageNo(1);\n                      // }}\n                      className=\"text-gray\"\n                      title=\"Sort by Country\"\n                    >\n                      Country\n                    </Link>\n                  </th>\n                )} */}\n                {/* {props.heading === \"Dashboard\" ? (\n                    \"\"\n                  ) : (\n                    <th\n                      scope=\"col\"\n                      className=\"border-0 font-size-4 font-weight-normal\"\n                    >\n                      Action\n                    </th>\n                  )} */}\n              </tr>\n            </thead>\n            <tbody>\n              {/* Map function to show the data in the list*/}\n              {totalData === 0 || taskData.length === 0 ? (\n                <tr>\n                  <th colSpan={6} className=\"bg-white text-center\">\n                    No Data Found\n                  </th>\n                </tr>\n              ) : (\n                (taskData || []).map((data) => (\n                  <React.Fragment key={data.id}>\n                    <tr className=\"text-capitalize applicant_row\">\n                      <td className=\" py-5\">\n                        <p className=\"font-size-3 font-weight-normal text-black-2 mb-0\">\n                          {data.task_creator_user_name === null ||\n                          data.task_creator_user_name === undefined ||\n                          data.task_creator_user_name === \"undefined\" ||\n                          data.task_creator_user_name === \"\" ||\n                          data.task_creator_user_name === \"0\" ? (\n                            <p className=\"font-size-3  mb-0\">N/A</p>\n                          ) : (\n                            data.task_creator_user_name\n                          )}\n                        </p>\n                      </td>\n                      <td className=\" py-5\">\n                        <p className=\"font-size-3 font-weight-normal text-black-2 mb-0\">\n                          {data.assigned_to_name === null ||\n                          data.assigned_to_name === undefined ||\n                          data.assigned_to_name === \"undefined\" ||\n                          data.assigned_to_name === \"\" ||\n                          data.assigned_to_name === \"0\" ? (\n                            <p className=\"font-size-3  mb-0\">N/A</p>\n                          ) : (\n                            data.assigned_to_name\n                          )}\n                        </p>\n                      </td>\n                      <td className=\"py-5 \">\n                        {data.subject_description === null ||\n                        data.subject_description === undefined ||\n                        data.subject_description === \"undefined\" ||\n                        data.subject_description === \"\" ||\n                        data.subject_description === \"0\" ? (\n                          <p className=\"font-size-3  mb-0\">N/A</p>\n                        ) : (\n                          <p className=\"m-0\">\n                            <p className=\"text-gray font-size-2 m-0\">\n                              {data.subject_description.replace(/@/g, \"\")}\n                            </p>\n                          </p>\n                        )}\n                      </td>\n\n                      {/* {props.heading === \"Dashboard\" ? (\n                        \"\"\n                      ) : (\n                        <td className=\" py-5\">\n                          {data.type === null ? (\n                            <p className=\"font-size-3  mb-0\">N/A</p>\n                          ) : (\n                            <h3 className=\"font-size-3 font-weight-normal text-black-2 mb-0\">\n                              <p className=\"text-gray font-size-2 m-0\">\n                                {data.type}\n                              </p>\n                            </h3>\n                          )}\n                        </td>\n                      )} */}\n\n                      <td className=\" py-5\">\n                        {data.status === null ||\n                        data.status === undefined ||\n                        data.status === \"undefined\" ||\n                        data.status === \"\" ? (\n                          <p className=\"font-size-3  mb-0\">N/A</p>\n                        ) : (\n                          <p\n                            className=\"font-size-2 font-weight-normal text-black-2 mb-0 text-truncate\"\n                            title={\n                              data.status === (0 || \"0\")\n                                ? \"Pending\"\n                                : \"Completed\"\n                            }\n                          >\n                            {data.status === (0 || \"0\") ? (\n                              <span className=\"p-1 bg-primary-opacity-8 text-white text-center w-100 border rounded-pill\">\n                                Complete\n                              </span>\n                            ) : (\n                              <span className=\"p-1 bg-warning text-white text-center w-100 border rounded-pill\">\n                                Pending\n                              </span>\n                            )}\n                          </p>\n                        )}\n                      </td>\n\n                      {/* {props.heading === \"Dashboard\" ? (\n                        \"\"\n                      ) : (\n                        <td className=\" py-5\">\n                          {(data.city === null ||\n                            data.city === undefined ||\n                            data.city === \"undefined\" ||\n                            data.city === \"\") &&\n                          (data.state === null ||\n                            data.state === undefined ||\n                            data.state === \"undefined\" ||\n                            data.state === \"\") &&\n                          (data.country === null ||\n                            data.country === undefined ||\n                            data.country === \"undefined\" ||\n                            data.country === \"\") ? (\n                            <p className=\"font-size-3  mb-0\">N/A</p>\n                          ) : (\n                            <p\n                              className=\"font-size-3 font-weight-normal text-black-2 mb-0 text-truncate\"\n                              title={` ${data.city},${data.state},${data.country}`}\n                            >\n                              {` ${data.city},${data.state},${data.country}`}\n                            </p>\n                          )}\n                        </td>\n                      )} */}\n                      {/* <td className=\" py-5 min-width-px-100\">\n                          <div\n                            className=\"btn-group button_group\"\n                            role=\"group\"\n                            aria-label=\"Basic example\"\n                          >\n                            <button\n                              className=\"btn btn-outline-info action_btn\"\n                              onClick={() => {\n                                setAgentId(data.id);\n                              }}\n                              title=\"Employee's\"\n                              disabled={data.agent_employee_count === \"0\" || 0}\n                            >\n                              <span className=\"text-gray px-2\">\n                                <MdFormatListBulletedAdd />\n                              </span>\n                            </button>\n                            <button\n                              className=\"btn btn-outline-info action_btn\"\n                              onClick={() => props.EditAgent(data.id)}\n                              title=\"Edit Partner\"\n                            >\n                              <span className=\"text-gray px-2\">\n                                <LiaUserEditSolid />\n                              </span>\n                            </button>\n                            <button\n                              className={\n                                props.user === \"agent\"\n                                  ? \"d-none\"\n                                  : \"btn btn-outline-info action_btn\"\n                              }\n                              onClick={() => ShowDeleteAlert(data)}\n                              title=\"Delete Partner\"\n                            >\n                              <span className=\"px-2 text-danger\">\n                                <RiDeleteBin5Line />\n                              </span>\n                            </button>\n                          </div>\n                        </td> */}\n                    </tr>\n                  </React.Fragment>\n                ))\n              )}\n            </tbody>\n          </table>\n        )}\n      </div>\n      <div className=\"pt-2\">\n        <Pagination\n          nPages={nPages}\n          currentPage={currentPage}\n          setCurrentPage={setCurrentPage}\n          total={totalData}\n          count={taskData.length}\n        />\n      </div>\n    </div>\n  );\n}\n"
        }
    ]
}