{
    "sourceFile": "src/components/common/SharePointDocument.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 126,
            "patches": [
                {
                    "date": 1711951321214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711951440679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+import React from 'react'\r\n+\r\n+export default function SharePointDocument() {\r\n+    return (\r\n+        <div\r\n+            className={\"document_container bg-white\"}\r\n+        >\r\n+            <div className=\"row m-0 bg-white\"> <button\r\n+                className={\"btn btn-secondary btn-sm text-white mr-0 doc_btn\"}\r\n+            >\r\n+                + Add New type\r\n+            </button>\r\n+            </div>\r\n+        </div>\r\n+    )\r\n+}\r\n"
                },
                {
                    "date": 1711952361343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,77 @@\n import React from 'react'\r\n+import { Dropdown } from 'react-bootstrap';\r\n \r\n-export default function SharePointDocument() {\r\n+export default function SharePointDocument({emp_user_type}) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const DocTypeData = emp_user_type === \"employer\" ?\r\n+    [\"Business T2\",\r\n+      \"Recent PD7A\",\r\n+      \"Business T4\",\r\n+      \"Business Incorporation Certificate\",\r\n+      \"Employment Contract\",\r\n+      \"Schedule A\",\r\n+      \"Signed Job Offer\",\r\n+      \"PD7A of year\",\r\n+      \"T2 Schedule 100 and 125\",\r\n+      \"Certificate of incorporation, \",\r\n+      \"Business license\",\r\n+      \"T4 summary of year\",\r\n+      \"Request for Exception from English Language Requirement for LMIA Application\",\r\n+      \"CPA Attestation Letter\",\r\n+      \"Representative Submission Letter\",] : [\r\n+      \"passport\",\r\n+      \"drivers_license\",\r\n+      \"photograph\",\r\n+      \"immigration_status\",\r\n+      \"lmia\",\r\n+      \"job_offer_letter\",\r\n+      \"provincial_nominee_letter\",\r\n+      \"proof_of_funds\",\r\n+      \"proof_of_employment\",\r\n+      \"marriage_certificate\",\r\n+      \"education_metric\",\r\n+      \"education_higher_secondary\",\r\n+      \"education_graduation\",\r\n+      \"education_post_graduation\",\r\n+      \"resume_or_cv\",\r\n+      \"ielts\",\r\n+      \"medical\",\r\n+      \"police_clearance\",\r\n+      \"refusal_letter\",\r\n+      \"Employment Contract\",\r\n+      \"Reference Letters\",\r\n+      \"Client Info\",\r\n+      \"Representative Submission Letter\",\r\n+      \"Bank Statement\",\r\n+    ];\r\n+  \r\n+    const handleDocTypeChange = (selectedType) => {\r\n+      setDocTypeName(selectedType);\r\n+    };\r\n     return (\r\n         <div\r\n             className={\"document_container bg-white\"}\r\n         >\r\n-            <div className=\"row m-0 bg-white\"> <button\r\n-                className={\"btn btn-secondary btn-sm text-white mr-0 doc_btn\"}\r\n-            >\r\n-                + Add New type\r\n-            </button>\r\n+            <div className=\"row m-0 bg-white\"> \r\n+            <Dropdown>\r\n+        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+          + Add New type\r\n+        </Dropdown.Toggle>\r\n+        <Dropdown.Menu>\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+            Select document\r\n+          </Dropdown.Item>\r\n+          {DocTypeData.map((item, index) => (\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n+              {item}\r\n+            </Dropdown.Item>\r\n+          ))}\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+            Other\r\n+          </Dropdown.Item>\r\n+        </Dropdown.Menu>\r\n+      </Dropdown>\r\n             </div>\r\n         </div>\r\n     )\r\n }\r\n-import React from 'react'\r\n-\r\n-export default function SharePointDocument() {\r\n-    return (\r\n-        <div\r\n-            className={\r\n-                \"document_container bg-white\"}\r\n-        >\r\n-            <div className=\"row m-0 bg-white\">\r\n-            </div>\r\n-        </div>\r\n-    )\r\n-}\r\n"
                },
                {
                    "date": 1711952376080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React from 'react'\r\n+import React,{useState} from 'react'\r\n import { Dropdown } from 'react-bootstrap';\r\n \r\n export default function SharePointDocument({emp_user_type}) {\r\n     const [docTypeName, setDocTypeName] = useState('');\r\n"
                },
                {
                    "date": 1711952398939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import React,{useState} from 'react'\r\n+import { Dropdown } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({emp_user_type}) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const DocTypeData = emp_user_type === \"employer\" ?\r\n+    [\"Business T2\",\r\n+      \"Recent PD7A\",\r\n+      \"Business T4\",\r\n+      \"Business Incorporation Certificate\",\r\n+      \"Employment Contract\",\r\n+      \"Schedule A\",\r\n+      \"Signed Job Offer\",\r\n+      \"PD7A of year\",\r\n+      \"T2 Schedule 100 and 125\",\r\n+      \"Certificate of incorporation, \",\r\n+      \"Business license\",\r\n+      \"T4 summary of year\",\r\n+      \"Request for Exception from English Language Requirement for LMIA Application\",\r\n+      \"CPA Attestation Letter\",\r\n+      \"Representative Submission Letter\",] : [\r\n+      \"passport\",\r\n+      \"drivers_license\",\r\n+      \"photograph\",\r\n+      \"immigration_status\",\r\n+      \"lmia\",\r\n+      \"job_offer_letter\",\r\n+      \"provincial_nominee_letter\",\r\n+      \"proof_of_funds\",\r\n+      \"proof_of_employment\",\r\n+      \"marriage_certificate\",\r\n+      \"education_metric\",\r\n+      \"education_higher_secondary\",\r\n+      \"education_graduation\",\r\n+      \"education_post_graduation\",\r\n+      \"resume_or_cv\",\r\n+      \"ielts\",\r\n+      \"medical\",\r\n+      \"police_clearance\",\r\n+      \"refusal_letter\",\r\n+      \"Employment Contract\",\r\n+      \"Reference Letters\",\r\n+      \"Client Info\",\r\n+      \"Representative Submission Letter\",\r\n+      \"Bank Statement\",\r\n+    ];\r\n+  \r\n+    const handleDocTypeChange = (selectedType) => {\r\n+      setDocTypeName(selectedType);\r\n+    };\r\n+    console.log(docTypeName)\r\n+    return (\r\n+        <div\r\n+            className={\"document_container bg-white\"}\r\n+        >\r\n+            <div className=\"row m-0 bg-white\"> \r\n+            <Dropdown>\r\n+        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+          + Add New type\r\n+        </Dropdown.Toggle>\r\n+        <Dropdown.Menu>\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+            Select document\r\n+          </Dropdown.Item>\r\n+          {DocTypeData.map((item, index) => (\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n+              {item}\r\n+            </Dropdown.Item>\r\n+          ))}\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+            Other\r\n+          </Dropdown.Item>\r\n+        </Dropdown.Menu>\r\n+      </Dropdown>\r\n+            </div>\r\n+        </div>\r\n+    )\r\n+}\r\n"
                },
                {
                    "date": 1711952564941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,155 +1,97 @@\n-import React,{useState} from 'react'\r\n-import { Dropdown } from 'react-bootstrap';\r\n+import React, { useState } from 'react';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n \r\n-export default function SharePointDocument({emp_user_type}) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const DocTypeData = emp_user_type === \"employer\" ?\r\n-    [\"Business T2\",\r\n-      \"Recent PD7A\",\r\n-      \"Business T4\",\r\n-      \"Business Incorporation Certificate\",\r\n-      \"Employment Contract\",\r\n-      \"Schedule A\",\r\n-      \"Signed Job Offer\",\r\n-      \"PD7A of year\",\r\n-      \"T2 Schedule 100 and 125\",\r\n-      \"Certificate of incorporation, \",\r\n-      \"Business license\",\r\n-      \"T4 summary of year\",\r\n-      \"Request for Exception from English Language Requirement for LMIA Application\",\r\n-      \"CPA Attestation Letter\",\r\n-      \"Representative Submission Letter\",] : [\r\n-      \"passport\",\r\n-      \"drivers_license\",\r\n-      \"photograph\",\r\n-      \"immigration_status\",\r\n-      \"lmia\",\r\n-      \"job_offer_letter\",\r\n-      \"provincial_nominee_letter\",\r\n-      \"proof_of_funds\",\r\n-      \"proof_of_employment\",\r\n-      \"marriage_certificate\",\r\n-      \"education_metric\",\r\n-      \"education_higher_secondary\",\r\n-      \"education_graduation\",\r\n-      \"education_post_graduation\",\r\n-      \"resume_or_cv\",\r\n-      \"ielts\",\r\n-      \"medical\",\r\n-      \"police_clearance\",\r\n-      \"refusal_letter\",\r\n-      \"Employment Contract\",\r\n-      \"Reference Letters\",\r\n-      \"Client Info\",\r\n-      \"Representative Submission Letter\",\r\n-      \"Bank Statement\",\r\n-    ];\r\n-  \r\n-    const handleDocTypeChange = (selectedType) => {\r\n-      setDocTypeName(selectedType);\r\n-    };\r\n-    console.log(docTypeName)\r\n-    return (\r\n-        <div\r\n-            className={\"document_container bg-white\"}\r\n-        >\r\n-            <div className=\"row m-0 bg-white\"> \r\n-            <Dropdown>\r\n-        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-          + Add New type\r\n-        </Dropdown.Toggle>\r\n-        <Dropdown.Menu>\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-            Select document\r\n-          </Dropdown.Item>\r\n-          {DocTypeData.map((item, index) => (\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n-              {item}\r\n-            </Dropdown.Item>\r\n-          ))}\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-            Other\r\n-          </Dropdown.Item>\r\n-        </Dropdown.Menu>\r\n-      </Dropdown>\r\n-            </div>\r\n-        </div>\r\n-    )\r\n-}\r\n-import React,{useState} from 'react'\r\n-import { Dropdown } from 'react-bootstrap';\r\n+export default function SharePointDocument({ emp_user_type }) {\r\n+  const [docTypeName, setDocTypeName] = useState('');\r\n+  const [newType, setNewType] = useState('');\r\n+  const DocTypeData =\r\n+    emp_user_type === 'employer'\r\n+      ? [\r\n+          'Business T2',\r\n+          'Recent PD7A',\r\n+          'Business T4',\r\n+          'Business Incorporation Certificate',\r\n+          'Employment Contract',\r\n+          'Schedule A',\r\n+          'Signed Job Offer',\r\n+          'PD7A of year',\r\n+          'T2 Schedule 100 and 125',\r\n+          'Certificate of incorporation',\r\n+          'Business license',\r\n+          'T4 summary of year',\r\n+          'Request for Exception from English Language Requirement for LMIA Application',\r\n+          'CPA Attestation Letter',\r\n+          'Representative Submission Letter',\r\n+        ]\r\n+      : [\r\n+          'passport',\r\n+          'drivers_license',\r\n+          'photograph',\r\n+          'immigration_status',\r\n+          'lmia',\r\n+          'job_offer_letter',\r\n+          'provincial_nominee_letter',\r\n+          'proof_of_funds',\r\n+          'proof_of_employment',\r\n+          'marriage_certificate',\r\n+          'education_metric',\r\n+          'education_higher_secondary',\r\n+          'education_graduation',\r\n+          'education_post_graduation',\r\n+          'resume_or_cv',\r\n+          'ielts',\r\n+          'medical',\r\n+          'police_clearance',\r\n+          'refusal_letter',\r\n+          'Employment Contract',\r\n+          'Reference Letters',\r\n+          'Client Info',\r\n+          'Representative Submission Letter',\r\n+          'Bank Statement',\r\n+        ];\r\n \r\n-export default function SharePointDocument({emp_user_type}) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const DocTypeData = emp_user_type === \"employer\" ?\r\n-    [\"Business T2\",\r\n-      \"Recent PD7A\",\r\n-      \"Business T4\",\r\n-      \"Business Incorporation Certificate\",\r\n-      \"Employment Contract\",\r\n-      \"Schedule A\",\r\n-      \"Signed Job Offer\",\r\n-      \"PD7A of year\",\r\n-      \"T2 Schedule 100 and 125\",\r\n-      \"Certificate of incorporation, \",\r\n-      \"Business license\",\r\n-      \"T4 summary of year\",\r\n-      \"Request for Exception from English Language Requirement for LMIA Application\",\r\n-      \"CPA Attestation Letter\",\r\n-      \"Representative Submission Letter\",] : [\r\n-      \"passport\",\r\n-      \"drivers_license\",\r\n-      \"photograph\",\r\n-      \"immigration_status\",\r\n-      \"lmia\",\r\n-      \"job_offer_letter\",\r\n-      \"provincial_nominee_letter\",\r\n-      \"proof_of_funds\",\r\n-      \"proof_of_employment\",\r\n-      \"marriage_certificate\",\r\n-      \"education_metric\",\r\n-      \"education_higher_secondary\",\r\n-      \"education_graduation\",\r\n-      \"education_post_graduation\",\r\n-      \"resume_or_cv\",\r\n-      \"ielts\",\r\n-      \"medical\",\r\n-      \"police_clearance\",\r\n-      \"refusal_letter\",\r\n-      \"Employment Contract\",\r\n-      \"Reference Letters\",\r\n-      \"Client Info\",\r\n-      \"Representative Submission Letter\",\r\n-      \"Bank Statement\",\r\n-    ];\r\n-  \r\n-    const handleDocTypeChange = (selectedType) => {\r\n-      setDocTypeName(selectedType);\r\n-    };\r\n-    return (\r\n-        <div\r\n-            className={\"document_container bg-white\"}\r\n-        >\r\n-            <div className=\"row m-0 bg-white\"> \r\n-            <Dropdown>\r\n-        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-          + Add New type\r\n-        </Dropdown.Toggle>\r\n-        <Dropdown.Menu>\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-            Select document\r\n-          </Dropdown.Item>\r\n-          {DocTypeData.map((item, index) => (\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n-              {item}\r\n+  const handleDocTypeChange = (selectedType) => {\r\n+    setDocTypeName(selectedType);\r\n+    if (selectedType !== 'other') {\r\n+      setNewType(''); // Reset newType when selecting a non-other option\r\n+    }\r\n+  };\r\n+\r\n+  const handleNewTypeChange = (e) => {\r\n+    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); // Allow only alphanumeric characters and spaces\r\n+    setNewType(value);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className={'document_container bg-white'}>\r\n+      <div className=\"row m-0 bg-white\">\r\n+        <Dropdown>\r\n+          <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+            + Add New type\r\n+          </Dropdown.Toggle>\r\n+          <Dropdown.Menu>\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+              Select document\r\n             </Dropdown.Item>\r\n-          ))}\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-            Other\r\n-          </Dropdown.Item>\r\n-        </Dropdown.Menu>\r\n-      </Dropdown>\r\n-            </div>\r\n-        </div>\r\n-    )\r\n+            {DocTypeData.map((item, index) => (\r\n+              <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n+                {item}\r\n+              </Dropdown.Item>\r\n+            ))}\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+              Other\r\n+            </Dropdown.Item>\r\n+          </Dropdown.Menu>\r\n+        </Dropdown>\r\n+        {docTypeName === 'other' && (\r\n+          <Form.Control\r\n+            type=\"text\"\r\n+            value={newType}\r\n+            placeholder=\"Enter new type\"\r\n+            onChange={handleNewTypeChange}\r\n+          />\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n }\r\n"
                },
                {
                    "date": 1711952683637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import React, { useState } from 'react';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type }) {\r\n+  const [docTypeName, setDocTypeName] = useState('');\r\n+  const [newType, setNewType] = useState('');\r\n+  const DocTypeData =\r\n+    emp_user_type === 'employer'\r\n+      ? [\r\n+          'Business T2',\r\n+          'Recent PD7A',\r\n+          'Business T4',\r\n+          'Business Incorporation Certificate',\r\n+          'Employment Contract',\r\n+          'Schedule A',\r\n+          'Signed Job Offer',\r\n+          'PD7A of year',\r\n+          'T2 Schedule 100 and 125',\r\n+          'Certificate of incorporation',\r\n+          'Business license',\r\n+          'T4 summary of year',\r\n+          'Request for Exception from English Language Requirement for LMIA Application',\r\n+          'CPA Attestation Letter',\r\n+          'Representative Submission Letter',\r\n+        ]\r\n+      : [\r\n+          'passport',\r\n+          'drivers_license',\r\n+          'photograph',\r\n+          'immigration_status',\r\n+          'lmia',\r\n+          'job_offer_letter',\r\n+          'provincial_nominee_letter',\r\n+          'proof_of_funds',\r\n+          'proof_of_employment',\r\n+          'marriage_certificate',\r\n+          'education_metric',\r\n+          'education_higher_secondary',\r\n+          'education_graduation',\r\n+          'education_post_graduation',\r\n+          'resume_or_cv',\r\n+          'ielts',\r\n+          'medical',\r\n+          'police_clearance',\r\n+          'refusal_letter',\r\n+          'Employment Contract',\r\n+          'Reference Letters',\r\n+          'Client Info',\r\n+          'Representative Submission Letter',\r\n+          'Bank Statement',\r\n+        ];\r\n+\r\n+  const handleDocTypeChange = (selectedType) => {\r\n+    setDocTypeName(selectedType);\r\n+    if (selectedType !== 'other') {\r\n+      setNewType(''); // Reset newType when selecting a non-other option\r\n+    }\r\n+  };\r\n+\r\n+  const handleNewTypeChange = (e) => {\r\n+    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); // Allow only alphanumeric characters and spaces\r\n+    setNewType(value);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className={'document_container bg-white'}>\r\n+      <div className=\"row m-0 bg-white\">\r\n+       \r\n+        {docTypeName === 'other' ? (\r\n+          <Form.Control\r\n+            type=\"text\"\r\n+            value={newType}\r\n+            placeholder=\"Enter new type\"\r\n+            onChange={handleNewTypeChange}\r\n+          />\r\n+        ): <Dropdown>\r\n+        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+          + Add New type\r\n+        </Dropdown.Toggle>\r\n+        <Dropdown.Menu>\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+            Select document\r\n+          </Dropdown.Item>\r\n+          {DocTypeData.map((item, index) => (\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n+              {item}\r\n+            </Dropdown.Item>\r\n+          ))}\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+            Other\r\n+          </Dropdown.Item>\r\n+        </Dropdown.Menu>\r\n+      </Dropdown>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1711952748182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n             type=\"text\"\r\n             value={newType}\r\n             placeholder=\"Enter new type\"\r\n             onChange={handleNewTypeChange}\r\n+            width={10}\r\n           />\r\n         ): <Dropdown>\r\n         <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n           + Add New type\r\n@@ -94,101 +95,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-import React, { useState } from 'react';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type }) {\r\n-  const [docTypeName, setDocTypeName] = useState('');\r\n-  const [newType, setNewType] = useState('');\r\n-  const DocTypeData =\r\n-    emp_user_type === 'employer'\r\n-      ? [\r\n-          'Business T2',\r\n-          'Recent PD7A',\r\n-          'Business T4',\r\n-          'Business Incorporation Certificate',\r\n-          'Employment Contract',\r\n-          'Schedule A',\r\n-          'Signed Job Offer',\r\n-          'PD7A of year',\r\n-          'T2 Schedule 100 and 125',\r\n-          'Certificate of incorporation',\r\n-          'Business license',\r\n-          'T4 summary of year',\r\n-          'Request for Exception from English Language Requirement for LMIA Application',\r\n-          'CPA Attestation Letter',\r\n-          'Representative Submission Letter',\r\n-        ]\r\n-      : [\r\n-          'passport',\r\n-          'drivers_license',\r\n-          'photograph',\r\n-          'immigration_status',\r\n-          'lmia',\r\n-          'job_offer_letter',\r\n-          'provincial_nominee_letter',\r\n-          'proof_of_funds',\r\n-          'proof_of_employment',\r\n-          'marriage_certificate',\r\n-          'education_metric',\r\n-          'education_higher_secondary',\r\n-          'education_graduation',\r\n-          'education_post_graduation',\r\n-          'resume_or_cv',\r\n-          'ielts',\r\n-          'medical',\r\n-          'police_clearance',\r\n-          'refusal_letter',\r\n-          'Employment Contract',\r\n-          'Reference Letters',\r\n-          'Client Info',\r\n-          'Representative Submission Letter',\r\n-          'Bank Statement',\r\n-        ];\r\n-\r\n-  const handleDocTypeChange = (selectedType) => {\r\n-    setDocTypeName(selectedType);\r\n-    if (selectedType !== 'other') {\r\n-      setNewType(''); // Reset newType when selecting a non-other option\r\n-    }\r\n-  };\r\n-\r\n-  const handleNewTypeChange = (e) => {\r\n-    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); // Allow only alphanumeric characters and spaces\r\n-    setNewType(value);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className={'document_container bg-white'}>\r\n-      <div className=\"row m-0 bg-white\">\r\n-        <Dropdown>\r\n-          <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-            + Add New type\r\n-          </Dropdown.Toggle>\r\n-          <Dropdown.Menu>\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-              Select document\r\n-            </Dropdown.Item>\r\n-            {DocTypeData.map((item, index) => (\r\n-              <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n-                {item}\r\n-              </Dropdown.Item>\r\n-            ))}\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-              Other\r\n-            </Dropdown.Item>\r\n-          </Dropdown.Menu>\r\n-        </Dropdown>\r\n-        {docTypeName === 'other' && (\r\n-          <Form.Control\r\n-            type=\"text\"\r\n-            value={newType}\r\n-            placeholder=\"Enter new type\"\r\n-            onChange={handleNewTypeChange}\r\n-          />\r\n-        )}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1711952989494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+import React, { useState } from 'react';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type }) {\r\n+  const [docTypeName, setDocTypeName] = useState('');\r\n+  const [newType, setNewType] = useState('');\r\n+  const DocTypeData =\r\n+    emp_user_type === 'employer'\r\n+      ? [\r\n+          'Business T2',\r\n+          'Recent PD7A',\r\n+          'Business T4',\r\n+          'Business Incorporation Certificate',\r\n+          'Employment Contract',\r\n+          'Schedule A',\r\n+          'Signed Job Offer',\r\n+          'PD7A of year',\r\n+          'T2 Schedule 100 and 125',\r\n+          'Certificate of incorporation',\r\n+          'Business license',\r\n+          'T4 summary of year',\r\n+          'Request for Exception from English Language Requirement for LMIA Application',\r\n+          'CPA Attestation Letter',\r\n+          'Representative Submission Letter',\r\n+        ]\r\n+      : [\r\n+          'passport',\r\n+          'drivers_license',\r\n+          'photograph',\r\n+          'immigration_status',\r\n+          'lmia',\r\n+          'job_offer_letter',\r\n+          'provincial_nominee_letter',\r\n+          'proof_of_funds',\r\n+          'proof_of_employment',\r\n+          'marriage_certificate',\r\n+          'education_metric',\r\n+          'education_higher_secondary',\r\n+          'education_graduation',\r\n+          'education_post_graduation',\r\n+          'resume_or_cv',\r\n+          'ielts',\r\n+          'medical',\r\n+          'police_clearance',\r\n+          'refusal_letter',\r\n+          'Employment Contract',\r\n+          'Reference Letters',\r\n+          'Client Info',\r\n+          'Representative Submission Letter',\r\n+          'Bank Statement',\r\n+        ];\r\n+\r\n+  const handleDocTypeChange = (selectedType) => {\r\n+    setDocTypeName(selectedType);\r\n+    if (selectedType !== 'other') {\r\n+      setNewType(''); // Reset newType when selecting a non-other option\r\n+    }\r\n+  };\r\n+\r\n+  const handleNewTypeChange = (e) => {\r\n+    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); // Allow only alphanumeric characters and spaces\r\n+    setNewType(value);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className={'document_container bg-white'}>\r\n+      <div className=\"row m-0 bg-white\">\r\n+       \r\n+        {docTypeName === 'other' ? (\r\n+          <Form.Control\r\n+            type=\"text\"\r\n+            value={newType}\r\n+            placeholder=\"Enter new type\"\r\n+            onChange={handleNewTypeChange}\r\n+          />\r\n+        ): <Dropdown>\r\n+        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+          + Add New type\r\n+        </Dropdown.Toggle>\r\n+        <Dropdown.Menu>\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+            Select document\r\n+          </Dropdown.Item>\r\n+          {DocTypeData.map((item, index) => (\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n+              {item}\r\n+            </Dropdown.Item>\r\n+          ))}\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+            Other\r\n+          </Dropdown.Item>\r\n+        </Dropdown.Menu>\r\n+      </Dropdown>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1711953168137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,15 +53,14 @@\n   const handleDocTypeChange = (selectedType) => {\r\n     setDocTypeName(selectedType);\r\n     if (selectedType !== 'other') {\r\n       setNewType(''); // Reset newType when selecting a non-other option\r\n+    }else{\r\n+        const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); \r\n+        setNewType(value);\r\n     }\r\n   };\r\n \r\n-  const handleNewTypeChange = (e) => {\r\n-    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); // Allow only alphanumeric characters and spaces\r\n-    setNewType(value);\r\n-  };\r\n \r\n   return (\r\n     <div className={'document_container bg-white'}>\r\n       <div className=\"row m-0 bg-white\">\r\n@@ -70,9 +69,9 @@\n           <Form.Control\r\n             type=\"text\"\r\n             value={newType}\r\n             placeholder=\"Enter new type\"\r\n-            onChange={handleNewTypeChange}\r\n+            onChange={handleDocTypeChange}\r\n           />\r\n         ): <Dropdown>\r\n         <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n           + Add New type\r\n@@ -94,102 +93,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-import React, { useState } from 'react';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type }) {\r\n-  const [docTypeName, setDocTypeName] = useState('');\r\n-  const [newType, setNewType] = useState('');\r\n-  const DocTypeData =\r\n-    emp_user_type === 'employer'\r\n-      ? [\r\n-          'Business T2',\r\n-          'Recent PD7A',\r\n-          'Business T4',\r\n-          'Business Incorporation Certificate',\r\n-          'Employment Contract',\r\n-          'Schedule A',\r\n-          'Signed Job Offer',\r\n-          'PD7A of year',\r\n-          'T2 Schedule 100 and 125',\r\n-          'Certificate of incorporation',\r\n-          'Business license',\r\n-          'T4 summary of year',\r\n-          'Request for Exception from English Language Requirement for LMIA Application',\r\n-          'CPA Attestation Letter',\r\n-          'Representative Submission Letter',\r\n-        ]\r\n-      : [\r\n-          'passport',\r\n-          'drivers_license',\r\n-          'photograph',\r\n-          'immigration_status',\r\n-          'lmia',\r\n-          'job_offer_letter',\r\n-          'provincial_nominee_letter',\r\n-          'proof_of_funds',\r\n-          'proof_of_employment',\r\n-          'marriage_certificate',\r\n-          'education_metric',\r\n-          'education_higher_secondary',\r\n-          'education_graduation',\r\n-          'education_post_graduation',\r\n-          'resume_or_cv',\r\n-          'ielts',\r\n-          'medical',\r\n-          'police_clearance',\r\n-          'refusal_letter',\r\n-          'Employment Contract',\r\n-          'Reference Letters',\r\n-          'Client Info',\r\n-          'Representative Submission Letter',\r\n-          'Bank Statement',\r\n-        ];\r\n-\r\n-  const handleDocTypeChange = (selectedType) => {\r\n-    setDocTypeName(selectedType);\r\n-    if (selectedType !== 'other') {\r\n-      setNewType(''); // Reset newType when selecting a non-other option\r\n-    }\r\n-  };\r\n-\r\n-  const handleNewTypeChange = (e) => {\r\n-    const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); // Allow only alphanumeric characters and spaces\r\n-    setNewType(value);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className={'document_container bg-white'}>\r\n-      <div className=\"row m-0 bg-white\">\r\n-       \r\n-        {docTypeName === 'other' ? (\r\n-          <Form.Control\r\n-            type=\"text\"\r\n-            value={newType}\r\n-            placeholder=\"Enter new type\"\r\n-            onChange={handleNewTypeChange}\r\n-            width={10}\r\n-          />\r\n-        ): <Dropdown>\r\n-        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-          + Add New type\r\n-        </Dropdown.Toggle>\r\n-        <Dropdown.Menu>\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-            Select document\r\n-          </Dropdown.Item>\r\n-          {DocTypeData.map((item, index) => (\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n-              {item}\r\n-            </Dropdown.Item>\r\n-          ))}\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-            Other\r\n-          </Dropdown.Item>\r\n-        </Dropdown.Menu>\r\n-      </Dropdown>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1711953178098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \r\n   const handleDocTypeChange = (selectedType) => {\r\n     setDocTypeName(selectedType);\r\n     if (selectedType !== 'other') {\r\n-      setNewType(''); // Reset newType when selecting a non-other option\r\n+      setNewType(''); \r\n     }else{\r\n         const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); \r\n         setNewType(value);\r\n     }\r\n"
                },
                {
                    "date": 1711953390040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import React, { useState } from 'react';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type }) {\r\n+  const [docTypeName, setDocTypeName] = useState('');\r\n+  const [newType, setNewType] = useState('');\r\n+  const DocTypeData =\r\n+    emp_user_type === 'employer'\r\n+      ? [\r\n+          'Business T2',\r\n+          'Recent PD7A',\r\n+          'Business T4',\r\n+          'Business Incorporation Certificate',\r\n+          'Employment Contract',\r\n+          'Schedule A',\r\n+          'Signed Job Offer',\r\n+          'PD7A of year',\r\n+          'T2 Schedule 100 and 125',\r\n+          'Certificate of incorporation',\r\n+          'Business license',\r\n+          'T4 summary of year',\r\n+          'Request for Exception from English Language Requirement for LMIA Application',\r\n+          'CPA Attestation Letter',\r\n+          'Representative Submission Letter',\r\n+        ]\r\n+      : [\r\n+          'passport',\r\n+          'drivers_license',\r\n+          'photograph',\r\n+          'immigration_status',\r\n+          'lmia',\r\n+          'job_offer_letter',\r\n+          'provincial_nominee_letter',\r\n+          'proof_of_funds',\r\n+          'proof_of_employment',\r\n+          'marriage_certificate',\r\n+          'education_metric',\r\n+          'education_higher_secondary',\r\n+          'education_graduation',\r\n+          'education_post_graduation',\r\n+          'resume_or_cv',\r\n+          'ielts',\r\n+          'medical',\r\n+          'police_clearance',\r\n+          'refusal_letter',\r\n+          'Employment Contract',\r\n+          'Reference Letters',\r\n+          'Client Info',\r\n+          'Representative Submission Letter',\r\n+          'Bank Statement',\r\n+        ];\r\n+\r\n+  const handleDocTypeChange = (selectedType) => {\r\n+    setDocTypeName(selectedType);\r\n+    if (selectedType !== 'other') {\r\n+      setNewType(''); \r\n+    }else{\r\n+        const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); \r\n+        setNewType(value);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={'document_container bg-white'}>\r\n+      <div className=\"row m-0 bg-white\">\r\n+       \r\n+        {docTypeName === 'other' ? (\r\n+          <Form.Control\r\n+            type=\"text\"\r\n+            value={newType}\r\n+            placeholder=\"Enter new type\"\r\n+            onChange={handleDocTypeChange}\r\n+          />\r\n+        ): <Dropdown>\r\n+        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+          + Add New type\r\n+        </Dropdown.Toggle>\r\n+        <Dropdown.Menu>\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+            Select document\r\n+          </Dropdown.Item>\r\n+          {DocTypeData.map((item, index) => (\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n+              {item.replaceAll(\"_\", \" \")}\r\n+            </Dropdown.Item>\r\n+          ))}\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+            Other\r\n+          </Dropdown.Item>\r\n+        </Dropdown.Menu>\r\n+      </Dropdown>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1711953401976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n           <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n             Select document\r\n           </Dropdown.Item>\r\n           {DocTypeData.map((item, index) => (\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n               {item.replaceAll(\"_\", \" \")}\r\n             </Dropdown.Item>\r\n           ))}\r\n           <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n@@ -93,100 +93,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-import React, { useState } from 'react';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type }) {\r\n-  const [docTypeName, setDocTypeName] = useState('');\r\n-  const [newType, setNewType] = useState('');\r\n-  const DocTypeData =\r\n-    emp_user_type === 'employer'\r\n-      ? [\r\n-          'Business T2',\r\n-          'Recent PD7A',\r\n-          'Business T4',\r\n-          'Business Incorporation Certificate',\r\n-          'Employment Contract',\r\n-          'Schedule A',\r\n-          'Signed Job Offer',\r\n-          'PD7A of year',\r\n-          'T2 Schedule 100 and 125',\r\n-          'Certificate of incorporation',\r\n-          'Business license',\r\n-          'T4 summary of year',\r\n-          'Request for Exception from English Language Requirement for LMIA Application',\r\n-          'CPA Attestation Letter',\r\n-          'Representative Submission Letter',\r\n-        ]\r\n-      : [\r\n-          'passport',\r\n-          'drivers_license',\r\n-          'photograph',\r\n-          'immigration_status',\r\n-          'lmia',\r\n-          'job_offer_letter',\r\n-          'provincial_nominee_letter',\r\n-          'proof_of_funds',\r\n-          'proof_of_employment',\r\n-          'marriage_certificate',\r\n-          'education_metric',\r\n-          'education_higher_secondary',\r\n-          'education_graduation',\r\n-          'education_post_graduation',\r\n-          'resume_or_cv',\r\n-          'ielts',\r\n-          'medical',\r\n-          'police_clearance',\r\n-          'refusal_letter',\r\n-          'Employment Contract',\r\n-          'Reference Letters',\r\n-          'Client Info',\r\n-          'Representative Submission Letter',\r\n-          'Bank Statement',\r\n-        ];\r\n-\r\n-  const handleDocTypeChange = (selectedType) => {\r\n-    setDocTypeName(selectedType);\r\n-    if (selectedType !== 'other') {\r\n-      setNewType(''); \r\n-    }else{\r\n-        const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); \r\n-        setNewType(value);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={'document_container bg-white'}>\r\n-      <div className=\"row m-0 bg-white\">\r\n-       \r\n-        {docTypeName === 'other' ? (\r\n-          <Form.Control\r\n-            type=\"text\"\r\n-            value={newType}\r\n-            placeholder=\"Enter new type\"\r\n-            onChange={handleDocTypeChange}\r\n-          />\r\n-        ): <Dropdown>\r\n-        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-          + Add New type\r\n-        </Dropdown.Toggle>\r\n-        <Dropdown.Menu>\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-            Select document\r\n-          </Dropdown.Item>\r\n-          {DocTypeData.map((item, index) => (\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index}>\r\n-              {item}\r\n-            </Dropdown.Item>\r\n-          ))}\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-            Other\r\n-          </Dropdown.Item>\r\n-        </Dropdown.Menu>\r\n-      </Dropdown>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1711953777727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+import React, { useState } from 'react';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type }) {\r\n+  const [docTypeName, setDocTypeName] = useState('');\r\n+  const [newType, setNewType] = useState('');\r\n+  const DocTypeData =\r\n+    emp_user_type === 'employer'\r\n+      ? [\r\n+          'Business T2',\r\n+          'Recent PD7A',\r\n+          'Business T4',\r\n+          'Business Incorporation Certificate',\r\n+          'Employment Contract',\r\n+          'Schedule A',\r\n+          'Signed Job Offer',\r\n+          'PD7A of year',\r\n+          'T2 Schedule 100 and 125',\r\n+          'Certificate of incorporation',\r\n+          'Business license',\r\n+          'T4 summary of year',\r\n+          'Request for Exception from English Language Requirement for LMIA Application',\r\n+          'CPA Attestation Letter',\r\n+          'Representative Submission Letter',\r\n+        ]\r\n+      : [\r\n+          'passport',\r\n+          'drivers_license',\r\n+          'photograph',\r\n+          'immigration_status',\r\n+          'lmia',\r\n+          'job_offer_letter',\r\n+          'provincial_nominee_letter',\r\n+          'proof_of_funds',\r\n+          'proof_of_employment',\r\n+          'marriage_certificate',\r\n+          'education_metric',\r\n+          'education_higher_secondary',\r\n+          'education_graduation',\r\n+          'education_post_graduation',\r\n+          'resume_or_cv',\r\n+          'ielts',\r\n+          'medical',\r\n+          'police_clearance',\r\n+          'refusal_letter',\r\n+          'Employment Contract',\r\n+          'Reference Letters',\r\n+          'Client Info',\r\n+          'Representative Submission Letter',\r\n+          'Bank Statement',\r\n+        ];\r\n+\r\n+  const handleDocTypeChange = (selectedType) => {\r\n+    setDocTypeName(selectedType);\r\n+    if (selectedType !== 'other') {\r\n+      setNewType(''); \r\n+    }else{\r\n+        const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); \r\n+        setNewType(value);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  return (\r\n+    <div className={'document_container bg-white'}>\r\n+      <div className=\"row m-0 bg-white\">\r\n+       \r\n+        {docTypeName === 'other' ? (\r\n+          <Form.Control\r\n+            type=\"text\"\r\n+            value={newType}\r\n+            placeholder=\"Enter new type\"\r\n+            onChange={(e)=>handleDocTypeChange(e)}\r\n+          />\r\n+        ): <Dropdown>\r\n+        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+          + Add New type\r\n+        </Dropdown.Toggle>\r\n+        <Dropdown.Menu>\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+            Select document\r\n+          </Dropdown.Item>\r\n+          {DocTypeData.map((item, index) => (\r\n+            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+              {item.replaceAll(\"_\", \" \")}\r\n+            </Dropdown.Item>\r\n+          ))}\r\n+          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+            Other\r\n+          </Dropdown.Item>\r\n+        </Dropdown.Menu>\r\n+      </Dropdown>}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1711954165365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,192 +1,94 @@\n import React, { useState } from 'react';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n \r\n export default function SharePointDocument({ emp_user_type }) {\r\n-  const [docTypeName, setDocTypeName] = useState('');\r\n-  const [newType, setNewType] = useState('');\r\n-  const DocTypeData =\r\n-    emp_user_type === 'employer'\r\n-      ? [\r\n-          'Business T2',\r\n-          'Recent PD7A',\r\n-          'Business T4',\r\n-          'Business Incorporation Certificate',\r\n-          'Employment Contract',\r\n-          'Schedule A',\r\n-          'Signed Job Offer',\r\n-          'PD7A of year',\r\n-          'T2 Schedule 100 and 125',\r\n-          'Certificate of incorporation',\r\n-          'Business license',\r\n-          'T4 summary of year',\r\n-          'Request for Exception from English Language Requirement for LMIA Application',\r\n-          'CPA Attestation Letter',\r\n-          'Representative Submission Letter',\r\n-        ]\r\n-      : [\r\n-          'passport',\r\n-          'drivers_license',\r\n-          'photograph',\r\n-          'immigration_status',\r\n-          'lmia',\r\n-          'job_offer_letter',\r\n-          'provincial_nominee_letter',\r\n-          'proof_of_funds',\r\n-          'proof_of_employment',\r\n-          'marriage_certificate',\r\n-          'education_metric',\r\n-          'education_higher_secondary',\r\n-          'education_graduation',\r\n-          'education_post_graduation',\r\n-          'resume_or_cv',\r\n-          'ielts',\r\n-          'medical',\r\n-          'police_clearance',\r\n-          'refusal_letter',\r\n-          'Employment Contract',\r\n-          'Reference Letters',\r\n-          'Client Info',\r\n-          'Representative Submission Letter',\r\n-          'Bank Statement',\r\n-        ];\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n \r\n-  const handleDocTypeChange = (selectedType) => {\r\n-    setDocTypeName(selectedType);\r\n-    if (selectedType !== 'other') {\r\n-      setNewType(''); \r\n-    }else{\r\n-        const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); \r\n-        setNewType(value);\r\n-    }\r\n-  };\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+            setDocTypeName(value);\r\n+        }\r\n+    };\r\n \r\n \r\n-  return (\r\n-    <div className={'document_container bg-white'}>\r\n-      <div className=\"row m-0 bg-white\">\r\n-       \r\n-        {docTypeName === 'other' ? (\r\n-          <Form.Control\r\n-            type=\"text\"\r\n-            value={newType}\r\n-            placeholder=\"Enter new type\"\r\n-            onChange={(e)=>handleDocTypeChange(e)}\r\n-          />\r\n-        ): <Dropdown>\r\n-        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-          + Add New type\r\n-        </Dropdown.Toggle>\r\n-        <Dropdown.Menu>\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-            Select document\r\n-          </Dropdown.Item>\r\n-          {DocTypeData.map((item, index) => (\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-              {item.replaceAll(\"_\", \" \")}\r\n-            </Dropdown.Item>\r\n-          ))}\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-            Other\r\n-          </Dropdown.Item>\r\n-        </Dropdown.Menu>\r\n-      </Dropdown>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-import React, { useState } from 'react';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n \r\n-export default function SharePointDocument({ emp_user_type }) {\r\n-  const [docTypeName, setDocTypeName] = useState('');\r\n-  const [newType, setNewType] = useState('');\r\n-  const DocTypeData =\r\n-    emp_user_type === 'employer'\r\n-      ? [\r\n-          'Business T2',\r\n-          'Recent PD7A',\r\n-          'Business T4',\r\n-          'Business Incorporation Certificate',\r\n-          'Employment Contract',\r\n-          'Schedule A',\r\n-          'Signed Job Offer',\r\n-          'PD7A of year',\r\n-          'T2 Schedule 100 and 125',\r\n-          'Certificate of incorporation',\r\n-          'Business license',\r\n-          'T4 summary of year',\r\n-          'Request for Exception from English Language Requirement for LMIA Application',\r\n-          'CPA Attestation Letter',\r\n-          'Representative Submission Letter',\r\n-        ]\r\n-      : [\r\n-          'passport',\r\n-          'drivers_license',\r\n-          'photograph',\r\n-          'immigration_status',\r\n-          'lmia',\r\n-          'job_offer_letter',\r\n-          'provincial_nominee_letter',\r\n-          'proof_of_funds',\r\n-          'proof_of_employment',\r\n-          'marriage_certificate',\r\n-          'education_metric',\r\n-          'education_higher_secondary',\r\n-          'education_graduation',\r\n-          'education_post_graduation',\r\n-          'resume_or_cv',\r\n-          'ielts',\r\n-          'medical',\r\n-          'police_clearance',\r\n-          'refusal_letter',\r\n-          'Employment Contract',\r\n-          'Reference Letters',\r\n-          'Client Info',\r\n-          'Representative Submission Letter',\r\n-          'Bank Statement',\r\n-        ];\r\n-\r\n-  const handleDocTypeChange = (selectedType) => {\r\n-    setDocTypeName(selectedType);\r\n-    if (selectedType !== 'other') {\r\n-      setNewType(''); \r\n-    }else{\r\n-        const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, ''); \r\n-        setNewType(value);\r\n-    }\r\n-  };\r\n-\r\n-\r\n-  return (\r\n-    <div className={'document_container bg-white'}>\r\n-      <div className=\"row m-0 bg-white\">\r\n-       \r\n-        {docTypeName === 'other' ? (\r\n-          <Form.Control\r\n-            type=\"text\"\r\n-            value={newType}\r\n-            placeholder=\"Enter new type\"\r\n-            onChange={handleDocTypeChange}\r\n-          />\r\n-        ): <Dropdown>\r\n-        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-          + Add New type\r\n-        </Dropdown.Toggle>\r\n-        <Dropdown.Menu>\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-            Select document\r\n-          </Dropdown.Item>\r\n-          {DocTypeData.map((item, index) => (\r\n-            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-              {item.replaceAll(\"_\", \" \")}\r\n-            </Dropdown.Item>\r\n-          ))}\r\n-          <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-            Other\r\n-          </Dropdown.Item>\r\n-        </Dropdown.Menu>\r\n-      </Dropdown>}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={docTypeName === \"other\" ? \"\" : docTypeName}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={(e) => handleDocTypeChange(e)}\r\n+                    />\r\n+                ) : <Dropdown>\r\n+                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                        + Add New type\r\n+                    </Dropdown.Toggle>\r\n+                    <Dropdown.Menu>\r\n+                        <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                            Select document\r\n+                        </Dropdown.Item>\r\n+                        {DocTypeData.map((item, index) => (\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                {item.replaceAll(\"_\", \" \")}\r\n+                            </Dropdown.Item>\r\n+                        ))}\r\n+                        <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                            Other\r\n+                        </Dropdown.Item>\r\n+                    </Dropdown.Menu>\r\n+                </Dropdown>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n }\r\n"
                },
                {
                    "date": 1711954249967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import React, { useState } from 'react';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+            setDocTypeName(value);\r\n+        }\r\n+    };\r\n+\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={docTypeName === \"other\" ? \"\" : docTypeName}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={(e) => handleDocTypeChange(e)}\r\n+                    />\r\n+                ) : <Dropdown>\r\n+                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                        + Add New type\r\n+                    </Dropdown.Toggle>\r\n+                    <Dropdown.Menu>\r\n+                        <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                            Select document\r\n+                        </Dropdown.Item>\r\n+                        {DocTypeData.map((item, index) => (\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                {item.replaceAll(\"_\", \" \")}\r\n+                            </Dropdown.Item>\r\n+                        ))}\r\n+                        <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                            Other\r\n+                        </Dropdown.Item>\r\n+                    </Dropdown.Menu>\r\n+                </Dropdown>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711954278926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import React, { useState } from 'react';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            console.log(selectedType)\r\n+            // const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+            // setDocTypeName(value);\r\n+        }\r\n+    };\r\n+\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={docTypeName === \"other\" ? \"\" : docTypeName}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={(e) => handleDocTypeChange(e)}\r\n+                    />\r\n+                ) : <Dropdown>\r\n+                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                        + Add New type\r\n+                    </Dropdown.Toggle>\r\n+                    <Dropdown.Menu>\r\n+                        <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                            Select document\r\n+                        </Dropdown.Item>\r\n+                        {DocTypeData.map((item, index) => (\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                {item.replaceAll(\"_\", \" \")}\r\n+                            </Dropdown.Item>\r\n+                        ))}\r\n+                        <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                            Other\r\n+                        </Dropdown.Item>\r\n+                    </Dropdown.Menu>\r\n+                </Dropdown>}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711954637863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import React, { useState } from 'react';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711955408524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+import React, {/* useState,*/useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type , employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+/*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+const AllShareType =async()=>{\r\n+try{\r\n+    let res =await getSharePointFoldersList(employee_id,emp_user_type)\r\n+    console.log(res)\r\n+}catch(Err)\r\n+{console.log(Err)}\r\n+}\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711955432856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import React, {/* useState,*/useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            console.log(res)\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711955463730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import React, {/* useState,*/useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            console.log(res.data.data)\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711955840706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+import React, {/* useState,*/useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                console.log(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711960382616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+import React, {/* useState,*/useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                console.log(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711960397883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+import React, {useState,useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                console.log(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711960866902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import React, {useState,useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+{(docTypeList || []).map((item)=>{\r\n+  item.folder?  <div key={index}>\r\n+    <p>Name: {item.name}</p>\r\n+    <p>Created By: {item.createdBy.user.displayName}</p>\r\n+    <p>Last Modified By: {item.lastModifiedBy.user.displayName}</p>\r\n+    <p>Web URL: {item.webUrl}</p>\r\n+    <p>Child Count: {item.folder.childCount}</p>\r\n+  </div>:<div>No</div>\r\n+})}\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711960874755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, {useState,useEffect } from 'react';\r\n+import React, { useState, useEffect } from 'react';\r\n import { getSharePointFoldersList } from '../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n \r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n@@ -108,17 +108,17 @@\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )}\r\n                 {/* List of documents docTypeList */}\r\n-{(docTypeList || []).map((item)=>{\r\n-  item.folder?  <div key={index}>\r\n-    <p>Name: {item.name}</p>\r\n-    <p>Created By: {item.createdBy.user.displayName}</p>\r\n-    <p>Last Modified By: {item.lastModifiedBy.user.displayName}</p>\r\n-    <p>Web URL: {item.webUrl}</p>\r\n-    <p>Child Count: {item.folder.childCount}</p>\r\n-  </div>:<div>No</div>\r\n-})}\r\n+                {(docTypeList || []).map((item,index) => {\r\n+                    item.folder ? <div key={index}>\r\n+                        <p>Name: {item.name}</p>\r\n+                        <p>Created By: {item.createdBy.user.displayName}</p>\r\n+                        <p>Last Modified By: {item.lastModifiedBy.user.displayName}</p>\r\n+                        <p>Web URL: {item.webUrl}</p>\r\n+                        <p>Child Count: {item.folder.childCount}</p>\r\n+                    </div> : <div>No</div>\r\n+                })}\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1711961157763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,1059 +109,29 @@\n                     </Dropdown>\r\n                 )}\r\n                 {/* List of documents docTypeList */}\r\n                 {(docTypeList || []).map((item,index) => {\r\n-                    item.folder ? <div key={index}>\r\n-                        <p>Name: {item.name}</p>\r\n-                        <p>Created By: {item.createdBy.user.displayName}</p>\r\n-                        <p>Last Modified By: {item.lastModifiedBy.user.displayName}</p>\r\n-                        <p>Web URL: {item.webUrl}</p>\r\n-                        <p>Child Count: {item.folder.childCount}</p>\r\n-                    </div> : <div>No</div>\r\n+                    item.folder ? \r\n+                    <div key={index} className=\"folder-item\">\r\n+                    <div className=\"tile\">\r\n+                      <div className=\"tile-content\">\r\n+                        <div className=\"tile-header\">\r\n+                          <p className=\"tile-label\">{item.name}</p>\r\n+                          <p className=\"tile-description\">{item.folder ? `Folder has ${item.folder.childCount} items` : 'No items'}</p>\r\n+                        </div>\r\n+                        <div className=\"tile-metadata\">\r\n+                          <p className=\"tile-private\">Private</p>\r\n+                          <p className=\"tile-modified\">Modified 3/28/2024</p>\r\n+                          <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n+                        </div>\r\n+                      </div>\r\n+                      <div className=\"tile-actions\">\r\n+                        <a href={item.webUrl} className=\"tile-link\">Open</a>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                   : <div>No</div>\r\n                 })}\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, {useState,useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                console.log(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, {/* useState,*/useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                console.log(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, {/* useState,*/useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                console.log(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, {/* useState,*/useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            console.log(res.data.data)\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, {/* useState,*/useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            console.log(res)\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, {/* useState,*/useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type , employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-/*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-const AllShareType =async()=>{\r\n-try{\r\n-    let res =await getSharePointFoldersList(employee_id,emp_user_type)\r\n-    console.log(res)\r\n-}catch(Err)\r\n-{console.log(Err)}\r\n-}\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState } from 'react';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState } from 'react';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            console.log(selectedType)\r\n-            // const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-            // setDocTypeName(value);\r\n-        }\r\n-    };\r\n-\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={docTypeName === \"other\" ? \"\" : docTypeName}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={(e) => handleDocTypeChange(e)}\r\n-                    />\r\n-                ) : <Dropdown>\r\n-                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                        + Add New type\r\n-                    </Dropdown.Toggle>\r\n-                    <Dropdown.Menu>\r\n-                        <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                            Select document\r\n-                        </Dropdown.Item>\r\n-                        {DocTypeData.map((item, index) => (\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                {item.replaceAll(\"_\", \" \")}\r\n-                            </Dropdown.Item>\r\n-                        ))}\r\n-                        <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                            Other\r\n-                        </Dropdown.Item>\r\n-                    </Dropdown.Menu>\r\n-                </Dropdown>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState } from 'react';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-            setDocTypeName(value);\r\n-        }\r\n-    };\r\n-\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={docTypeName === \"other\" ? \"\" : docTypeName}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={(e) => handleDocTypeChange(e)}\r\n-                    />\r\n-                ) : <Dropdown>\r\n-                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                        + Add New type\r\n-                    </Dropdown.Toggle>\r\n-                    <Dropdown.Menu>\r\n-                        <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                            Select document\r\n-                        </Dropdown.Item>\r\n-                        {DocTypeData.map((item, index) => (\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                {item.replaceAll(\"_\", \" \")}\r\n-                            </Dropdown.Item>\r\n-                        ))}\r\n-                        <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                            Other\r\n-                        </Dropdown.Item>\r\n-                    </Dropdown.Menu>\r\n-                </Dropdown>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState } from 'react';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            const value = selectedType.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-            setDocTypeName(value);\r\n-        }\r\n-    };\r\n-\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={docTypeName === \"other\" ? \"\" : docTypeName}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={(e) => handleDocTypeChange(e)}\r\n-                    />\r\n-                ) : <Dropdown>\r\n-                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                        + Add New type\r\n-                    </Dropdown.Toggle>\r\n-                    <Dropdown.Menu>\r\n-                        <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                            Select document\r\n-                        </Dropdown.Item>\r\n-                        {DocTypeData.map((item, index) => (\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                {item.replaceAll(\"_\", \" \")}\r\n-                            </Dropdown.Item>\r\n-                        ))}\r\n-                        <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                            Other\r\n-                        </Dropdown.Item>\r\n-                    </Dropdown.Menu>\r\n-                </Dropdown>}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711961183048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+  item.folder ? (\r\n+    <div key={index} className=\"folder-item\">\r\n+      <div className=\"tile\">\r\n+        <div className=\"tile-content\">\r\n+          <div className=\"tile-header\">\r\n+            <p className=\"tile-label\">{item.name}</p>\r\n+            <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n+          </div>\r\n+          <div className=\"tile-metadata\">\r\n+            <p className=\"tile-private\">Private</p>\r\n+            <p className=\"tile-modified\">Modified 3/28/2024</p>\r\n+            <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n+          </div>\r\n+        </div>\r\n+        <div className=\"tile-actions\">\r\n+          <a href={item.webUrl} className=\"tile-link\">Open</a>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  ) : (\r\n+    <div key={index}>No</div>\r\n+  )\r\n+))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711961325880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+  item.folder ? (\r\n+    <div key={index} className=\"folder-item\">\r\n+      <div className=\"tile\">\r\n+        <div className=\"tile-content\">\r\n+          <div className=\"tile-header\">\r\n+            <p className=\"tile-label\">{item.name}</p>\r\n+            <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n+          </div>\r\n+          <div className=\"tile-metadata\">\r\n+            <p className=\"tile-private\">Private</p>\r\n+        <p className=\"tile-modified\">Modified {item.lastModifiedDateTime}</p>\r\n+            <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  ) : (\r\n+    <div key={index}>No</div>\r\n+  )\r\n+))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711961881158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+  item.folder ? (\r\n+    // <div key={index} className=\"folder-item\">\r\n+    //   <div className=\"tile\">\r\n+    //     <div className=\"tile-content\">\r\n+    //       <div className=\"tile-header\">\r\n+    //         <p className=\"tile-label\">{item.name}</p>\r\n+    //         <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n+    //       </div>\r\n+    //       <div className=\"tile-metadata\">\r\n+    //         <p className=\"tile-private\">Private</p>\r\n+    //     <p className=\"tile-modified\">Modified {item.lastModifiedDateTime}</p>\r\n+    //         <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n+    //       </div>\r\n+    //     </div>\r\n+    //   </div>\r\n+    // </div>\r\n+    <div class=\"folder\">\r\n+    <Link class=\"folder-link\">\r\n+      <span class=\"folder-label\">passport, Folder, {`Folder has ${item.folder.childCount} items`}, Modified {item.lastModifiedDateTime}, edited by {item.lastModifiedBy.user.displayName}</span>\r\n+      <span class=\"folder-nameplate\">\r\n+        <span class=\"folder-name\">\r\n+          {/* <span class=\"folder-signal\">\r\n+            <i class=\"folder-icon\"></i>\r\n+          </span> */}\r\n+          <span class=\"folder-name-text\">{item.name}</span>\r\n+        </span>\r\n+        <span class=\"folder-activity\">\r\n+          <div class=\"folder-activity-text\"> {item.lastModifiedDateTime}</div>\r\n+        </span>\r\n+      </span>\r\n+    </Link>\r\n+  </div>\r\n+  \r\n+  ) : (\r\n+    <div key={index}>No</div>\r\n+  )\r\n+))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711961893154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+  item.folder ? (\r\n+    // <div key={index} className=\"folder-item\">\r\n+    //   <div className=\"tile\">\r\n+    //     <div className=\"tile-content\">\r\n+    //       <div className=\"tile-header\">\r\n+    //         <p className=\"tile-label\">{item.name}</p>\r\n+    //         <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n+    //       </div>\r\n+    //       <div className=\"tile-metadata\">\r\n+    //         <p className=\"tile-private\">Private</p>\r\n+    //     <p className=\"tile-modified\">Modified {item.lastModifiedDateTime}</p>\r\n+    //         <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n+    //       </div>\r\n+    //     </div>\r\n+    //   </div>\r\n+    // </div>\r\n+    <div class=\"folder\">\r\n+    <Link class=\"folder-link\">\r\n+      <span class=\"folder-label\">passport, Folder, {`Folder has ${item.folder.childCount} items`}, Modified {item.lastModifiedDateTime}, edited by {item.lastModifiedBy.user.displayName}</span>\r\n+      <span class=\"folder-nameplate\">\r\n+        <span class=\"folder-name\">\r\n+          {/* <span class=\"folder-signal\">\r\n+            <i class=\"folder-icon\"></i>\r\n+          </span> */}\r\n+          <span class=\"folder-name-text\">{item.name}</span>\r\n+        </span>\r\n+        <span class=\"folder-activity\">\r\n+          <div class=\"folder-activity-text\"> {item.lastModifiedDateTime}</div>\r\n+        </span>\r\n+      </span>\r\n+    </Link>\r\n+  </div>\r\n+  \r\n+  ) : (\r\n+    <div key={index}>No</div>\r\n+  )\r\n+))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711961906452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n     //       </div>\r\n     //     </div>\r\n     //   </div>\r\n     // </div>\r\n-    <div class=\"folder\">\r\n+    <div class=\"folder\" key={index}>\r\n     <Link class=\"folder-link\">\r\n       <span class=\"folder-label\">passport, Folder, {`Folder has ${item.folder.childCount} items`}, Modified {item.lastModifiedDateTime}, edited by {item.lastModifiedBy.user.displayName}</span>\r\n       <span class=\"folder-nameplate\">\r\n         <span class=\"folder-name\">\r\n@@ -151,572 +151,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-  item.folder ? (\r\n-    // <div key={index} className=\"folder-item\">\r\n-    //   <div className=\"tile\">\r\n-    //     <div className=\"tile-content\">\r\n-    //       <div className=\"tile-header\">\r\n-    //         <p className=\"tile-label\">{item.name}</p>\r\n-    //         <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n-    //       </div>\r\n-    //       <div className=\"tile-metadata\">\r\n-    //         <p className=\"tile-private\">Private</p>\r\n-    //     <p className=\"tile-modified\">Modified {item.lastModifiedDateTime}</p>\r\n-    //         <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n-    //       </div>\r\n-    //     </div>\r\n-    //   </div>\r\n-    // </div>\r\n-    <div class=\"folder\">\r\n-    <Link class=\"folder-link\">\r\n-      <span class=\"folder-label\">passport, Folder, {`Folder has ${item.folder.childCount} items`}, Modified {item.lastModifiedDateTime}, edited by {item.lastModifiedBy.user.displayName}</span>\r\n-      <span class=\"folder-nameplate\">\r\n-        <span class=\"folder-name\">\r\n-          {/* <span class=\"folder-signal\">\r\n-            <i class=\"folder-icon\"></i>\r\n-          </span> */}\r\n-          <span class=\"folder-name-text\">{item.name}</span>\r\n-        </span>\r\n-        <span class=\"folder-activity\">\r\n-          <div class=\"folder-activity-text\"> {item.lastModifiedDateTime}</div>\r\n-        </span>\r\n-      </span>\r\n-    </Link>\r\n-  </div>\r\n-  \r\n-  ) : (\r\n-    <div key={index}>No</div>\r\n-  )\r\n-))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-  item.folder ? (\r\n-    <div key={index} className=\"folder-item\">\r\n-      <div className=\"tile\">\r\n-        <div className=\"tile-content\">\r\n-          <div className=\"tile-header\">\r\n-            <p className=\"tile-label\">{item.name}</p>\r\n-            <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n-          </div>\r\n-          <div className=\"tile-metadata\">\r\n-            <p className=\"tile-private\">Private</p>\r\n-        <p className=\"tile-modified\">Modified {item.lastModifiedDateTime}</p>\r\n-            <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  ) : (\r\n-    <div key={index}>No</div>\r\n-  )\r\n-))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-  item.folder ? (\r\n-    <div key={index} className=\"folder-item\">\r\n-      <div className=\"tile\">\r\n-        <div className=\"tile-content\">\r\n-          <div className=\"tile-header\">\r\n-            <p className=\"tile-label\">{item.name}</p>\r\n-            <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n-          </div>\r\n-          <div className=\"tile-metadata\">\r\n-            <p className=\"tile-private\">Private</p>\r\n-            <p className=\"tile-modified\">Modified 3/28/2024</p>\r\n-            <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n-          </div>\r\n-        </div>\r\n-        <div className=\"tile-actions\">\r\n-          <a href={item.webUrl} className=\"tile-link\">Open</a>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  ) : (\r\n-    <div key={index}>No</div>\r\n-  )\r\n-))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item,index) => {\r\n-                    item.folder ? \r\n-                    <div key={index} className=\"folder-item\">\r\n-                    <div className=\"tile\">\r\n-                      <div className=\"tile-content\">\r\n-                        <div className=\"tile-header\">\r\n-                          <p className=\"tile-label\">{item.name}</p>\r\n-                          <p className=\"tile-description\">{item.folder ? `Folder has ${item.folder.childCount} items` : 'No items'}</p>\r\n-                        </div>\r\n-                        <div className=\"tile-metadata\">\r\n-                          <p className=\"tile-private\">Private</p>\r\n-                          <p className=\"tile-modified\">Modified 3/28/2024</p>\r\n-                          <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n-                        </div>\r\n-                      </div>\r\n-                      <div className=\"tile-actions\">\r\n-                        <a href={item.webUrl} className=\"tile-link\">Open</a>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-                   : <div>No</div>\r\n-                })}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711962094367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+  item.folder ? (\r\n+    // <div key={index} className=\"folder-item\">\r\n+    //   <div className=\"tile\">\r\n+    //     <div className=\"tile-content\">\r\n+    //       <div className=\"tile-header\">\r\n+    //         <p className=\"tile-label\">{item.name}</p>\r\n+    //         <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n+    //       </div>\r\n+    //       <div className=\"tile-metadata\">\r\n+    //         <p className=\"tile-private\">Private</p>\r\n+    //     <p className=\"tile-modified\">Modified {item.lastModifiedDateTime}</p>\r\n+    //         <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n+    //       </div>\r\n+    //     </div>\r\n+    //   </div>\r\n+    // </div>\r\n+    <div class=\"folder\" key={index}>\r\n+    <Link class=\"folder-link\">\r\n+      <span class=\"folder-nameplate\">\r\n+        <span class=\"folder-name\">\r\n+          {/* <span class=\"folder-signal\">\r\n+            <i class=\"folder-icon\"></i>\r\n+          </span> */}\r\n+          <span class=\"folder-name-text\">{item.name}</span>\r\n+        </span>\r\n+        <span class=\"folder-activity\">\r\n+          <div class=\"folder-activity-text\"> {item.lastModifiedDateTime}</div>\r\n+        </span>\r\n+      </span>\r\n+    </Link>\r\n+  </div>\r\n+  \r\n+  ) : (\r\n+    <div key={index}>No</div>\r\n+  )\r\n+))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711962453533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,37 +110,19 @@\n                 )}\r\n                 {/* List of documents docTypeList */}\r\n                 {(docTypeList || []).map((item, index) => (\r\n   item.folder ? (\r\n-    // <div key={index} className=\"folder-item\">\r\n-    //   <div className=\"tile\">\r\n-    //     <div className=\"tile-content\">\r\n-    //       <div className=\"tile-header\">\r\n-    //         <p className=\"tile-label\">{item.name}</p>\r\n-    //         <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n-    //       </div>\r\n-    //       <div className=\"tile-metadata\">\r\n-    //         <p className=\"tile-private\">Private</p>\r\n-    //     <p className=\"tile-modified\">Modified {item.lastModifiedDateTime}</p>\r\n-    //         <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n-    //       </div>\r\n-    //     </div>\r\n-    //   </div>\r\n-    // </div>\r\n-    <div class=\"folder\" key={index}>\r\n-    <Link class=\"folder-link\">\r\n-      <span class=\"folder-nameplate\">\r\n-        <span class=\"folder-name\">\r\n-          {/* <span class=\"folder-signal\">\r\n-            <i class=\"folder-icon\"></i>\r\n-          </span> */}\r\n-          <span class=\"folder-name-text\">{item.name}</span>\r\n-        </span>\r\n-        <span class=\"folder-activity\">\r\n-          <div class=\"folder-activity-text\"> {item.lastModifiedDateTime}</div>\r\n-        </span>\r\n-      </span>\r\n-    </Link>\r\n+    <div className=\"folder-item\">\r\n+    <div className=\"folder-background\">\r\n+      <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+      </svg>\r\n+      <div className=\"folder-content\">\r\n+        <p className=\"file-count\">{fileCount} Files</p>\r\n+        <p className=\"folder-name\">{folderName}</p>\r\n+        <p className=\"modified-time\">Modified: {modifiedTime}</p>\r\n+      </div>\r\n+    </div>\r\n   </div>\r\n   \r\n   ) : (\r\n     <div key={index}>No</div>\r\n"
                },
                {
                    "date": 1711962527309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,27 +109,27 @@\n                     </Dropdown>\r\n                 )}\r\n                 {/* List of documents docTypeList */}\r\n                 {(docTypeList || []).map((item, index) => (\r\n-  item.folder ? (\r\n-    <div className=\"folder-item\">\r\n-    <div className=\"folder-background\">\r\n-      <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-      </svg>\r\n-      <div className=\"folder-content\">\r\n-        <p className=\"file-count\">{fileCount} Files</p>\r\n-        <p className=\"folder-name\">{folderName}</p>\r\n-        <p className=\"modified-time\">Modified: {modifiedTime}</p>\r\n-      </div>\r\n-    </div>\r\n-  </div>\r\n-  \r\n-  ) : (\r\n-    <div key={index}>No</div>\r\n-  )\r\n-))}\r\n+                    item.folder ? (\r\n+                        <div className=\"folder-item\">\r\n+                            <div className=\"folder-background\">\r\n+                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                </svg>\r\n+                                <div className=\"folder-content\">\r\n+                                    <p className=\"file-count\">{item.folder.childCount} Files</p>\r\n+                                    <p className=\"folder-name\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n \r\n+                    ) : (\r\n+                        <div key={index}>No</div>\r\n+                    )\r\n+                ))}\r\n+\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1711962749291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    item.folder ? (\r\n+                        <div className=\"folder-item\">\r\n+                            <div className=\"folder-background\">\r\n+                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\">\r\n+                                    <span className=\"file-count\">{item.folder.childCount} </span>\r\n+                                    </path>\r\n+                                </svg>\r\n+                                <div className=\"folder-content\">\r\n+                                    \r\n+                                    <p className=\"folder-name\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+\r\n+                    ) : (\r\n+                        <div key={index}>No</div>\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711962754983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,8 @@\n                                     <span className=\"file-count\">{item.folder.childCount} </span>\r\n                                     </path>\r\n                                 </svg>\r\n                                 <div className=\"folder-content\">\r\n-                                    \r\n                                     <p className=\"folder-name\">{item.name}</p>\r\n                                     <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n                                 </div>\r\n                             </div>\r\n"
                },
                {
                    "date": 1711962795208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    item.folder ? (\r\n+                        <div className=\"folder-item\">\r\n+                            <div className=\"folder-background\">\r\n+                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\">\r\n+                                    <span className=\"file-count\">{item.folder.childCount} </span>\r\n+                                    </path>\r\n+                                </svg>\r\n+                                <div className=\"folder-content\">\r\n+                                    <p className=\"folder-name\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+\r\n+                    ) : (\r\n+                        null\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711962802672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,10 +114,10 @@\n                         <div className=\"folder-item\">\r\n                             <div className=\"folder-background\">\r\n                                 <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n                                     <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\">\r\n+                                    </path>\r\n                                     <span className=\"file-count\">{item.folder.childCount} </span>\r\n-                                    </path>\r\n                                 </svg>\r\n                                 <div className=\"folder-content\">\r\n                                     <p className=\"folder-name\">{item.name}</p>\r\n                                     <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n@@ -133,429 +133,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    item.folder ? (\r\n-                        <div className=\"folder-item\">\r\n-                            <div className=\"folder-background\">\r\n-                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\">\r\n-                                    <span className=\"file-count\">{item.folder.childCount} </span>\r\n-                                    </path>\r\n-                                </svg>\r\n-                                <div className=\"folder-content\">\r\n-                                    <p className=\"folder-name\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-\r\n-                    ) : (\r\n-                        <div key={index}>No</div>\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    item.folder ? (\r\n-                        <div className=\"folder-item\">\r\n-                            <div className=\"folder-background\">\r\n-                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                </svg>\r\n-                                <div className=\"folder-content\">\r\n-                                    <p className=\"file-count\">{item.folder.childCount} Files</p>\r\n-                                    <p className=\"folder-name\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-\r\n-                    ) : (\r\n-                        <div key={index}>No</div>\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-  item.folder ? (\r\n-    // <div key={index} className=\"folder-item\">\r\n-    //   <div className=\"tile\">\r\n-    //     <div className=\"tile-content\">\r\n-    //       <div className=\"tile-header\">\r\n-    //         <p className=\"tile-label\">{item.name}</p>\r\n-    //         <p className=\"tile-description\">{`Folder has ${item.folder.childCount} items`}</p>\r\n-    //       </div>\r\n-    //       <div className=\"tile-metadata\">\r\n-    //         <p className=\"tile-private\">Private</p>\r\n-    //     <p className=\"tile-modified\">Modified {item.lastModifiedDateTime}</p>\r\n-    //         <p className=\"tile-edited\">edited by {item.lastModifiedBy.user.displayName}</p>\r\n-    //       </div>\r\n-    //     </div>\r\n-    //   </div>\r\n-    // </div>\r\n-    <div class=\"folder\" key={index}>\r\n-    <Link class=\"folder-link\">\r\n-      <span class=\"folder-label\">passport, Folder, {`Folder has ${item.folder.childCount} items`}, Modified {item.lastModifiedDateTime}, edited by {item.lastModifiedBy.user.displayName}</span>\r\n-      <span class=\"folder-nameplate\">\r\n-        <span class=\"folder-name\">\r\n-          {/* <span class=\"folder-signal\">\r\n-            <i class=\"folder-icon\"></i>\r\n-          </span> */}\r\n-          <span class=\"folder-name-text\">{item.name}</span>\r\n-        </span>\r\n-        <span class=\"folder-activity\">\r\n-          <div class=\"folder-activity-text\"> {item.lastModifiedDateTime}</div>\r\n-        </span>\r\n-      </span>\r\n-    </Link>\r\n-  </div>\r\n-  \r\n-  ) : (\r\n-    <div key={index}>No</div>\r\n-  )\r\n-))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711962843275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    item.folder ? (\r\n+                        <div className=\"folder-item\">\r\n+                            <div className=\"folder-background\">\r\n+                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\">\r\n+                                    </path>\r\n+                                </svg>\r\n+                                    <span className=\"file-count\">{item.folder.childCount} </span>\r\n+                                <div className=\"folder-content\">\r\n+                                    <p className=\"folder-name\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+\r\n+                    ) : (\r\n+                        null\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711962857087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n                 )}\r\n                 {/* List of documents docTypeList */}\r\n                 {(docTypeList || []).map((item, index) => (\r\n                     item.folder ? (\r\n-                        <div className=\"folder-item\">\r\n+                        <div className=\"folder-item\" key={index}>\r\n                             <div className=\"folder-background\">\r\n                                 <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n                                     <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\">\r\n                                     </path>\r\n@@ -133,140 +133,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    item.folder ? (\r\n-                        <div className=\"folder-item\">\r\n-                            <div className=\"folder-background\">\r\n-                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\">\r\n-                                    </path>\r\n-                                    <span className=\"file-count\">{item.folder.childCount} </span>\r\n-                                </svg>\r\n-                                <div className=\"folder-content\">\r\n-                                    <p className=\"folder-name\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-\r\n-                    ) : (\r\n-                        null\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711962955926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    item.folder ? (\r\n+                        <div className=\"folder-item\" key={index}>\r\n+  <div className=\"folder-background\">\r\n+    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+      <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+    </svg>\r\n+    <span className=\"file-count\">{item.folder.childCount}</span>\r\n+    <div className=\"folder-content\">\r\n+      <p className=\"folder-name\">{item.name}</p>\r\n+      <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n+    </div>\r\n+  </div>\r\n+</div>\r\n+\r\n+                    ) : (\r\n+                        null\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711963222624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    item.folder ? (\r\n+                        <div className=\"folder-item\" key={index}>\r\n+  <div className=\"folder-background\">\r\n+    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+      <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+    </svg>\r\n+    <span className=\"file-count\">{item.folder.childCount}</span>\r\n+    <div className=\"folder-content\">\r\n+      <p className=\"folder-name\">{item.name}</p>\r\n+      <p className=\"modified-time\">Modified: {moment(item.lastModifiedDateTime).fromNow}</p>\r\n+    </div>\r\n+  </div>\r\n+</div>\r\n+\r\n+                    ) : (\r\n+                        null\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711963254541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n     </svg>\r\n     <span className=\"file-count\">{item.folder.childCount}</span>\r\n     <div className=\"folder-content\">\r\n       <p className=\"folder-name\">{item.name}</p>\r\n-      <p className=\"modified-time\">Modified: {moment(item.lastModifiedDateTime).fromNow}</p>\r\n+      <p className=\"modified-time\">Modified: {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n     </div>\r\n   </div>\r\n </div>\r\n \r\n"
                },
                {
                    "date": 1711963284432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,10 +116,10 @@\n   <div className=\"folder-background\">\r\n     <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n       <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n     </svg>\r\n-    <span className=\"file-count\">{item.folder.childCount}</span>\r\n     <div className=\"folder-content\">\r\n+    <small className=\"file-count\">{item.folder.childCount}</small>\r\n       <p className=\"folder-name\">{item.name}</p>\r\n       <p className=\"modified-time\">Modified: {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n     </div>\r\n   </div>\r\n"
                },
                {
                    "date": 1711963302964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    item.folder ? (\r\n+                        <div className=\"folder-item\" key={index}>\r\n+  <div className=\"folder-background\">\r\n+    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+      <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+    </svg>\r\n+    <div className=\"folder-content\">\r\n+    <small className=\"file-count\">{item.folder.childCount}</small>\r\n+      <p className=\"folder-name text-capitalize\">{item.name}</p>\r\n+      <p className=\"modified-time\">Modified: {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+    </div>\r\n+  </div>\r\n+</div>\r\n+\r\n+                    ) : (\r\n+                        null\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711963378442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n     </svg>\r\n     <div className=\"folder-content\">\r\n     <small className=\"file-count\">{item.folder.childCount}</small>\r\n       <p className=\"folder-name text-capitalize\">{item.name}</p>\r\n-      <p className=\"modified-time\">Modified: {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+      <p className=\"modified-time\"> {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n     </div>\r\n   </div>\r\n </div>\r\n \r\n"
                },
                {
                    "date": 1711963383655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    item.folder ? (\r\n+                        <div className=\"folder-item\" key={index}>\r\n+                            <div className=\"folder-background\">\r\n+                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                </svg>\r\n+                                <div className=\"folder-content\">\r\n+                                    <small className=\"file-count\">{item.folder.childCount}</small>\r\n+                                    <p className=\"folder-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\"> {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+\r\n+                    ) : (\r\n+                        null\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711963824785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,24 +110,34 @@\n                     </Dropdown>\r\n                 )}\r\n                 {/* List of documents docTypeList */}\r\n                 {(docTypeList || []).map((item, index) => (\r\n-                    item.folder ? (\r\n-                        <div className=\"folder-item\" key={index}>\r\n-                            <div className=\"folder-background\">\r\n-                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                </svg>\r\n-                                <div className=\"folder-content\">\r\n-                                    <small className=\"file-count\">{item.folder.childCount}</small>\r\n-                                    <p className=\"folder-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\"> {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder &&\r\n+                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>}\r\n+                                {item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file.mimeType === 'application/pdf' && (\r\n+                                    <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#FF0000\" d=\"M21,2H3C1.9,2,1,2.9,1,4v16c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V4C23,2.9,22.1,2,21,2z M20,17.59L17.59,20 L16,18.41L14.41,20L12,17.59L9.59,20L8,18.41L6.41,20L4,17.59V4h16V17.59z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' && (\r\n+                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n-\r\n-                    ) : (\r\n-                        null\r\n                     )\r\n                 ))}\r\n \r\n             </div>\r\n"
                },
                {
                    "date": 1711963836934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import React, { useState, useEffect } from 'react';\r\n import { getSharePointFoldersList } from '../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n import moment from 'moment';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     const [docTypeName, setDocTypeName] = useState('');\r\n     const [newType, setNewType] = useState('');\r\n"
                },
                {
                    "date": 1711963859016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                                     <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n                                         <path fill=\"#FF0000\" d=\"M21,2H3C1.9,2,1,2.9,1,4v16c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V4C23,2.9,22.1,2,21,2z M20,17.59L17.59,20 L16,18.41L14.41,20L12,17.59L9.59,20L8,18.41L6.41,20L4,17.59V4h16V17.59z\" />\r\n                                     </svg>\r\n                                 )}\r\n-                                {item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' && (\r\n+                                {(item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n                                     <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n                                         <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n                                     </svg>\r\n                                 )}\r\n"
                },
                {
                    "date": 1711964064563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                        <div className=\"file-background\">\r\n+                          {item.folder && (\r\n+                            <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                              <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                            </svg>\r\n+                          )}\r\n+                          {item.file.mimeType.startsWith('image/') && (\r\n+                            <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                          )}\r\n+                          {item.file.mimeType === 'application/pdf' && (\r\n+                            <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n+                              <path fill=\"#FF0000\" d=\"M21,2H3C1.9,2,1,2.9,1,4v16c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V4C23,2.9,22.1,2,21,2z M20,17.59L17.59,20 L16,18.41L14.41,20L12,17.59L9.59,20L8,18.41L6.41,20L4,17.59V4h16V17.59z\" />\r\n+                            </svg>\r\n+                          )}\r\n+                          {(item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                            <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                              <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                            </svg>\r\n+                          )}\r\n+                          <div className=\"file-content\">\r\n+                            <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                            <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                          </div>\r\n+                        </div>\r\n+                      </div>\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711964320567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                        <div className=\"file-background\">\r\n+                          {item.folder && (\r\n+                            <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                              <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                            </svg>\r\n+                          )}\r\n+                          {item.file?.mimeType.startsWith('image/') && (\r\n+                            <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                          )}\r\n+                          {item.file?.mimeType === 'application/pdf' && (\r\n+                            <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n+                              <path fill=\"#FF0000\" d=\"M21,2H3C1.9,2,1,2.9,1,4v16c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V4C23,2.9,22.1,2,21,2z M20,17.59L17.59,20 L16,18.41L14.41,20L12,17.59L9.59,20L8,18.41L6.41,20L4,17.59V4h16V17.59z\" />\r\n+                            </svg>\r\n+                          )}\r\n+                          {(item.file?.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                            <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                              <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                            </svg>\r\n+                          )}\r\n+                          <div className=\"file-content\">\r\n+                            <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                            <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                          </div>\r\n+                        </div>\r\n+                      </div>\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711964429028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,314 +111,23 @@\n                 {/* List of documents docTypeList */}\r\n                 {(docTypeList || []).map((item, index) => (\r\n                     (\r\n                         <div className=\"file-item\" key={index}>\r\n-                        <div className=\"file-background\">\r\n-                          {item.folder && (\r\n-                            <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                              <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                            </svg>\r\n-                          )}\r\n-                          {item.file?.mimeType.startsWith('image/') && (\r\n-                            <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                          )}\r\n-                          {item.file?.mimeType === 'application/pdf' && (\r\n-                            <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n-                              <path fill=\"#FF0000\" d=\"M21,2H3C1.9,2,1,2.9,1,4v16c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V4C23,2.9,22.1,2,21,2z M20,17.59L17.59,20 L16,18.41L14.41,20L12,17.59L9.59,20L8,18.41L6.41,20L4,17.59V4h16V17.59z\" />\r\n-                            </svg>\r\n-                          )}\r\n-                          {(item.file?.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                            <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                              <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                            </svg>\r\n-                          )}\r\n-                          <div className=\"file-content\">\r\n-                            <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                            <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                          </div>\r\n-                        </div>\r\n-                      </div>\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                        <div className=\"file-background\">\r\n-                          {item.folder && (\r\n-                            <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                              <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                            </svg>\r\n-                          )}\r\n-                          {item.file.mimeType.startsWith('image/') && (\r\n-                            <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                          )}\r\n-                          {item.file.mimeType === 'application/pdf' && (\r\n-                            <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n-                              <path fill=\"#FF0000\" d=\"M21,2H3C1.9,2,1,2.9,1,4v16c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V4C23,2.9,22.1,2,21,2z M20,17.59L17.59,20 L16,18.41L14.41,20L12,17.59L9.59,20L8,18.41L6.41,20L4,17.59V4h16V17.59z\" />\r\n-                            </svg>\r\n-                          )}\r\n-                          {(item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                            <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                              <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                            </svg>\r\n-                          )}\r\n-                          <div className=\"file-content\">\r\n-                            <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                            <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                          </div>\r\n-                        </div>\r\n-                      </div>\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n                             <div className=\"file-background\">\r\n-                                {item.folder &&\r\n+                                {item.folder && (\r\n                                     <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n                                         <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>}\r\n-                                {item.file.mimeType.startsWith('image/') && (\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n                                     <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n                                 )}\r\n-                                {item.file.mimeType === 'application/pdf' && (\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n                                     <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n                                         <path fill=\"#FF0000\" d=\"M21,2H3C1.9,2,1,2.9,1,4v16c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V4C23,2.9,22.1,2,21,2z M20,17.59L17.59,20 L16,18.41L14.41,20L12,17.59L9.59,20L8,18.41L6.41,20L4,17.59V4h16V17.59z\" />\r\n                                     </svg>\r\n                                 )}\r\n-                                {(item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n                                     <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n                                         <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n                                     </svg>\r\n                                 )}\r\n@@ -434,547 +143,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    item.folder ? (\r\n-                        <div className=\"folder-item\" key={index}>\r\n-  <div className=\"folder-background\">\r\n-    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-      <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-    </svg>\r\n-    <div className=\"folder-content\">\r\n-    <small className=\"file-count\">{item.folder.childCount}</small>\r\n-      <p className=\"folder-name text-capitalize\">{item.name}</p>\r\n-      <p className=\"modified-time\"> {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-    </div>\r\n-  </div>\r\n-</div>\r\n-\r\n-                    ) : (\r\n-                        null\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    item.folder ? (\r\n-                        <div className=\"folder-item\" key={index}>\r\n-  <div className=\"folder-background\">\r\n-    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-      <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-    </svg>\r\n-    <div className=\"folder-content\">\r\n-    <small className=\"file-count\">{item.folder.childCount}</small>\r\n-      <p className=\"folder-name\">{item.name}</p>\r\n-      <p className=\"modified-time\">Modified: {moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-    </div>\r\n-  </div>\r\n-</div>\r\n-\r\n-                    ) : (\r\n-                        null\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    item.folder ? (\r\n-                        <div className=\"folder-item\" key={index}>\r\n-  <div className=\"folder-background\">\r\n-    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-      <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-    </svg>\r\n-    <span className=\"file-count\">{item.folder.childCount}</span>\r\n-    <div className=\"folder-content\">\r\n-      <p className=\"folder-name\">{item.name}</p>\r\n-      <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n-    </div>\r\n-  </div>\r\n-</div>\r\n-\r\n-                    ) : (\r\n-                        null\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    item.folder ? (\r\n-                        <div className=\"folder-item\" key={index}>\r\n-                            <div className=\"folder-background\">\r\n-                                <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                    <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\">\r\n-                                    </path>\r\n-                                </svg>\r\n-                                    <span className=\"file-count\">{item.folder.childCount} </span>\r\n-                                <div className=\"folder-content\">\r\n-                                    <p className=\"folder-name\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">Modified: {item.lastModifiedDateTime}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-\r\n-                    ) : (\r\n-                        null\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711964611504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                  <img src=\"file:///D:/pdf-svgrepo-com.svg\" alt=\"PDF Icon\" className=\"pdf-icon\" />\r\n+\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711964680854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                        <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n+                                            <path fill=\"#FF0000\" d=\"file:///D:/pdf-svgrepo-com.svg\" />\r\n+                                        </svg>\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711964737390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,11 +121,12 @@\n                                 {item.file && item.file.mimeType.startsWith('image/') && (\r\n                                     <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n                                 )}\r\n                                 {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                        <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n-                                            <path fill=\"#FF0000\" d=\"file:///D:/pdf-svgrepo-com.svg\" />\r\n-                                        </svg>\r\n+                                        // <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n+                                        //     <path fill=\"#FF0000\" d=\"file:///D:/pdf-svgrepo-com.svg\" />\r\n+                                        // </svg>\r\n+                                        <img alt=\"Pdf File SVG Vector Icon\" fetchpriority=\"high\" width=\"250\" height=\"250\" decoding=\"async\" data-nimg=\"1\" src=\"/show/484943/pdf-file.svg\" style=\"color: transparent; width: 250px; height: 250px;\"></img>\r\n                                 )}\r\n                                 {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n                                     <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n                                         <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n@@ -143,295 +144,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                  <img src=\"file:///D:/pdf-svgrepo-com.svg\" alt=\"PDF Icon\" className=\"pdf-icon\" />\r\n-\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#FF0000\" d=\"M21,2H3C1.9,2,1,2.9,1,4v16c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V4C23,2.9,22.1,2,21,2z M20,17.59L17.59,20 L16,18.41L14.41,20L12,17.59L9.59,20L8,18.41L6.41,20L4,17.59V4h16V17.59z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711964801145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                        // <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n+                                        //     <path fill=\"#FF0000\" d=\"file:///D:/pdf-svgrepo-com.svg\" />\r\n+                                        // </svg>\r\n+                                        <img alt=\"Pdf File SVG Vector Icon\" src=\"/show/484943/pdf-file.svg\" width=\"250\" height=\"250\" decoding=\"async\" />\r\n+\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711965107230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\"} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711965234141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\"} alt={item.name} className=\"file-icon\" width={45}\r\n+                                    height={45} />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    )\r\n+                ))}\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711965361686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n                                 {item.file && item.file.mimeType.startsWith('image/') && (\r\n                                     <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n                                 )}\r\n                                 {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\"} alt={item.name} className=\"file-icon\" width={45}\r\n+                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" width={45}\r\n                                     height={45} />\r\n                                 )}\r\n                                 {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n                                     <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n"
                },
                {
                    "date": 1711965535404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                < className=\"file-list\">\r\n+\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" width={45}\r\n+                                    height={45} />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    )\r\n+                ))}\r\n+</\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711965587973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+\r\n+                {(docTypeList || []).map((item, index) => (\r\n+                    (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" width={45}\r\n+                                    height={45} />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    )\r\n+                ))}\r\n+</div>\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711965726421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,770 +109,36 @@\n                     </Dropdown>\r\n                 )}\r\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n-\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" width={45}\r\n-                                    height={45} />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    )\r\n-                ))}\r\n-</div>\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n+    {(docTypeList || []).map((item, index) => (\r\n+        <div className=\"file-item\" key={index}>\r\n+            <div className=\"file-background\">\r\n+                {item.folder && (\r\n+                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                    </svg>\r\n                 )}\r\n-                {/* List of documents docTypeList */}\r\n-                < className=\"file-list\">\r\n-\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" width={45}\r\n-                                    height={45} />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    )\r\n-                ))}\r\n-</\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n+                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n                 )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" width={45}\r\n-                                    height={45} />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n+                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon pdf-icon\" />\r\n                 )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\"} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    )\r\n-                ))}\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n+                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                    </svg>\r\n                 )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                        // <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n-                                        //     <path fill=\"#FF0000\" d=\"file:///D:/pdf-svgrepo-com.svg\" />\r\n-                                        // </svg>\r\n-                                        <img alt=\"Pdf File SVG Vector Icon\" src=\"/show/484943/pdf-file.svg\" width=\"250\" height=\"250\" decoding=\"async\" />\r\n-\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    )\r\n-                ))}\r\n-\r\n+                <div className=\"file-content\">\r\n+                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                </div>\r\n             </div>\r\n         </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n+    ))}\r\n+</div>\r\n \r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                {(docTypeList || []).map((item, index) => (\r\n-                    (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                        // <svg className=\"pdf-icon\" viewBox=\"0 0 24 24\">\r\n-                                        //     <path fill=\"#FF0000\" d=\"file:///D:/pdf-svgrepo-com.svg\" />\r\n-                                        // </svg>\r\n-                                        <img alt=\"Pdf File SVG Vector Icon\" fetchpriority=\"high\" width=\"250\" height=\"250\" decoding=\"async\" data-nimg=\"1\" src=\"/show/484943/pdf-file.svg\" style=\"color: transparent; width: 250px; height: 250px;\"></img>\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    )\r\n-                ))}\r\n-\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1711965935813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+    {(docTypeList || []).map((item, index) => (\r\n+        <div className=\"file-item\" key={index}>\r\n+            <div className=\"file-background\">\r\n+                {item.folder && (\r\n+                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                    </svg>\r\n+                )}\r\n+                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                )}\r\n+                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon pdf-icon\" />\r\n+                )}\r\n+                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                    </svg>\r\n+                )}\r\n+                <div className=\"file-content\">\r\n+                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    ))}\r\n+</div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711966212384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+    {(docTypeList || []).map((item, index) => (\r\n+        <div className=\"file-item\" key={index}>\r\n+            <div className=\"file-background\">\r\n+                {item.folder && (\r\n+                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n+                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                    </svg>\r\n+                )}\r\n+                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                )}\r\n+                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"pdf-icon\" />\r\n+                )}\r\n+                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n+                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                    </svg>\r\n+                )}\r\n+                <div className=\"file-content\">\r\n+                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    ))}\r\n+</div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711966276441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+    {(docTypeList || []).map((item, index) => (\r\n+        <div className=\"file-item\" key={index}>\r\n+            <div className=\"file-background\">\r\n+                {item.folder && (\r\n+                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n+                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                    </svg>\r\n+                )}\r\n+                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                )}\r\n+                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n+                )}\r\n+                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                    <svg className=\"file-icon\" viewBox=\"0 0 24 24\">\r\n+                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                    </svg>\r\n+                )}\r\n+                <div className=\"file-content\">\r\n+                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+    ))}\r\n+</div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711966481628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <svg className=\"file-icon\" viewBox=\"0 0 24 24\">\r\n+                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n+                                    </svg>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711967217875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import React, { useState, useEffect } from 'react';\r\n import { getSharePointFoldersList } from '../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n import moment from 'moment';\r\n+import { TbFileTypeDocx } from \"react-icons/tb\";\r\n+\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     const [docTypeName, setDocTypeName] = useState('');\r\n     const [newType, setNewType] = useState('');\r\n     const [docTypeList, setDocTypeList] = useState([]);\r\n@@ -124,11 +126,11 @@\n                                 {item.file && item.file.mimeType === 'application/pdf' && (\r\n                                     <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n                                 )}\r\n                                 {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <svg className=\"file-icon\" viewBox=\"0 0 24 24\">\r\n-                                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                                    </svg>\r\n+                                    <span className=\"file-icon\">\r\n+                                        <TbFileTypeDocx />\r\n+                                    </span>\r\n                                 )}\r\n                                 <div className=\"file-content\">\r\n                                     <p className=\"file-name text-capitalize\">{item.name}</p>\r\n                                     <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n@@ -141,580 +143,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-    {(docTypeList || []).map((item, index) => (\r\n-        <div className=\"file-item\" key={index}>\r\n-            <div className=\"file-background\">\r\n-                {item.folder && (\r\n-                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n-                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                    </svg>\r\n-                )}\r\n-                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                )}\r\n-                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n-                )}\r\n-                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                    <svg className=\"file-icon\" viewBox=\"0 0 24 24\">\r\n-                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                    </svg>\r\n-                )}\r\n-                <div className=\"file-content\">\r\n-                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    ))}\r\n-</div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-    {(docTypeList || []).map((item, index) => (\r\n-        <div className=\"file-item\" key={index}>\r\n-            <div className=\"file-background\">\r\n-                {item.folder && (\r\n-                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                    </svg>\r\n-                )}\r\n-                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                )}\r\n-                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"pdf-icon\" />\r\n-                )}\r\n-                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                    </svg>\r\n-                )}\r\n-                <div className=\"file-content\">\r\n-                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    ))}\r\n-</div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-    {(docTypeList || []).map((item, index) => (\r\n-        <div className=\"file-item\" key={index}>\r\n-            <div className=\"file-background\">\r\n-                {item.folder && (\r\n-                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                    </svg>\r\n-                )}\r\n-                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                )}\r\n-                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon pdf-icon\" />\r\n-                )}\r\n-                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                    </svg>\r\n-                )}\r\n-                <div className=\"file-content\">\r\n-                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    ))}\r\n-</div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-    {(docTypeList || []).map((item, index) => (\r\n-        <div className=\"file-item\" key={index}>\r\n-            <div className=\"file-background\">\r\n-                {item.folder && (\r\n-                    <svg className=\"folder-icon\" viewBox=\"0 0 112 80\">\r\n-                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                    </svg>\r\n-                )}\r\n-                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                )}\r\n-                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon pdf-icon\" />\r\n-                )}\r\n-                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                    <svg className=\"word-icon\" viewBox=\"0 0 24 24\">\r\n-                        <path fill=\"#2B579A\" d=\"M6,2C4.9,2,4,2.9,4,4v16c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V8l-6-6H6z M14,6V2.5L17.5,6H14z M16,9.5l-1,2.3 l-1-2.3H10l2.2,5.6L9.7,20H11l1.7-4.5l1.6,4.5h1.4L12,14.5L16,9.5z\" />\r\n-                    </svg>\r\n-                )}\r\n-                <div className=\"file-content\">\r\n-                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                </div>\r\n-            </div>\r\n-        </div>\r\n-    ))}\r\n-</div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711967278684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,11 @@\n                                 {item.file && item.file.mimeType === 'application/pdf' && (\r\n                                     <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n                                 )}\r\n                                 {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <span className=\"file-icon\">\r\n+                                    // <span className=\"file-icon\">\r\n                                         <TbFileTypeDocx />\r\n-                                    </span>\r\n+                                    // </span>\r\n                                 )}\r\n                                 <div className=\"file-content\">\r\n                                     <p className=\"file-name text-capitalize\">{item.name}</p>\r\n                                     <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n"
                },
                {
                    "date": 1711967313420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+import { TbFileTypeDocx } from \"react-icons/tb\";\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    const [docTypeName, setDocTypeName] = useState('');\r\n+    const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    const handleDocTypeChange = (selectedType) => {\r\n+        setDocTypeName(selectedType);\r\n+        if (selectedType === 'other') {\r\n+            // If \"other\" is selected, clear newType\r\n+            setNewType('');\r\n+        }\r\n+    };\r\n+\r\n+    const handleNewTypeChange = (e) => {\r\n+        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+        setNewType(value);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                        <TbFileTypeDocx className=\"file-icon\"/>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711967417064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from 'react';\r\n import { getSharePointFoldersList } from '../../api/api';\r\n import { Dropdown, Form } from 'react-bootstrap';\r\n import moment from 'moment';\r\n-import { TbFileTypeDocx } from \"react-icons/tb\";\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n \r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     const [docTypeName, setDocTypeName] = useState('');\r\n     const [newType, setNewType] = useState('');\r\n@@ -126,9 +126,9 @@\n                                 {item.file && item.file.mimeType === 'application/pdf' && (\r\n                                     <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n                                 )}\r\n                                 {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                        <TbFileTypeDocx className=\"file-icon\"/>\r\n+                                        <BsFiletypeDocx  className=\"file-icon\"/>\r\n                                 )}\r\n                                 <div className=\"file-content\">\r\n                                     <p className=\"file-name text-capitalize\">{item.name}</p>\r\n                                     <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n@@ -141,150 +141,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-import { TbFileTypeDocx } from \"react-icons/tb\";\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    // <span className=\"file-icon\">\r\n-                                        <TbFileTypeDocx />\r\n-                                    // </span>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711967556882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    // const AllShareType = async () => {\r\n+    //     try {\r\n+    //         let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+    //         if (res.data.status === 1) {\r\n+    //             setDocTypeList(res.data.data)\r\n+    //         }\r\n+    //     } catch (Err) { console.log(Err) }\r\n+    // }\r\n+    // useEffect(() => {\r\n+    //     AllShareType()\r\n+    // }, [])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                        <BsFiletypeDocx  className=\"file-icon\"\r\n+                                        width={100}/>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711967597341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,19 +53,19 @@\n                 'Representative Submission Letter',\r\n                 'Bank Statement',\r\n             ];\r\n     /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    // const AllShareType = async () => {\r\n-    //     try {\r\n-    //         let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-    //         if (res.data.status === 1) {\r\n-    //             setDocTypeList(res.data.data)\r\n-    //         }\r\n-    //     } catch (Err) { console.log(Err) }\r\n-    // }\r\n-    // useEffect(() => {\r\n-    //     AllShareType()\r\n-    // }, [])\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n \r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n@@ -142,148 +142,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    const [docTypeName, setDocTypeName] = useState('');\r\n-    const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    const handleDocTypeChange = (selectedType) => {\r\n-        setDocTypeName(selectedType);\r\n-        if (selectedType === 'other') {\r\n-            // If \"other\" is selected, clear newType\r\n-            setNewType('');\r\n-        }\r\n-    };\r\n-\r\n-    const handleNewTypeChange = (e) => {\r\n-        const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-        setNewType(value);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                        <BsFiletypeDocx  className=\"file-icon\"/>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711967686737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                        <BsFiletypeDocx  className=\"file-icon\"\r\n+                                        width={\"100px\"}\r\n+                                        height={\"100px\"}/>\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711967739162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,10 @@\n                                 {item.file && item.file.mimeType === 'application/pdf' && (\r\n                                     <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n                                 )}\r\n                                 {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                        <BsFiletypeDocx  className=\"file-icon\"\r\n+                                        <BsFiletypeDocx  \r\n+                                        // className=\"file-icon\"\r\n                                         width={\"100px\"}\r\n                                         height={\"100px\"}/>\r\n                                 )}\r\n                                 <div className=\"file-content\">\r\n@@ -143,149 +144,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                        <BsFiletypeDocx  className=\"file-icon\"\r\n-                                        width={100}/>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711967854286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    const DocTypeData =\r\n+        emp_user_type === 'employer'\r\n+            ? [\r\n+                'Business T2',\r\n+                'Recent PD7A',\r\n+                'Business T4',\r\n+                'Business Incorporation Certificate',\r\n+                'Employment Contract',\r\n+                'Schedule A',\r\n+                'Signed Job Offer',\r\n+                'PD7A of year',\r\n+                'T2 Schedule 100 and 125',\r\n+                'Certificate of incorporation',\r\n+                'Business license',\r\n+                'T4 summary of year',\r\n+                'Request for Exception from English Language Requirement for LMIA Application',\r\n+                'CPA Attestation Letter',\r\n+                'Representative Submission Letter',\r\n+            ]\r\n+            : [\r\n+                'passport',\r\n+                'drivers_license',\r\n+                'photograph',\r\n+                'immigration_status',\r\n+                'lmia',\r\n+                'job_offer_letter',\r\n+                'provincial_nominee_letter',\r\n+                'proof_of_funds',\r\n+                'proof_of_employment',\r\n+                'marriage_certificate',\r\n+                'education_metric',\r\n+                'education_higher_secondary',\r\n+                'education_graduation',\r\n+                'education_post_graduation',\r\n+                'resume_or_cv',\r\n+                'ielts',\r\n+                'medical',\r\n+                'police_clearance',\r\n+                'refusal_letter',\r\n+                'Employment Contract',\r\n+                'Reference Letters',\r\n+                'Client Info',\r\n+                'Representative Submission Letter',\r\n+                'Bank Statement',\r\n+            ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n+                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n+                                    </svg>\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                        <BsFiletypeDocx  \r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A', // Change color as needed\r\n+                                            // Add any other styles here\r\n+                                        }}\r\n+                                        />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711967984477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf,FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+            if (res.data.status === 1) {\r\n+                setDocTypeList(res.data.data)\r\n+            }\r\n+        } catch (Err) { console.log(Err) }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <div className=\"file-item\" key={index}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                   <FaFolder \r\n+                                   style={{\r\n+                                    width: '100px',\r\n+                                    height: '100px',\r\n+                                    color: 'yellow', // Change color as needed\r\n+                                    // Add any other styles here\r\n+                                }}\r\n+                                   />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                               <FaRegFilePdf \r\n+                               style={{\r\n+                                width: '100px',\r\n+                                height: '100px',\r\n+                                color: 'red', // Change color as needed\r\n+                                // Add any other styles here\r\n+                            }}\r\n+                            />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                        <BsFiletypeDocx  \r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A', // Change color as needed\r\n+                                            // Add any other styles here\r\n+                                        }}\r\n+                                        />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711967996285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,10 +119,9 @@\n                                    <FaFolder \r\n                                    style={{\r\n                                     width: '100px',\r\n                                     height: '100px',\r\n-                                    color: 'yellow', // Change color as needed\r\n-                                    // Add any other styles here\r\n+                                    color: 'yellow', \r\n                                 }}\r\n                                    />\r\n                                 )}\r\n                                 {item.file && item.file.mimeType.startsWith('image/') && (\r\n@@ -132,10 +131,9 @@\n                                <FaRegFilePdf \r\n                                style={{\r\n                                 width: '100px',\r\n                                 height: '100px',\r\n-                                color: 'red', // Change color as needed\r\n-                                // Add any other styles here\r\n+                                color: 'red', \r\n                             }}\r\n                             />\r\n                                 )}\r\n                                 {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n@@ -143,10 +141,9 @@\n                                         // className=\"file-icon\"\r\n                                         style={{\r\n                                             width: '100px',\r\n                                             height: '100px',\r\n-                                            color: '#2B579A', // Change color as needed\r\n-                                            // Add any other styles here\r\n+                                            color: '#2B579A',\r\n                                         }}\r\n                                         />\r\n                                 )}\r\n                                 <div className=\"file-content\">\r\n@@ -161,303 +158,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                        <BsFiletypeDocx  \r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A', // Change color as needed\r\n-                                            // Add any other styles here\r\n-                                        }}\r\n-                                        />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    const DocTypeData =\r\n-        emp_user_type === 'employer'\r\n-            ? [\r\n-                'Business T2',\r\n-                'Recent PD7A',\r\n-                'Business T4',\r\n-                'Business Incorporation Certificate',\r\n-                'Employment Contract',\r\n-                'Schedule A',\r\n-                'Signed Job Offer',\r\n-                'PD7A of year',\r\n-                'T2 Schedule 100 and 125',\r\n-                'Certificate of incorporation',\r\n-                'Business license',\r\n-                'T4 summary of year',\r\n-                'Request for Exception from English Language Requirement for LMIA Application',\r\n-                'CPA Attestation Letter',\r\n-                'Representative Submission Letter',\r\n-            ]\r\n-            : [\r\n-                'passport',\r\n-                'drivers_license',\r\n-                'photograph',\r\n-                'immigration_status',\r\n-                'lmia',\r\n-                'job_offer_letter',\r\n-                'provincial_nominee_letter',\r\n-                'proof_of_funds',\r\n-                'proof_of_employment',\r\n-                'marriage_certificate',\r\n-                'education_metric',\r\n-                'education_higher_secondary',\r\n-                'education_graduation',\r\n-                'education_post_graduation',\r\n-                'resume_or_cv',\r\n-                'ielts',\r\n-                'medical',\r\n-                'police_clearance',\r\n-                'refusal_letter',\r\n-                'Employment Contract',\r\n-                'Reference Letters',\r\n-                'Client Info',\r\n-                'Representative Submission Letter',\r\n-                'Bank Statement',\r\n-            ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <svg className=\"file-icon\" viewBox=\"0 0 112 80\">\r\n-                                        <path d=\"M52 8L46.7333 2.73333C44.9829 0.983035 42.6088 -0.00017858 40.1333 2.43289e-08H5.33333C2.38781 2.43289e-08 0 2.38781 0 5.33333C0 5.33333 0 71.7212 0 74.6667C0 77.6122 2.38781 80 5.33333 80H106.667C109.612 80 112 77.6122 112 74.6667V13.3333C112 10.3878 109.612 8 106.667 8H52Z\" fill=\"#F5B800\"></path>\r\n-                                    </svg>\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <img src={\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/PDF_file_icon.svg/267px-PDF_file_icon.svg.png\"} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                        <BsFiletypeDocx  \r\n-                                        // className=\"file-icon\"\r\n-                                        width={\"100px\"}\r\n-                                        height={\"100px\"}/>\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711968102495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n                                    <FaFolder \r\n                                    style={{\r\n                                     width: '100px',\r\n                                     height: '100px',\r\n-                                    color: 'yellow', \r\n+                                    color: '#f5b317b0', \r\n                                 }}\r\n                                    />\r\n                                 )}\r\n                                 {item.file && item.file.mimeType.startsWith('image/') && (\r\n"
                },
                {
                    "date": 1711968343482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onCLick={() => item.folder ? setFolderID(item) : null}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968354733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onCLick={() => item.folder ? setFolderID(item) : null}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968413974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     }\r\n     useEffect(() => {\r\n         AllShareType()\r\n     }, [folderID])\r\n-\r\n+console.log(folderID)\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n     //         // If \"other\" is selected, clear newType\r\n"
                },
                {
                    "date": 1711968492722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index}\r\n-                            onCLick={() => item.folder ? setFolderID(item) : null}>\r\n+                            onCLick={() => {item.folder ? setFolderID(item) : null}}>\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n@@ -170,337 +170,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onCLick={() => item.folder ? setFolderID(item) : null}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf,FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-            if (res.data.status === 1) {\r\n-                setDocTypeList(res.data.data)\r\n-            }\r\n-        } catch (Err) { console.log(Err) }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <div className=\"file-item\" key={index}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                   <FaFolder \r\n-                                   style={{\r\n-                                    width: '100px',\r\n-                                    height: '100px',\r\n-                                    color: '#f5b317b0', \r\n-                                }}\r\n-                                   />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                               <FaRegFilePdf \r\n-                               style={{\r\n-                                width: '100px',\r\n-                                height: '100px',\r\n-                                color: 'red', \r\n-                            }}\r\n-                            />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                        <BsFiletypeDocx  \r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                        />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711968511243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onCLick={() => item.folder ? console.log(item) : null}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968541539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index}\r\n-                            onCLick={() => item.folder ? console.log(item) : null}>\r\n+                            onCLick={() => item.folder ? console.log(item) : console.log(\"object\")}>\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n@@ -170,177 +170,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onCLick={() => {item.folder ? setFolderID(item) : null}}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711968564403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onCLick={(item) => item.folder ? console.log(item) : console.log(\"object\")}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968600219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <div className=\"file-item\" key={index}\r\n+                            >\r\n+                            <Link className=\"file-background\"\r\n+                            onCLick={(item) => item.folder ? console.log(item) : console.log(\"object\")}>\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </Link>\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968630694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <div className=\"file-item\" key={index}\r\n+                            >\r\n+                            <Link className=\"file-background\"\r\n+                            onClick={(item) => item.folder ? console.log(item) : console.log(\"object\")}>\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </Link>\r\n+                        </div>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968681133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onClick={console.log(item.folder)}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968710094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onClick={(item) => item.folder ? console.log(item) : console.log(\"object\")}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968717204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onClick={() => item.folder ? console.log(item) : console.log(\"object\")}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968764549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onClick={item.folder ===true}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968798216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index}\r\n-                            onClick={item.folder ===true}>\r\n+                            onClick={()=>item.folder ===true}>\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n@@ -170,1217 +170,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onClick={() => item.folder ? console.log(item) : console.log(\"object\")}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onClick={(item) => item.folder ? console.log(item) : console.log(\"object\")}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onClick={console.log(item.folder)}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <div className=\"file-item\" key={index}\r\n-                            >\r\n-                            <Link className=\"file-background\"\r\n-                            onClick={(item) => item.folder ? console.log(item) : console.log(\"object\")}>\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </Link>\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <div className=\"file-item\" key={index}\r\n-                            >\r\n-                            <Link className=\"file-background\"\r\n-                            onCLick={(item) => item.folder ? console.log(item) : console.log(\"object\")}>\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </Link>\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onCLick={(item) => item.folder ? console.log(item) : console.log(\"object\")}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onCLick={() => item.folder ? console.log(item) : console.log(\"object\")}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711968805959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index}\r\n+                            onClick={()=>console.log(item.folder ===true)}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968893171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index} to=\"\"\r\n+                            onClick={()=>console.log(item.folder ===true)}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968919421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+console.log(folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index} to=\"\"\r\n+                            onClick={()=>console.log(item.folder)}>\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711968926702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={()=>console.log(item.folder)}>\r\n+                            onClick={()=>console.log(item.folder?\"1\":0)}>\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n@@ -170,523 +170,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={()=>console.log(item.folder ===true)}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onClick={()=>console.log(item.folder ===true)}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-console.log(folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index}\r\n-                            onClick={()=>item.folder ===true}>\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711968957438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     }\r\n     useEffect(() => {\r\n         AllShareType()\r\n     }, [folderID])\r\n-console.log(folderID)\r\n+    console.log(folderID)\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n     //         // If \"other\" is selected, clear newType\r\n@@ -124,9 +124,9 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={()=>console.log(item.folder?\"1\":0)}>\r\n+                            onClick={() => console.log(item.folder ? \"1\" : 0)}>\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n"
                },
                {
                    "date": 1711969000008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => console.log(item.folder ? \"1\" : 0)}>\r\n+                            onClick={() => item.folder ?setFolderID(item) : null}>\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n"
                },
                {
                    "date": 1711969029919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => item.folder ?setFolderID(item) : null}>\r\n+                            onClick={() => item.folder ?setFolderID(item.id) : null}>\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n"
                },
                {
                    "date": 1711970167435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n     const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n     const [docTypeList, setDocTypeList] = useState([]);\r\n     // const DocTypeData =\r\n     //     emp_user_type === 'employer'\r\n     //         ? [\r\n@@ -61,8 +62,9 @@\n             if (folderID) {\r\n                 let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n                 if (res.data.status === 1) {\r\n                     setDocTypeList(res.data.data)\r\n+                    \r\n                 }\r\n             } else {\r\n                 let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n                 if (res.data.status === 1) {\r\n@@ -75,9 +77,9 @@\n     }\r\n     useEffect(() => {\r\n         AllShareType()\r\n     }, [folderID])\r\n-    console.log(folderID)\r\n+    console.log(prevFolderID)\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n     //         // If \"other\" is selected, clear newType\r\n@@ -124,9 +126,10 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => item.folder ?setFolderID(item.id) : null}>\r\n+                            onClick={() => item.folder ?setFolderID(item.id),\r\n+                                setPrevFolderID(item.parentReference.id) : null}>\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n"
                },
                {
                    "date": 1711970187715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,15 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => item.folder ?setFolderID(item.id),\r\n-                                setPrevFolderID(item.parentReference.id) : null}>\r\n+                        onClick={() => {\r\n+                            if (item.folder) {\r\n+                                setFolderID(item.id);\r\n+                                setPrevFolderID(item.parentReference.id);\r\n+                            }\r\n+                        }}    \r\n+                        >\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n                                         style={{\r\n"
                },
                {
                    "date": 1711970202558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n             if (folderID) {\r\n                 let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n                 if (res.data.status === 1) {\r\n                     setDocTypeList(res.data.data)\r\n-                    \r\n+\r\n                 }\r\n             } else {\r\n                 let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n                 if (res.data.status === 1) {\r\n@@ -77,9 +77,9 @@\n     }\r\n     useEffect(() => {\r\n         AllShareType()\r\n     }, [folderID])\r\n-    console.log(prevFolderID)\r\n+    console.log(prevFolderID,folderID)\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n     //         // If \"other\" is selected, clear newType\r\n@@ -126,14 +126,14 @@\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n-                        onClick={() => {\r\n-                            if (item.folder) {\r\n-                                setFolderID(item.id);\r\n-                                setPrevFolderID(item.parentReference.id);\r\n-                            }\r\n-                        }}    \r\n+                            onClick={() => {\r\n+                                if (item.folder) {\r\n+                                    setFolderID(item.id);\r\n+                                    setPrevFolderID(item.parentReference.id);\r\n+                                }\r\n+                            }}\r\n                         >\r\n                             <div className=\"file-background\">\r\n                                 {item.folder && (\r\n                                     <FaFolder\r\n"
                },
                {
                    "date": 1711970522654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { Link } from 'react-router-dom';\r\n import moment from 'moment';\r\n import { BsFiletypeDocx } from \"react-icons/bs\";\r\n import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n     const [folderID, setFolderID] = useState('');\r\n@@ -56,12 +57,12 @@\n     //             'Representative Submission Letter',\r\n     //             'Bank Statement',\r\n     //         ];\r\n     /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n+    const AllShareType = async (pre) => {\r\n         try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+            if (folderID || pre) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, pre ? pre : folderID)\r\n                 if (res.data.status === 1) {\r\n                     setDocTypeList(res.data.data)\r\n \r\n                 }\r\n@@ -77,9 +78,9 @@\n     }\r\n     useEffect(() => {\r\n         AllShareType()\r\n     }, [folderID])\r\n-    console.log(prevFolderID,folderID)\r\n+    console.log(prevFolderID, folderID)\r\n     // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n     //         // If \"other\" is selected, clear newType\r\n@@ -122,8 +123,10 @@\n                             </Dropdown.Item>\r\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )} */}\r\n+                <Link onClick={() => AllShareType(prevFolderID)}>\r\n+                    <GrLinkPrevious /></Link>\r\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n"
                },
                {
                    "date": 1711971603882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,10 +123,10 @@\n                             </Dropdown.Item>\r\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )} */}\r\n-                <Link onClick={() => AllShareType(prevFolderID)}>\r\n-                    <GrLinkPrevious /></Link>\r\n+                {folderID&&<Link onClick={() => AllShareType(prevFolderID)}>\r\n+                    <GrLinkPrevious /></Link>}\r\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n                         <Link className=\"file-item\" key={index} to=\"\"\r\n"
                },
                {
                    "date": 1711971731921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async (pre) => {\r\n+        try {\r\n+            if (folderID || pre) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, pre ? pre : folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {folderID && <Link onClick={() => AllShareType(prevFolderID)}>\r\n+                    <GrLinkPrevious /></Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index} to=\"\"\r\n+                            onClick={() => {\r\n+                                if (item.folder) {\r\n+                                    setFolderID(item.id);\r\n+                                    setPrevFolderID(item.parentReference.id);\r\n+                                }\r\n+                            }}\r\n+                        >\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711971827829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async (pre) => {\r\n+        try {\r\n+            if (folderID || pre) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, pre ? pre : folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {prevFolderID !== folderID && <Link onClick={() => AllShareType(prevFolderID)}>\r\n+                    <GrLinkPrevious /></Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index} to=\"\"\r\n+                            onClick={() => {\r\n+                                if (item.folder) {\r\n+                                    setFolderID(item.id);\r\n+                                    setPrevFolderID(item.parentReference.id);\r\n+                                }\r\n+                            }}\r\n+                        >\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711971844871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n                             </Dropdown.Item>\r\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )} */}\r\n-                {prevFolderID !== folderID && <Link onClick={() => AllShareType(prevFolderID)}>\r\n+                {(prevFolderID !== folderID&&prevFolderID) && <Link onClick={() => AllShareType(prevFolderID)}>\r\n                     <GrLinkPrevious /></Link>}\r\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n@@ -181,372 +181,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async (pre) => {\r\n-        try {\r\n-            if (folderID || pre) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, pre ? pre : folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {folderID && <Link onClick={() => AllShareType(prevFolderID)}>\r\n-                    <GrLinkPrevious /></Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => {\r\n-                                if (item.folder) {\r\n-                                    setFolderID(item.id);\r\n-                                    setPrevFolderID(item.parentReference.id);\r\n-                                }\r\n-                            }}\r\n-                        >\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async (pre) => {\r\n-        try {\r\n-            if (folderID || pre) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, pre ? pre : folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    console.log(prevFolderID, folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {folderID&&<Link onClick={() => AllShareType(prevFolderID)}>\r\n-                    <GrLinkPrevious /></Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => {\r\n-                                if (item.folder) {\r\n-                                    setFolderID(item.id);\r\n-                                    setPrevFolderID(item.parentReference.id);\r\n-                                }\r\n-                            }}\r\n-                        >\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711971850879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n                             </Dropdown.Item>\r\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )} */}\r\n-                {(prevFolderID !== folderID&&prevFolderID) && <Link onClick={() => AllShareType(prevFolderID)}>\r\n+                {(prevFolderID !== folderID && prevFolderID) && <Link onClick={() => AllShareType(prevFolderID)}>\r\n                     <GrLinkPrevious /></Link>}\r\n                 {/* List of documents docTypeList */}\r\n                 <div className=\"file-list\">\r\n                     {(docTypeList || []).map((item, index) => (\r\n"
                },
                {
                    "date": 1711972096845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async (pre) => {\r\n+        try {\r\n+            if (folderID || pre) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, pre ? pre : folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    console.log(prevFolderID, folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {folderID && <Link onClick={() => AllShareType(prevFolderID)}>\r\n+                    <GrLinkPrevious /></Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index} to=\"\"\r\n+                            onClick={() => {\r\n+                                if (item.folder) {\r\n+                                    setFolderID(item.id);\r\n+                                    setPrevFolderID(item.parentReference.id);\r\n+                                }\r\n+                            }}\r\n+                        >\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711972194062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID  ) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type,  folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    console.log(prevFolderID, folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {folderID && <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                    <GrLinkPrevious /></Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index} to=\"\"\r\n+                            onClick={() => {\r\n+                                if (item.folder) {\r\n+                                    setFolderID(item.id);\r\n+                                    setPrevFolderID(item.parentReference.id);\r\n+                                }\r\n+                            }}\r\n+                        >\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711972243763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID  ) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type,  folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    console.log(prevFolderID, folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {folderID!==prevFolderID && <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                    <GrLinkPrevious /></Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index} to=\"\"\r\n+                            onClick={() => {\r\n+                                if (item.folder) {\r\n+                                    setFolderID(item.id);\r\n+                                    setPrevFolderID(item.parentReference.id);\r\n+                                }\r\n+                            }}\r\n+                        >\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711972332748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import moment from 'moment';\r\n+import { BsFiletypeDocx } from \"react-icons/bs\";\r\n+import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    console.log(prevFolderID, folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {folderID !== prevFolderID && <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                    <GrLinkPrevious /></Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <div className=\"file-list\">\r\n+                    {(docTypeList || []).map((item, index) => (\r\n+                        <Link className=\"file-item\" key={index} to=\"\"\r\n+                            onClick={() => {\r\n+                                if (item.folder) {\r\n+                                    setFolderID(item.id);\r\n+                                    setPrevFolderID(item.parentReference.id);\r\n+                                }\r\n+                            }}\r\n+                        >\r\n+                            <div className=\"file-background\">\r\n+                                {item.folder && (\r\n+                                    <FaFolder\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#f5b317b0',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n+                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n+                                )}\r\n+                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n+                                    <FaRegFilePdf\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: 'red',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n+                                    <BsFiletypeDocx\r\n+                                        // className=\"file-icon\"\r\n+                                        style={{\r\n+                                            width: '100px',\r\n+                                            height: '100px',\r\n+                                            color: '#2B579A',\r\n+                                        }}\r\n+                                    />\r\n+                                )}\r\n+                                <div className=\"file-content\">\r\n+                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n+                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n+                                </div>\r\n+                            </div>\r\n+                        </Link>\r\n+                    ))}\r\n+                </div>\r\n+\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711972521221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,10 @@\n import React, { useState, useEffect } from 'react';\r\n import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n // import { Dropdown, Form } from 'react-bootstrap';\r\n import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './Document folder/FolderList';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n     const [folderID, setFolderID] = useState('');\r\n@@ -126,795 +124,13 @@\n                 )} */}\r\n                 {folderID !== prevFolderID && <Link onClick={() => setFolderID(prevFolderID)}>\r\n                     <GrLinkPrevious /></Link>}\r\n                 {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => {\r\n-                                if (item.folder) {\r\n-                                    setFolderID(item.id);\r\n-                                    setPrevFolderID(item.parentReference.id);\r\n-                                }\r\n-                            }}\r\n-                        >\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n \r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID  ) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type,  folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    console.log(prevFolderID, folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {folderID!==prevFolderID && <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                    <GrLinkPrevious /></Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => {\r\n-                                if (item.folder) {\r\n-                                    setFolderID(item.id);\r\n-                                    setPrevFolderID(item.parentReference.id);\r\n-                                }\r\n-                            }}\r\n-                        >\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID  ) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type,  folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    console.log(prevFolderID, folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {folderID && <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                    <GrLinkPrevious /></Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => {\r\n-                                if (item.folder) {\r\n-                                    setFolderID(item.id);\r\n-                                    setPrevFolderID(item.parentReference.id);\r\n-                                }\r\n-                            }}\r\n-                        >\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async (pre) => {\r\n-        try {\r\n-            if (folderID || pre) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, pre ? pre : folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    console.log(prevFolderID, folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {folderID && <Link onClick={() => AllShareType(prevFolderID)}>\r\n-                    <GrLinkPrevious /></Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => {\r\n-                                if (item.folder) {\r\n-                                    setFolderID(item.id);\r\n-                                    setPrevFolderID(item.parentReference.id);\r\n-                                }\r\n-                            }}\r\n-                        >\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import moment from 'moment';\r\n-import { BsFiletypeDocx } from \"react-icons/bs\";\r\n-import { FaRegFilePdf, FaFolder } from \"react-icons/fa6\";\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async (pre) => {\r\n-        try {\r\n-            if (folderID || pre) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, pre ? pre : folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {(prevFolderID !== folderID && prevFolderID) && <Link onClick={() => AllShareType(prevFolderID)}>\r\n-                    <GrLinkPrevious /></Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <div className=\"file-list\">\r\n-                    {(docTypeList || []).map((item, index) => (\r\n-                        <Link className=\"file-item\" key={index} to=\"\"\r\n-                            onClick={() => {\r\n-                                if (item.folder) {\r\n-                                    setFolderID(item.id);\r\n-                                    setPrevFolderID(item.parentReference.id);\r\n-                                }\r\n-                            }}\r\n-                        >\r\n-                            <div className=\"file-background\">\r\n-                                {item.folder && (\r\n-                                    <FaFolder\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#f5b317b0',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType.startsWith('image/') && (\r\n-                                    <img src={item['@microsoft.graph.downloadUrl']} alt={item.name} className=\"file-icon\" />\r\n-                                )}\r\n-                                {item.file && item.file.mimeType === 'application/pdf' && (\r\n-                                    <FaRegFilePdf\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: 'red',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                {item.file && (item.file.mimeType === 'application/msword' || item.file.mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (\r\n-                                    <BsFiletypeDocx\r\n-                                        // className=\"file-icon\"\r\n-                                        style={{\r\n-                                            width: '100px',\r\n-                                            height: '100px',\r\n-                                            color: '#2B579A',\r\n-                                        }}\r\n-                                    />\r\n-                                )}\r\n-                                <div className=\"file-content\">\r\n-                                    <p className=\"file-name text-capitalize\">{item.name}</p>\r\n-                                    <p className=\"modified-time\">{moment(item.lastModifiedDateTime).fromNow()}</p>\r\n-                                </div>\r\n-                            </div>\r\n-                        </Link>\r\n-                    ))}\r\n-                </div>\r\n-\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711972588844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,10 @@\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )} */}\r\n                 {folderID !== prevFolderID && <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                    <GrLinkPrevious /></Link>}\r\n+                    <GrLinkPrevious />\r\n+                </Link>}\r\n                 {/* List of documents docTypeList */}\r\n \r\n                 <FolderList\r\n                     docTypeList={docTypeList}\r\n"
                },
                {
                    "date": 1711972609740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import FolderList from './Document folder/FolderList';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    console.log(prevFolderID, folderID)\r\n+    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>}\r\n+                {/* List of documents docTypeList */}\r\n+\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711972797038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n // import { Dropdown, Form } from 'react-bootstrap';\r\n import { Link } from 'react-router-dom';\r\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import {AiOutlineCloudUpload} from \"react-icons/ai\"\r\n import FolderList from './Document folder/FolderList';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n@@ -121,155 +122,34 @@\n                             </Dropdown.Item>\r\n                         </Dropdown.Menu>\r\n                     </Dropdown>\r\n                 )} */}\r\n+                {/* Upload Document button */}\r\n+                <div className=\"\">\r\n+                <label className=\"btn btn-secondary doc_btn\">\r\n+                  <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n+                  <input\r\n+                    type=\"file\"\r\n+                    accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n+                    style={{ display: \"none\" }}\r\n+                    onChange={(e) => {\r\n+                      handleBulkFileChange(e, docTypData.id);\r\n+                      setHide(true);\r\n+                    }}\r\n+                    multiple\r\n+                  />\r\n+                  Upload New Documents\r\n+                </label>\r\n+              </div>\r\n                 {folderID !== prevFolderID &&\r\n                     <Link onClick={() => setFolderID(prevFolderID)}>\r\n                         <GrLinkPrevious />\r\n                     </Link>}\r\n                 {/* List of documents docTypeList */}\r\n-\r\n                 <FolderList\r\n                     docTypeList={docTypeList}\r\n                     setFolderID={setFolderID}\r\n                     setPrevFolderID={setPrevFolderID} />\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import FolderList from './Document folder/FolderList';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-    console.log(prevFolderID, folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {folderID !== prevFolderID && <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                    <GrLinkPrevious />\r\n-                </Link>}\r\n-                {/* List of documents docTypeList */}\r\n-\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1711972914226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,10 +77,87 @@\n     }\r\n     useEffect(() => {\r\n         AllShareType()\r\n     }, [folderID])\r\n-    console.log(prevFolderID, folderID)\r\n-    // const handleDocTypeChange = (selectedType) => {\r\n+/*On change fnction to upload bulk document in 1 array*/\r\n+const handleBulkFileChange = async (event, id) => {\r\n+    const files = event.target.files;\r\n+    if (docTypeName === \"\" && bulkUpload === \"no\") {\r\n+      toast.error(\"Please select Document type!\", {\r\n+        position: toast.POSITION.TOP_RIGHT,\r\n+        autoClose: 1000,\r\n+      });\r\n+    } else {\r\n+      // Check the number of files selected\r\n+      if (files.length > 30) {\r\n+        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        return;\r\n+      }\r\n+\r\n+      // Continue with file validation and processing\r\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+      const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+      // const fileList = [];\r\n+      const filebseList = [];\r\n+      let DocRealName;\r\n+      for (let i = 0; i < files.length; i++) {\r\n+        const file = files[i];\r\n+        // console.log(file)\r\n+        // Check file type\r\n+        const fileType = `.${file.name.split(\".\").pop()}`;\r\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+          toast.error(\r\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Check file size\r\n+        if (file.size > maxSize) {\r\n+          toast.error(\r\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Read file as data URL\r\n+        const reader = new FileReader();\r\n+        reader.readAsDataURL(file);\r\n+        // const encoded = await convertToBase64(file);\r\n+        // const base64Name = encoded.base64;\r\n+\r\n+        // Construct file object with base64 data\r\n+        // const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\r\n+        //   }`;\r\n+\r\n+        // Use DocRealName as the key for DocFile\r\n+        // DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\r\n+        // fileList.push({\r\n+        //   type: docData[0] === docTypData ? docTypData.type : docTypeName,\r\n+        //   docName: DocRealName,\r\n+        //   docUrl: DocFile,\r\n+        // });\r\n+        //For drive uploade\r\n+        filebseList.push(file)\r\n+      }\r\n+      // Store the object of files\r\n+      setDocFileBase(filebseList);\r\n+      bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+      setShowSaveDoc(true);\r\n+    }\r\n+  };    // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n     //         // If \"other\" is selected, clear newType\r\n     //         setNewType('');\r\n@@ -132,9 +209,8 @@\n                     accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n                     style={{ display: \"none\" }}\r\n                     onChange={(e) => {\r\n                       handleBulkFileChange(e, docTypData.id);\r\n-                      setHide(true);\r\n                     }}\r\n                     multiple\r\n                   />\r\n                   Upload New Documents\r\n"
                },
                {
                    "date": 1711973257668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,13 @@\n import FolderList from './Document folder/FolderList';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n     const [folderID, setFolderID] = useState('');\r\n     const [prevFolderID, setPrevFolderID] = useState('');\r\n     const [docTypeList, setDocTypeList] = useState([]);\r\n+    \r\n     // const DocTypeData =\r\n     //     emp_user_type === 'employer'\r\n     //         ? [\r\n     //             'Business T2',\r\n@@ -101,9 +103,9 @@\n       const maxSize = 1024 * 8000; // 8 MB\r\n \r\n       // const fileList = [];\r\n       const filebseList = [];\r\n-      let DocRealName;\r\n+    //   let DocRealName;\r\n       for (let i = 0; i < files.length; i++) {\r\n         const file = files[i];\r\n         // console.log(file)\r\n         // Check file type\r\n@@ -152,10 +154,9 @@\n         filebseList.push(file)\r\n       }\r\n       // Store the object of files\r\n       setDocFileBase(filebseList);\r\n-      bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-      setShowSaveDoc(true);\r\n+    //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n     }\r\n   };    // const handleDocTypeChange = (selectedType) => {\r\n     //     setDocTypeName(selectedType);\r\n     //     if (selectedType === 'other') {\r\n"
                },
                {
                    "date": 1711973281433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n                     type=\"file\"\r\n                     accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n                     style={{ display: \"none\" }}\r\n                     onChange={(e) => {\r\n-                      handleBulkFileChange(e, docTypData.id);\r\n+                      handleBulkFileChange(e);\r\n                     }}\r\n                     multiple\r\n                   />\r\n                   Upload New Documents\r\n"
                },
                {
                    "date": 1711973301191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { Link } from 'react-router-dom';\r\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n import {AiOutlineCloudUpload} from \"react-icons/ai\"\r\n import FolderList from './Document folder/FolderList';\r\n+import { toast } from 'react-toastify';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n     // const [docTypeName, setDocTypeName] = useState('');\r\n     // const [newType, setNewType] = useState('');\r\n     const [docFileBase, setDocFileBase] = useState('');\r\n"
                },
                {
                    "date": 1711973332675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,10 @@\n     }, [folderID])\r\n /*On change fnction to upload bulk document in 1 array*/\r\n const handleBulkFileChange = async (event, id) => {\r\n     const files = event.target.files;\r\n-    if (docTypeName === \"\" && bulkUpload === \"no\") {\r\n+    // if (docTypeName === \"\" && bulkUpload === \"no\")\r\n+     {\r\n       toast.error(\"Please select Document type!\", {\r\n         position: toast.POSITION.TOP_RIGHT,\r\n         autoClose: 1000,\r\n       });\r\n"
                },
                {
                    "date": 1711973337957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,234 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import { AiOutlineCloudUpload } from \"react-icons/ai\"\r\n+import FolderList from './Document folder/FolderList';\r\n+import { toast } from 'react-toastify';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+\r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+    /*On change fnction to upload bulk document in 1 array*/\r\n+    const handleBulkFileChange = async (event, id) => {\r\n+        const files = event.target.files;\r\n+        // if (docTypeName === \"\" && bulkUpload === \"no\")\r\n+        {\r\n+            toast.error(\"Please select Document type!\", {\r\n+                position: toast.POSITION.TOP_RIGHT,\r\n+                autoClose: 1000,\r\n+            });\r\n+        } else {\r\n+            // Check the number of files selected\r\n+            if (files.length > 30) {\r\n+                toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+                    position: toast.POSITION.TOP_RIGHT,\r\n+                    autoClose: 1000,\r\n+                });\r\n+                return;\r\n+            }\r\n+\r\n+            // Continue with file validation and processing\r\n+            const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+            const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+            // const fileList = [];\r\n+            const filebseList = [];\r\n+            //   let DocRealName;\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const file = files[i];\r\n+                // console.log(file)\r\n+                // Check file type\r\n+                const fileType = `.${file.name.split(\".\").pop()}`;\r\n+                if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+                    toast.error(\r\n+                        `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Check file size\r\n+                if (file.size > maxSize) {\r\n+                    toast.error(\r\n+                        `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+                        {\r\n+                            position: toast.POSITION.TOP_RIGHT,\r\n+                            autoClose: 1000,\r\n+                        }\r\n+                    );\r\n+                    return;\r\n+                }\r\n+\r\n+                // Read file as data URL\r\n+                const reader = new FileReader();\r\n+                reader.readAsDataURL(file);\r\n+                // const encoded = await convertToBase64(file);\r\n+                // const base64Name = encoded.base64;\r\n+\r\n+                // Construct file object with base64 data\r\n+                // const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\r\n+                //   }`;\r\n+\r\n+                // Use DocRealName as the key for DocFile\r\n+                // DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\r\n+                // fileList.push({\r\n+                //   type: docData[0] === docTypData ? docTypData.type : docTypeName,\r\n+                //   docName: DocRealName,\r\n+                //   docUrl: DocFile,\r\n+                // });\r\n+                //For drive uploade\r\n+                filebseList.push(file)\r\n+            }\r\n+            // Store the object of files\r\n+            setDocFileBase(filebseList);\r\n+            //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+        }\r\n+    };    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* Upload Document button */}\r\n+                <div className=\"\">\r\n+                    <label className=\"btn btn-secondary doc_btn\">\r\n+                        <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n+                        <input\r\n+                            type=\"file\"\r\n+                            accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n+                            style={{ display: \"none\" }}\r\n+                            onChange={(e) => {\r\n+                                handleBulkFileChange(e);\r\n+                            }}\r\n+                            multiple\r\n+                        />\r\n+                        Upload New Documents\r\n+                    </label>\r\n+                </div>\r\n+                {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711973407969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,235 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import {AiOutlineCloudUpload} from \"react-icons/ai\"\r\n+import FolderList from './Document folder/FolderList';\r\n+import { toast } from 'react-toastify';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    \r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+/*On change fnction to upload bulk document in 1 array*/\r\n+const handleBulkFileChange = async (event, id) => {\r\n+    const files = event.target.files;\r\n+    // if (docTypeName === \"\" && bulkUpload === \"no\")\r\n+    //  {\r\n+    //   toast.error(\"Please select Document type!\", {\r\n+    //     position: toast.POSITION.TOP_RIGHT,\r\n+    //     autoClose: 1000,\r\n+    //   });\r\n+    // } else\r\n+     {\r\n+      // Check the number of files selected\r\n+      if (files.length > 30) {\r\n+        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        return;\r\n+      }\r\n+\r\n+      // Continue with file validation and processing\r\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+      const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+      // const fileList = [];\r\n+      const filebseList = [];\r\n+    //   let DocRealName;\r\n+      for (let i = 0; i < files.length; i++) {\r\n+        const file = files[i];\r\n+        // console.log(file)\r\n+        // Check file type\r\n+        const fileType = `.${file.name.split(\".\").pop()}`;\r\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+          toast.error(\r\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Check file size\r\n+        if (file.size > maxSize) {\r\n+          toast.error(\r\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Read file as data URL\r\n+        const reader = new FileReader();\r\n+        reader.readAsDataURL(file);\r\n+        // const encoded = await convertToBase64(file);\r\n+        // const base64Name = encoded.base64;\r\n+\r\n+        // Construct file object with base64 data\r\n+        // const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\r\n+        //   }`;\r\n+\r\n+        // Use DocRealName as the key for DocFile\r\n+        // DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\r\n+        // fileList.push({\r\n+        //   type: docData[0] === docTypData ? docTypData.type : docTypeName,\r\n+        //   docName: DocRealName,\r\n+        //   docUrl: DocFile,\r\n+        // });\r\n+        //For drive uploade\r\n+        filebseList.push(file)\r\n+      }\r\n+      // Store the object of files\r\n+      setDocFileBase(filebseList);\r\n+    //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+    }\r\n+  };    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* Upload Document button */}\r\n+                <div className=\"\">\r\n+                <label className=\"btn btn-secondary doc_btn\">\r\n+                  <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n+                  <input\r\n+                    type=\"file\"\r\n+                    accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n+                    style={{ display: \"none\" }}\r\n+                    onChange={(e) => {\r\n+                      handleBulkFileChange(e);\r\n+                    }}\r\n+                    multiple\r\n+                  />\r\n+                  Upload New Documents\r\n+                </label>\r\n+              </div>\r\n+                {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711973450202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,235 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n+// import { Dropdown, Form } from 'react-bootstrap';\r\n+import { Link } from 'react-router-dom';\r\n+import { GrLinkPrevious } from \"react-icons/gr\";\r\n+import {AiOutlineCloudUpload} from \"react-icons/ai\"\r\n+import FolderList from './Document folder/FolderList';\r\n+import { toast } from 'react-toastify';\r\n+export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n+    // const [docTypeName, setDocTypeName] = useState('');\r\n+    // const [newType, setNewType] = useState('');\r\n+    const [docFileBase, setDocFileBase] = useState('');\r\n+    const [folderID, setFolderID] = useState('');\r\n+    const [prevFolderID, setPrevFolderID] = useState('');\r\n+    const [docTypeList, setDocTypeList] = useState([]);\r\n+    \r\n+    // const DocTypeData =\r\n+    //     emp_user_type === 'employer'\r\n+    //         ? [\r\n+    //             'Business T2',\r\n+    //             'Recent PD7A',\r\n+    //             'Business T4',\r\n+    //             'Business Incorporation Certificate',\r\n+    //             'Employment Contract',\r\n+    //             'Schedule A',\r\n+    //             'Signed Job Offer',\r\n+    //             'PD7A of year',\r\n+    //             'T2 Schedule 100 and 125',\r\n+    //             'Certificate of incorporation',\r\n+    //             'Business license',\r\n+    //             'T4 summary of year',\r\n+    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n+    //             'CPA Attestation Letter',\r\n+    //             'Representative Submission Letter',\r\n+    //         ]\r\n+    //         : [\r\n+    //             'passport',\r\n+    //             'drivers_license',\r\n+    //             'photograph',\r\n+    //             'immigration_status',\r\n+    //             'lmia',\r\n+    //             'job_offer_letter',\r\n+    //             'provincial_nominee_letter',\r\n+    //             'proof_of_funds',\r\n+    //             'proof_of_employment',\r\n+    //             'marriage_certificate',\r\n+    //             'education_metric',\r\n+    //             'education_higher_secondary',\r\n+    //             'education_graduation',\r\n+    //             'education_post_graduation',\r\n+    //             'resume_or_cv',\r\n+    //             'ielts',\r\n+    //             'medical',\r\n+    //             'police_clearance',\r\n+    //             'refusal_letter',\r\n+    //             'Employment Contract',\r\n+    //             'Reference Letters',\r\n+    //             'Client Info',\r\n+    //             'Representative Submission Letter',\r\n+    //             'Bank Statement',\r\n+    //         ];\r\n+    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n+    const AllShareType = async () => {\r\n+        try {\r\n+            if (folderID) {\r\n+                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+\r\n+                }\r\n+            } else {\r\n+                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n+                if (res.data.status === 1) {\r\n+                    setDocTypeList(res.data.data)\r\n+                }\r\n+            }\r\n+        } catch (Err) {\r\n+            console.log(Err)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        AllShareType()\r\n+    }, [folderID])\r\n+/*On change fnction to upload bulk document in 1 array*/\r\n+const handleBulkFileChange = async (event, id) => {\r\n+    const files = event.target.files;\r\n+    // if (docTypeName === \"\" && bulkUpload === \"no\")\r\n+    //  {\r\n+    //   toast.error(\"Please select Document type!\", {\r\n+    //     position: toast.POSITION.TOP_RIGHT,\r\n+    //     autoClose: 1000,\r\n+    //   });\r\n+    // } else\r\n+     {\r\n+      // Check the number of files selected\r\n+      if (files.length > 30) {\r\n+        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n+          position: toast.POSITION.TOP_RIGHT,\r\n+          autoClose: 1000,\r\n+        });\r\n+        return;\r\n+      }\r\n+\r\n+      // Continue with file validation and processing\r\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n+      const maxSize = 1024 * 8000; // 8 MB\r\n+\r\n+      // const fileList = [];\r\n+      const filebseList = [];\r\n+    //   let DocRealName;\r\n+      for (let i = 0; i < files.length; i++) {\r\n+        const file = files[i];\r\n+        // console.log(file)\r\n+        // Check file type\r\n+        const fileType = `.${file.name.split(\".\").pop()}`;\r\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n+          toast.error(\r\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Check file size\r\n+        if (file.size > maxSize) {\r\n+          toast.error(\r\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n+            {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            }\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        // Read file as data URL\r\n+        const reader = new FileReader();\r\n+        reader.readAsDataURL(file);\r\n+        // const encoded = await convertToBase64(file);\r\n+        // const base64Name = encoded.base64;\r\n+\r\n+        // Construct file object with base64 data\r\n+        // const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\r\n+        //   }`;\r\n+\r\n+        // Use DocRealName as the key for DocFile\r\n+        // DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\r\n+        // fileList.push({\r\n+        //   type: docData[0] === docTypData ? docTypData.type : docTypeName,\r\n+        //   docName: DocRealName,\r\n+        //   docUrl: DocFile,\r\n+        // });\r\n+        //For drive uploade\r\n+        filebseList.push(file)\r\n+      }\r\n+      // Store the object of files\r\n+      setDocFileBase(filebseList);\r\n+    //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n+    }\r\n+  };    // const handleDocTypeChange = (selectedType) => {\r\n+    //     setDocTypeName(selectedType);\r\n+    //     if (selectedType === 'other') {\r\n+    //         // If \"other\" is selected, clear newType\r\n+    //         setNewType('');\r\n+    //     }\r\n+    // };\r\n+\r\n+    // const handleNewTypeChange = (e) => {\r\n+    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n+    //     setNewType(value);\r\n+    // };\r\n+console.log(docFileBase)\r\n+    return (\r\n+        <div className={'document_container bg-white'}>\r\n+            <div className=\"row m-0 bg-white\">\r\n+                {/* Button to add folder or type and upload documents */}\r\n+                {/* {docTypeName === 'other' ? (\r\n+                    <Form.Control\r\n+                        type=\"text\"\r\n+                        value={newType}\r\n+                        placeholder=\"Enter new type\"\r\n+                        onChange={handleNewTypeChange}\r\n+                    />\r\n+                ) : (\r\n+                    <Dropdown>\r\n+                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n+                            + Add New type\r\n+                        </Dropdown.Toggle>\r\n+                        <Dropdown.Menu>\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n+                                Select document\r\n+                            </Dropdown.Item>\r\n+                            {DocTypeData.map((item, index) => (\r\n+                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n+                                    {item.replaceAll(\"_\", \" \")}\r\n+                                </Dropdown.Item>\r\n+                            ))}\r\n+                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n+                                Other\r\n+                            </Dropdown.Item>\r\n+                        </Dropdown.Menu>\r\n+                    </Dropdown>\r\n+                )} */}\r\n+                {/* Upload Document button */}\r\n+                <div className=\"\">\r\n+                <label className=\"btn btn-secondary doc_btn\">\r\n+                  <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n+                  <input\r\n+                    type=\"file\"\r\n+                    accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n+                    style={{ display: \"none\" }}\r\n+                    onChange={(e) => {\r\n+                      handleBulkFileChange(e);\r\n+                    }}\r\n+                    multiple\r\n+                  />\r\n+                  Upload New Documents\r\n+                </label>\r\n+              </div>\r\n+                {folderID !== prevFolderID &&\r\n+                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n+                        <GrLinkPrevious />\r\n+                    </Link>}\r\n+                {/* List of documents docTypeList */}\r\n+                <FolderList\r\n+                    docTypeList={docTypeList}\r\n+                    setFolderID={setFolderID}\r\n+                    setPrevFolderID={setPrevFolderID} />\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1711973565042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,478 +2,8 @@\n import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n // import { Dropdown, Form } from 'react-bootstrap';\r\n import { Link } from 'react-router-dom';\r\n import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import {AiOutlineCloudUpload} from \"react-icons/ai\"\r\n-import FolderList from './Document folder/FolderList';\r\n-import { toast } from 'react-toastify';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    \r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-/*On change fnction to upload bulk document in 1 array*/\r\n-const handleBulkFileChange = async (event, id) => {\r\n-    const files = event.target.files;\r\n-    // if (docTypeName === \"\" && bulkUpload === \"no\")\r\n-    //  {\r\n-    //   toast.error(\"Please select Document type!\", {\r\n-    //     position: toast.POSITION.TOP_RIGHT,\r\n-    //     autoClose: 1000,\r\n-    //   });\r\n-    // } else\r\n-     {\r\n-      // Check the number of files selected\r\n-      if (files.length > 30) {\r\n-        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-          position: toast.POSITION.TOP_RIGHT,\r\n-          autoClose: 1000,\r\n-        });\r\n-        return;\r\n-      }\r\n-\r\n-      // Continue with file validation and processing\r\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-      const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-      // const fileList = [];\r\n-      const filebseList = [];\r\n-    //   let DocRealName;\r\n-      for (let i = 0; i < files.length; i++) {\r\n-        const file = files[i];\r\n-        // console.log(file)\r\n-        // Check file type\r\n-        const fileType = `.${file.name.split(\".\").pop()}`;\r\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-          toast.error(\r\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-            {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            }\r\n-          );\r\n-          return;\r\n-        }\r\n-\r\n-        // Check file size\r\n-        if (file.size > maxSize) {\r\n-          toast.error(\r\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-            {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            }\r\n-          );\r\n-          return;\r\n-        }\r\n-\r\n-        // Read file as data URL\r\n-        const reader = new FileReader();\r\n-        reader.readAsDataURL(file);\r\n-        // const encoded = await convertToBase64(file);\r\n-        // const base64Name = encoded.base64;\r\n-\r\n-        // Construct file object with base64 data\r\n-        // const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\r\n-        //   }`;\r\n-\r\n-        // Use DocRealName as the key for DocFile\r\n-        // DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\r\n-        // fileList.push({\r\n-        //   type: docData[0] === docTypData ? docTypData.type : docTypeName,\r\n-        //   docName: DocRealName,\r\n-        //   docUrl: DocFile,\r\n-        // });\r\n-        //For drive uploade\r\n-        filebseList.push(file)\r\n-      }\r\n-      // Store the object of files\r\n-      setDocFileBase(filebseList);\r\n-    //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-    }\r\n-  };    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-console.log(docFileBase)\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* Upload Document button */}\r\n-                <div className=\"\">\r\n-                <label className=\"btn btn-secondary doc_btn\">\r\n-                  <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n-                  <input\r\n-                    type=\"file\"\r\n-                    accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n-                    style={{ display: \"none\" }}\r\n-                    onChange={(e) => {\r\n-                      handleBulkFileChange(e);\r\n-                    }}\r\n-                    multiple\r\n-                  />\r\n-                  Upload New Documents\r\n-                </label>\r\n-              </div>\r\n-                {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import {AiOutlineCloudUpload} from \"react-icons/ai\"\r\n-import FolderList from './Document folder/FolderList';\r\n-import { toast } from 'react-toastify';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    \r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-/*On change fnction to upload bulk document in 1 array*/\r\n-const handleBulkFileChange = async (event, id) => {\r\n-    const files = event.target.files;\r\n-    // if (docTypeName === \"\" && bulkUpload === \"no\")\r\n-    //  {\r\n-    //   toast.error(\"Please select Document type!\", {\r\n-    //     position: toast.POSITION.TOP_RIGHT,\r\n-    //     autoClose: 1000,\r\n-    //   });\r\n-    // } else\r\n-     {\r\n-      // Check the number of files selected\r\n-      if (files.length > 30) {\r\n-        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-          position: toast.POSITION.TOP_RIGHT,\r\n-          autoClose: 1000,\r\n-        });\r\n-        return;\r\n-      }\r\n-\r\n-      // Continue with file validation and processing\r\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-      const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-      // const fileList = [];\r\n-      const filebseList = [];\r\n-    //   let DocRealName;\r\n-      for (let i = 0; i < files.length; i++) {\r\n-        const file = files[i];\r\n-        // console.log(file)\r\n-        // Check file type\r\n-        const fileType = `.${file.name.split(\".\").pop()}`;\r\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-          toast.error(\r\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-            {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            }\r\n-          );\r\n-          return;\r\n-        }\r\n-\r\n-        // Check file size\r\n-        if (file.size > maxSize) {\r\n-          toast.error(\r\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-            {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            }\r\n-          );\r\n-          return;\r\n-        }\r\n-\r\n-        // Read file as data URL\r\n-        const reader = new FileReader();\r\n-        reader.readAsDataURL(file);\r\n-        // const encoded = await convertToBase64(file);\r\n-        // const base64Name = encoded.base64;\r\n-\r\n-        // Construct file object with base64 data\r\n-        // const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\r\n-        //   }`;\r\n-\r\n-        // Use DocRealName as the key for DocFile\r\n-        // DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\r\n-        // fileList.push({\r\n-        //   type: docData[0] === docTypData ? docTypData.type : docTypeName,\r\n-        //   docName: DocRealName,\r\n-        //   docUrl: DocFile,\r\n-        // });\r\n-        //For drive uploade\r\n-        filebseList.push(file)\r\n-      }\r\n-      // Store the object of files\r\n-      setDocFileBase(filebseList);\r\n-    //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-    }\r\n-  };    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* Upload Document button */}\r\n-                <div className=\"\">\r\n-                <label className=\"btn btn-secondary doc_btn\">\r\n-                  <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n-                  <input\r\n-                    type=\"file\"\r\n-                    accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n-                    style={{ display: \"none\" }}\r\n-                    onChange={(e) => {\r\n-                      handleBulkFileChange(e);\r\n-                    }}\r\n-                    multiple\r\n-                  />\r\n-                  Upload New Documents\r\n-                </label>\r\n-              </div>\r\n-                {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n import { AiOutlineCloudUpload } from \"react-icons/ai\"\r\n import FolderList from './Document folder/FolderList';\r\n import { toast } from 'react-toastify';\r\n export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n@@ -535,9 +65,9 @@\n             if (folderID) {\r\n                 let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n                 if (res.data.status === 1) {\r\n                     setDocTypeList(res.data.data)\r\n-\r\n+                    setFolderID(res.data.data[0].parentReference.id)\r\n                 }\r\n             } else {\r\n                 let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n                 if (res.data.status === 1) {\r\n@@ -554,14 +84,15 @@\n     /*On change fnction to upload bulk document in 1 array*/\r\n     const handleBulkFileChange = async (event, id) => {\r\n         const files = event.target.files;\r\n         // if (docTypeName === \"\" && bulkUpload === \"no\")\r\n+        //  {\r\n+        //   toast.error(\"Please select Document type!\", {\r\n+        //     position: toast.POSITION.TOP_RIGHT,\r\n+        //     autoClose: 1000,\r\n+        //   });\r\n+        // } else\r\n         {\r\n-            toast.error(\"Please select Document type!\", {\r\n-                position: toast.POSITION.TOP_RIGHT,\r\n-                autoClose: 1000,\r\n-            });\r\n-        } else {\r\n             // Check the number of files selected\r\n             if (files.length > 30) {\r\n                 toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n                     position: toast.POSITION.TOP_RIGHT,\r\n@@ -640,9 +171,9 @@\n     // const handleNewTypeChange = (e) => {\r\n     //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n     //     setNewType(value);\r\n     // };\r\n-\r\n+    console.log(docFileBase)\r\n     return (\r\n         <div className={'document_container bg-white'}>\r\n             <div className=\"row m-0 bg-white\">\r\n                 {/* Button to add folder or type and upload documents */}\r\n@@ -701,238 +232,4 @@\n             </div>\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { getSharePointFoldersList, getSharePointParticularFolders } from '../../api/api';\r\n-// import { Dropdown, Form } from 'react-bootstrap';\r\n-import { Link } from 'react-router-dom';\r\n-import { GrLinkPrevious } from \"react-icons/gr\";\r\n-import {AiOutlineCloudUpload} from \"react-icons/ai\"\r\n-import FolderList from './Document folder/FolderList';\r\n-import { toast } from 'react-toastify';\r\n-export default function SharePointDocument({ emp_user_type, employee_id }) {\r\n-    // const [docTypeName, setDocTypeName] = useState('');\r\n-    // const [newType, setNewType] = useState('');\r\n-    const [docFileBase, setDocFileBase] = useState('');\r\n-    const [folderID, setFolderID] = useState('');\r\n-    const [prevFolderID, setPrevFolderID] = useState('');\r\n-    const [docTypeList, setDocTypeList] = useState([]);\r\n-    \r\n-    // const DocTypeData =\r\n-    //     emp_user_type === 'employer'\r\n-    //         ? [\r\n-    //             'Business T2',\r\n-    //             'Recent PD7A',\r\n-    //             'Business T4',\r\n-    //             'Business Incorporation Certificate',\r\n-    //             'Employment Contract',\r\n-    //             'Schedule A',\r\n-    //             'Signed Job Offer',\r\n-    //             'PD7A of year',\r\n-    //             'T2 Schedule 100 and 125',\r\n-    //             'Certificate of incorporation',\r\n-    //             'Business license',\r\n-    //             'T4 summary of year',\r\n-    //             'Request for Exception from English Language Requirement for LMIA Application',\r\n-    //             'CPA Attestation Letter',\r\n-    //             'Representative Submission Letter',\r\n-    //         ]\r\n-    //         : [\r\n-    //             'passport',\r\n-    //             'drivers_license',\r\n-    //             'photograph',\r\n-    //             'immigration_status',\r\n-    //             'lmia',\r\n-    //             'job_offer_letter',\r\n-    //             'provincial_nominee_letter',\r\n-    //             'proof_of_funds',\r\n-    //             'proof_of_employment',\r\n-    //             'marriage_certificate',\r\n-    //             'education_metric',\r\n-    //             'education_higher_secondary',\r\n-    //             'education_graduation',\r\n-    //             'education_post_graduation',\r\n-    //             'resume_or_cv',\r\n-    //             'ielts',\r\n-    //             'medical',\r\n-    //             'police_clearance',\r\n-    //             'refusal_letter',\r\n-    //             'Employment Contract',\r\n-    //             'Reference Letters',\r\n-    //             'Client Info',\r\n-    //             'Representative Submission Letter',\r\n-    //             'Bank Statement',\r\n-    //         ];\r\n-    /*Function to call api to get all folders list of employees documnet from sharepoint */\r\n-    const AllShareType = async () => {\r\n-        try {\r\n-            if (folderID) {\r\n-                let res = await getSharePointParticularFolders(employee_id, emp_user_type, folderID)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-\r\n-                }\r\n-            } else {\r\n-                let res = await getSharePointFoldersList(employee_id, emp_user_type)\r\n-                if (res.data.status === 1) {\r\n-                    setDocTypeList(res.data.data)\r\n-                }\r\n-            }\r\n-        } catch (Err) {\r\n-            console.log(Err)\r\n-        }\r\n-    }\r\n-    useEffect(() => {\r\n-        AllShareType()\r\n-    }, [folderID])\r\n-/*On change fnction to upload bulk document in 1 array*/\r\n-const handleBulkFileChange = async (event, id) => {\r\n-    const files = event.target.files;\r\n-    // if (docTypeName === \"\" && bulkUpload === \"no\")\r\n-     {\r\n-      toast.error(\"Please select Document type!\", {\r\n-        position: toast.POSITION.TOP_RIGHT,\r\n-        autoClose: 1000,\r\n-      });\r\n-    } else {\r\n-      // Check the number of files selected\r\n-      if (files.length > 30) {\r\n-        toast.error(\"You can only upload a maximum of 30 files at a time\", {\r\n-          position: toast.POSITION.TOP_RIGHT,\r\n-          autoClose: 1000,\r\n-        });\r\n-        return;\r\n-      }\r\n-\r\n-      // Continue with file validation and processing\r\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n-      const maxSize = 1024 * 8000; // 8 MB\r\n-\r\n-      // const fileList = [];\r\n-      const filebseList = [];\r\n-    //   let DocRealName;\r\n-      for (let i = 0; i < files.length; i++) {\r\n-        const file = files[i];\r\n-        // console.log(file)\r\n-        // Check file type\r\n-        const fileType = `.${file.name.split(\".\").pop()}`;\r\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n-          toast.error(\r\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n-            {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            }\r\n-          );\r\n-          return;\r\n-        }\r\n-\r\n-        // Check file size\r\n-        if (file.size > maxSize) {\r\n-          toast.error(\r\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\r\n-            {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            }\r\n-          );\r\n-          return;\r\n-        }\r\n-\r\n-        // Read file as data URL\r\n-        const reader = new FileReader();\r\n-        reader.readAsDataURL(file);\r\n-        // const encoded = await convertToBase64(file);\r\n-        // const base64Name = encoded.base64;\r\n-\r\n-        // Construct file object with base64 data\r\n-        // const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\r\n-        //   }`;\r\n-\r\n-        // Use DocRealName as the key for DocFile\r\n-        // DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\r\n-        // fileList.push({\r\n-        //   type: docData[0] === docTypData ? docTypData.type : docTypeName,\r\n-        //   docName: DocRealName,\r\n-        //   docUrl: DocFile,\r\n-        // });\r\n-        //For drive uploade\r\n-        filebseList.push(file)\r\n-      }\r\n-      // Store the object of files\r\n-      setDocFileBase(filebseList);\r\n-    //   bulkUpload === \"no\" ? setDocName(DocRealName) : setDocName(\"\");\r\n-    }\r\n-  };    // const handleDocTypeChange = (selectedType) => {\r\n-    //     setDocTypeName(selectedType);\r\n-    //     if (selectedType === 'other') {\r\n-    //         // If \"other\" is selected, clear newType\r\n-    //         setNewType('');\r\n-    //     }\r\n-    // };\r\n-\r\n-    // const handleNewTypeChange = (e) => {\r\n-    //     const value = e.target.value.replace(/[^a-zA-Z0-9 ]/g, '');\r\n-    //     setNewType(value);\r\n-    // };\r\n-\r\n-    return (\r\n-        <div className={'document_container bg-white'}>\r\n-            <div className=\"row m-0 bg-white\">\r\n-                {/* Button to add folder or type and upload documents */}\r\n-                {/* {docTypeName === 'other' ? (\r\n-                    <Form.Control\r\n-                        type=\"text\"\r\n-                        value={newType}\r\n-                        placeholder=\"Enter new type\"\r\n-                        onChange={handleNewTypeChange}\r\n-                    />\r\n-                ) : (\r\n-                    <Dropdown>\r\n-                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n-                            + Add New type\r\n-                        </Dropdown.Toggle>\r\n-                        <Dropdown.Menu>\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('')} key={-1}>\r\n-                                Select document\r\n-                            </Dropdown.Item>\r\n-                            {DocTypeData.map((item, index) => (\r\n-                                <Dropdown.Item onClick={() => handleDocTypeChange(item)} key={index} className='text-capitalize'>\r\n-                                    {item.replaceAll(\"_\", \" \")}\r\n-                                </Dropdown.Item>\r\n-                            ))}\r\n-                            <Dropdown.Item onClick={() => handleDocTypeChange('other')}>\r\n-                                Other\r\n-                            </Dropdown.Item>\r\n-                        </Dropdown.Menu>\r\n-                    </Dropdown>\r\n-                )} */}\r\n-                {/* Upload Document button */}\r\n-                <div className=\"\">\r\n-                <label className=\"btn btn-secondary doc_btn\">\r\n-                  <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n-                  <input\r\n-                    type=\"file\"\r\n-                    accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n-                    style={{ display: \"none\" }}\r\n-                    onChange={(e) => {\r\n-                      handleBulkFileChange(e);\r\n-                    }}\r\n-                    multiple\r\n-                  />\r\n-                  Upload New Documents\r\n-                </label>\r\n-              </div>\r\n-                {folderID !== prevFolderID &&\r\n-                    <Link onClick={() => setFolderID(prevFolderID)}>\r\n-                        <GrLinkPrevious />\r\n-                    </Link>}\r\n-                {/* List of documents docTypeList */}\r\n-                <FolderList\r\n-                    docTypeList={docTypeList}\r\n-                    setFolderID={setFolderID}\r\n-                    setPrevFolderID={setPrevFolderID} />\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-}\r\n"
                }
            ],
            "date": 1711951321214,
            "name": "Commit-0",
            "content": "import React from 'react'\r\n\r\nexport default function SharePointDocument() {\r\n    return (\r\n        <div\r\n            className={\r\n                \"document_container bg-white\"}\r\n        >\r\n            <div className=\"row m-0 bg-white\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"
        }
    ]
}