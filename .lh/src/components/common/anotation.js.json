{
    "sourceFile": "src/components/common/anotation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1709528741696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709529044873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,642 @@\n+// import React, { useState, useEffect } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+\n+// /**\n+//  * Component for text annotation and image annotation.\n+//  */\n+// const Annotation = () => {\n+//   //  Annotation State\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+\n+//   // Handle mouse down event to set current annotation for image annotation\n+//   const handleMouseDown = (e) => {\n+//     if (isAnnotationMode) {\n+//       const imageRect = e.target.getBoundingClientRect();\n+//       setCurrentAnnotation({\n+//         x: e.clientX - imageRect.left,\n+//         y: e.clientY - imageRect.top,\n+//       });\n+//     }\n+//   };\n+\n+//   // Handle mouse up event to save the current annotation for image annotation\n+//   const handleMouseUp = () => {\n+//     if (isAnnotationMode) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   };\n+\n+//   // Toggle annotation mode for image annotation\n+//   const toggleAnnotationMode = () => {\n+//     setAnnotationMode(!isAnnotationMode);\n+//     setSelectedAnnotation(null);\n+//   };\n+\n+//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Generate a list of comments from the state for image annotation\n+//   const getCommentsList = () => {\n+//     const commentsList = [];\n+//     for (const key in comments) {\n+//       if (comments.hasOwnProperty(key)) {\n+//         commentsList.push({ coordinates: key, comment: comments[key] });\n+//       }\n+//     }\n+//     return commentsList;\n+//   };\n+\n+//   // Effect to add the current annotation to the annotations array for image annotation\n+//   useEffect(() => {\n+//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   }, [currentAnnotation]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <img\n+//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n+//           alt=\"Annotated Image\"\n+//           style={{ height: \"50%\", width: \"50%\" }}\n+//           onMouseDown={handleMouseDown}\n+//           onMouseUp={handleMouseUp}\n+//         />\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <button onClick={toggleAnnotationMode}>\n+//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n+//           </button>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {getCommentsList().map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState, useEffect, useRef } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+// import FileViewer from \"react-file-viewer\";\n+// import { MdAddComment } from \"react-icons/md\";\n+// import { FcCancel } from \"react-icons/fc\";\n+// import { Link } from \"react-router-dom\";\n+// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n+\n+// const Annotation = () => {\n+//   // State for image annotations, comments, selected annotation, and annotation mode\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+//   const [assignments, setAssignments] = useState([]);\n+\n+//   const fileViewerRef = useRef(null);\n+\n+//   // Function to handle click events on the FileViewer to capture annotations\n+//   const handleFileViewerClick = (e) => {\n+//     if (isAnnotationMode) {\n+//       const rect = fileViewerRef.current.getBoundingClientRect();\n+//       const x = e.clientX - rect.left;\n+//       const y = e.clientY - rect.top;\n+\n+//       // Add annotation\n+//       addAnnotation({ x, y });\n+//     }\n+//   };\n+\n+//   // Function to add annotation based on conditions\n+//   const addAnnotation = ({ x, y }) => {\n+//     // Retrieve data from local storage\n+//     const id = localStorage.getItem(\"adminId\");\n+//     const docId = 111; //props.docId;\n+//     const assignedUserId = id;\n+//     const email = isEmailConditionMet() ? comments : null;\n+//     const subject = \"\";\n+//     const comment = isEmailConditionMet() ? null : comments;\n+\n+//     // Perform any other conditions or checks required for adding annotations\n+\n+//     // Send data to the API\n+//     let res = ADocAnnotation(\n+//       id,\n+//       docId,\n+//       assignedUserId,\n+//       email,\n+//       subject,\n+//       comment,\n+//       x,\n+//       y\n+//     );\n+//     console.log(res);\n+//     // Update state to include the new annotation\n+//     setImageAnnotations([...imageAnnotations, { x, y }]);\n+//   };\n+\n+//   // Function to check if the email condition is met\n+//   const isEmailConditionMet = (comment) => {\n+//     // Regular expression to match a simple email format\n+//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n+\n+//     // Trim the comment and check if it starts with \"@\" and matches the email format\n+//     return (\n+//       comment.trim().startsWith(\"@\") &&\n+//       emailRegex.test(comment.trim().substring(1))\n+//     );\n+//   };\n+\n+//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Function to get comments and assignments from the API\n+//   const getCommentsAndAssign = () => {\n+//     GetCommentsAndAssign()\n+//       .then((response) => {\n+//         // Handle successful API response\n+//         console.log(\"Comments and Assignments:\", response);\n+//         // Update the state with comments and assignments\n+//         setAssignments(response.assignments);\n+//         setComments(response.comments);\n+//       })\n+//       .catch((error) => {\n+//         // Handle API error\n+//         console.error(\"Error getting comments and assignments:\", error);\n+//       });\n+//   };\n+\n+//   // Effect to clear selected annotation when the annotation mode is toggled\n+//   useEffect(() => {\n+//     setSelectedAnnotation(null);\n+//     // Fetch comments and assignments when the component mounts\n+//     getCommentsAndAssign();\n+//   }, [isAnnotationMode]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <div className=\"d-flex justify-content-center\">\n+//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n+//             <FileViewer\n+//               alt=\"Annotated Image\"\n+//               style={{\n+//                 height: \"100%\",\n+//                 width: \"100%\",\n+//                 position: \"relative\",\n+//                 overflow: \"scroll\",\n+//               }}\n+//               fileType={\"png\"}\n+//               filePath={\n+//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n+//               }\n+//               errorComponent={() => <div>Error loading document</div>}\n+//             />\n+//           </di>\n+//           <Link\n+//             className={`btn-sm mt-7 ${\n+//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n+//             }`}\n+//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n+//           >\n+//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n+//           </Link>\n+//         </div>\n+//         {isAnnotationMode && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               top: 0,\n+//               left: 0,\n+//               width: \"100%\",\n+//               height: \"100%\",\n+//               pointerEvents: \"none\",\n+//             }}\n+//           />\n+//         )}\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {/* {(comments || []).map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))} */}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const adminEmails = [\n+//     \"admin1@example.com\",\n+//     \"admin2@example.com\",\n+//     \"admin3@example.com\",\n+//   ];\n+//   const [inputValue, setInputValue] = useState(\"\");\n+//   const [filteredEmails, setFilteredEmails] = useState([]);\n+\n+//   const handleInputChange = (event) => {\n+//     const value = event.target.value;\n+\n+//     // Check if the input starts with '@'\n+//     if (value.startsWith(\"@\")) {\n+//       // Filter admin emails based on input\n+//       const filteredAdminEmails = adminEmails.filter((email) =>\n+//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n+//       );\n+\n+//       // Update the filtered emails\n+//       setFilteredEmails(filteredAdminEmails);\n+//     } else {\n+//       // Reset filtered emails if input doesn't start with '@'\n+//       setFilteredEmails([]);\n+//     }\n+\n+//     // Update the input value\n+//     setInputValue(value);\n+//   };\n+\n+//   const handleEmailClick = (email) => {\n+//     // Set the selected email as the input value\n+//     setInputValue(email);\n+\n+//     // Clear the filtered emails\n+//     setFilteredEmails([]);\n+//   };\n+\n+//   const handleEmailMouseOver = (email) => {\n+//     // Highlight the email on mouseover\n+//     setInputValue(email);\n+//   };\n+\n+//   return (\n+//     <div style={{ position: \"relative\", width: \"250px\" }}>\n+//       <label>Email:</label>\n+//       <input\n+//         type=\"text\"\n+//         value={inputValue}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Comments or add others with @\"\n+//         style={{ fontSize: \"16px\", width: \"100%\" }}\n+//       />\n+//       {filteredEmails.length > 0 && (\n+//         <ul\n+//           style={{\n+//             listStyle: \"none\",\n+//             padding: 0,\n+//             margin: 0,\n+//             position: \"absolute\",\n+//             top: \"100%\",\n+//             left: 0,\n+//             width: \"100%\",\n+//             border: \"1px solid #ccc\",\n+//             borderTop: \"none\",\n+//             borderRadius: \"0 0 5px 5px\",\n+//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n+//             backgroundColor: \"#fff\",\n+//             zIndex: 1,\n+//           }}\n+//         >\n+//           {filteredEmails.map((email) => (\n+//             <li\n+//               key={email}\n+//               onClick={() => handleEmailClick(email)}\n+//               onMouseOver={() => handleEmailMouseOver(email)}\n+//               style={{\n+//                 padding: \"8px\",\n+//                 cursor: \"pointer\",\n+//               }}\n+//             >\n+//               {email}\n+//             </li>\n+//           ))}\n+//         </ul>\n+//       )}\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+//latest\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const [text, setText] = useState(\"\");\n+//   const [emails, setEmails] = useState([]);\n+//   const [comments, setComments] = useState([]);\n+//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n+\n+//   const handleInputChange = (e) => {\n+//     setText(e.target.value);\n+//     const words = e.target.value.split(/\\s/);\n+//     const lastWord = words[words.length - 1];\n+//     if (lastWord.includes(\"@\")) {\n+//       const email = lastWord.slice(1); // Exclude \"@\"\n+//       // You can fetch the list of emails based on the entered characters\n+//       // For simplicity, I'm just providing a static list of emails\n+//       setEmails([\n+//         \"example1@example.com\",\n+//         \"example2@example.com\",\n+//         \"example3@example.com\",\n+//       ]);\n+//     } else {\n+//       setEmails([]);\n+//     }\n+//   };\n+\n+//   const handleEmailSelect = (email) => {\n+//     setText(text.replace(/@\\S*$/, `@${email} `));\n+//     setSelectedEmailIndex(null);\n+//   };\n+\n+//   const handleCommentChange = (e, index) => {\n+//     const newComments = [...comments];\n+//     newComments[index] = e.target.value;\n+//     setComments(newComments);\n+//   };\n+\n+//   const handleAddComment = () => {\n+//     setComments([...comments, \"\"]);\n+//   };\n+\n+//   const handleAnnotationSubmit = () => {\n+//     // Implement logic to handle annotation submission\n+//     const newAnnotation = {\n+//       emails,\n+//       comments,\n+//     };\n+//     console.log(newAnnotation);\n+//     // Reset states\n+//     setText(\"\");\n+//     setEmails([]);\n+//     setComments([]);\n+//   };\n+\n+//   const renderEmailList = () => {\n+//     return (\n+//       <ul className=\"email-list\">\n+//         {emails.map((email, index) => (\n+//           <li key={index} onClick={() => handleEmailSelect(email)}>\n+//             {email}\n+//           </li>\n+//         ))}\n+//       </ul>\n+//     );\n+//   };\n+\n+//   const renderComments = () => {\n+//     return comments.map((comment, index) => (\n+//       <div key={index}>\n+//         <input\n+//           value={comment || \"\"}\n+//           onChange={(e) => handleCommentChange(e, index)}\n+//           placeholder=\"Add comment...\"\n+//         />\n+//       </div>\n+//     ));\n+//   };\n+\n+//   return (\n+//     <div>\n+//       <textarea\n+//         value={text}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Add annotation here...\"\n+//       />\n+//       {emails.length > 0 && renderEmailList()}\n+//       {renderComments()}\n+//       <button onClick={handleAddComment}>Add Comment</button>\n+//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+\n+import React, { useState } from 'react';\n+import { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\n+import 'draft-js/dist/Draft.css';\n+\n+const CustomEditor = () => {\n+  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n+\n+  const handleEditorChange = (newEditorState) => {\n+    setEditorState(newEditorState);\n+  };\n+\n+  const handleBoldClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n+  };\n+\n+  const handleItalicClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n+  };\n+\n+  const handleUnderlineClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n+  };\n+\n+  const handleAlignmentClick = (alignment) => {\n+    handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n+  };\n+\n+const handleColorChange = (color) => {\n+  handleEditorChange(\n+    RichUtils.toggleInlineStyle(editorState, `COLOR_${color.toUpperCase()}`)\n+  );\n+};\n+\n+\n+  const handleClearEditor = () => {\n+    handleEditorChange(EditorState.createEmpty());\n+  };\n+\n+  return (\n+    <div style={{ margin: '20px' }}>\n+      <div style={{ marginBottom: '10px' }}>\n+        <button onClick={handleBoldClick}>Bold</button>\n+        <button onClick={handleItalicClick}>Italic</button>\n+        <button onClick={handleUnderlineClick}>Underline</button>\n+        <button onClick={() => handleAlignmentClick('left')}>Left Align</button>\n+        <button onClick={() => handleAlignmentClick('center')}>Center Align</button>\n+        <button onClick={() => handleAlignmentClick('right')}>Right Align</button>\n+        <button onClick={() => handleAlignmentClick('justify')}>Justify</button>\n+        <button onClick={() => handleColorChange('red')}>Red Color</button>\n+        <button onClick={() => handleColorChange('blue')}>Blue Color</button>\n+        <button onClick={() => handleColorChange('green')}>Green Color</button>\n+        <button onClick={handleClearEditor}>Clear Editor</button>\n+      </div>\n+      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n+        <Editor editorState={editorState} onChange={handleEditorChange} />\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default CustomEditor;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1709529292777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,642 @@\n+// import React, { useState, useEffect } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+\n+// /**\n+//  * Component for text annotation and image annotation.\n+//  */\n+// const Annotation = () => {\n+//   //  Annotation State\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+\n+//   // Handle mouse down event to set current annotation for image annotation\n+//   const handleMouseDown = (e) => {\n+//     if (isAnnotationMode) {\n+//       const imageRect = e.target.getBoundingClientRect();\n+//       setCurrentAnnotation({\n+//         x: e.clientX - imageRect.left,\n+//         y: e.clientY - imageRect.top,\n+//       });\n+//     }\n+//   };\n+\n+//   // Handle mouse up event to save the current annotation for image annotation\n+//   const handleMouseUp = () => {\n+//     if (isAnnotationMode) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   };\n+\n+//   // Toggle annotation mode for image annotation\n+//   const toggleAnnotationMode = () => {\n+//     setAnnotationMode(!isAnnotationMode);\n+//     setSelectedAnnotation(null);\n+//   };\n+\n+//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Generate a list of comments from the state for image annotation\n+//   const getCommentsList = () => {\n+//     const commentsList = [];\n+//     for (const key in comments) {\n+//       if (comments.hasOwnProperty(key)) {\n+//         commentsList.push({ coordinates: key, comment: comments[key] });\n+//       }\n+//     }\n+//     return commentsList;\n+//   };\n+\n+//   // Effect to add the current annotation to the annotations array for image annotation\n+//   useEffect(() => {\n+//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   }, [currentAnnotation]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <img\n+//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n+//           alt=\"Annotated Image\"\n+//           style={{ height: \"50%\", width: \"50%\" }}\n+//           onMouseDown={handleMouseDown}\n+//           onMouseUp={handleMouseUp}\n+//         />\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <button onClick={toggleAnnotationMode}>\n+//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n+//           </button>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {getCommentsList().map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState, useEffect, useRef } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+// import FileViewer from \"react-file-viewer\";\n+// import { MdAddComment } from \"react-icons/md\";\n+// import { FcCancel } from \"react-icons/fc\";\n+// import { Link } from \"react-router-dom\";\n+// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n+\n+// const Annotation = () => {\n+//   // State for image annotations, comments, selected annotation, and annotation mode\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+//   const [assignments, setAssignments] = useState([]);\n+\n+//   const fileViewerRef = useRef(null);\n+\n+//   // Function to handle click events on the FileViewer to capture annotations\n+//   const handleFileViewerClick = (e) => {\n+//     if (isAnnotationMode) {\n+//       const rect = fileViewerRef.current.getBoundingClientRect();\n+//       const x = e.clientX - rect.left;\n+//       const y = e.clientY - rect.top;\n+\n+//       // Add annotation\n+//       addAnnotation({ x, y });\n+//     }\n+//   };\n+\n+//   // Function to add annotation based on conditions\n+//   const addAnnotation = ({ x, y }) => {\n+//     // Retrieve data from local storage\n+//     const id = localStorage.getItem(\"adminId\");\n+//     const docId = 111; //props.docId;\n+//     const assignedUserId = id;\n+//     const email = isEmailConditionMet() ? comments : null;\n+//     const subject = \"\";\n+//     const comment = isEmailConditionMet() ? null : comments;\n+\n+//     // Perform any other conditions or checks required for adding annotations\n+\n+//     // Send data to the API\n+//     let res = ADocAnnotation(\n+//       id,\n+//       docId,\n+//       assignedUserId,\n+//       email,\n+//       subject,\n+//       comment,\n+//       x,\n+//       y\n+//     );\n+//     console.log(res);\n+//     // Update state to include the new annotation\n+//     setImageAnnotations([...imageAnnotations, { x, y }]);\n+//   };\n+\n+//   // Function to check if the email condition is met\n+//   const isEmailConditionMet = (comment) => {\n+//     // Regular expression to match a simple email format\n+//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n+\n+//     // Trim the comment and check if it starts with \"@\" and matches the email format\n+//     return (\n+//       comment.trim().startsWith(\"@\") &&\n+//       emailRegex.test(comment.trim().substring(1))\n+//     );\n+//   };\n+\n+//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Function to get comments and assignments from the API\n+//   const getCommentsAndAssign = () => {\n+//     GetCommentsAndAssign()\n+//       .then((response) => {\n+//         // Handle successful API response\n+//         console.log(\"Comments and Assignments:\", response);\n+//         // Update the state with comments and assignments\n+//         setAssignments(response.assignments);\n+//         setComments(response.comments);\n+//       })\n+//       .catch((error) => {\n+//         // Handle API error\n+//         console.error(\"Error getting comments and assignments:\", error);\n+//       });\n+//   };\n+\n+//   // Effect to clear selected annotation when the annotation mode is toggled\n+//   useEffect(() => {\n+//     setSelectedAnnotation(null);\n+//     // Fetch comments and assignments when the component mounts\n+//     getCommentsAndAssign();\n+//   }, [isAnnotationMode]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <div className=\"d-flex justify-content-center\">\n+//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n+//             <FileViewer\n+//               alt=\"Annotated Image\"\n+//               style={{\n+//                 height: \"100%\",\n+//                 width: \"100%\",\n+//                 position: \"relative\",\n+//                 overflow: \"scroll\",\n+//               }}\n+//               fileType={\"png\"}\n+//               filePath={\n+//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n+//               }\n+//               errorComponent={() => <div>Error loading document</div>}\n+//             />\n+//           </di>\n+//           <Link\n+//             className={`btn-sm mt-7 ${\n+//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n+//             }`}\n+//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n+//           >\n+//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n+//           </Link>\n+//         </div>\n+//         {isAnnotationMode && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               top: 0,\n+//               left: 0,\n+//               width: \"100%\",\n+//               height: \"100%\",\n+//               pointerEvents: \"none\",\n+//             }}\n+//           />\n+//         )}\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {/* {(comments || []).map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))} */}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const adminEmails = [\n+//     \"admin1@example.com\",\n+//     \"admin2@example.com\",\n+//     \"admin3@example.com\",\n+//   ];\n+//   const [inputValue, setInputValue] = useState(\"\");\n+//   const [filteredEmails, setFilteredEmails] = useState([]);\n+\n+//   const handleInputChange = (event) => {\n+//     const value = event.target.value;\n+\n+//     // Check if the input starts with '@'\n+//     if (value.startsWith(\"@\")) {\n+//       // Filter admin emails based on input\n+//       const filteredAdminEmails = adminEmails.filter((email) =>\n+//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n+//       );\n+\n+//       // Update the filtered emails\n+//       setFilteredEmails(filteredAdminEmails);\n+//     } else {\n+//       // Reset filtered emails if input doesn't start with '@'\n+//       setFilteredEmails([]);\n+//     }\n+\n+//     // Update the input value\n+//     setInputValue(value);\n+//   };\n+\n+//   const handleEmailClick = (email) => {\n+//     // Set the selected email as the input value\n+//     setInputValue(email);\n+\n+//     // Clear the filtered emails\n+//     setFilteredEmails([]);\n+//   };\n+\n+//   const handleEmailMouseOver = (email) => {\n+//     // Highlight the email on mouseover\n+//     setInputValue(email);\n+//   };\n+\n+//   return (\n+//     <div style={{ position: \"relative\", width: \"250px\" }}>\n+//       <label>Email:</label>\n+//       <input\n+//         type=\"text\"\n+//         value={inputValue}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Comments or add others with @\"\n+//         style={{ fontSize: \"16px\", width: \"100%\" }}\n+//       />\n+//       {filteredEmails.length > 0 && (\n+//         <ul\n+//           style={{\n+//             listStyle: \"none\",\n+//             padding: 0,\n+//             margin: 0,\n+//             position: \"absolute\",\n+//             top: \"100%\",\n+//             left: 0,\n+//             width: \"100%\",\n+//             border: \"1px solid #ccc\",\n+//             borderTop: \"none\",\n+//             borderRadius: \"0 0 5px 5px\",\n+//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n+//             backgroundColor: \"#fff\",\n+//             zIndex: 1,\n+//           }}\n+//         >\n+//           {filteredEmails.map((email) => (\n+//             <li\n+//               key={email}\n+//               onClick={() => handleEmailClick(email)}\n+//               onMouseOver={() => handleEmailMouseOver(email)}\n+//               style={{\n+//                 padding: \"8px\",\n+//                 cursor: \"pointer\",\n+//               }}\n+//             >\n+//               {email}\n+//             </li>\n+//           ))}\n+//         </ul>\n+//       )}\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+//latest\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const [text, setText] = useState(\"\");\n+//   const [emails, setEmails] = useState([]);\n+//   const [comments, setComments] = useState([]);\n+//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n+\n+//   const handleInputChange = (e) => {\n+//     setText(e.target.value);\n+//     const words = e.target.value.split(/\\s/);\n+//     const lastWord = words[words.length - 1];\n+//     if (lastWord.includes(\"@\")) {\n+//       const email = lastWord.slice(1); // Exclude \"@\"\n+//       // You can fetch the list of emails based on the entered characters\n+//       // For simplicity, I'm just providing a static list of emails\n+//       setEmails([\n+//         \"example1@example.com\",\n+//         \"example2@example.com\",\n+//         \"example3@example.com\",\n+//       ]);\n+//     } else {\n+//       setEmails([]);\n+//     }\n+//   };\n+\n+//   const handleEmailSelect = (email) => {\n+//     setText(text.replace(/@\\S*$/, `@${email} `));\n+//     setSelectedEmailIndex(null);\n+//   };\n+\n+//   const handleCommentChange = (e, index) => {\n+//     const newComments = [...comments];\n+//     newComments[index] = e.target.value;\n+//     setComments(newComments);\n+//   };\n+\n+//   const handleAddComment = () => {\n+//     setComments([...comments, \"\"]);\n+//   };\n+\n+//   const handleAnnotationSubmit = () => {\n+//     // Implement logic to handle annotation submission\n+//     const newAnnotation = {\n+//       emails,\n+//       comments,\n+//     };\n+//     console.log(newAnnotation);\n+//     // Reset states\n+//     setText(\"\");\n+//     setEmails([]);\n+//     setComments([]);\n+//   };\n+\n+//   const renderEmailList = () => {\n+//     return (\n+//       <ul className=\"email-list\">\n+//         {emails.map((email, index) => (\n+//           <li key={index} onClick={() => handleEmailSelect(email)}>\n+//             {email}\n+//           </li>\n+//         ))}\n+//       </ul>\n+//     );\n+//   };\n+\n+//   const renderComments = () => {\n+//     return comments.map((comment, index) => (\n+//       <div key={index}>\n+//         <input\n+//           value={comment || \"\"}\n+//           onChange={(e) => handleCommentChange(e, index)}\n+//           placeholder=\"Add comment...\"\n+//         />\n+//       </div>\n+//     ));\n+//   };\n+\n+//   return (\n+//     <div>\n+//       <textarea\n+//         value={text}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Add annotation here...\"\n+//       />\n+//       {emails.length > 0 && renderEmailList()}\n+//       {renderComments()}\n+//       <button onClick={handleAddComment}>Add Comment</button>\n+//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+\n+import React, { useState } from 'react';\n+import { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\n+// import 'draft-js/dist/Draft.css';\n+import \"draft-js/dist/Draft.css\"\n+const CustomEditor = () => {\n+  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n+\n+  const handleEditorChange = (newEditorState) => {\n+    setEditorState(newEditorState);\n+  };\n+\n+  const handleBoldClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n+  };\n+\n+  const handleItalicClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n+  };\n+\n+  const handleUnderlineClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n+  };\n+\n+  const handleAlignmentClick = (alignment) => {\n+    handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n+  };\n+\n+const handleColorChange = (color) => {\n+  handleEditorChange(\n+    RichUtils.toggleInlineStyle(editorState, `COLOR_${color.toUpperCase()}`)\n+  );\n+};\n+\n+\n+  const handleClearEditor = () => {\n+    handleEditorChange(EditorState.createEmpty());\n+  };\n+\n+  return (\n+    <div style={{ margin: '20px' }}>\n+      <div style={{ marginBottom: '10px' }}>\n+        <button onClick={handleBoldClick}>Bold</button>\n+        <button onClick={handleItalicClick}>Italic</button>\n+        <button onClick={handleUnderlineClick}>Underline</button>\n+        <button onClick={() => handleAlignmentClick('left')}>Left Align</button>\n+        <button onClick={() => handleAlignmentClick('center')}>Center Align</button>\n+        <button onClick={() => handleAlignmentClick('right')}>Right Align</button>\n+        <button onClick={() => handleAlignmentClick('justify')}>Justify</button>\n+        <button onClick={() => handleColorChange('red')}>Red Color</button>\n+        <button onClick={() => handleColorChange('blue')}>Blue Color</button>\n+        <button onClick={() => handleColorChange('green')}>Green Color</button>\n+        <button onClick={handleClearEditor}>Clear Editor</button>\n+      </div>\n+      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n+        <Editor editorState={editorState} onChange={handleEditorChange} />\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default CustomEditor;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1709529367350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -579,9 +579,9 @@\n import React, { useState } from 'react';\n import { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\n // import 'draft-js/dist/Draft.css';\n import \"draft-js/dist/Draft.css\"\n-const CustomEditor = () => {\n+const Annotation = () => {\n   const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n \n   const handleEditorChange = (newEditorState) => {\n     setEditorState(newEditorState);\n@@ -638,1288 +638,5 @@\n     </div>\n   );\n };\n \n-export default CustomEditor;\n-// import React, { useState, useEffect } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-\n-// /**\n-//  * Component for text annotation and image annotation.\n-//  */\n-// const Annotation = () => {\n-//   //  Annotation State\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-\n-//   // Handle mouse down event to set current annotation for image annotation\n-//   const handleMouseDown = (e) => {\n-//     if (isAnnotationMode) {\n-//       const imageRect = e.target.getBoundingClientRect();\n-//       setCurrentAnnotation({\n-//         x: e.clientX - imageRect.left,\n-//         y: e.clientY - imageRect.top,\n-//       });\n-//     }\n-//   };\n-\n-//   // Handle mouse up event to save the current annotation for image annotation\n-//   const handleMouseUp = () => {\n-//     if (isAnnotationMode) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   };\n-\n-//   // Toggle annotation mode for image annotation\n-//   const toggleAnnotationMode = () => {\n-//     setAnnotationMode(!isAnnotationMode);\n-//     setSelectedAnnotation(null);\n-//   };\n-\n-//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Generate a list of comments from the state for image annotation\n-//   const getCommentsList = () => {\n-//     const commentsList = [];\n-//     for (const key in comments) {\n-//       if (comments.hasOwnProperty(key)) {\n-//         commentsList.push({ coordinates: key, comment: comments[key] });\n-//       }\n-//     }\n-//     return commentsList;\n-//   };\n-\n-//   // Effect to add the current annotation to the annotations array for image annotation\n-//   useEffect(() => {\n-//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   }, [currentAnnotation]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <img\n-//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n-//           alt=\"Annotated Image\"\n-//           style={{ height: \"50%\", width: \"50%\" }}\n-//           onMouseDown={handleMouseDown}\n-//           onMouseUp={handleMouseUp}\n-//         />\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <button onClick={toggleAnnotationMode}>\n-//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n-//           </button>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {getCommentsList().map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState, useEffect, useRef } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-// import FileViewer from \"react-file-viewer\";\n-// import { MdAddComment } from \"react-icons/md\";\n-// import { FcCancel } from \"react-icons/fc\";\n-// import { Link } from \"react-router-dom\";\n-// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n-\n-// const Annotation = () => {\n-//   // State for image annotations, comments, selected annotation, and annotation mode\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-//   const [assignments, setAssignments] = useState([]);\n-\n-//   const fileViewerRef = useRef(null);\n-\n-//   // Function to handle click events on the FileViewer to capture annotations\n-//   const handleFileViewerClick = (e) => {\n-//     if (isAnnotationMode) {\n-//       const rect = fileViewerRef.current.getBoundingClientRect();\n-//       const x = e.clientX - rect.left;\n-//       const y = e.clientY - rect.top;\n-\n-//       // Add annotation\n-//       addAnnotation({ x, y });\n-//     }\n-//   };\n-\n-//   // Function to add annotation based on conditions\n-//   const addAnnotation = ({ x, y }) => {\n-//     // Retrieve data from local storage\n-//     const id = localStorage.getItem(\"adminId\");\n-//     const docId = 111; //props.docId;\n-//     const assignedUserId = id;\n-//     const email = isEmailConditionMet() ? comments : null;\n-//     const subject = \"\";\n-//     const comment = isEmailConditionMet() ? null : comments;\n-\n-//     // Perform any other conditions or checks required for adding annotations\n-\n-//     // Send data to the API\n-//     let res = ADocAnnotation(\n-//       id,\n-//       docId,\n-//       assignedUserId,\n-//       email,\n-//       subject,\n-//       comment,\n-//       x,\n-//       y\n-//     );\n-//     console.log(res);\n-//     // Update state to include the new annotation\n-//     setImageAnnotations([...imageAnnotations, { x, y }]);\n-//   };\n-\n-//   // Function to check if the email condition is met\n-//   const isEmailConditionMet = (comment) => {\n-//     // Regular expression to match a simple email format\n-//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n-\n-//     // Trim the comment and check if it starts with \"@\" and matches the email format\n-//     return (\n-//       comment.trim().startsWith(\"@\") &&\n-//       emailRegex.test(comment.trim().substring(1))\n-//     );\n-//   };\n-\n-//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Function to get comments and assignments from the API\n-//   const getCommentsAndAssign = () => {\n-//     GetCommentsAndAssign()\n-//       .then((response) => {\n-//         // Handle successful API response\n-//         console.log(\"Comments and Assignments:\", response);\n-//         // Update the state with comments and assignments\n-//         setAssignments(response.assignments);\n-//         setComments(response.comments);\n-//       })\n-//       .catch((error) => {\n-//         // Handle API error\n-//         console.error(\"Error getting comments and assignments:\", error);\n-//       });\n-//   };\n-\n-//   // Effect to clear selected annotation when the annotation mode is toggled\n-//   useEffect(() => {\n-//     setSelectedAnnotation(null);\n-//     // Fetch comments and assignments when the component mounts\n-//     getCommentsAndAssign();\n-//   }, [isAnnotationMode]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <div className=\"d-flex justify-content-center\">\n-//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n-//             <FileViewer\n-//               alt=\"Annotated Image\"\n-//               style={{\n-//                 height: \"100%\",\n-//                 width: \"100%\",\n-//                 position: \"relative\",\n-//                 overflow: \"scroll\",\n-//               }}\n-//               fileType={\"png\"}\n-//               filePath={\n-//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n-//               }\n-//               errorComponent={() => <div>Error loading document</div>}\n-//             />\n-//           </di>\n-//           <Link\n-//             className={`btn-sm mt-7 ${\n-//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n-//             }`}\n-//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n-//           >\n-//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n-//           </Link>\n-//         </div>\n-//         {isAnnotationMode && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               top: 0,\n-//               left: 0,\n-//               width: \"100%\",\n-//               height: \"100%\",\n-//               pointerEvents: \"none\",\n-//             }}\n-//           />\n-//         )}\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {/* {(comments || []).map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))} */}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const adminEmails = [\n-//     \"admin1@example.com\",\n-//     \"admin2@example.com\",\n-//     \"admin3@example.com\",\n-//   ];\n-//   const [inputValue, setInputValue] = useState(\"\");\n-//   const [filteredEmails, setFilteredEmails] = useState([]);\n-\n-//   const handleInputChange = (event) => {\n-//     const value = event.target.value;\n-\n-//     // Check if the input starts with '@'\n-//     if (value.startsWith(\"@\")) {\n-//       // Filter admin emails based on input\n-//       const filteredAdminEmails = adminEmails.filter((email) =>\n-//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n-//       );\n-\n-//       // Update the filtered emails\n-//       setFilteredEmails(filteredAdminEmails);\n-//     } else {\n-//       // Reset filtered emails if input doesn't start with '@'\n-//       setFilteredEmails([]);\n-//     }\n-\n-//     // Update the input value\n-//     setInputValue(value);\n-//   };\n-\n-//   const handleEmailClick = (email) => {\n-//     // Set the selected email as the input value\n-//     setInputValue(email);\n-\n-//     // Clear the filtered emails\n-//     setFilteredEmails([]);\n-//   };\n-\n-//   const handleEmailMouseOver = (email) => {\n-//     // Highlight the email on mouseover\n-//     setInputValue(email);\n-//   };\n-\n-//   return (\n-//     <div style={{ position: \"relative\", width: \"250px\" }}>\n-//       <label>Email:</label>\n-//       <input\n-//         type=\"text\"\n-//         value={inputValue}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Comments or add others with @\"\n-//         style={{ fontSize: \"16px\", width: \"100%\" }}\n-//       />\n-//       {filteredEmails.length > 0 && (\n-//         <ul\n-//           style={{\n-//             listStyle: \"none\",\n-//             padding: 0,\n-//             margin: 0,\n-//             position: \"absolute\",\n-//             top: \"100%\",\n-//             left: 0,\n-//             width: \"100%\",\n-//             border: \"1px solid #ccc\",\n-//             borderTop: \"none\",\n-//             borderRadius: \"0 0 5px 5px\",\n-//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n-//             backgroundColor: \"#fff\",\n-//             zIndex: 1,\n-//           }}\n-//         >\n-//           {filteredEmails.map((email) => (\n-//             <li\n-//               key={email}\n-//               onClick={() => handleEmailClick(email)}\n-//               onMouseOver={() => handleEmailMouseOver(email)}\n-//               style={{\n-//                 padding: \"8px\",\n-//                 cursor: \"pointer\",\n-//               }}\n-//             >\n-//               {email}\n-//             </li>\n-//           ))}\n-//         </ul>\n-//       )}\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-//latest\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const [text, setText] = useState(\"\");\n-//   const [emails, setEmails] = useState([]);\n-//   const [comments, setComments] = useState([]);\n-//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n-\n-//   const handleInputChange = (e) => {\n-//     setText(e.target.value);\n-//     const words = e.target.value.split(/\\s/);\n-//     const lastWord = words[words.length - 1];\n-//     if (lastWord.includes(\"@\")) {\n-//       const email = lastWord.slice(1); // Exclude \"@\"\n-//       // You can fetch the list of emails based on the entered characters\n-//       // For simplicity, I'm just providing a static list of emails\n-//       setEmails([\n-//         \"example1@example.com\",\n-//         \"example2@example.com\",\n-//         \"example3@example.com\",\n-//       ]);\n-//     } else {\n-//       setEmails([]);\n-//     }\n-//   };\n-\n-//   const handleEmailSelect = (email) => {\n-//     setText(text.replace(/@\\S*$/, `@${email} `));\n-//     setSelectedEmailIndex(null);\n-//   };\n-\n-//   const handleCommentChange = (e, index) => {\n-//     const newComments = [...comments];\n-//     newComments[index] = e.target.value;\n-//     setComments(newComments);\n-//   };\n-\n-//   const handleAddComment = () => {\n-//     setComments([...comments, \"\"]);\n-//   };\n-\n-//   const handleAnnotationSubmit = () => {\n-//     // Implement logic to handle annotation submission\n-//     const newAnnotation = {\n-//       emails,\n-//       comments,\n-//     };\n-//     console.log(newAnnotation);\n-//     // Reset states\n-//     setText(\"\");\n-//     setEmails([]);\n-//     setComments([]);\n-//   };\n-\n-//   const renderEmailList = () => {\n-//     return (\n-//       <ul className=\"email-list\">\n-//         {emails.map((email, index) => (\n-//           <li key={index} onClick={() => handleEmailSelect(email)}>\n-//             {email}\n-//           </li>\n-//         ))}\n-//       </ul>\n-//     );\n-//   };\n-\n-//   const renderComments = () => {\n-//     return comments.map((comment, index) => (\n-//       <div key={index}>\n-//         <input\n-//           value={comment || \"\"}\n-//           onChange={(e) => handleCommentChange(e, index)}\n-//           placeholder=\"Add comment...\"\n-//         />\n-//       </div>\n-//     ));\n-//   };\n-\n-//   return (\n-//     <div>\n-//       <textarea\n-//         value={text}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Add annotation here...\"\n-//       />\n-//       {emails.length > 0 && renderEmailList()}\n-//       {renderComments()}\n-//       <button onClick={handleAddComment}>Add Comment</button>\n-//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-\n-import React, { useState } from 'react';\n-import { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\n-import 'draft-js/dist/Draft.css';\n-\n-const CustomEditor = () => {\n-  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n-\n-  const handleEditorChange = (newEditorState) => {\n-    setEditorState(newEditorState);\n-  };\n-\n-  const handleBoldClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n-  };\n-\n-  const handleItalicClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n-  };\n-\n-  const handleUnderlineClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n-  };\n-\n-  const handleAlignmentClick = (alignment) => {\n-    handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n-  };\n-\n-const handleColorChange = (color) => {\n-  handleEditorChange(\n-    RichUtils.toggleInlineStyle(editorState, `COLOR_${color.toUpperCase()}`)\n-  );\n-};\n-\n-\n-  const handleClearEditor = () => {\n-    handleEditorChange(EditorState.createEmpty());\n-  };\n-\n-  return (\n-    <div style={{ margin: '20px' }}>\n-      <div style={{ marginBottom: '10px' }}>\n-        <button onClick={handleBoldClick}>Bold</button>\n-        <button onClick={handleItalicClick}>Italic</button>\n-        <button onClick={handleUnderlineClick}>Underline</button>\n-        <button onClick={() => handleAlignmentClick('left')}>Left Align</button>\n-        <button onClick={() => handleAlignmentClick('center')}>Center Align</button>\n-        <button onClick={() => handleAlignmentClick('right')}>Right Align</button>\n-        <button onClick={() => handleAlignmentClick('justify')}>Justify</button>\n-        <button onClick={() => handleColorChange('red')}>Red Color</button>\n-        <button onClick={() => handleColorChange('blue')}>Blue Color</button>\n-        <button onClick={() => handleColorChange('green')}>Green Color</button>\n-        <button onClick={handleClearEditor}>Clear Editor</button>\n-      </div>\n-      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n-        <Editor editorState={editorState} onChange={handleEditorChange} />\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default CustomEditor;\n-// import React, { useState, useEffect } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-\n-// /**\n-//  * Component for text annotation and image annotation.\n-//  */\n-// const Annotation = () => {\n-//   //  Annotation State\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-\n-//   // Handle mouse down event to set current annotation for image annotation\n-//   const handleMouseDown = (e) => {\n-//     if (isAnnotationMode) {\n-//       const imageRect = e.target.getBoundingClientRect();\n-//       setCurrentAnnotation({\n-//         x: e.clientX - imageRect.left,\n-//         y: e.clientY - imageRect.top,\n-//       });\n-//     }\n-//   };\n-\n-//   // Handle mouse up event to save the current annotation for image annotation\n-//   const handleMouseUp = () => {\n-//     if (isAnnotationMode) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   };\n-\n-//   // Toggle annotation mode for image annotation\n-//   const toggleAnnotationMode = () => {\n-//     setAnnotationMode(!isAnnotationMode);\n-//     setSelectedAnnotation(null);\n-//   };\n-\n-//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Generate a list of comments from the state for image annotation\n-//   const getCommentsList = () => {\n-//     const commentsList = [];\n-//     for (const key in comments) {\n-//       if (comments.hasOwnProperty(key)) {\n-//         commentsList.push({ coordinates: key, comment: comments[key] });\n-//       }\n-//     }\n-//     return commentsList;\n-//   };\n-\n-//   // Effect to add the current annotation to the annotations array for image annotation\n-//   useEffect(() => {\n-//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   }, [currentAnnotation]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <img\n-//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n-//           alt=\"Annotated Image\"\n-//           style={{ height: \"50%\", width: \"50%\" }}\n-//           onMouseDown={handleMouseDown}\n-//           onMouseUp={handleMouseUp}\n-//         />\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <button onClick={toggleAnnotationMode}>\n-//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n-//           </button>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {getCommentsList().map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState, useEffect, useRef } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-// import FileViewer from \"react-file-viewer\";\n-// import { MdAddComment } from \"react-icons/md\";\n-// import { FcCancel } from \"react-icons/fc\";\n-// import { Link } from \"react-router-dom\";\n-// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n-\n-// const Annotation = () => {\n-//   // State for image annotations, comments, selected annotation, and annotation mode\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-//   const [assignments, setAssignments] = useState([]);\n-\n-//   const fileViewerRef = useRef(null);\n-\n-//   // Function to handle click events on the FileViewer to capture annotations\n-//   const handleFileViewerClick = (e) => {\n-//     if (isAnnotationMode) {\n-//       const rect = fileViewerRef.current.getBoundingClientRect();\n-//       const x = e.clientX - rect.left;\n-//       const y = e.clientY - rect.top;\n-\n-//       // Add annotation\n-//       addAnnotation({ x, y });\n-//     }\n-//   };\n-\n-//   // Function to add annotation based on conditions\n-//   const addAnnotation = ({ x, y }) => {\n-//     // Retrieve data from local storage\n-//     const id = localStorage.getItem(\"adminId\");\n-//     const docId = 111; //props.docId;\n-//     const assignedUserId = id;\n-//     const email = isEmailConditionMet() ? comments : null;\n-//     const subject = \"\";\n-//     const comment = isEmailConditionMet() ? null : comments;\n-\n-//     // Perform any other conditions or checks required for adding annotations\n-\n-//     // Send data to the API\n-//     let res = ADocAnnotation(\n-//       id,\n-//       docId,\n-//       assignedUserId,\n-//       email,\n-//       subject,\n-//       comment,\n-//       x,\n-//       y\n-//     );\n-//     console.log(res);\n-//     // Update state to include the new annotation\n-//     setImageAnnotations([...imageAnnotations, { x, y }]);\n-//   };\n-\n-//   // Function to check if the email condition is met\n-//   const isEmailConditionMet = (comment) => {\n-//     // Regular expression to match a simple email format\n-//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n-\n-//     // Trim the comment and check if it starts with \"@\" and matches the email format\n-//     return (\n-//       comment.trim().startsWith(\"@\") &&\n-//       emailRegex.test(comment.trim().substring(1))\n-//     );\n-//   };\n-\n-//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Function to get comments and assignments from the API\n-//   const getCommentsAndAssign = () => {\n-//     GetCommentsAndAssign()\n-//       .then((response) => {\n-//         // Handle successful API response\n-//         console.log(\"Comments and Assignments:\", response);\n-//         // Update the state with comments and assignments\n-//         setAssignments(response.assignments);\n-//         setComments(response.comments);\n-//       })\n-//       .catch((error) => {\n-//         // Handle API error\n-//         console.error(\"Error getting comments and assignments:\", error);\n-//       });\n-//   };\n-\n-//   // Effect to clear selected annotation when the annotation mode is toggled\n-//   useEffect(() => {\n-//     setSelectedAnnotation(null);\n-//     // Fetch comments and assignments when the component mounts\n-//     getCommentsAndAssign();\n-//   }, [isAnnotationMode]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <div className=\"d-flex justify-content-center\">\n-//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n-//             <FileViewer\n-//               alt=\"Annotated Image\"\n-//               style={{\n-//                 height: \"100%\",\n-//                 width: \"100%\",\n-//                 position: \"relative\",\n-//                 overflow: \"scroll\",\n-//               }}\n-//               fileType={\"png\"}\n-//               filePath={\n-//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n-//               }\n-//               errorComponent={() => <div>Error loading document</div>}\n-//             />\n-//           </di>\n-//           <Link\n-//             className={`btn-sm mt-7 ${\n-//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n-//             }`}\n-//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n-//           >\n-//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n-//           </Link>\n-//         </div>\n-//         {isAnnotationMode && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               top: 0,\n-//               left: 0,\n-//               width: \"100%\",\n-//               height: \"100%\",\n-//               pointerEvents: \"none\",\n-//             }}\n-//           />\n-//         )}\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {/* {(comments || []).map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))} */}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const adminEmails = [\n-//     \"admin1@example.com\",\n-//     \"admin2@example.com\",\n-//     \"admin3@example.com\",\n-//   ];\n-//   const [inputValue, setInputValue] = useState(\"\");\n-//   const [filteredEmails, setFilteredEmails] = useState([]);\n-\n-//   const handleInputChange = (event) => {\n-//     const value = event.target.value;\n-\n-//     // Check if the input starts with '@'\n-//     if (value.startsWith(\"@\")) {\n-//       // Filter admin emails based on input\n-//       const filteredAdminEmails = adminEmails.filter((email) =>\n-//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n-//       );\n-\n-//       // Update the filtered emails\n-//       setFilteredEmails(filteredAdminEmails);\n-//     } else {\n-//       // Reset filtered emails if input doesn't start with '@'\n-//       setFilteredEmails([]);\n-//     }\n-\n-//     // Update the input value\n-//     setInputValue(value);\n-//   };\n-\n-//   const handleEmailClick = (email) => {\n-//     // Set the selected email as the input value\n-//     setInputValue(email);\n-\n-//     // Clear the filtered emails\n-//     setFilteredEmails([]);\n-//   };\n-\n-//   const handleEmailMouseOver = (email) => {\n-//     // Highlight the email on mouseover\n-//     setInputValue(email);\n-//   };\n-\n-//   return (\n-//     <div style={{ position: \"relative\", width: \"250px\" }}>\n-//       <label>Email:</label>\n-//       <input\n-//         type=\"text\"\n-//         value={inputValue}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Comments or add others with @\"\n-//         style={{ fontSize: \"16px\", width: \"100%\" }}\n-//       />\n-//       {filteredEmails.length > 0 && (\n-//         <ul\n-//           style={{\n-//             listStyle: \"none\",\n-//             padding: 0,\n-//             margin: 0,\n-//             position: \"absolute\",\n-//             top: \"100%\",\n-//             left: 0,\n-//             width: \"100%\",\n-//             border: \"1px solid #ccc\",\n-//             borderTop: \"none\",\n-//             borderRadius: \"0 0 5px 5px\",\n-//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n-//             backgroundColor: \"#fff\",\n-//             zIndex: 1,\n-//           }}\n-//         >\n-//           {filteredEmails.map((email) => (\n-//             <li\n-//               key={email}\n-//               onClick={() => handleEmailClick(email)}\n-//               onMouseOver={() => handleEmailMouseOver(email)}\n-//               style={{\n-//                 padding: \"8px\",\n-//                 cursor: \"pointer\",\n-//               }}\n-//             >\n-//               {email}\n-//             </li>\n-//           ))}\n-//         </ul>\n-//       )}\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-//latest\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const [text, setText] = useState(\"\");\n-//   const [emails, setEmails] = useState([]);\n-//   const [comments, setComments] = useState([]);\n-//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n-\n-//   const handleInputChange = (e) => {\n-//     setText(e.target.value);\n-//     const words = e.target.value.split(/\\s/);\n-//     const lastWord = words[words.length - 1];\n-//     if (lastWord.includes(\"@\")) {\n-//       const email = lastWord.slice(1); // Exclude \"@\"\n-//       // You can fetch the list of emails based on the entered characters\n-//       // For simplicity, I'm just providing a static list of emails\n-//       setEmails([\n-//         \"example1@example.com\",\n-//         \"example2@example.com\",\n-//         \"example3@example.com\",\n-//       ]);\n-//     } else {\n-//       setEmails([]);\n-//     }\n-//   };\n-\n-//   const handleEmailSelect = (email) => {\n-//     setText(text.replace(/@\\S*$/, `@${email} `));\n-//     setSelectedEmailIndex(null);\n-//   };\n-\n-//   const handleCommentChange = (e, index) => {\n-//     const newComments = [...comments];\n-//     newComments[index] = e.target.value;\n-//     setComments(newComments);\n-//   };\n-\n-//   const handleAddComment = () => {\n-//     setComments([...comments, \"\"]);\n-//   };\n-\n-//   const handleAnnotationSubmit = () => {\n-//     // Implement logic to handle annotation submission\n-//     const newAnnotation = {\n-//       emails,\n-//       comments,\n-//     };\n-//     console.log(newAnnotation);\n-//     // Reset states\n-//     setText(\"\");\n-//     setEmails([]);\n-//     setComments([]);\n-//   };\n-\n-//   const renderEmailList = () => {\n-//     return (\n-//       <ul className=\"email-list\">\n-//         {emails.map((email, index) => (\n-//           <li key={index} onClick={() => handleEmailSelect(email)}>\n-//             {email}\n-//           </li>\n-//         ))}\n-//       </ul>\n-//     );\n-//   };\n-\n-//   const renderComments = () => {\n-//     return comments.map((comment, index) => (\n-//       <div key={index}>\n-//         <input\n-//           value={comment || \"\"}\n-//           onChange={(e) => handleCommentChange(e, index)}\n-//           placeholder=\"Add comment...\"\n-//         />\n-//       </div>\n-//     ));\n-//   };\n-\n-//   return (\n-//     <div>\n-//       <textarea\n-//         value={text}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Add annotation here...\"\n-//       />\n-//       {emails.length > 0 && renderEmailList()}\n-//       {renderComments()}\n-//       <button onClick={handleAddComment}>Add Comment</button>\n-//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-\n-import React, { useState } from 'react';\n-import { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\n-import 'draft-js/dist/Draft.css';\n-\n-const Annotation = () => {\n-  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n-\n-  const handleEditorChange = (newEditorState) => {\n-    setEditorState(newEditorState);\n-  };\n-\n-  const handleBoldClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n-  };\n-\n-  const handleItalicClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n-  };\n-\n-  const handleUnderlineClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n-  };\n-\n-  const handleAlignmentClick = (alignment) => {\n-    handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n-  };\n-\n-  const handleColorChange = (color) => {\n-    handleEditorChange(\n-      RichUtils.toggleInlineStyle(editorState, COLOR_${color.toUpperCase()})\n-    );\n-  };\n-\n-  const handleClearEditor = () => {\n-    handleEditorChange(EditorState.createEmpty());\n-  };\n-\n-  return (\n-    <div style={{ margin: '20px' }}>\n-      <div style={{ marginBottom: '10px' }}>\n-        <button onClick={handleBoldClick}>Bold</button>\n-        <button onClick={handleItalicClick}>Italic</button>\n-        <button onClick={handleUnderlineClick}>Underline</button>\n-        <button onClick={() => handleAlignmentClick('left')}>Left Align</button>\n-        <button onClick={() => handleAlignmentClick('center')}>Center Align</button>\n-        <button onClick={() => handleAlignmentClick('right')}>Right Align</button>\n-        <button onClick={() => handleAlignmentClick('justify')}>Justify</button>\n-        <button onClick={() => handleColorChange('red')}>Red Color</button>\n-        <button onClick={() => handleColorChange('blue')}>Blue Color</button>\n-        <button onClick={() => handleColorChange('green')}>Green Color</button>\n-        <button onClick={handleClearEditor}>Clear Editor</button>\n-      </div>\n-      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n-        <Editor editorState={editorState} onChange={handleEditorChange} />\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n-      </div>\n-    </div>\n-  );\n-};\n-\n export default Annotation;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1709530021212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,640 @@\n+// import React, { useState, useEffect } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+\n+// /**\n+//  * Component for text annotation and image annotation.\n+//  */\n+// const Annotation = () => {\n+//   //  Annotation State\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+\n+//   // Handle mouse down event to set current annotation for image annotation\n+//   const handleMouseDown = (e) => {\n+//     if (isAnnotationMode) {\n+//       const imageRect = e.target.getBoundingClientRect();\n+//       setCurrentAnnotation({\n+//         x: e.clientX - imageRect.left,\n+//         y: e.clientY - imageRect.top,\n+//       });\n+//     }\n+//   };\n+\n+//   // Handle mouse up event to save the current annotation for image annotation\n+//   const handleMouseUp = () => {\n+//     if (isAnnotationMode) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   };\n+\n+//   // Toggle annotation mode for image annotation\n+//   const toggleAnnotationMode = () => {\n+//     setAnnotationMode(!isAnnotationMode);\n+//     setSelectedAnnotation(null);\n+//   };\n+\n+//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Generate a list of comments from the state for image annotation\n+//   const getCommentsList = () => {\n+//     const commentsList = [];\n+//     for (const key in comments) {\n+//       if (comments.hasOwnProperty(key)) {\n+//         commentsList.push({ coordinates: key, comment: comments[key] });\n+//       }\n+//     }\n+//     return commentsList;\n+//   };\n+\n+//   // Effect to add the current annotation to the annotations array for image annotation\n+//   useEffect(() => {\n+//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   }, [currentAnnotation]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <img\n+//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n+//           alt=\"Annotated Image\"\n+//           style={{ height: \"50%\", width: \"50%\" }}\n+//           onMouseDown={handleMouseDown}\n+//           onMouseUp={handleMouseUp}\n+//         />\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <button onClick={toggleAnnotationMode}>\n+//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n+//           </button>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {getCommentsList().map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState, useEffect, useRef } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+// import FileViewer from \"react-file-viewer\";\n+// import { MdAddComment } from \"react-icons/md\";\n+// import { FcCancel } from \"react-icons/fc\";\n+// import { Link } from \"react-router-dom\";\n+// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n+\n+// const Annotation = () => {\n+//   // State for image annotations, comments, selected annotation, and annotation mode\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+//   const [assignments, setAssignments] = useState([]);\n+\n+//   const fileViewerRef = useRef(null);\n+\n+//   // Function to handle click events on the FileViewer to capture annotations\n+//   const handleFileViewerClick = (e) => {\n+//     if (isAnnotationMode) {\n+//       const rect = fileViewerRef.current.getBoundingClientRect();\n+//       const x = e.clientX - rect.left;\n+//       const y = e.clientY - rect.top;\n+\n+//       // Add annotation\n+//       addAnnotation({ x, y });\n+//     }\n+//   };\n+\n+//   // Function to add annotation based on conditions\n+//   const addAnnotation = ({ x, y }) => {\n+//     // Retrieve data from local storage\n+//     const id = localStorage.getItem(\"adminId\");\n+//     const docId = 111; //props.docId;\n+//     const assignedUserId = id;\n+//     const email = isEmailConditionMet() ? comments : null;\n+//     const subject = \"\";\n+//     const comment = isEmailConditionMet() ? null : comments;\n+\n+//     // Perform any other conditions or checks required for adding annotations\n+\n+//     // Send data to the API\n+//     let res = ADocAnnotation(\n+//       id,\n+//       docId,\n+//       assignedUserId,\n+//       email,\n+//       subject,\n+//       comment,\n+//       x,\n+//       y\n+//     );\n+//     console.log(res);\n+//     // Update state to include the new annotation\n+//     setImageAnnotations([...imageAnnotations, { x, y }]);\n+//   };\n+\n+//   // Function to check if the email condition is met\n+//   const isEmailConditionMet = (comment) => {\n+//     // Regular expression to match a simple email format\n+//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n+\n+//     // Trim the comment and check if it starts with \"@\" and matches the email format\n+//     return (\n+//       comment.trim().startsWith(\"@\") &&\n+//       emailRegex.test(comment.trim().substring(1))\n+//     );\n+//   };\n+\n+//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Function to get comments and assignments from the API\n+//   const getCommentsAndAssign = () => {\n+//     GetCommentsAndAssign()\n+//       .then((response) => {\n+//         // Handle successful API response\n+//         console.log(\"Comments and Assignments:\", response);\n+//         // Update the state with comments and assignments\n+//         setAssignments(response.assignments);\n+//         setComments(response.comments);\n+//       })\n+//       .catch((error) => {\n+//         // Handle API error\n+//         console.error(\"Error getting comments and assignments:\", error);\n+//       });\n+//   };\n+\n+//   // Effect to clear selected annotation when the annotation mode is toggled\n+//   useEffect(() => {\n+//     setSelectedAnnotation(null);\n+//     // Fetch comments and assignments when the component mounts\n+//     getCommentsAndAssign();\n+//   }, [isAnnotationMode]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <div className=\"d-flex justify-content-center\">\n+//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n+//             <FileViewer\n+//               alt=\"Annotated Image\"\n+//               style={{\n+//                 height: \"100%\",\n+//                 width: \"100%\",\n+//                 position: \"relative\",\n+//                 overflow: \"scroll\",\n+//               }}\n+//               fileType={\"png\"}\n+//               filePath={\n+//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n+//               }\n+//               errorComponent={() => <div>Error loading document</div>}\n+//             />\n+//           </di>\n+//           <Link\n+//             className={`btn-sm mt-7 ${\n+//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n+//             }`}\n+//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n+//           >\n+//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n+//           </Link>\n+//         </div>\n+//         {isAnnotationMode && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               top: 0,\n+//               left: 0,\n+//               width: \"100%\",\n+//               height: \"100%\",\n+//               pointerEvents: \"none\",\n+//             }}\n+//           />\n+//         )}\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {/* {(comments || []).map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))} */}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const adminEmails = [\n+//     \"admin1@example.com\",\n+//     \"admin2@example.com\",\n+//     \"admin3@example.com\",\n+//   ];\n+//   const [inputValue, setInputValue] = useState(\"\");\n+//   const [filteredEmails, setFilteredEmails] = useState([]);\n+\n+//   const handleInputChange = (event) => {\n+//     const value = event.target.value;\n+\n+//     // Check if the input starts with '@'\n+//     if (value.startsWith(\"@\")) {\n+//       // Filter admin emails based on input\n+//       const filteredAdminEmails = adminEmails.filter((email) =>\n+//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n+//       );\n+\n+//       // Update the filtered emails\n+//       setFilteredEmails(filteredAdminEmails);\n+//     } else {\n+//       // Reset filtered emails if input doesn't start with '@'\n+//       setFilteredEmails([]);\n+//     }\n+\n+//     // Update the input value\n+//     setInputValue(value);\n+//   };\n+\n+//   const handleEmailClick = (email) => {\n+//     // Set the selected email as the input value\n+//     setInputValue(email);\n+\n+//     // Clear the filtered emails\n+//     setFilteredEmails([]);\n+//   };\n+\n+//   const handleEmailMouseOver = (email) => {\n+//     // Highlight the email on mouseover\n+//     setInputValue(email);\n+//   };\n+\n+//   return (\n+//     <div style={{ position: \"relative\", width: \"250px\" }}>\n+//       <label>Email:</label>\n+//       <input\n+//         type=\"text\"\n+//         value={inputValue}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Comments or add others with @\"\n+//         style={{ fontSize: \"16px\", width: \"100%\" }}\n+//       />\n+//       {filteredEmails.length > 0 && (\n+//         <ul\n+//           style={{\n+//             listStyle: \"none\",\n+//             padding: 0,\n+//             margin: 0,\n+//             position: \"absolute\",\n+//             top: \"100%\",\n+//             left: 0,\n+//             width: \"100%\",\n+//             border: \"1px solid #ccc\",\n+//             borderTop: \"none\",\n+//             borderRadius: \"0 0 5px 5px\",\n+//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n+//             backgroundColor: \"#fff\",\n+//             zIndex: 1,\n+//           }}\n+//         >\n+//           {filteredEmails.map((email) => (\n+//             <li\n+//               key={email}\n+//               onClick={() => handleEmailClick(email)}\n+//               onMouseOver={() => handleEmailMouseOver(email)}\n+//               style={{\n+//                 padding: \"8px\",\n+//                 cursor: \"pointer\",\n+//               }}\n+//             >\n+//               {email}\n+//             </li>\n+//           ))}\n+//         </ul>\n+//       )}\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+//latest\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const [text, setText] = useState(\"\");\n+//   const [emails, setEmails] = useState([]);\n+//   const [comments, setComments] = useState([]);\n+//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n+\n+//   const handleInputChange = (e) => {\n+//     setText(e.target.value);\n+//     const words = e.target.value.split(/\\s/);\n+//     const lastWord = words[words.length - 1];\n+//     if (lastWord.includes(\"@\")) {\n+//       const email = lastWord.slice(1); // Exclude \"@\"\n+//       // You can fetch the list of emails based on the entered characters\n+//       // For simplicity, I'm just providing a static list of emails\n+//       setEmails([\n+//         \"example1@example.com\",\n+//         \"example2@example.com\",\n+//         \"example3@example.com\",\n+//       ]);\n+//     } else {\n+//       setEmails([]);\n+//     }\n+//   };\n+\n+//   const handleEmailSelect = (email) => {\n+//     setText(text.replace(/@\\S*$/, `@${email} `));\n+//     setSelectedEmailIndex(null);\n+//   };\n+\n+//   const handleCommentChange = (e, index) => {\n+//     const newComments = [...comments];\n+//     newComments[index] = e.target.value;\n+//     setComments(newComments);\n+//   };\n+\n+//   const handleAddComment = () => {\n+//     setComments([...comments, \"\"]);\n+//   };\n+\n+//   const handleAnnotationSubmit = () => {\n+//     // Implement logic to handle annotation submission\n+//     const newAnnotation = {\n+//       emails,\n+//       comments,\n+//     };\n+//     console.log(newAnnotation);\n+//     // Reset states\n+//     setText(\"\");\n+//     setEmails([]);\n+//     setComments([]);\n+//   };\n+\n+//   const renderEmailList = () => {\n+//     return (\n+//       <ul className=\"email-list\">\n+//         {emails.map((email, index) => (\n+//           <li key={index} onClick={() => handleEmailSelect(email)}>\n+//             {email}\n+//           </li>\n+//         ))}\n+//       </ul>\n+//     );\n+//   };\n+\n+//   const renderComments = () => {\n+//     return comments.map((comment, index) => (\n+//       <div key={index}>\n+//         <input\n+//           value={comment || \"\"}\n+//           onChange={(e) => handleCommentChange(e, index)}\n+//           placeholder=\"Add comment...\"\n+//         />\n+//       </div>\n+//     ));\n+//   };\n+\n+//   return (\n+//     <div>\n+//       <textarea\n+//         value={text}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Add annotation here...\"\n+//       />\n+//       {emails.length > 0 && renderEmailList()}\n+//       {renderComments()}\n+//       <button onClick={handleAddComment}>Add Comment</button>\n+//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+\n+import React, { useState } from 'react';\n+import { Editor, EditorState, RichUtils, convertToRaw } from 'draft-js';\n+import 'draft-js/dist/Draft.css';\n+\n+const Annotation = () => {\n+  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n+\n+  const handleEditorChange = (newEditorState) => {\n+    setEditorState(newEditorState);\n+  };\n+\n+  const handleBoldClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n+  };\n+\n+  const handleItalicClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n+  };\n+\n+  const handleUnderlineClick = () => {\n+    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n+  };\n+\n+  const handleAlignmentClick = (alignment) => {\n+    handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n+  };\n+\n+  const handleColorChange = (color) => {\n+    const newEditorState = RichUtils.toggleInlineStyle(editorState, `COLOR_${color.toUpperCase()}`);\n+    handleEditorChange(newEditorState);\n+  };\n+\n+  const handleClearEditor = () => {\n+    handleEditorChange(EditorState.createEmpty());\n+  };\n+\n+  return (\n+    <div style={{ margin: '20px' }}>\n+      <div style={{ marginBottom: '10px' }}>\n+        <button onClick={handleBoldClick}>Bold</button>\n+        <button onClick={handleItalicClick}>Italic</button>\n+        <button onClick={handleUnderlineClick}>Underline</button>\n+        <button onClick={() => handleAlignmentClick('left')}>Left Align</button>\n+        <button onClick={() => handleAlignmentClick('center')}>Center Align</button>\n+        <button onClick={() => handleAlignmentClick('right')}>Right Align</button>\n+        <button onClick={() => handleAlignmentClick('justify')}>Justify</button>\n+        <button onClick={() => handleColorChange('red')}>Red Color</button>\n+        <button onClick={() => handleColorChange('blue')}>Blue Color</button>\n+        <button onClick={() => handleColorChange('green')}>Green Color</button>\n+        <button onClick={handleClearEditor}>Clear Editor</button>\n+      </div>\n+      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n+        <Editor editorState={editorState} onChange={handleEditorChange} />\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Annotation;\n"
                },
                {
                    "date": 1709530051762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,11 +576,11 @@\n \n // export default Annotation;\n \n import React, { useState } from 'react';\n-import { Editor, EditorState, RichUtils, convertToRaw } from 'draft-js';\n-import 'draft-js/dist/Draft.css';\n-\n+import { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\n+// import 'draft-js/dist/Draft.css';\n+import \"draft-js/dist/Draft.css\"\n const Annotation = () => {\n   const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n \n   const handleEditorChange = (newEditorState) => {\n@@ -602,13 +602,15 @@\n   const handleAlignmentClick = (alignment) => {\n     handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n   };\n \n-  const handleColorChange = (color) => {\n-    const newEditorState = RichUtils.toggleInlineStyle(editorState, `COLOR_${color.toUpperCase()}`);\n-    handleEditorChange(newEditorState);\n-  };\n+const handleColorChange = (color) => {\n+  handleEditorChange(\n+    RichUtils.toggleInlineStyle(editorState, `COLOR_${color.toUpperCase()}`)\n+  );\n+};\n \n+\n   const handleClearEditor = () => {\n     handleEditorChange(EditorState.createEmpty());\n   };\n \n@@ -636,5 +638,5 @@\n     </div>\n   );\n };\n \n-export default Annotation;\n+export default Annotation;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1709530200053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -638,647 +638,5 @@\n     </div>\n   );\n };\n \n-export default Annotation;\n-// import React, { useState, useEffect } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-\n-// /**\n-//  * Component for text annotation and image annotation.\n-//  */\n-// const Annotation = () => {\n-//   //  Annotation State\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-\n-//   // Handle mouse down event to set current annotation for image annotation\n-//   const handleMouseDown = (e) => {\n-//     if (isAnnotationMode) {\n-//       const imageRect = e.target.getBoundingClientRect();\n-//       setCurrentAnnotation({\n-//         x: e.clientX - imageRect.left,\n-//         y: e.clientY - imageRect.top,\n-//       });\n-//     }\n-//   };\n-\n-//   // Handle mouse up event to save the current annotation for image annotation\n-//   const handleMouseUp = () => {\n-//     if (isAnnotationMode) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   };\n-\n-//   // Toggle annotation mode for image annotation\n-//   const toggleAnnotationMode = () => {\n-//     setAnnotationMode(!isAnnotationMode);\n-//     setSelectedAnnotation(null);\n-//   };\n-\n-//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Generate a list of comments from the state for image annotation\n-//   const getCommentsList = () => {\n-//     const commentsList = [];\n-//     for (const key in comments) {\n-//       if (comments.hasOwnProperty(key)) {\n-//         commentsList.push({ coordinates: key, comment: comments[key] });\n-//       }\n-//     }\n-//     return commentsList;\n-//   };\n-\n-//   // Effect to add the current annotation to the annotations array for image annotation\n-//   useEffect(() => {\n-//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   }, [currentAnnotation]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <img\n-//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n-//           alt=\"Annotated Image\"\n-//           style={{ height: \"50%\", width: \"50%\" }}\n-//           onMouseDown={handleMouseDown}\n-//           onMouseUp={handleMouseUp}\n-//         />\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <button onClick={toggleAnnotationMode}>\n-//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n-//           </button>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {getCommentsList().map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState, useEffect, useRef } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-// import FileViewer from \"react-file-viewer\";\n-// import { MdAddComment } from \"react-icons/md\";\n-// import { FcCancel } from \"react-icons/fc\";\n-// import { Link } from \"react-router-dom\";\n-// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n-\n-// const Annotation = () => {\n-//   // State for image annotations, comments, selected annotation, and annotation mode\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-//   const [assignments, setAssignments] = useState([]);\n-\n-//   const fileViewerRef = useRef(null);\n-\n-//   // Function to handle click events on the FileViewer to capture annotations\n-//   const handleFileViewerClick = (e) => {\n-//     if (isAnnotationMode) {\n-//       const rect = fileViewerRef.current.getBoundingClientRect();\n-//       const x = e.clientX - rect.left;\n-//       const y = e.clientY - rect.top;\n-\n-//       // Add annotation\n-//       addAnnotation({ x, y });\n-//     }\n-//   };\n-\n-//   // Function to add annotation based on conditions\n-//   const addAnnotation = ({ x, y }) => {\n-//     // Retrieve data from local storage\n-//     const id = localStorage.getItem(\"adminId\");\n-//     const docId = 111; //props.docId;\n-//     const assignedUserId = id;\n-//     const email = isEmailConditionMet() ? comments : null;\n-//     const subject = \"\";\n-//     const comment = isEmailConditionMet() ? null : comments;\n-\n-//     // Perform any other conditions or checks required for adding annotations\n-\n-//     // Send data to the API\n-//     let res = ADocAnnotation(\n-//       id,\n-//       docId,\n-//       assignedUserId,\n-//       email,\n-//       subject,\n-//       comment,\n-//       x,\n-//       y\n-//     );\n-//     console.log(res);\n-//     // Update state to include the new annotation\n-//     setImageAnnotations([...imageAnnotations, { x, y }]);\n-//   };\n-\n-//   // Function to check if the email condition is met\n-//   const isEmailConditionMet = (comment) => {\n-//     // Regular expression to match a simple email format\n-//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n-\n-//     // Trim the comment and check if it starts with \"@\" and matches the email format\n-//     return (\n-//       comment.trim().startsWith(\"@\") &&\n-//       emailRegex.test(comment.trim().substring(1))\n-//     );\n-//   };\n-\n-//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Function to get comments and assignments from the API\n-//   const getCommentsAndAssign = () => {\n-//     GetCommentsAndAssign()\n-//       .then((response) => {\n-//         // Handle successful API response\n-//         console.log(\"Comments and Assignments:\", response);\n-//         // Update the state with comments and assignments\n-//         setAssignments(response.assignments);\n-//         setComments(response.comments);\n-//       })\n-//       .catch((error) => {\n-//         // Handle API error\n-//         console.error(\"Error getting comments and assignments:\", error);\n-//       });\n-//   };\n-\n-//   // Effect to clear selected annotation when the annotation mode is toggled\n-//   useEffect(() => {\n-//     setSelectedAnnotation(null);\n-//     // Fetch comments and assignments when the component mounts\n-//     getCommentsAndAssign();\n-//   }, [isAnnotationMode]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <div className=\"d-flex justify-content-center\">\n-//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n-//             <FileViewer\n-//               alt=\"Annotated Image\"\n-//               style={{\n-//                 height: \"100%\",\n-//                 width: \"100%\",\n-//                 position: \"relative\",\n-//                 overflow: \"scroll\",\n-//               }}\n-//               fileType={\"png\"}\n-//               filePath={\n-//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n-//               }\n-//               errorComponent={() => <div>Error loading document</div>}\n-//             />\n-//           </di>\n-//           <Link\n-//             className={`btn-sm mt-7 ${\n-//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n-//             }`}\n-//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n-//           >\n-//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n-//           </Link>\n-//         </div>\n-//         {isAnnotationMode && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               top: 0,\n-//               left: 0,\n-//               width: \"100%\",\n-//               height: \"100%\",\n-//               pointerEvents: \"none\",\n-//             }}\n-//           />\n-//         )}\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {/* {(comments || []).map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))} */}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const adminEmails = [\n-//     \"admin1@example.com\",\n-//     \"admin2@example.com\",\n-//     \"admin3@example.com\",\n-//   ];\n-//   const [inputValue, setInputValue] = useState(\"\");\n-//   const [filteredEmails, setFilteredEmails] = useState([]);\n-\n-//   const handleInputChange = (event) => {\n-//     const value = event.target.value;\n-\n-//     // Check if the input starts with '@'\n-//     if (value.startsWith(\"@\")) {\n-//       // Filter admin emails based on input\n-//       const filteredAdminEmails = adminEmails.filter((email) =>\n-//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n-//       );\n-\n-//       // Update the filtered emails\n-//       setFilteredEmails(filteredAdminEmails);\n-//     } else {\n-//       // Reset filtered emails if input doesn't start with '@'\n-//       setFilteredEmails([]);\n-//     }\n-\n-//     // Update the input value\n-//     setInputValue(value);\n-//   };\n-\n-//   const handleEmailClick = (email) => {\n-//     // Set the selected email as the input value\n-//     setInputValue(email);\n-\n-//     // Clear the filtered emails\n-//     setFilteredEmails([]);\n-//   };\n-\n-//   const handleEmailMouseOver = (email) => {\n-//     // Highlight the email on mouseover\n-//     setInputValue(email);\n-//   };\n-\n-//   return (\n-//     <div style={{ position: \"relative\", width: \"250px\" }}>\n-//       <label>Email:</label>\n-//       <input\n-//         type=\"text\"\n-//         value={inputValue}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Comments or add others with @\"\n-//         style={{ fontSize: \"16px\", width: \"100%\" }}\n-//       />\n-//       {filteredEmails.length > 0 && (\n-//         <ul\n-//           style={{\n-//             listStyle: \"none\",\n-//             padding: 0,\n-//             margin: 0,\n-//             position: \"absolute\",\n-//             top: \"100%\",\n-//             left: 0,\n-//             width: \"100%\",\n-//             border: \"1px solid #ccc\",\n-//             borderTop: \"none\",\n-//             borderRadius: \"0 0 5px 5px\",\n-//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n-//             backgroundColor: \"#fff\",\n-//             zIndex: 1,\n-//           }}\n-//         >\n-//           {filteredEmails.map((email) => (\n-//             <li\n-//               key={email}\n-//               onClick={() => handleEmailClick(email)}\n-//               onMouseOver={() => handleEmailMouseOver(email)}\n-//               style={{\n-//                 padding: \"8px\",\n-//                 cursor: \"pointer\",\n-//               }}\n-//             >\n-//               {email}\n-//             </li>\n-//           ))}\n-//         </ul>\n-//       )}\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-//latest\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const [text, setText] = useState(\"\");\n-//   const [emails, setEmails] = useState([]);\n-//   const [comments, setComments] = useState([]);\n-//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n-\n-//   const handleInputChange = (e) => {\n-//     setText(e.target.value);\n-//     const words = e.target.value.split(/\\s/);\n-//     const lastWord = words[words.length - 1];\n-//     if (lastWord.includes(\"@\")) {\n-//       const email = lastWord.slice(1); // Exclude \"@\"\n-//       // You can fetch the list of emails based on the entered characters\n-//       // For simplicity, I'm just providing a static list of emails\n-//       setEmails([\n-//         \"example1@example.com\",\n-//         \"example2@example.com\",\n-//         \"example3@example.com\",\n-//       ]);\n-//     } else {\n-//       setEmails([]);\n-//     }\n-//   };\n-\n-//   const handleEmailSelect = (email) => {\n-//     setText(text.replace(/@\\S*$/, `@${email} `));\n-//     setSelectedEmailIndex(null);\n-//   };\n-\n-//   const handleCommentChange = (e, index) => {\n-//     const newComments = [...comments];\n-//     newComments[index] = e.target.value;\n-//     setComments(newComments);\n-//   };\n-\n-//   const handleAddComment = () => {\n-//     setComments([...comments, \"\"]);\n-//   };\n-\n-//   const handleAnnotationSubmit = () => {\n-//     // Implement logic to handle annotation submission\n-//     const newAnnotation = {\n-//       emails,\n-//       comments,\n-//     };\n-//     console.log(newAnnotation);\n-//     // Reset states\n-//     setText(\"\");\n-//     setEmails([]);\n-//     setComments([]);\n-//   };\n-\n-//   const renderEmailList = () => {\n-//     return (\n-//       <ul className=\"email-list\">\n-//         {emails.map((email, index) => (\n-//           <li key={index} onClick={() => handleEmailSelect(email)}>\n-//             {email}\n-//           </li>\n-//         ))}\n-//       </ul>\n-//     );\n-//   };\n-\n-//   const renderComments = () => {\n-//     return comments.map((comment, index) => (\n-//       <div key={index}>\n-//         <input\n-//           value={comment || \"\"}\n-//           onChange={(e) => handleCommentChange(e, index)}\n-//           placeholder=\"Add comment...\"\n-//         />\n-//       </div>\n-//     ));\n-//   };\n-\n-//   return (\n-//     <div>\n-//       <textarea\n-//         value={text}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Add annotation here...\"\n-//       />\n-//       {emails.length > 0 && renderEmailList()}\n-//       {renderComments()}\n-//       <button onClick={handleAddComment}>Add Comment</button>\n-//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-\n-import React, { useState } from 'react';\n-import { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\n-// import 'draft-js/dist/Draft.css';\n-import \"draft-js/dist/Draft.css\"\n-const Annotation = () => {\n-  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n-\n-  const handleEditorChange = (newEditorState) => {\n-    setEditorState(newEditorState);\n-  };\n-\n-  const handleBoldClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n-  };\n-\n-  const handleItalicClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n-  };\n-\n-  const handleUnderlineClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n-  };\n-\n-  const handleAlignmentClick = (alignment) => {\n-    handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n-  };\n-\n-const handleColorChange = (color) => {\n-  handleEditorChange(\n-    RichUtils.toggleInlineStyle(editorState, `COLOR_${color.toUpperCase()}`)\n-  );\n-};\n-\n-\n-  const handleClearEditor = () => {\n-    handleEditorChange(EditorState.createEmpty());\n-  };\n-\n-  return (\n-    <div style={{ margin: '20px' }}>\n-      <div style={{ marginBottom: '10px' }}>\n-        <button onClick={handleBoldClick}>Bold</button>\n-        <button onClick={handleItalicClick}>Italic</button>\n-        <button onClick={handleUnderlineClick}>Underline</button>\n-        <button onClick={() => handleAlignmentClick('left')}>Left Align</button>\n-        <button onClick={() => handleAlignmentClick('center')}>Center Align</button>\n-        <button onClick={() => handleAlignmentClick('right')}>Right Align</button>\n-        <button onClick={() => handleAlignmentClick('justify')}>Justify</button>\n-        <button onClick={() => handleColorChange('red')}>Red Color</button>\n-        <button onClick={() => handleColorChange('blue')}>Blue Color</button>\n-        <button onClick={() => handleColorChange('green')}>Green Color</button>\n-        <button onClick={handleClearEditor}>Clear Editor</button>\n-      </div>\n-      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n-        <Editor editorState={editorState} onChange={handleEditorChange} />\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n-      </div>\n-    </div>\n-  );\n-};\n-\n export default Annotation;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1709530879460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,67 +576,38 @@\n \n // export default Annotation;\n \n import React, { useState } from 'react';\n-import { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\n-// import 'draft-js/dist/Draft.css';\n-import \"draft-js/dist/Draft.css\"\n+import { EditorState, convertToRaw } from 'draft-js';\n+import { Editor } from 'react-draft-wysiwyg';\n+import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n+\n const Annotation = () => {\n   const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n \n   const handleEditorChange = (newEditorState) => {\n     setEditorState(newEditorState);\n   };\n \n-  const handleBoldClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n-  };\n-\n-  const handleItalicClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n-  };\n-\n-  const handleUnderlineClick = () => {\n-    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n-  };\n-\n-  const handleAlignmentClick = (alignment) => {\n-    handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n-  };\n-\n-const handleColorChange = (color) => {\n-  handleEditorChange(\n-    RichUtils.toggleInlineStyle(editorState, `COLOR_${color.toUpperCase()}`)\n-  );\n-};\n-\n-\n   const handleClearEditor = () => {\n     handleEditorChange(EditorState.createEmpty());\n   };\n \n   return (\n     <div style={{ margin: '20px' }}>\n-      <div style={{ marginBottom: '10px' }}>\n-        <button onClick={handleBoldClick}>Bold</button>\n-        <button onClick={handleItalicClick}>Italic</button>\n-        <button onClick={handleUnderlineClick}>Underline</button>\n-        <button onClick={() => handleAlignmentClick('left')}>Left Align</button>\n-        <button onClick={() => handleAlignmentClick('center')}>Center Align</button>\n-        <button onClick={() => handleAlignmentClick('right')}>Right Align</button>\n-        <button onClick={() => handleAlignmentClick('justify')}>Justify</button>\n-        <button onClick={() => handleColorChange('red')}>Red Color</button>\n-        <button onClick={() => handleColorChange('blue')}>Blue Color</button>\n-        <button onClick={() => handleColorChange('green')}>Green Color</button>\n-        <button onClick={handleClearEditor}>Clear Editor</button>\n-      </div>\n       <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n-        <Editor editorState={editorState} onChange={handleEditorChange} />\n+        <Editor\n+          editorState={editorState}\n+          onEditorStateChange={handleEditorChange}\n+        />\n       </div>\n\\ No newline at end of file\n       <div style={{ marginTop: '10px' }}>\n+        <button onClick={handleClearEditor}>Clear Editor</button>\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n         <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n       </div>\n     </div>\n   );\n };\n \n-export default Annotation;\n+export default Annotation;\n"
                },
                {
                    "date": 1709530998602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -603,11 +603,16 @@\n       <div style={{ marginTop: '10px' }}>\n         <button onClick={handleClearEditor}>Clear Editor</button>\n       </div>\n       <div style={{ marginTop: '10px' }}>\n-        <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n+        {/* <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre> */}\n+        <div\n+                                    dangerouslySetInnerHTML={{\n+                                      __html: editorState,\n+                                    }}\n+                                  />\n\\ No newline at end of file\n       </div>\n     </div>\n   );\n };\n \n-export default Annotation;\n+export default Annotation;\n"
                },
                {
                    "date": 1709531057821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -606,9 +606,9 @@\n       <div style={{ marginTop: '10px' }}>\n         {/* <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre> */}\n         <div\n                                     dangerouslySetInnerHTML={{\n-                                      __html: editorState,\n+                                      __html: editorState.getCurrentContent(),\n                                     }}\n                                   />\n       </div>\n     </div>\n"
                },
                {
                    "date": 1709531091281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,618 @@\n+// import React, { useState, useEffect } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+\n+// /**\n+//  * Component for text annotation and image annotation.\n+//  */\n+// const Annotation = () => {\n+//   //  Annotation State\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+\n+//   // Handle mouse down event to set current annotation for image annotation\n+//   const handleMouseDown = (e) => {\n+//     if (isAnnotationMode) {\n+//       const imageRect = e.target.getBoundingClientRect();\n+//       setCurrentAnnotation({\n+//         x: e.clientX - imageRect.left,\n+//         y: e.clientY - imageRect.top,\n+//       });\n+//     }\n+//   };\n+\n+//   // Handle mouse up event to save the current annotation for image annotation\n+//   const handleMouseUp = () => {\n+//     if (isAnnotationMode) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   };\n+\n+//   // Toggle annotation mode for image annotation\n+//   const toggleAnnotationMode = () => {\n+//     setAnnotationMode(!isAnnotationMode);\n+//     setSelectedAnnotation(null);\n+//   };\n+\n+//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Generate a list of comments from the state for image annotation\n+//   const getCommentsList = () => {\n+//     const commentsList = [];\n+//     for (const key in comments) {\n+//       if (comments.hasOwnProperty(key)) {\n+//         commentsList.push({ coordinates: key, comment: comments[key] });\n+//       }\n+//     }\n+//     return commentsList;\n+//   };\n+\n+//   // Effect to add the current annotation to the annotations array for image annotation\n+//   useEffect(() => {\n+//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   }, [currentAnnotation]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <img\n+//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n+//           alt=\"Annotated Image\"\n+//           style={{ height: \"50%\", width: \"50%\" }}\n+//           onMouseDown={handleMouseDown}\n+//           onMouseUp={handleMouseUp}\n+//         />\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <button onClick={toggleAnnotationMode}>\n+//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n+//           </button>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {getCommentsList().map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState, useEffect, useRef } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+// import FileViewer from \"react-file-viewer\";\n+// import { MdAddComment } from \"react-icons/md\";\n+// import { FcCancel } from \"react-icons/fc\";\n+// import { Link } from \"react-router-dom\";\n+// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n+\n+// const Annotation = () => {\n+//   // State for image annotations, comments, selected annotation, and annotation mode\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+//   const [assignments, setAssignments] = useState([]);\n+\n+//   const fileViewerRef = useRef(null);\n+\n+//   // Function to handle click events on the FileViewer to capture annotations\n+//   const handleFileViewerClick = (e) => {\n+//     if (isAnnotationMode) {\n+//       const rect = fileViewerRef.current.getBoundingClientRect();\n+//       const x = e.clientX - rect.left;\n+//       const y = e.clientY - rect.top;\n+\n+//       // Add annotation\n+//       addAnnotation({ x, y });\n+//     }\n+//   };\n+\n+//   // Function to add annotation based on conditions\n+//   const addAnnotation = ({ x, y }) => {\n+//     // Retrieve data from local storage\n+//     const id = localStorage.getItem(\"adminId\");\n+//     const docId = 111; //props.docId;\n+//     const assignedUserId = id;\n+//     const email = isEmailConditionMet() ? comments : null;\n+//     const subject = \"\";\n+//     const comment = isEmailConditionMet() ? null : comments;\n+\n+//     // Perform any other conditions or checks required for adding annotations\n+\n+//     // Send data to the API\n+//     let res = ADocAnnotation(\n+//       id,\n+//       docId,\n+//       assignedUserId,\n+//       email,\n+//       subject,\n+//       comment,\n+//       x,\n+//       y\n+//     );\n+//     console.log(res);\n+//     // Update state to include the new annotation\n+//     setImageAnnotations([...imageAnnotations, { x, y }]);\n+//   };\n+\n+//   // Function to check if the email condition is met\n+//   const isEmailConditionMet = (comment) => {\n+//     // Regular expression to match a simple email format\n+//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n+\n+//     // Trim the comment and check if it starts with \"@\" and matches the email format\n+//     return (\n+//       comment.trim().startsWith(\"@\") &&\n+//       emailRegex.test(comment.trim().substring(1))\n+//     );\n+//   };\n+\n+//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Function to get comments and assignments from the API\n+//   const getCommentsAndAssign = () => {\n+//     GetCommentsAndAssign()\n+//       .then((response) => {\n+//         // Handle successful API response\n+//         console.log(\"Comments and Assignments:\", response);\n+//         // Update the state with comments and assignments\n+//         setAssignments(response.assignments);\n+//         setComments(response.comments);\n+//       })\n+//       .catch((error) => {\n+//         // Handle API error\n+//         console.error(\"Error getting comments and assignments:\", error);\n+//       });\n+//   };\n+\n+//   // Effect to clear selected annotation when the annotation mode is toggled\n+//   useEffect(() => {\n+//     setSelectedAnnotation(null);\n+//     // Fetch comments and assignments when the component mounts\n+//     getCommentsAndAssign();\n+//   }, [isAnnotationMode]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <div className=\"d-flex justify-content-center\">\n+//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n+//             <FileViewer\n+//               alt=\"Annotated Image\"\n+//               style={{\n+//                 height: \"100%\",\n+//                 width: \"100%\",\n+//                 position: \"relative\",\n+//                 overflow: \"scroll\",\n+//               }}\n+//               fileType={\"png\"}\n+//               filePath={\n+//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n+//               }\n+//               errorComponent={() => <div>Error loading document</div>}\n+//             />\n+//           </di>\n+//           <Link\n+//             className={`btn-sm mt-7 ${\n+//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n+//             }`}\n+//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n+//           >\n+//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n+//           </Link>\n+//         </div>\n+//         {isAnnotationMode && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               top: 0,\n+//               left: 0,\n+//               width: \"100%\",\n+//               height: \"100%\",\n+//               pointerEvents: \"none\",\n+//             }}\n+//           />\n+//         )}\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {/* {(comments || []).map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))} */}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const adminEmails = [\n+//     \"admin1@example.com\",\n+//     \"admin2@example.com\",\n+//     \"admin3@example.com\",\n+//   ];\n+//   const [inputValue, setInputValue] = useState(\"\");\n+//   const [filteredEmails, setFilteredEmails] = useState([]);\n+\n+//   const handleInputChange = (event) => {\n+//     const value = event.target.value;\n+\n+//     // Check if the input starts with '@'\n+//     if (value.startsWith(\"@\")) {\n+//       // Filter admin emails based on input\n+//       const filteredAdminEmails = adminEmails.filter((email) =>\n+//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n+//       );\n+\n+//       // Update the filtered emails\n+//       setFilteredEmails(filteredAdminEmails);\n+//     } else {\n+//       // Reset filtered emails if input doesn't start with '@'\n+//       setFilteredEmails([]);\n+//     }\n+\n+//     // Update the input value\n+//     setInputValue(value);\n+//   };\n+\n+//   const handleEmailClick = (email) => {\n+//     // Set the selected email as the input value\n+//     setInputValue(email);\n+\n+//     // Clear the filtered emails\n+//     setFilteredEmails([]);\n+//   };\n+\n+//   const handleEmailMouseOver = (email) => {\n+//     // Highlight the email on mouseover\n+//     setInputValue(email);\n+//   };\n+\n+//   return (\n+//     <div style={{ position: \"relative\", width: \"250px\" }}>\n+//       <label>Email:</label>\n+//       <input\n+//         type=\"text\"\n+//         value={inputValue}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Comments or add others with @\"\n+//         style={{ fontSize: \"16px\", width: \"100%\" }}\n+//       />\n+//       {filteredEmails.length > 0 && (\n+//         <ul\n+//           style={{\n+//             listStyle: \"none\",\n+//             padding: 0,\n+//             margin: 0,\n+//             position: \"absolute\",\n+//             top: \"100%\",\n+//             left: 0,\n+//             width: \"100%\",\n+//             border: \"1px solid #ccc\",\n+//             borderTop: \"none\",\n+//             borderRadius: \"0 0 5px 5px\",\n+//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n+//             backgroundColor: \"#fff\",\n+//             zIndex: 1,\n+//           }}\n+//         >\n+//           {filteredEmails.map((email) => (\n+//             <li\n+//               key={email}\n+//               onClick={() => handleEmailClick(email)}\n+//               onMouseOver={() => handleEmailMouseOver(email)}\n+//               style={{\n+//                 padding: \"8px\",\n+//                 cursor: \"pointer\",\n+//               }}\n+//             >\n+//               {email}\n+//             </li>\n+//           ))}\n+//         </ul>\n+//       )}\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+//latest\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const [text, setText] = useState(\"\");\n+//   const [emails, setEmails] = useState([]);\n+//   const [comments, setComments] = useState([]);\n+//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n+\n+//   const handleInputChange = (e) => {\n+//     setText(e.target.value);\n+//     const words = e.target.value.split(/\\s/);\n+//     const lastWord = words[words.length - 1];\n+//     if (lastWord.includes(\"@\")) {\n+//       const email = lastWord.slice(1); // Exclude \"@\"\n+//       // You can fetch the list of emails based on the entered characters\n+//       // For simplicity, I'm just providing a static list of emails\n+//       setEmails([\n+//         \"example1@example.com\",\n+//         \"example2@example.com\",\n+//         \"example3@example.com\",\n+//       ]);\n+//     } else {\n+//       setEmails([]);\n+//     }\n+//   };\n+\n+//   const handleEmailSelect = (email) => {\n+//     setText(text.replace(/@\\S*$/, `@${email} `));\n+//     setSelectedEmailIndex(null);\n+//   };\n+\n+//   const handleCommentChange = (e, index) => {\n+//     const newComments = [...comments];\n+//     newComments[index] = e.target.value;\n+//     setComments(newComments);\n+//   };\n+\n+//   const handleAddComment = () => {\n+//     setComments([...comments, \"\"]);\n+//   };\n+\n+//   const handleAnnotationSubmit = () => {\n+//     // Implement logic to handle annotation submission\n+//     const newAnnotation = {\n+//       emails,\n+//       comments,\n+//     };\n+//     console.log(newAnnotation);\n+//     // Reset states\n+//     setText(\"\");\n+//     setEmails([]);\n+//     setComments([]);\n+//   };\n+\n+//   const renderEmailList = () => {\n+//     return (\n+//       <ul className=\"email-list\">\n+//         {emails.map((email, index) => (\n+//           <li key={index} onClick={() => handleEmailSelect(email)}>\n+//             {email}\n+//           </li>\n+//         ))}\n+//       </ul>\n+//     );\n+//   };\n+\n+//   const renderComments = () => {\n+//     return comments.map((comment, index) => (\n+//       <div key={index}>\n+//         <input\n+//           value={comment || \"\"}\n+//           onChange={(e) => handleCommentChange(e, index)}\n+//           placeholder=\"Add comment...\"\n+//         />\n+//       </div>\n+//     ));\n+//   };\n+\n+//   return (\n+//     <div>\n+//       <textarea\n+//         value={text}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Add annotation here...\"\n+//       />\n+//       {emails.length > 0 && renderEmailList()}\n+//       {renderComments()}\n+//       <button onClick={handleAddComment}>Add Comment</button>\n+//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+\n+import React, { useState } from 'react';\n+import { EditorState, convertToRaw } from 'draft-js';\n+import { Editor } from 'react-draft-wysiwyg';\n+import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n+\n+const Annotation = () => {\n+  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n+\n+  const handleEditorChange = (newEditorState) => {\n+    setEditorState(newEditorState);\n+  };\n+\n+  const handleClearEditor = () => {\n+    handleEditorChange(EditorState.createEmpty());\n+  };\n+\n+  return (\n+    <div style={{ margin: '20px' }}>\n+      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n+        <Editor\n+          editorState={editorState}\n+          onEditorStateChange={handleEditorChange}\n+        />\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <button onClick={handleClearEditor}>Clear Editor</button>\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        {/* <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre> */}\n+        <div\n+                                    dangerouslySetInnerHTML={{\n+                                      __html: (convertToRaw(editorState.getCurrentContent()), null, 2),\n+                                    }}\n+                                  />\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Annotation;\n"
                },
                {
                    "date": 1709531149728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,617 @@\n+// import React, { useState, useEffect } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+\n+// /**\n+//  * Component for text annotation and image annotation.\n+//  */\n+// const Annotation = () => {\n+//   //  Annotation State\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+\n+//   // Handle mouse down event to set current annotation for image annotation\n+//   const handleMouseDown = (e) => {\n+//     if (isAnnotationMode) {\n+//       const imageRect = e.target.getBoundingClientRect();\n+//       setCurrentAnnotation({\n+//         x: e.clientX - imageRect.left,\n+//         y: e.clientY - imageRect.top,\n+//       });\n+//     }\n+//   };\n+\n+//   // Handle mouse up event to save the current annotation for image annotation\n+//   const handleMouseUp = () => {\n+//     if (isAnnotationMode) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   };\n+\n+//   // Toggle annotation mode for image annotation\n+//   const toggleAnnotationMode = () => {\n+//     setAnnotationMode(!isAnnotationMode);\n+//     setSelectedAnnotation(null);\n+//   };\n+\n+//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Generate a list of comments from the state for image annotation\n+//   const getCommentsList = () => {\n+//     const commentsList = [];\n+//     for (const key in comments) {\n+//       if (comments.hasOwnProperty(key)) {\n+//         commentsList.push({ coordinates: key, comment: comments[key] });\n+//       }\n+//     }\n+//     return commentsList;\n+//   };\n+\n+//   // Effect to add the current annotation to the annotations array for image annotation\n+//   useEffect(() => {\n+//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   }, [currentAnnotation]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <img\n+//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n+//           alt=\"Annotated Image\"\n+//           style={{ height: \"50%\", width: \"50%\" }}\n+//           onMouseDown={handleMouseDown}\n+//           onMouseUp={handleMouseUp}\n+//         />\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <button onClick={toggleAnnotationMode}>\n+//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n+//           </button>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {getCommentsList().map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState, useEffect, useRef } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+// import FileViewer from \"react-file-viewer\";\n+// import { MdAddComment } from \"react-icons/md\";\n+// import { FcCancel } from \"react-icons/fc\";\n+// import { Link } from \"react-router-dom\";\n+// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n+\n+// const Annotation = () => {\n+//   // State for image annotations, comments, selected annotation, and annotation mode\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+//   const [assignments, setAssignments] = useState([]);\n+\n+//   const fileViewerRef = useRef(null);\n+\n+//   // Function to handle click events on the FileViewer to capture annotations\n+//   const handleFileViewerClick = (e) => {\n+//     if (isAnnotationMode) {\n+//       const rect = fileViewerRef.current.getBoundingClientRect();\n+//       const x = e.clientX - rect.left;\n+//       const y = e.clientY - rect.top;\n+\n+//       // Add annotation\n+//       addAnnotation({ x, y });\n+//     }\n+//   };\n+\n+//   // Function to add annotation based on conditions\n+//   const addAnnotation = ({ x, y }) => {\n+//     // Retrieve data from local storage\n+//     const id = localStorage.getItem(\"adminId\");\n+//     const docId = 111; //props.docId;\n+//     const assignedUserId = id;\n+//     const email = isEmailConditionMet() ? comments : null;\n+//     const subject = \"\";\n+//     const comment = isEmailConditionMet() ? null : comments;\n+\n+//     // Perform any other conditions or checks required for adding annotations\n+\n+//     // Send data to the API\n+//     let res = ADocAnnotation(\n+//       id,\n+//       docId,\n+//       assignedUserId,\n+//       email,\n+//       subject,\n+//       comment,\n+//       x,\n+//       y\n+//     );\n+//     console.log(res);\n+//     // Update state to include the new annotation\n+//     setImageAnnotations([...imageAnnotations, { x, y }]);\n+//   };\n+\n+//   // Function to check if the email condition is met\n+//   const isEmailConditionMet = (comment) => {\n+//     // Regular expression to match a simple email format\n+//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n+\n+//     // Trim the comment and check if it starts with \"@\" and matches the email format\n+//     return (\n+//       comment.trim().startsWith(\"@\") &&\n+//       emailRegex.test(comment.trim().substring(1))\n+//     );\n+//   };\n+\n+//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Function to get comments and assignments from the API\n+//   const getCommentsAndAssign = () => {\n+//     GetCommentsAndAssign()\n+//       .then((response) => {\n+//         // Handle successful API response\n+//         console.log(\"Comments and Assignments:\", response);\n+//         // Update the state with comments and assignments\n+//         setAssignments(response.assignments);\n+//         setComments(response.comments);\n+//       })\n+//       .catch((error) => {\n+//         // Handle API error\n+//         console.error(\"Error getting comments and assignments:\", error);\n+//       });\n+//   };\n+\n+//   // Effect to clear selected annotation when the annotation mode is toggled\n+//   useEffect(() => {\n+//     setSelectedAnnotation(null);\n+//     // Fetch comments and assignments when the component mounts\n+//     getCommentsAndAssign();\n+//   }, [isAnnotationMode]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <div className=\"d-flex justify-content-center\">\n+//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n+//             <FileViewer\n+//               alt=\"Annotated Image\"\n+//               style={{\n+//                 height: \"100%\",\n+//                 width: \"100%\",\n+//                 position: \"relative\",\n+//                 overflow: \"scroll\",\n+//               }}\n+//               fileType={\"png\"}\n+//               filePath={\n+//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n+//               }\n+//               errorComponent={() => <div>Error loading document</div>}\n+//             />\n+//           </di>\n+//           <Link\n+//             className={`btn-sm mt-7 ${\n+//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n+//             }`}\n+//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n+//           >\n+//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n+//           </Link>\n+//         </div>\n+//         {isAnnotationMode && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               top: 0,\n+//               left: 0,\n+//               width: \"100%\",\n+//               height: \"100%\",\n+//               pointerEvents: \"none\",\n+//             }}\n+//           />\n+//         )}\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {/* {(comments || []).map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))} */}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const adminEmails = [\n+//     \"admin1@example.com\",\n+//     \"admin2@example.com\",\n+//     \"admin3@example.com\",\n+//   ];\n+//   const [inputValue, setInputValue] = useState(\"\");\n+//   const [filteredEmails, setFilteredEmails] = useState([]);\n+\n+//   const handleInputChange = (event) => {\n+//     const value = event.target.value;\n+\n+//     // Check if the input starts with '@'\n+//     if (value.startsWith(\"@\")) {\n+//       // Filter admin emails based on input\n+//       const filteredAdminEmails = adminEmails.filter((email) =>\n+//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n+//       );\n+\n+//       // Update the filtered emails\n+//       setFilteredEmails(filteredAdminEmails);\n+//     } else {\n+//       // Reset filtered emails if input doesn't start with '@'\n+//       setFilteredEmails([]);\n+//     }\n+\n+//     // Update the input value\n+//     setInputValue(value);\n+//   };\n+\n+//   const handleEmailClick = (email) => {\n+//     // Set the selected email as the input value\n+//     setInputValue(email);\n+\n+//     // Clear the filtered emails\n+//     setFilteredEmails([]);\n+//   };\n+\n+//   const handleEmailMouseOver = (email) => {\n+//     // Highlight the email on mouseover\n+//     setInputValue(email);\n+//   };\n+\n+//   return (\n+//     <div style={{ position: \"relative\", width: \"250px\" }}>\n+//       <label>Email:</label>\n+//       <input\n+//         type=\"text\"\n+//         value={inputValue}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Comments or add others with @\"\n+//         style={{ fontSize: \"16px\", width: \"100%\" }}\n+//       />\n+//       {filteredEmails.length > 0 && (\n+//         <ul\n+//           style={{\n+//             listStyle: \"none\",\n+//             padding: 0,\n+//             margin: 0,\n+//             position: \"absolute\",\n+//             top: \"100%\",\n+//             left: 0,\n+//             width: \"100%\",\n+//             border: \"1px solid #ccc\",\n+//             borderTop: \"none\",\n+//             borderRadius: \"0 0 5px 5px\",\n+//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n+//             backgroundColor: \"#fff\",\n+//             zIndex: 1,\n+//           }}\n+//         >\n+//           {filteredEmails.map((email) => (\n+//             <li\n+//               key={email}\n+//               onClick={() => handleEmailClick(email)}\n+//               onMouseOver={() => handleEmailMouseOver(email)}\n+//               style={{\n+//                 padding: \"8px\",\n+//                 cursor: \"pointer\",\n+//               }}\n+//             >\n+//               {email}\n+//             </li>\n+//           ))}\n+//         </ul>\n+//       )}\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+//latest\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const [text, setText] = useState(\"\");\n+//   const [emails, setEmails] = useState([]);\n+//   const [comments, setComments] = useState([]);\n+//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n+\n+//   const handleInputChange = (e) => {\n+//     setText(e.target.value);\n+//     const words = e.target.value.split(/\\s/);\n+//     const lastWord = words[words.length - 1];\n+//     if (lastWord.includes(\"@\")) {\n+//       const email = lastWord.slice(1); // Exclude \"@\"\n+//       // You can fetch the list of emails based on the entered characters\n+//       // For simplicity, I'm just providing a static list of emails\n+//       setEmails([\n+//         \"example1@example.com\",\n+//         \"example2@example.com\",\n+//         \"example3@example.com\",\n+//       ]);\n+//     } else {\n+//       setEmails([]);\n+//     }\n+//   };\n+\n+//   const handleEmailSelect = (email) => {\n+//     setText(text.replace(/@\\S*$/, `@${email} `));\n+//     setSelectedEmailIndex(null);\n+//   };\n+\n+//   const handleCommentChange = (e, index) => {\n+//     const newComments = [...comments];\n+//     newComments[index] = e.target.value;\n+//     setComments(newComments);\n+//   };\n+\n+//   const handleAddComment = () => {\n+//     setComments([...comments, \"\"]);\n+//   };\n+\n+//   const handleAnnotationSubmit = () => {\n+//     // Implement logic to handle annotation submission\n+//     const newAnnotation = {\n+//       emails,\n+//       comments,\n+//     };\n+//     console.log(newAnnotation);\n+//     // Reset states\n+//     setText(\"\");\n+//     setEmails([]);\n+//     setComments([]);\n+//   };\n+\n+//   const renderEmailList = () => {\n+//     return (\n+//       <ul className=\"email-list\">\n+//         {emails.map((email, index) => (\n+//           <li key={index} onClick={() => handleEmailSelect(email)}>\n+//             {email}\n+//           </li>\n+//         ))}\n+//       </ul>\n+//     );\n+//   };\n+\n+//   const renderComments = () => {\n+//     return comments.map((comment, index) => (\n+//       <div key={index}>\n+//         <input\n+//           value={comment || \"\"}\n+//           onChange={(e) => handleCommentChange(e, index)}\n+//           placeholder=\"Add comment...\"\n+//         />\n+//       </div>\n+//     ));\n+//   };\n+\n+//   return (\n+//     <div>\n+//       <textarea\n+//         value={text}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Add annotation here...\"\n+//       />\n+//       {emails.length > 0 && renderEmailList()}\n+//       {renderComments()}\n+//       <button onClick={handleAddComment}>Add Comment</button>\n+//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+\n+import React, { useState } from 'react';\n+import { EditorState, convertToRaw } from 'draft-js';\n+import { Editor } from 'react-draft-wysiwyg';\n+import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n+\n+const Annotation = () => {\n+  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n+\n+  const handleEditorChange = (newEditorState) => {\n+    setEditorState(newEditorState);\n+  };\n+\n+  const handleClearEditor = () => {\n+    handleEditorChange(EditorState.createEmpty());\n+  };\n+\n+  return (\n+    <div style={{ margin: '20px' }}>\n+      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n+        <Editor\n+          editorState={editorState}\n+          onEditorStateChange={handleEditorChange}\n+        />\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <button onClick={handleClearEditor}>Clear Editor</button>\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        {/* <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre> */}\n+        <div\n+                                    dangerouslySetInnerHTML={{\n+                                      __html: convertToRaw(editorState.getCurrentContent())                                    }}\n+                                  />\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Annotation;\n"
                },
                {
                    "date": 1709531260779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,9 +576,9 @@\n \n // export default Annotation;\n \n import React, { useState } from 'react';\n-import { EditorState, convertToRaw } from 'draft-js';\n+import { EditorState, convertToRaw, ContentState } from 'draft-js';\n import { Editor } from 'react-draft-wysiwyg';\n import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n \n const Annotation = () => {\n@@ -591,625 +591,14 @@\n   const handleClearEditor = () => {\n     handleEditorChange(EditorState.createEmpty());\n   };\n \n-  return (\n-    <div style={{ margin: '20px' }}>\n-      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n-        <Editor\n-          editorState={editorState}\n-          onEditorStateChange={handleEditorChange}\n-        />\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <button onClick={handleClearEditor}>Clear Editor</button>\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        {/* <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre> */}\n-        <div\n-                                    dangerouslySetInnerHTML={{\n-                                      __html: convertToRaw(editorState.getCurrentContent())                                    }}\n-                                  />\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default Annotation;\n-// import React, { useState, useEffect } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-\n-// /**\n-//  * Component for text annotation and image annotation.\n-//  */\n-// const Annotation = () => {\n-//   //  Annotation State\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-\n-//   // Handle mouse down event to set current annotation for image annotation\n-//   const handleMouseDown = (e) => {\n-//     if (isAnnotationMode) {\n-//       const imageRect = e.target.getBoundingClientRect();\n-//       setCurrentAnnotation({\n-//         x: e.clientX - imageRect.left,\n-//         y: e.clientY - imageRect.top,\n-//       });\n-//     }\n-//   };\n-\n-//   // Handle mouse up event to save the current annotation for image annotation\n-//   const handleMouseUp = () => {\n-//     if (isAnnotationMode) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   };\n-\n-//   // Toggle annotation mode for image annotation\n-//   const toggleAnnotationMode = () => {\n-//     setAnnotationMode(!isAnnotationMode);\n-//     setSelectedAnnotation(null);\n-//   };\n-\n-//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Generate a list of comments from the state for image annotation\n-//   const getCommentsList = () => {\n-//     const commentsList = [];\n-//     for (const key in comments) {\n-//       if (comments.hasOwnProperty(key)) {\n-//         commentsList.push({ coordinates: key, comment: comments[key] });\n-//       }\n-//     }\n-//     return commentsList;\n-//   };\n-\n-//   // Effect to add the current annotation to the annotations array for image annotation\n-//   useEffect(() => {\n-//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   }, [currentAnnotation]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <img\n-//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n-//           alt=\"Annotated Image\"\n-//           style={{ height: \"50%\", width: \"50%\" }}\n-//           onMouseDown={handleMouseDown}\n-//           onMouseUp={handleMouseUp}\n-//         />\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <button onClick={toggleAnnotationMode}>\n-//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n-//           </button>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {getCommentsList().map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState, useEffect, useRef } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-// import FileViewer from \"react-file-viewer\";\n-// import { MdAddComment } from \"react-icons/md\";\n-// import { FcCancel } from \"react-icons/fc\";\n-// import { Link } from \"react-router-dom\";\n-// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n-\n-// const Annotation = () => {\n-//   // State for image annotations, comments, selected annotation, and annotation mode\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-//   const [assignments, setAssignments] = useState([]);\n-\n-//   const fileViewerRef = useRef(null);\n-\n-//   // Function to handle click events on the FileViewer to capture annotations\n-//   const handleFileViewerClick = (e) => {\n-//     if (isAnnotationMode) {\n-//       const rect = fileViewerRef.current.getBoundingClientRect();\n-//       const x = e.clientX - rect.left;\n-//       const y = e.clientY - rect.top;\n-\n-//       // Add annotation\n-//       addAnnotation({ x, y });\n-//     }\n-//   };\n-\n-//   // Function to add annotation based on conditions\n-//   const addAnnotation = ({ x, y }) => {\n-//     // Retrieve data from local storage\n-//     const id = localStorage.getItem(\"adminId\");\n-//     const docId = 111; //props.docId;\n-//     const assignedUserId = id;\n-//     const email = isEmailConditionMet() ? comments : null;\n-//     const subject = \"\";\n-//     const comment = isEmailConditionMet() ? null : comments;\n-\n-//     // Perform any other conditions or checks required for adding annotations\n-\n-//     // Send data to the API\n-//     let res = ADocAnnotation(\n-//       id,\n-//       docId,\n-//       assignedUserId,\n-//       email,\n-//       subject,\n-//       comment,\n-//       x,\n-//       y\n-//     );\n-//     console.log(res);\n-//     // Update state to include the new annotation\n-//     setImageAnnotations([...imageAnnotations, { x, y }]);\n-//   };\n-\n-//   // Function to check if the email condition is met\n-//   const isEmailConditionMet = (comment) => {\n-//     // Regular expression to match a simple email format\n-//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n-\n-//     // Trim the comment and check if it starts with \"@\" and matches the email format\n-//     return (\n-//       comment.trim().startsWith(\"@\") &&\n-//       emailRegex.test(comment.trim().substring(1))\n-//     );\n-//   };\n-\n-//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Function to get comments and assignments from the API\n-//   const getCommentsAndAssign = () => {\n-//     GetCommentsAndAssign()\n-//       .then((response) => {\n-//         // Handle successful API response\n-//         console.log(\"Comments and Assignments:\", response);\n-//         // Update the state with comments and assignments\n-//         setAssignments(response.assignments);\n-//         setComments(response.comments);\n-//       })\n-//       .catch((error) => {\n-//         // Handle API error\n-//         console.error(\"Error getting comments and assignments:\", error);\n-//       });\n-//   };\n-\n-//   // Effect to clear selected annotation when the annotation mode is toggled\n-//   useEffect(() => {\n-//     setSelectedAnnotation(null);\n-//     // Fetch comments and assignments when the component mounts\n-//     getCommentsAndAssign();\n-//   }, [isAnnotationMode]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <div className=\"d-flex justify-content-center\">\n-//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n-//             <FileViewer\n-//               alt=\"Annotated Image\"\n-//               style={{\n-//                 height: \"100%\",\n-//                 width: \"100%\",\n-//                 position: \"relative\",\n-//                 overflow: \"scroll\",\n-//               }}\n-//               fileType={\"png\"}\n-//               filePath={\n-//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n-//               }\n-//               errorComponent={() => <div>Error loading document</div>}\n-//             />\n-//           </di>\n-//           <Link\n-//             className={`btn-sm mt-7 ${\n-//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n-//             }`}\n-//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n-//           >\n-//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n-//           </Link>\n-//         </div>\n-//         {isAnnotationMode && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               top: 0,\n-//               left: 0,\n-//               width: \"100%\",\n-//               height: \"100%\",\n-//               pointerEvents: \"none\",\n-//             }}\n-//           />\n-//         )}\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {/* {(comments || []).map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))} */}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const adminEmails = [\n-//     \"admin1@example.com\",\n-//     \"admin2@example.com\",\n-//     \"admin3@example.com\",\n-//   ];\n-//   const [inputValue, setInputValue] = useState(\"\");\n-//   const [filteredEmails, setFilteredEmails] = useState([]);\n-\n-//   const handleInputChange = (event) => {\n-//     const value = event.target.value;\n-\n-//     // Check if the input starts with '@'\n-//     if (value.startsWith(\"@\")) {\n-//       // Filter admin emails based on input\n-//       const filteredAdminEmails = adminEmails.filter((email) =>\n-//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n-//       );\n-\n-//       // Update the filtered emails\n-//       setFilteredEmails(filteredAdminEmails);\n-//     } else {\n-//       // Reset filtered emails if input doesn't start with '@'\n-//       setFilteredEmails([]);\n-//     }\n-\n-//     // Update the input value\n-//     setInputValue(value);\n-//   };\n-\n-//   const handleEmailClick = (email) => {\n-//     // Set the selected email as the input value\n-//     setInputValue(email);\n-\n-//     // Clear the filtered emails\n-//     setFilteredEmails([]);\n-//   };\n-\n-//   const handleEmailMouseOver = (email) => {\n-//     // Highlight the email on mouseover\n-//     setInputValue(email);\n-//   };\n-\n-//   return (\n-//     <div style={{ position: \"relative\", width: \"250px\" }}>\n-//       <label>Email:</label>\n-//       <input\n-//         type=\"text\"\n-//         value={inputValue}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Comments or add others with @\"\n-//         style={{ fontSize: \"16px\", width: \"100%\" }}\n-//       />\n-//       {filteredEmails.length > 0 && (\n-//         <ul\n-//           style={{\n-//             listStyle: \"none\",\n-//             padding: 0,\n-//             margin: 0,\n-//             position: \"absolute\",\n-//             top: \"100%\",\n-//             left: 0,\n-//             width: \"100%\",\n-//             border: \"1px solid #ccc\",\n-//             borderTop: \"none\",\n-//             borderRadius: \"0 0 5px 5px\",\n-//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n-//             backgroundColor: \"#fff\",\n-//             zIndex: 1,\n-//           }}\n-//         >\n-//           {filteredEmails.map((email) => (\n-//             <li\n-//               key={email}\n-//               onClick={() => handleEmailClick(email)}\n-//               onMouseOver={() => handleEmailMouseOver(email)}\n-//               style={{\n-//                 padding: \"8px\",\n-//                 cursor: \"pointer\",\n-//               }}\n-//             >\n-//               {email}\n-//             </li>\n-//           ))}\n-//         </ul>\n-//       )}\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-//latest\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const [text, setText] = useState(\"\");\n-//   const [emails, setEmails] = useState([]);\n-//   const [comments, setComments] = useState([]);\n-//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n-\n-//   const handleInputChange = (e) => {\n-//     setText(e.target.value);\n-//     const words = e.target.value.split(/\\s/);\n-//     const lastWord = words[words.length - 1];\n-//     if (lastWord.includes(\"@\")) {\n-//       const email = lastWord.slice(1); // Exclude \"@\"\n-//       // You can fetch the list of emails based on the entered characters\n-//       // For simplicity, I'm just providing a static list of emails\n-//       setEmails([\n-//         \"example1@example.com\",\n-//         \"example2@example.com\",\n-//         \"example3@example.com\",\n-//       ]);\n-//     } else {\n-//       setEmails([]);\n-//     }\n-//   };\n-\n-//   const handleEmailSelect = (email) => {\n-//     setText(text.replace(/@\\S*$/, `@${email} `));\n-//     setSelectedEmailIndex(null);\n-//   };\n-\n-//   const handleCommentChange = (e, index) => {\n-//     const newComments = [...comments];\n-//     newComments[index] = e.target.value;\n-//     setComments(newComments);\n-//   };\n-\n-//   const handleAddComment = () => {\n-//     setComments([...comments, \"\"]);\n-//   };\n-\n-//   const handleAnnotationSubmit = () => {\n-//     // Implement logic to handle annotation submission\n-//     const newAnnotation = {\n-//       emails,\n-//       comments,\n-//     };\n-//     console.log(newAnnotation);\n-//     // Reset states\n-//     setText(\"\");\n-//     setEmails([]);\n-//     setComments([]);\n-//   };\n-\n-//   const renderEmailList = () => {\n-//     return (\n-//       <ul className=\"email-list\">\n-//         {emails.map((email, index) => (\n-//           <li key={index} onClick={() => handleEmailSelect(email)}>\n-//             {email}\n-//           </li>\n-//         ))}\n-//       </ul>\n-//     );\n-//   };\n-\n-//   const renderComments = () => {\n-//     return comments.map((comment, index) => (\n-//       <div key={index}>\n-//         <input\n-//           value={comment || \"\"}\n-//           onChange={(e) => handleCommentChange(e, index)}\n-//           placeholder=\"Add comment...\"\n-//         />\n-//       </div>\n-//     ));\n-//   };\n-\n-//   return (\n-//     <div>\n-//       <textarea\n-//         value={text}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Add annotation here...\"\n-//       />\n-//       {emails.length > 0 && renderEmailList()}\n-//       {renderComments()}\n-//       <button onClick={handleAddComment}>Add Comment</button>\n-//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-\n-import React, { useState } from 'react';\n-import { EditorState, convertToRaw } from 'draft-js';\n-import { Editor } from 'react-draft-wysiwyg';\n-import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n-\n-const Annotation = () => {\n-  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n-\n-  const handleEditorChange = (newEditorState) => {\n-    setEditorState(newEditorState);\n+  const getContentAsPlainText = () => {\n+    const contentState = editorState.getCurrentContent();\n+    const plainText = contentState.getBlocksAsArray().map(block => block.getText()).join('\\n');\n+    return plainText;\n   };\n \n-  const handleClearEditor = () => {\n-    handleEditorChange(EditorState.createEmpty());\n-  };\n-\n   return (\n     <div style={{ margin: '20px' }}>\n       <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n         <Editor\n@@ -1220,634 +609,12 @@\n       <div style={{ marginTop: '10px' }}>\n         <button onClick={handleClearEditor}>Clear Editor</button>\n       </div>\n       <div style={{ marginTop: '10px' }}>\n-        {/* <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre> */}\n-        <div\n-                                    dangerouslySetInnerHTML={{\n-                                      __html: (convertToRaw(editorState.getCurrentContent()), null, 2),\n-                                    }}\n-                                  />\n+        <pre>{getContentAsPlainText()}</pre>\n       </div>\n     </div>\n   );\n };\n \n export default Annotation;\n-// import React, { useState, useEffect } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n \n-// /**\n-//  * Component for text annotation and image annotation.\n-//  */\n-// const Annotation = () => {\n-//   //  Annotation State\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-\n-//   // Handle mouse down event to set current annotation for image annotation\n-//   const handleMouseDown = (e) => {\n-//     if (isAnnotationMode) {\n-//       const imageRect = e.target.getBoundingClientRect();\n-//       setCurrentAnnotation({\n-//         x: e.clientX - imageRect.left,\n-//         y: e.clientY - imageRect.top,\n-//       });\n-//     }\n-//   };\n-\n-//   // Handle mouse up event to save the current annotation for image annotation\n-//   const handleMouseUp = () => {\n-//     if (isAnnotationMode) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   };\n-\n-//   // Toggle annotation mode for image annotation\n-//   const toggleAnnotationMode = () => {\n-//     setAnnotationMode(!isAnnotationMode);\n-//     setSelectedAnnotation(null);\n-//   };\n-\n-//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Generate a list of comments from the state for image annotation\n-//   const getCommentsList = () => {\n-//     const commentsList = [];\n-//     for (const key in comments) {\n-//       if (comments.hasOwnProperty(key)) {\n-//         commentsList.push({ coordinates: key, comment: comments[key] });\n-//       }\n-//     }\n-//     return commentsList;\n-//   };\n-\n-//   // Effect to add the current annotation to the annotations array for image annotation\n-//   useEffect(() => {\n-//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   }, [currentAnnotation]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <img\n-//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n-//           alt=\"Annotated Image\"\n-//           style={{ height: \"50%\", width: \"50%\" }}\n-//           onMouseDown={handleMouseDown}\n-//           onMouseUp={handleMouseUp}\n-//         />\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <button onClick={toggleAnnotationMode}>\n-//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n-//           </button>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {getCommentsList().map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState, useEffect, useRef } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-// import FileViewer from \"react-file-viewer\";\n-// import { MdAddComment } from \"react-icons/md\";\n-// import { FcCancel } from \"react-icons/fc\";\n-// import { Link } from \"react-router-dom\";\n-// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n-\n-// const Annotation = () => {\n-//   // State for image annotations, comments, selected annotation, and annotation mode\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-//   const [assignments, setAssignments] = useState([]);\n-\n-//   const fileViewerRef = useRef(null);\n-\n-//   // Function to handle click events on the FileViewer to capture annotations\n-//   const handleFileViewerClick = (e) => {\n-//     if (isAnnotationMode) {\n-//       const rect = fileViewerRef.current.getBoundingClientRect();\n-//       const x = e.clientX - rect.left;\n-//       const y = e.clientY - rect.top;\n-\n-//       // Add annotation\n-//       addAnnotation({ x, y });\n-//     }\n-//   };\n-\n-//   // Function to add annotation based on conditions\n-//   const addAnnotation = ({ x, y }) => {\n-//     // Retrieve data from local storage\n-//     const id = localStorage.getItem(\"adminId\");\n-//     const docId = 111; //props.docId;\n-//     const assignedUserId = id;\n-//     const email = isEmailConditionMet() ? comments : null;\n-//     const subject = \"\";\n-//     const comment = isEmailConditionMet() ? null : comments;\n-\n-//     // Perform any other conditions or checks required for adding annotations\n-\n-//     // Send data to the API\n-//     let res = ADocAnnotation(\n-//       id,\n-//       docId,\n-//       assignedUserId,\n-//       email,\n-//       subject,\n-//       comment,\n-//       x,\n-//       y\n-//     );\n-//     console.log(res);\n-//     // Update state to include the new annotation\n-//     setImageAnnotations([...imageAnnotations, { x, y }]);\n-//   };\n-\n-//   // Function to check if the email condition is met\n-//   const isEmailConditionMet = (comment) => {\n-//     // Regular expression to match a simple email format\n-//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n-\n-//     // Trim the comment and check if it starts with \"@\" and matches the email format\n-//     return (\n-//       comment.trim().startsWith(\"@\") &&\n-//       emailRegex.test(comment.trim().substring(1))\n-//     );\n-//   };\n-\n-//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Function to get comments and assignments from the API\n-//   const getCommentsAndAssign = () => {\n-//     GetCommentsAndAssign()\n-//       .then((response) => {\n-//         // Handle successful API response\n-//         console.log(\"Comments and Assignments:\", response);\n-//         // Update the state with comments and assignments\n-//         setAssignments(response.assignments);\n-//         setComments(response.comments);\n-//       })\n-//       .catch((error) => {\n-//         // Handle API error\n-//         console.error(\"Error getting comments and assignments:\", error);\n-//       });\n-//   };\n-\n-//   // Effect to clear selected annotation when the annotation mode is toggled\n-//   useEffect(() => {\n-//     setSelectedAnnotation(null);\n-//     // Fetch comments and assignments when the component mounts\n-//     getCommentsAndAssign();\n-//   }, [isAnnotationMode]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <div className=\"d-flex justify-content-center\">\n-//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n-//             <FileViewer\n-//               alt=\"Annotated Image\"\n-//               style={{\n-//                 height: \"100%\",\n-//                 width: \"100%\",\n-//                 position: \"relative\",\n-//                 overflow: \"scroll\",\n-//               }}\n-//               fileType={\"png\"}\n-//               filePath={\n-//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n-//               }\n-//               errorComponent={() => <div>Error loading document</div>}\n-//             />\n-//           </di>\n-//           <Link\n-//             className={`btn-sm mt-7 ${\n-//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n-//             }`}\n-//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n-//           >\n-//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n-//           </Link>\n-//         </div>\n-//         {isAnnotationMode && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               top: 0,\n-//               left: 0,\n-//               width: \"100%\",\n-//               height: \"100%\",\n-//               pointerEvents: \"none\",\n-//             }}\n-//           />\n-//         )}\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {/* {(comments || []).map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))} */}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const adminEmails = [\n-//     \"admin1@example.com\",\n-//     \"admin2@example.com\",\n-//     \"admin3@example.com\",\n-//   ];\n-//   const [inputValue, setInputValue] = useState(\"\");\n-//   const [filteredEmails, setFilteredEmails] = useState([]);\n-\n-//   const handleInputChange = (event) => {\n-//     const value = event.target.value;\n-\n-//     // Check if the input starts with '@'\n-//     if (value.startsWith(\"@\")) {\n-//       // Filter admin emails based on input\n-//       const filteredAdminEmails = adminEmails.filter((email) =>\n-//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n-//       );\n-\n-//       // Update the filtered emails\n-//       setFilteredEmails(filteredAdminEmails);\n-//     } else {\n-//       // Reset filtered emails if input doesn't start with '@'\n-//       setFilteredEmails([]);\n-//     }\n-\n-//     // Update the input value\n-//     setInputValue(value);\n-//   };\n-\n-//   const handleEmailClick = (email) => {\n-//     // Set the selected email as the input value\n-//     setInputValue(email);\n-\n-//     // Clear the filtered emails\n-//     setFilteredEmails([]);\n-//   };\n-\n-//   const handleEmailMouseOver = (email) => {\n-//     // Highlight the email on mouseover\n-//     setInputValue(email);\n-//   };\n-\n-//   return (\n-//     <div style={{ position: \"relative\", width: \"250px\" }}>\n-//       <label>Email:</label>\n-//       <input\n-//         type=\"text\"\n-//         value={inputValue}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Comments or add others with @\"\n-//         style={{ fontSize: \"16px\", width: \"100%\" }}\n-//       />\n-//       {filteredEmails.length > 0 && (\n-//         <ul\n-//           style={{\n-//             listStyle: \"none\",\n-//             padding: 0,\n-//             margin: 0,\n-//             position: \"absolute\",\n-//             top: \"100%\",\n-//             left: 0,\n-//             width: \"100%\",\n-//             border: \"1px solid #ccc\",\n-//             borderTop: \"none\",\n-//             borderRadius: \"0 0 5px 5px\",\n-//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n-//             backgroundColor: \"#fff\",\n-//             zIndex: 1,\n-//           }}\n-//         >\n-//           {filteredEmails.map((email) => (\n-//             <li\n-//               key={email}\n-//               onClick={() => handleEmailClick(email)}\n-//               onMouseOver={() => handleEmailMouseOver(email)}\n-//               style={{\n-//                 padding: \"8px\",\n-//                 cursor: \"pointer\",\n-//               }}\n-//             >\n-//               {email}\n-//             </li>\n-//           ))}\n-//         </ul>\n-//       )}\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-//latest\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const [text, setText] = useState(\"\");\n-//   const [emails, setEmails] = useState([]);\n-//   const [comments, setComments] = useState([]);\n-//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n-\n-//   const handleInputChange = (e) => {\n-//     setText(e.target.value);\n-//     const words = e.target.value.split(/\\s/);\n-//     const lastWord = words[words.length - 1];\n-//     if (lastWord.includes(\"@\")) {\n-//       const email = lastWord.slice(1); // Exclude \"@\"\n-//       // You can fetch the list of emails based on the entered characters\n-//       // For simplicity, I'm just providing a static list of emails\n-//       setEmails([\n-//         \"example1@example.com\",\n-//         \"example2@example.com\",\n-//         \"example3@example.com\",\n-//       ]);\n-//     } else {\n-//       setEmails([]);\n-//     }\n-//   };\n-\n-//   const handleEmailSelect = (email) => {\n-//     setText(text.replace(/@\\S*$/, `@${email} `));\n-//     setSelectedEmailIndex(null);\n-//   };\n-\n-//   const handleCommentChange = (e, index) => {\n-//     const newComments = [...comments];\n-//     newComments[index] = e.target.value;\n-//     setComments(newComments);\n-//   };\n-\n-//   const handleAddComment = () => {\n-//     setComments([...comments, \"\"]);\n-//   };\n-\n-//   const handleAnnotationSubmit = () => {\n-//     // Implement logic to handle annotation submission\n-//     const newAnnotation = {\n-//       emails,\n-//       comments,\n-//     };\n-//     console.log(newAnnotation);\n-//     // Reset states\n-//     setText(\"\");\n-//     setEmails([]);\n-//     setComments([]);\n-//   };\n-\n-//   const renderEmailList = () => {\n-//     return (\n-//       <ul className=\"email-list\">\n-//         {emails.map((email, index) => (\n-//           <li key={index} onClick={() => handleEmailSelect(email)}>\n-//             {email}\n-//           </li>\n-//         ))}\n-//       </ul>\n-//     );\n-//   };\n-\n-//   const renderComments = () => {\n-//     return comments.map((comment, index) => (\n-//       <div key={index}>\n-//         <input\n-//           value={comment || \"\"}\n-//           onChange={(e) => handleCommentChange(e, index)}\n-//           placeholder=\"Add comment...\"\n-//         />\n-//       </div>\n-//     ));\n-//   };\n-\n-//   return (\n-//     <div>\n-//       <textarea\n-//         value={text}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Add annotation here...\"\n-//       />\n-//       {emails.length > 0 && renderEmailList()}\n-//       {renderComments()}\n-//       <button onClick={handleAddComment}>Add Comment</button>\n-//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-\n-import React, { useState } from 'react';\n-import { EditorState, convertToRaw } from 'draft-js';\n-import { Editor } from 'react-draft-wysiwyg';\n-import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n-\n-const Annotation = () => {\n-  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n-\n-  const handleEditorChange = (newEditorState) => {\n-    setEditorState(newEditorState);\n-  };\n-\n-  const handleClearEditor = () => {\n-    handleEditorChange(EditorState.createEmpty());\n-  };\n-\n-  return (\n-    <div style={{ margin: '20px' }}>\n-      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n-        <Editor\n-          editorState={editorState}\n-          onEditorStateChange={handleEditorChange}\n-        />\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <button onClick={handleClearEditor}>Clear Editor</button>\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        {/* <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre> */}\n-        <div\n-                                    dangerouslySetInnerHTML={{\n-                                      __html: editorState.getCurrentContent(),\n-                                    }}\n-                                  />\n-      </div>\n-    </div>\n-  );\n-};\n-\n\\ No newline at end of file\n-export default Annotation;\n"
                },
                {
                    "date": 1709531362703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,623 @@\n+// import React, { useState, useEffect } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+\n+// /**\n+//  * Component for text annotation and image annotation.\n+//  */\n+// const Annotation = () => {\n+//   //  Annotation State\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+\n+//   // Handle mouse down event to set current annotation for image annotation\n+//   const handleMouseDown = (e) => {\n+//     if (isAnnotationMode) {\n+//       const imageRect = e.target.getBoundingClientRect();\n+//       setCurrentAnnotation({\n+//         x: e.clientX - imageRect.left,\n+//         y: e.clientY - imageRect.top,\n+//       });\n+//     }\n+//   };\n+\n+//   // Handle mouse up event to save the current annotation for image annotation\n+//   const handleMouseUp = () => {\n+//     if (isAnnotationMode) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   };\n+\n+//   // Toggle annotation mode for image annotation\n+//   const toggleAnnotationMode = () => {\n+//     setAnnotationMode(!isAnnotationMode);\n+//     setSelectedAnnotation(null);\n+//   };\n+\n+//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Generate a list of comments from the state for image annotation\n+//   const getCommentsList = () => {\n+//     const commentsList = [];\n+//     for (const key in comments) {\n+//       if (comments.hasOwnProperty(key)) {\n+//         commentsList.push({ coordinates: key, comment: comments[key] });\n+//       }\n+//     }\n+//     return commentsList;\n+//   };\n+\n+//   // Effect to add the current annotation to the annotations array for image annotation\n+//   useEffect(() => {\n+//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   }, [currentAnnotation]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <img\n+//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n+//           alt=\"Annotated Image\"\n+//           style={{ height: \"50%\", width: \"50%\" }}\n+//           onMouseDown={handleMouseDown}\n+//           onMouseUp={handleMouseUp}\n+//         />\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <button onClick={toggleAnnotationMode}>\n+//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n+//           </button>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {getCommentsList().map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState, useEffect, useRef } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+// import FileViewer from \"react-file-viewer\";\n+// import { MdAddComment } from \"react-icons/md\";\n+// import { FcCancel } from \"react-icons/fc\";\n+// import { Link } from \"react-router-dom\";\n+// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n+\n+// const Annotation = () => {\n+//   // State for image annotations, comments, selected annotation, and annotation mode\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+//   const [assignments, setAssignments] = useState([]);\n+\n+//   const fileViewerRef = useRef(null);\n+\n+//   // Function to handle click events on the FileViewer to capture annotations\n+//   const handleFileViewerClick = (e) => {\n+//     if (isAnnotationMode) {\n+//       const rect = fileViewerRef.current.getBoundingClientRect();\n+//       const x = e.clientX - rect.left;\n+//       const y = e.clientY - rect.top;\n+\n+//       // Add annotation\n+//       addAnnotation({ x, y });\n+//     }\n+//   };\n+\n+//   // Function to add annotation based on conditions\n+//   const addAnnotation = ({ x, y }) => {\n+//     // Retrieve data from local storage\n+//     const id = localStorage.getItem(\"adminId\");\n+//     const docId = 111; //props.docId;\n+//     const assignedUserId = id;\n+//     const email = isEmailConditionMet() ? comments : null;\n+//     const subject = \"\";\n+//     const comment = isEmailConditionMet() ? null : comments;\n+\n+//     // Perform any other conditions or checks required for adding annotations\n+\n+//     // Send data to the API\n+//     let res = ADocAnnotation(\n+//       id,\n+//       docId,\n+//       assignedUserId,\n+//       email,\n+//       subject,\n+//       comment,\n+//       x,\n+//       y\n+//     );\n+//     console.log(res);\n+//     // Update state to include the new annotation\n+//     setImageAnnotations([...imageAnnotations, { x, y }]);\n+//   };\n+\n+//   // Function to check if the email condition is met\n+//   const isEmailConditionMet = (comment) => {\n+//     // Regular expression to match a simple email format\n+//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n+\n+//     // Trim the comment and check if it starts with \"@\" and matches the email format\n+//     return (\n+//       comment.trim().startsWith(\"@\") &&\n+//       emailRegex.test(comment.trim().substring(1))\n+//     );\n+//   };\n+\n+//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Function to get comments and assignments from the API\n+//   const getCommentsAndAssign = () => {\n+//     GetCommentsAndAssign()\n+//       .then((response) => {\n+//         // Handle successful API response\n+//         console.log(\"Comments and Assignments:\", response);\n+//         // Update the state with comments and assignments\n+//         setAssignments(response.assignments);\n+//         setComments(response.comments);\n+//       })\n+//       .catch((error) => {\n+//         // Handle API error\n+//         console.error(\"Error getting comments and assignments:\", error);\n+//       });\n+//   };\n+\n+//   // Effect to clear selected annotation when the annotation mode is toggled\n+//   useEffect(() => {\n+//     setSelectedAnnotation(null);\n+//     // Fetch comments and assignments when the component mounts\n+//     getCommentsAndAssign();\n+//   }, [isAnnotationMode]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <div className=\"d-flex justify-content-center\">\n+//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n+//             <FileViewer\n+//               alt=\"Annotated Image\"\n+//               style={{\n+//                 height: \"100%\",\n+//                 width: \"100%\",\n+//                 position: \"relative\",\n+//                 overflow: \"scroll\",\n+//               }}\n+//               fileType={\"png\"}\n+//               filePath={\n+//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n+//               }\n+//               errorComponent={() => <div>Error loading document</div>}\n+//             />\n+//           </di>\n+//           <Link\n+//             className={`btn-sm mt-7 ${\n+//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n+//             }`}\n+//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n+//           >\n+//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n+//           </Link>\n+//         </div>\n+//         {isAnnotationMode && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               top: 0,\n+//               left: 0,\n+//               width: \"100%\",\n+//               height: \"100%\",\n+//               pointerEvents: \"none\",\n+//             }}\n+//           />\n+//         )}\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {/* {(comments || []).map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))} */}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const adminEmails = [\n+//     \"admin1@example.com\",\n+//     \"admin2@example.com\",\n+//     \"admin3@example.com\",\n+//   ];\n+//   const [inputValue, setInputValue] = useState(\"\");\n+//   const [filteredEmails, setFilteredEmails] = useState([]);\n+\n+//   const handleInputChange = (event) => {\n+//     const value = event.target.value;\n+\n+//     // Check if the input starts with '@'\n+//     if (value.startsWith(\"@\")) {\n+//       // Filter admin emails based on input\n+//       const filteredAdminEmails = adminEmails.filter((email) =>\n+//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n+//       );\n+\n+//       // Update the filtered emails\n+//       setFilteredEmails(filteredAdminEmails);\n+//     } else {\n+//       // Reset filtered emails if input doesn't start with '@'\n+//       setFilteredEmails([]);\n+//     }\n+\n+//     // Update the input value\n+//     setInputValue(value);\n+//   };\n+\n+//   const handleEmailClick = (email) => {\n+//     // Set the selected email as the input value\n+//     setInputValue(email);\n+\n+//     // Clear the filtered emails\n+//     setFilteredEmails([]);\n+//   };\n+\n+//   const handleEmailMouseOver = (email) => {\n+//     // Highlight the email on mouseover\n+//     setInputValue(email);\n+//   };\n+\n+//   return (\n+//     <div style={{ position: \"relative\", width: \"250px\" }}>\n+//       <label>Email:</label>\n+//       <input\n+//         type=\"text\"\n+//         value={inputValue}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Comments or add others with @\"\n+//         style={{ fontSize: \"16px\", width: \"100%\" }}\n+//       />\n+//       {filteredEmails.length > 0 && (\n+//         <ul\n+//           style={{\n+//             listStyle: \"none\",\n+//             padding: 0,\n+//             margin: 0,\n+//             position: \"absolute\",\n+//             top: \"100%\",\n+//             left: 0,\n+//             width: \"100%\",\n+//             border: \"1px solid #ccc\",\n+//             borderTop: \"none\",\n+//             borderRadius: \"0 0 5px 5px\",\n+//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n+//             backgroundColor: \"#fff\",\n+//             zIndex: 1,\n+//           }}\n+//         >\n+//           {filteredEmails.map((email) => (\n+//             <li\n+//               key={email}\n+//               onClick={() => handleEmailClick(email)}\n+//               onMouseOver={() => handleEmailMouseOver(email)}\n+//               style={{\n+//                 padding: \"8px\",\n+//                 cursor: \"pointer\",\n+//               }}\n+//             >\n+//               {email}\n+//             </li>\n+//           ))}\n+//         </ul>\n+//       )}\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+//latest\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const [text, setText] = useState(\"\");\n+//   const [emails, setEmails] = useState([]);\n+//   const [comments, setComments] = useState([]);\n+//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n+\n+//   const handleInputChange = (e) => {\n+//     setText(e.target.value);\n+//     const words = e.target.value.split(/\\s/);\n+//     const lastWord = words[words.length - 1];\n+//     if (lastWord.includes(\"@\")) {\n+//       const email = lastWord.slice(1); // Exclude \"@\"\n+//       // You can fetch the list of emails based on the entered characters\n+//       // For simplicity, I'm just providing a static list of emails\n+//       setEmails([\n+//         \"example1@example.com\",\n+//         \"example2@example.com\",\n+//         \"example3@example.com\",\n+//       ]);\n+//     } else {\n+//       setEmails([]);\n+//     }\n+//   };\n+\n+//   const handleEmailSelect = (email) => {\n+//     setText(text.replace(/@\\S*$/, `@${email} `));\n+//     setSelectedEmailIndex(null);\n+//   };\n+\n+//   const handleCommentChange = (e, index) => {\n+//     const newComments = [...comments];\n+//     newComments[index] = e.target.value;\n+//     setComments(newComments);\n+//   };\n+\n+//   const handleAddComment = () => {\n+//     setComments([...comments, \"\"]);\n+//   };\n+\n+//   const handleAnnotationSubmit = () => {\n+//     // Implement logic to handle annotation submission\n+//     const newAnnotation = {\n+//       emails,\n+//       comments,\n+//     };\n+//     console.log(newAnnotation);\n+//     // Reset states\n+//     setText(\"\");\n+//     setEmails([]);\n+//     setComments([]);\n+//   };\n+\n+//   const renderEmailList = () => {\n+//     return (\n+//       <ul className=\"email-list\">\n+//         {emails.map((email, index) => (\n+//           <li key={index} onClick={() => handleEmailSelect(email)}>\n+//             {email}\n+//           </li>\n+//         ))}\n+//       </ul>\n+//     );\n+//   };\n+\n+//   const renderComments = () => {\n+//     return comments.map((comment, index) => (\n+//       <div key={index}>\n+//         <input\n+//           value={comment || \"\"}\n+//           onChange={(e) => handleCommentChange(e, index)}\n+//           placeholder=\"Add comment...\"\n+//         />\n+//       </div>\n+//     ));\n+//   };\n+\n+//   return (\n+//     <div>\n+//       <textarea\n+//         value={text}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Add annotation here...\"\n+//       />\n+//       {emails.length > 0 && renderEmailList()}\n+//       {renderComments()}\n+//       <button onClick={handleAddComment}>Add Comment</button>\n+//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+\n+import React, { useState } from 'react';\n+import { EditorState, convertToRaw } from 'draft-js';\n+import { Editor } from 'react-draft-wysiwyg';\n+import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n+\n+const Annotation = () => {\n+  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n+\n+  const handleEditorChange = (newEditorState) => {\n+    setEditorState(newEditorState);\n+  };\n+\n+  const handleClearEditor = () => {\n+    handleEditorChange(EditorState.createEmpty());\n+  };\n+\n+  const getContentAsHTML = () => {\n+    const contentState = editorState.getCurrentContent();\n+    const rawContentState = convertToRaw(contentState);\n+    const html = rawContentState.blocks.map(\n+      block => `<p>${block.text}</p>`\n+    ).join('');\n+    return { __html: html };\n+  };\n+\n+  return (\n+    <div style={{ margin: '20px' }}>\n+      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n+        <Editor\n+          editorState={editorState}\n+          onEditorStateChange={handleEditorChange}\n+        />\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <button onClick={handleClearEditor}>Clear Editor</button>\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <div dangerouslySetInnerHTML={getContentAsHTML()} />\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Annotation;\n+\n"
                },
                {
                    "date": 1709531583241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,628 @@\n+// import React, { useState, useEffect } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+\n+// /**\n+//  * Component for text annotation and image annotation.\n+//  */\n+// const Annotation = () => {\n+//   //  Annotation State\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+\n+//   // Handle mouse down event to set current annotation for image annotation\n+//   const handleMouseDown = (e) => {\n+//     if (isAnnotationMode) {\n+//       const imageRect = e.target.getBoundingClientRect();\n+//       setCurrentAnnotation({\n+//         x: e.clientX - imageRect.left,\n+//         y: e.clientY - imageRect.top,\n+//       });\n+//     }\n+//   };\n+\n+//   // Handle mouse up event to save the current annotation for image annotation\n+//   const handleMouseUp = () => {\n+//     if (isAnnotationMode) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   };\n+\n+//   // Toggle annotation mode for image annotation\n+//   const toggleAnnotationMode = () => {\n+//     setAnnotationMode(!isAnnotationMode);\n+//     setSelectedAnnotation(null);\n+//   };\n+\n+//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Generate a list of comments from the state for image annotation\n+//   const getCommentsList = () => {\n+//     const commentsList = [];\n+//     for (const key in comments) {\n+//       if (comments.hasOwnProperty(key)) {\n+//         commentsList.push({ coordinates: key, comment: comments[key] });\n+//       }\n+//     }\n+//     return commentsList;\n+//   };\n+\n+//   // Effect to add the current annotation to the annotations array for image annotation\n+//   useEffect(() => {\n+//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n+//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n+//       setCurrentAnnotation({ x: 0, y: 0 });\n+//     }\n+//   }, [currentAnnotation]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <img\n+//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n+//           alt=\"Annotated Image\"\n+//           style={{ height: \"50%\", width: \"50%\" }}\n+//           onMouseDown={handleMouseDown}\n+//           onMouseUp={handleMouseUp}\n+//         />\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <button onClick={toggleAnnotationMode}>\n+//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n+//           </button>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {getCommentsList().map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState, useEffect, useRef } from \"react\";\n+// import { FaFlag } from \"react-icons/fa\";\n+// import FileViewer from \"react-file-viewer\";\n+// import { MdAddComment } from \"react-icons/md\";\n+// import { FcCancel } from \"react-icons/fc\";\n+// import { Link } from \"react-router-dom\";\n+// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n+\n+// const Annotation = () => {\n+//   // State for image annotations, comments, selected annotation, and annotation mode\n+//   const [imageAnnotations, setImageAnnotations] = useState([]);\n+//   const [comments, setComments] = useState({});\n+//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n+//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n+//   const [assignments, setAssignments] = useState([]);\n+\n+//   const fileViewerRef = useRef(null);\n+\n+//   // Function to handle click events on the FileViewer to capture annotations\n+//   const handleFileViewerClick = (e) => {\n+//     if (isAnnotationMode) {\n+//       const rect = fileViewerRef.current.getBoundingClientRect();\n+//       const x = e.clientX - rect.left;\n+//       const y = e.clientY - rect.top;\n+\n+//       // Add annotation\n+//       addAnnotation({ x, y });\n+//     }\n+//   };\n+\n+//   // Function to add annotation based on conditions\n+//   const addAnnotation = ({ x, y }) => {\n+//     // Retrieve data from local storage\n+//     const id = localStorage.getItem(\"adminId\");\n+//     const docId = 111; //props.docId;\n+//     const assignedUserId = id;\n+//     const email = isEmailConditionMet() ? comments : null;\n+//     const subject = \"\";\n+//     const comment = isEmailConditionMet() ? null : comments;\n+\n+//     // Perform any other conditions or checks required for adding annotations\n+\n+//     // Send data to the API\n+//     let res = ADocAnnotation(\n+//       id,\n+//       docId,\n+//       assignedUserId,\n+//       email,\n+//       subject,\n+//       comment,\n+//       x,\n+//       y\n+//     );\n+//     console.log(res);\n+//     // Update state to include the new annotation\n+//     setImageAnnotations([...imageAnnotations, { x, y }]);\n+//   };\n+\n+//   // Function to check if the email condition is met\n+//   const isEmailConditionMet = (comment) => {\n+//     // Regular expression to match a simple email format\n+//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n+\n+//     // Trim the comment and check if it starts with \"@\" and matches the email format\n+//     return (\n+//       comment.trim().startsWith(\"@\") &&\n+//       emailRegex.test(comment.trim().substring(1))\n+//     );\n+//   };\n+\n+//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n+//   const handleFlagClick = (annotation) => {\n+//     if (\n+//       selectedAnnotation &&\n+//       selectedAnnotation.x === annotation.x &&\n+//       selectedAnnotation.y === annotation.y\n+//     ) {\n+//       setSelectedAnnotation(null);\n+//     } else {\n+//       setSelectedAnnotation(annotation);\n+//     }\n+//   };\n+\n+//   // Function to get comments and assignments from the API\n+//   const getCommentsAndAssign = () => {\n+//     GetCommentsAndAssign()\n+//       .then((response) => {\n+//         // Handle successful API response\n+//         console.log(\"Comments and Assignments:\", response);\n+//         // Update the state with comments and assignments\n+//         setAssignments(response.assignments);\n+//         setComments(response.comments);\n+//       })\n+//       .catch((error) => {\n+//         // Handle API error\n+//         console.error(\"Error getting comments and assignments:\", error);\n+//       });\n+//   };\n+\n+//   // Effect to clear selected annotation when the annotation mode is toggled\n+//   useEffect(() => {\n+//     setSelectedAnnotation(null);\n+//     // Fetch comments and assignments when the component mounts\n+//     getCommentsAndAssign();\n+//   }, [isAnnotationMode]);\n+\n+//   return (\n+//     <div>\n+//       {/* Annotation */}\n+//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n+//         <div className=\"d-flex justify-content-center\">\n+//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n+//             <FileViewer\n+//               alt=\"Annotated Image\"\n+//               style={{\n+//                 height: \"100%\",\n+//                 width: \"100%\",\n+//                 position: \"relative\",\n+//                 overflow: \"scroll\",\n+//               }}\n+//               fileType={\"png\"}\n+//               filePath={\n+//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n+//               }\n+//               errorComponent={() => <div>Error loading document</div>}\n+//             />\n+//           </di>\n+//           <Link\n+//             className={`btn-sm mt-7 ${\n+//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n+//             }`}\n+//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n+//           >\n+//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n+//           </Link>\n+//         </div>\n+//         {isAnnotationMode && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               top: 0,\n+//               left: 0,\n+//               width: \"100%\",\n+//               height: \"100%\",\n+//               pointerEvents: \"none\",\n+//             }}\n+//           />\n+//         )}\n+\n+//         {imageAnnotations.map((annotation, index) => (\n+//           <div\n+//             key={index}\n+//             style={{\n+//               position: \"absolute\",\n+//               left: annotation.x - 5,\n+//               top: annotation.y - 5,\n+//               cursor: \"pointer\",\n+//             }}\n+//             onClick={() => handleFlagClick(annotation)}\n+//           >\n+//             <FaFlag\n+//               style={{\n+//                 color:\n+//                   selectedAnnotation &&\n+//                   selectedAnnotation.x === annotation.x &&\n+//                   selectedAnnotation.y === annotation.y\n+//                     ? \"pink\"\n+//                     : \"red\",\n+//               }}\n+//             />\n+//           </div>\n+//         ))}\n+\n+//         {selectedAnnotation && (\n+//           <div\n+//             style={{\n+//               position: \"absolute\",\n+//               left: selectedAnnotation.x + 10,\n+//               top: selectedAnnotation.y + 20,\n+//               zIndex: 1,\n+//             }}\n+//           >\n+//             <form>\n+//               <input\n+//                 type=\"text\"\n+//                 value={\n+//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n+//                   \"\"\n+//                 }\n+//                 onChange={(e) =>\n+//                   setComments({\n+//                     ...comments,\n+//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n+//                       e.target.value,\n+//                   })\n+//                 }\n+//               />\n+//               <button\n+//                 type=\"button\"\n+//                 onClick={() => {\n+//                   setSelectedAnnotation(null);\n+//                 }}\n+//               >\n+//                 Save Comment\n+//               </button>\n+//             </form>\n+//           </div>\n+//         )}\n+\n+//         <div style={{ marginTop: \"20px\" }}>\n+//           <h2>List of Comments:</h2>\n+//           <ul>\n+//             {/* {(comments || []).map((commentItem, index) => (\n+//               <li key={index} className=\"text-break\">\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 {commentItem.comment}\n+//               </li>\n+//             ))} */}\n+//           </ul>\n+//         </div>\n+//       </div>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const adminEmails = [\n+//     \"admin1@example.com\",\n+//     \"admin2@example.com\",\n+//     \"admin3@example.com\",\n+//   ];\n+//   const [inputValue, setInputValue] = useState(\"\");\n+//   const [filteredEmails, setFilteredEmails] = useState([]);\n+\n+//   const handleInputChange = (event) => {\n+//     const value = event.target.value;\n+\n+//     // Check if the input starts with '@'\n+//     if (value.startsWith(\"@\")) {\n+//       // Filter admin emails based on input\n+//       const filteredAdminEmails = adminEmails.filter((email) =>\n+//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n+//       );\n+\n+//       // Update the filtered emails\n+//       setFilteredEmails(filteredAdminEmails);\n+//     } else {\n+//       // Reset filtered emails if input doesn't start with '@'\n+//       setFilteredEmails([]);\n+//     }\n+\n+//     // Update the input value\n+//     setInputValue(value);\n+//   };\n+\n+//   const handleEmailClick = (email) => {\n+//     // Set the selected email as the input value\n+//     setInputValue(email);\n+\n+//     // Clear the filtered emails\n+//     setFilteredEmails([]);\n+//   };\n+\n+//   const handleEmailMouseOver = (email) => {\n+//     // Highlight the email on mouseover\n+//     setInputValue(email);\n+//   };\n+\n+//   return (\n+//     <div style={{ position: \"relative\", width: \"250px\" }}>\n+//       <label>Email:</label>\n+//       <input\n+//         type=\"text\"\n+//         value={inputValue}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Comments or add others with @\"\n+//         style={{ fontSize: \"16px\", width: \"100%\" }}\n+//       />\n+//       {filteredEmails.length > 0 && (\n+//         <ul\n+//           style={{\n+//             listStyle: \"none\",\n+//             padding: 0,\n+//             margin: 0,\n+//             position: \"absolute\",\n+//             top: \"100%\",\n+//             left: 0,\n+//             width: \"100%\",\n+//             border: \"1px solid #ccc\",\n+//             borderTop: \"none\",\n+//             borderRadius: \"0 0 5px 5px\",\n+//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n+//             backgroundColor: \"#fff\",\n+//             zIndex: 1,\n+//           }}\n+//         >\n+//           {filteredEmails.map((email) => (\n+//             <li\n+//               key={email}\n+//               onClick={() => handleEmailClick(email)}\n+//               onMouseOver={() => handleEmailMouseOver(email)}\n+//               style={{\n+//                 padding: \"8px\",\n+//                 cursor: \"pointer\",\n+//               }}\n+//             >\n+//               {email}\n+//             </li>\n+//           ))}\n+//         </ul>\n+//       )}\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+//latest\n+// import React, { useState } from \"react\";\n+\n+// const Annotation = () => {\n+//   const [text, setText] = useState(\"\");\n+//   const [emails, setEmails] = useState([]);\n+//   const [comments, setComments] = useState([]);\n+//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n+\n+//   const handleInputChange = (e) => {\n+//     setText(e.target.value);\n+//     const words = e.target.value.split(/\\s/);\n+//     const lastWord = words[words.length - 1];\n+//     if (lastWord.includes(\"@\")) {\n+//       const email = lastWord.slice(1); // Exclude \"@\"\n+//       // You can fetch the list of emails based on the entered characters\n+//       // For simplicity, I'm just providing a static list of emails\n+//       setEmails([\n+//         \"example1@example.com\",\n+//         \"example2@example.com\",\n+//         \"example3@example.com\",\n+//       ]);\n+//     } else {\n+//       setEmails([]);\n+//     }\n+//   };\n+\n+//   const handleEmailSelect = (email) => {\n+//     setText(text.replace(/@\\S*$/, `@${email} `));\n+//     setSelectedEmailIndex(null);\n+//   };\n+\n+//   const handleCommentChange = (e, index) => {\n+//     const newComments = [...comments];\n+//     newComments[index] = e.target.value;\n+//     setComments(newComments);\n+//   };\n+\n+//   const handleAddComment = () => {\n+//     setComments([...comments, \"\"]);\n+//   };\n+\n+//   const handleAnnotationSubmit = () => {\n+//     // Implement logic to handle annotation submission\n+//     const newAnnotation = {\n+//       emails,\n+//       comments,\n+//     };\n+//     console.log(newAnnotation);\n+//     // Reset states\n+//     setText(\"\");\n+//     setEmails([]);\n+//     setComments([]);\n+//   };\n+\n+//   const renderEmailList = () => {\n+//     return (\n+//       <ul className=\"email-list\">\n+//         {emails.map((email, index) => (\n+//           <li key={index} onClick={() => handleEmailSelect(email)}>\n+//             {email}\n+//           </li>\n+//         ))}\n+//       </ul>\n+//     );\n+//   };\n+\n+//   const renderComments = () => {\n+//     return comments.map((comment, index) => (\n+//       <div key={index}>\n+//         <input\n+//           value={comment || \"\"}\n+//           onChange={(e) => handleCommentChange(e, index)}\n+//           placeholder=\"Add comment...\"\n+//         />\n+//       </div>\n+//     ));\n+//   };\n+\n+//   return (\n+//     <div>\n+//       <textarea\n+//         value={text}\n+//         onChange={handleInputChange}\n+//         placeholder=\"Add annotation here...\"\n+//       />\n+//       {emails.length > 0 && renderEmailList()}\n+//       {renderComments()}\n+//       <button onClick={handleAddComment}>Add Comment</button>\n+//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n+//     </div>\n+//   );\n+// };\n+\n+// export default Annotation;\n+\n+import React, { useState } from 'react';\n+import { EditorState, convertToRaw, ContentState } from 'draft-js';\n+import { Editor } from 'react-draft-wysiwyg';\n+import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n+\n+const Annotation = () => {\n+  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n+\n+  const handleEditorChange = (newEditorState) => {\n+    setEditorState(newEditorState);\n+  };\n+\n+  const handleClearEditor = () => {\n+    handleEditorChange(EditorState.createEmpty());\n+  };\n+\n+  const getContentAsHTML = () => {\n+    const contentState = editorState.getCurrentContent();\n+    const rawContentState = convertToRaw(contentState);\n+\n+    const blocks = rawContentState.blocks.map(block => {\n+      const styles = block.inlineStyleRanges.map(range => {\n+        const style = range.style.toLowerCase().replace(/_/g, '-');\n+        return `<span style=\"${style}\">${block.text.slice(range.offset, range.offset + range.length)}</span>`;\n+      }).join('');\n+      return `<${block.type}>${styles}</${block.type}>`;\n+    }).join('');\n+\n+    return { __html: blocks };\n+  };\n+\n+  return (\n+    <div style={{ margin: '20px' }}>\n+      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n+        <Editor\n+          editorState={editorState}\n+          onEditorStateChange={handleEditorChange}\n+        />\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <button onClick={handleClearEditor}>Clear Editor</button>\n+      </div>\n+      <div style={{ marginTop: '10px' }}>\n+        <div dangerouslySetInnerHTML={getContentAsHTML()} />\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Annotation;\n"
                },
                {
                    "date": 1709531653892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,638 +576,11 @@\n \n // export default Annotation;\n \n import React, { useState } from 'react';\n-import { EditorState, convertToRaw, ContentState } from 'draft-js';\n-import { Editor } from 'react-draft-wysiwyg';\n-import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n-\n-const Annotation = () => {\n-  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n-\n-  const handleEditorChange = (newEditorState) => {\n-    setEditorState(newEditorState);\n-  };\n-\n-  const handleClearEditor = () => {\n-    handleEditorChange(EditorState.createEmpty());\n-  };\n-\n-  const getContentAsHTML = () => {\n-    const contentState = editorState.getCurrentContent();\n-    const rawContentState = convertToRaw(contentState);\n-\n-    const blocks = rawContentState.blocks.map(block => {\n-      const styles = block.inlineStyleRanges.map(range => {\n-        const style = range.style.toLowerCase().replace(/_/g, '-');\n-        return `<span style=\"${style}\">${block.text.slice(range.offset, range.offset + range.length)}</span>`;\n-      }).join('');\n-      return `<${block.type}>${styles}</${block.type}>`;\n-    }).join('');\n-\n-    return { __html: blocks };\n-  };\n-\n-  return (\n-    <div style={{ margin: '20px' }}>\n-      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n-        <Editor\n-          editorState={editorState}\n-          onEditorStateChange={handleEditorChange}\n-        />\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <button onClick={handleClearEditor}>Clear Editor</button>\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <div dangerouslySetInnerHTML={getContentAsHTML()} />\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default Annotation;\n-// import React, { useState, useEffect } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-\n-// /**\n-//  * Component for text annotation and image annotation.\n-//  */\n-// const Annotation = () => {\n-//   //  Annotation State\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-\n-//   // Handle mouse down event to set current annotation for image annotation\n-//   const handleMouseDown = (e) => {\n-//     if (isAnnotationMode) {\n-//       const imageRect = e.target.getBoundingClientRect();\n-//       setCurrentAnnotation({\n-//         x: e.clientX - imageRect.left,\n-//         y: e.clientY - imageRect.top,\n-//       });\n-//     }\n-//   };\n-\n-//   // Handle mouse up event to save the current annotation for image annotation\n-//   const handleMouseUp = () => {\n-//     if (isAnnotationMode) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   };\n-\n-//   // Toggle annotation mode for image annotation\n-//   const toggleAnnotationMode = () => {\n-//     setAnnotationMode(!isAnnotationMode);\n-//     setSelectedAnnotation(null);\n-//   };\n-\n-//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Generate a list of comments from the state for image annotation\n-//   const getCommentsList = () => {\n-//     const commentsList = [];\n-//     for (const key in comments) {\n-//       if (comments.hasOwnProperty(key)) {\n-//         commentsList.push({ coordinates: key, comment: comments[key] });\n-//       }\n-//     }\n-//     return commentsList;\n-//   };\n-\n-//   // Effect to add the current annotation to the annotations array for image annotation\n-//   useEffect(() => {\n-//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   }, [currentAnnotation]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <img\n-//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n-//           alt=\"Annotated Image\"\n-//           style={{ height: \"50%\", width: \"50%\" }}\n-//           onMouseDown={handleMouseDown}\n-//           onMouseUp={handleMouseUp}\n-//         />\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <button onClick={toggleAnnotationMode}>\n-//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n-//           </button>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {getCommentsList().map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState, useEffect, useRef } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-// import FileViewer from \"react-file-viewer\";\n-// import { MdAddComment } from \"react-icons/md\";\n-// import { FcCancel } from \"react-icons/fc\";\n-// import { Link } from \"react-router-dom\";\n-// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n-\n-// const Annotation = () => {\n-//   // State for image annotations, comments, selected annotation, and annotation mode\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-//   const [assignments, setAssignments] = useState([]);\n-\n-//   const fileViewerRef = useRef(null);\n-\n-//   // Function to handle click events on the FileViewer to capture annotations\n-//   const handleFileViewerClick = (e) => {\n-//     if (isAnnotationMode) {\n-//       const rect = fileViewerRef.current.getBoundingClientRect();\n-//       const x = e.clientX - rect.left;\n-//       const y = e.clientY - rect.top;\n-\n-//       // Add annotation\n-//       addAnnotation({ x, y });\n-//     }\n-//   };\n-\n-//   // Function to add annotation based on conditions\n-//   const addAnnotation = ({ x, y }) => {\n-//     // Retrieve data from local storage\n-//     const id = localStorage.getItem(\"adminId\");\n-//     const docId = 111; //props.docId;\n-//     const assignedUserId = id;\n-//     const email = isEmailConditionMet() ? comments : null;\n-//     const subject = \"\";\n-//     const comment = isEmailConditionMet() ? null : comments;\n-\n-//     // Perform any other conditions or checks required for adding annotations\n-\n-//     // Send data to the API\n-//     let res = ADocAnnotation(\n-//       id,\n-//       docId,\n-//       assignedUserId,\n-//       email,\n-//       subject,\n-//       comment,\n-//       x,\n-//       y\n-//     );\n-//     console.log(res);\n-//     // Update state to include the new annotation\n-//     setImageAnnotations([...imageAnnotations, { x, y }]);\n-//   };\n-\n-//   // Function to check if the email condition is met\n-//   const isEmailConditionMet = (comment) => {\n-//     // Regular expression to match a simple email format\n-//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n-\n-//     // Trim the comment and check if it starts with \"@\" and matches the email format\n-//     return (\n-//       comment.trim().startsWith(\"@\") &&\n-//       emailRegex.test(comment.trim().substring(1))\n-//     );\n-//   };\n-\n-//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Function to get comments and assignments from the API\n-//   const getCommentsAndAssign = () => {\n-//     GetCommentsAndAssign()\n-//       .then((response) => {\n-//         // Handle successful API response\n-//         console.log(\"Comments and Assignments:\", response);\n-//         // Update the state with comments and assignments\n-//         setAssignments(response.assignments);\n-//         setComments(response.comments);\n-//       })\n-//       .catch((error) => {\n-//         // Handle API error\n-//         console.error(\"Error getting comments and assignments:\", error);\n-//       });\n-//   };\n-\n-//   // Effect to clear selected annotation when the annotation mode is toggled\n-//   useEffect(() => {\n-//     setSelectedAnnotation(null);\n-//     // Fetch comments and assignments when the component mounts\n-//     getCommentsAndAssign();\n-//   }, [isAnnotationMode]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <div className=\"d-flex justify-content-center\">\n-//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n-//             <FileViewer\n-//               alt=\"Annotated Image\"\n-//               style={{\n-//                 height: \"100%\",\n-//                 width: \"100%\",\n-//                 position: \"relative\",\n-//                 overflow: \"scroll\",\n-//               }}\n-//               fileType={\"png\"}\n-//               filePath={\n-//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n-//               }\n-//               errorComponent={() => <div>Error loading document</div>}\n-//             />\n-//           </di>\n-//           <Link\n-//             className={`btn-sm mt-7 ${\n-//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n-//             }`}\n-//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n-//           >\n-//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n-//           </Link>\n-//         </div>\n-//         {isAnnotationMode && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               top: 0,\n-//               left: 0,\n-//               width: \"100%\",\n-//               height: \"100%\",\n-//               pointerEvents: \"none\",\n-//             }}\n-//           />\n-//         )}\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {/* {(comments || []).map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))} */}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const adminEmails = [\n-//     \"admin1@example.com\",\n-//     \"admin2@example.com\",\n-//     \"admin3@example.com\",\n-//   ];\n-//   const [inputValue, setInputValue] = useState(\"\");\n-//   const [filteredEmails, setFilteredEmails] = useState([]);\n-\n-//   const handleInputChange = (event) => {\n-//     const value = event.target.value;\n-\n-//     // Check if the input starts with '@'\n-//     if (value.startsWith(\"@\")) {\n-//       // Filter admin emails based on input\n-//       const filteredAdminEmails = adminEmails.filter((email) =>\n-//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n-//       );\n-\n-//       // Update the filtered emails\n-//       setFilteredEmails(filteredAdminEmails);\n-//     } else {\n-//       // Reset filtered emails if input doesn't start with '@'\n-//       setFilteredEmails([]);\n-//     }\n-\n-//     // Update the input value\n-//     setInputValue(value);\n-//   };\n-\n-//   const handleEmailClick = (email) => {\n-//     // Set the selected email as the input value\n-//     setInputValue(email);\n-\n-//     // Clear the filtered emails\n-//     setFilteredEmails([]);\n-//   };\n-\n-//   const handleEmailMouseOver = (email) => {\n-//     // Highlight the email on mouseover\n-//     setInputValue(email);\n-//   };\n-\n-//   return (\n-//     <div style={{ position: \"relative\", width: \"250px\" }}>\n-//       <label>Email:</label>\n-//       <input\n-//         type=\"text\"\n-//         value={inputValue}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Comments or add others with @\"\n-//         style={{ fontSize: \"16px\", width: \"100%\" }}\n-//       />\n-//       {filteredEmails.length > 0 && (\n-//         <ul\n-//           style={{\n-//             listStyle: \"none\",\n-//             padding: 0,\n-//             margin: 0,\n-//             position: \"absolute\",\n-//             top: \"100%\",\n-//             left: 0,\n-//             width: \"100%\",\n-//             border: \"1px solid #ccc\",\n-//             borderTop: \"none\",\n-//             borderRadius: \"0 0 5px 5px\",\n-//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n-//             backgroundColor: \"#fff\",\n-//             zIndex: 1,\n-//           }}\n-//         >\n-//           {filteredEmails.map((email) => (\n-//             <li\n-//               key={email}\n-//               onClick={() => handleEmailClick(email)}\n-//               onMouseOver={() => handleEmailMouseOver(email)}\n-//               style={{\n-//                 padding: \"8px\",\n-//                 cursor: \"pointer\",\n-//               }}\n-//             >\n-//               {email}\n-//             </li>\n-//           ))}\n-//         </ul>\n-//       )}\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-//latest\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const [text, setText] = useState(\"\");\n-//   const [emails, setEmails] = useState([]);\n-//   const [comments, setComments] = useState([]);\n-//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n-\n-//   const handleInputChange = (e) => {\n-//     setText(e.target.value);\n-//     const words = e.target.value.split(/\\s/);\n-//     const lastWord = words[words.length - 1];\n-//     if (lastWord.includes(\"@\")) {\n-//       const email = lastWord.slice(1); // Exclude \"@\"\n-//       // You can fetch the list of emails based on the entered characters\n-//       // For simplicity, I'm just providing a static list of emails\n-//       setEmails([\n-//         \"example1@example.com\",\n-//         \"example2@example.com\",\n-//         \"example3@example.com\",\n-//       ]);\n-//     } else {\n-//       setEmails([]);\n-//     }\n-//   };\n-\n-//   const handleEmailSelect = (email) => {\n-//     setText(text.replace(/@\\S*$/, `@${email} `));\n-//     setSelectedEmailIndex(null);\n-//   };\n-\n-//   const handleCommentChange = (e, index) => {\n-//     const newComments = [...comments];\n-//     newComments[index] = e.target.value;\n-//     setComments(newComments);\n-//   };\n-\n-//   const handleAddComment = () => {\n-//     setComments([...comments, \"\"]);\n-//   };\n-\n-//   const handleAnnotationSubmit = () => {\n-//     // Implement logic to handle annotation submission\n-//     const newAnnotation = {\n-//       emails,\n-//       comments,\n-//     };\n-//     console.log(newAnnotation);\n-//     // Reset states\n-//     setText(\"\");\n-//     setEmails([]);\n-//     setComments([]);\n-//   };\n-\n-//   const renderEmailList = () => {\n-//     return (\n-//       <ul className=\"email-list\">\n-//         {emails.map((email, index) => (\n-//           <li key={index} onClick={() => handleEmailSelect(email)}>\n-//             {email}\n-//           </li>\n-//         ))}\n-//       </ul>\n-//     );\n-//   };\n-\n-//   const renderComments = () => {\n-//     return comments.map((comment, index) => (\n-//       <div key={index}>\n-//         <input\n-//           value={comment || \"\"}\n-//           onChange={(e) => handleCommentChange(e, index)}\n-//           placeholder=\"Add comment...\"\n-//         />\n-//       </div>\n-//     ));\n-//   };\n-\n-//   return (\n-//     <div>\n-//       <textarea\n-//         value={text}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Add annotation here...\"\n-//       />\n-//       {emails.length > 0 && renderEmailList()}\n-//       {renderComments()}\n-//       <button onClick={handleAddComment}>Add Comment</button>\n-//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-\n-import React, { useState } from 'react';\n import { EditorState, convertToRaw } from 'draft-js';\n import { Editor } from 'react-draft-wysiwyg';\n+import { stateToHTML } from 'draft-js-export-html';\n import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n \n const Annotation = () => {\n   const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n@@ -1221,13 +594,9 @@\n   };\n \n   const getContentAsHTML = () => {\n     const contentState = editorState.getCurrentContent();\n-    const rawContentState = convertToRaw(contentState);\n-    const html = rawContentState.blocks.map(\n-      block => `<p>${block.text}</p>`\n-    ).join('');\n-    return { __html: html };\n+    return stateToHTML(contentState);\n   };\n \n   return (\n     <div style={{ margin: '20px' }}>\n@@ -1239,633 +608,10 @@\n       </div>\n       <div style={{ marginTop: '10px' }}>\n         <button onClick={handleClearEditor}>Clear Editor</button>\n       </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <div dangerouslySetInnerHTML={getContentAsHTML()} />\n-      </div>\n+      <div style={{ marginTop: '10px' }} dangerouslySetInnerHTML={{ __html: getContentAsHTML() }} />\n     </div>\n   );\n };\n \n export default Annotation;\n-\n-// import React, { useState, useEffect } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-\n-// /**\n-//  * Component for text annotation and image annotation.\n-//  */\n-// const Annotation = () => {\n-//   //  Annotation State\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-\n-//   // Handle mouse down event to set current annotation for image annotation\n-//   const handleMouseDown = (e) => {\n-//     if (isAnnotationMode) {\n-//       const imageRect = e.target.getBoundingClientRect();\n-//       setCurrentAnnotation({\n-//         x: e.clientX - imageRect.left,\n-//         y: e.clientY - imageRect.top,\n-//       });\n-//     }\n-//   };\n-\n-//   // Handle mouse up event to save the current annotation for image annotation\n-//   const handleMouseUp = () => {\n-//     if (isAnnotationMode) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   };\n-\n-//   // Toggle annotation mode for image annotation\n-//   const toggleAnnotationMode = () => {\n-//     setAnnotationMode(!isAnnotationMode);\n-//     setSelectedAnnotation(null);\n-//   };\n-\n-//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Generate a list of comments from the state for image annotation\n-//   const getCommentsList = () => {\n-//     const commentsList = [];\n-//     for (const key in comments) {\n-//       if (comments.hasOwnProperty(key)) {\n-//         commentsList.push({ coordinates: key, comment: comments[key] });\n-//       }\n-//     }\n-//     return commentsList;\n-//   };\n-\n-//   // Effect to add the current annotation to the annotations array for image annotation\n-//   useEffect(() => {\n-//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n-//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n-//       setCurrentAnnotation({ x: 0, y: 0 });\n-//     }\n-//   }, [currentAnnotation]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <img\n-//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n-//           alt=\"Annotated Image\"\n-//           style={{ height: \"50%\", width: \"50%\" }}\n-//           onMouseDown={handleMouseDown}\n-//           onMouseUp={handleMouseUp}\n-//         />\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <button onClick={toggleAnnotationMode}>\n-//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n-//           </button>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {getCommentsList().map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState, useEffect, useRef } from \"react\";\n-// import { FaFlag } from \"react-icons/fa\";\n-// import FileViewer from \"react-file-viewer\";\n-// import { MdAddComment } from \"react-icons/md\";\n-// import { FcCancel } from \"react-icons/fc\";\n-// import { Link } from \"react-router-dom\";\n-// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n-\n-// const Annotation = () => {\n-//   // State for image annotations, comments, selected annotation, and annotation mode\n-//   const [imageAnnotations, setImageAnnotations] = useState([]);\n-//   const [comments, setComments] = useState({});\n-//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n-//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n-//   const [assignments, setAssignments] = useState([]);\n-\n-//   const fileViewerRef = useRef(null);\n-\n-//   // Function to handle click events on the FileViewer to capture annotations\n-//   const handleFileViewerClick = (e) => {\n-//     if (isAnnotationMode) {\n-//       const rect = fileViewerRef.current.getBoundingClientRect();\n-//       const x = e.clientX - rect.left;\n-//       const y = e.clientY - rect.top;\n-\n-//       // Add annotation\n-//       addAnnotation({ x, y });\n-//     }\n-//   };\n-\n-//   // Function to add annotation based on conditions\n-//   const addAnnotation = ({ x, y }) => {\n-//     // Retrieve data from local storage\n-//     const id = localStorage.getItem(\"adminId\");\n-//     const docId = 111; //props.docId;\n-//     const assignedUserId = id;\n-//     const email = isEmailConditionMet() ? comments : null;\n-//     const subject = \"\";\n-//     const comment = isEmailConditionMet() ? null : comments;\n-\n-//     // Perform any other conditions or checks required for adding annotations\n-\n-//     // Send data to the API\n-//     let res = ADocAnnotation(\n-//       id,\n-//       docId,\n-//       assignedUserId,\n-//       email,\n-//       subject,\n-//       comment,\n-//       x,\n-//       y\n-//     );\n-//     console.log(res);\n-//     // Update state to include the new annotation\n-//     setImageAnnotations([...imageAnnotations, { x, y }]);\n-//   };\n-\n-//   // Function to check if the email condition is met\n-//   const isEmailConditionMet = (comment) => {\n-//     // Regular expression to match a simple email format\n-//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n-\n-//     // Trim the comment and check if it starts with \"@\" and matches the email format\n-//     return (\n-//       comment.trim().startsWith(\"@\") &&\n-//       emailRegex.test(comment.trim().substring(1))\n-//     );\n-//   };\n-\n-//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n-//   const handleFlagClick = (annotation) => {\n-//     if (\n-//       selectedAnnotation &&\n-//       selectedAnnotation.x === annotation.x &&\n-//       selectedAnnotation.y === annotation.y\n-//     ) {\n-//       setSelectedAnnotation(null);\n-//     } else {\n-//       setSelectedAnnotation(annotation);\n-//     }\n-//   };\n-\n-//   // Function to get comments and assignments from the API\n-//   const getCommentsAndAssign = () => {\n-//     GetCommentsAndAssign()\n-//       .then((response) => {\n-//         // Handle successful API response\n-//         console.log(\"Comments and Assignments:\", response);\n-//         // Update the state with comments and assignments\n-//         setAssignments(response.assignments);\n-//         setComments(response.comments);\n-//       })\n-//       .catch((error) => {\n-//         // Handle API error\n-//         console.error(\"Error getting comments and assignments:\", error);\n-//       });\n-//   };\n-\n-//   // Effect to clear selected annotation when the annotation mode is toggled\n-//   useEffect(() => {\n-//     setSelectedAnnotation(null);\n-//     // Fetch comments and assignments when the component mounts\n-//     getCommentsAndAssign();\n-//   }, [isAnnotationMode]);\n-\n-//   return (\n-//     <div>\n-//       {/* Annotation */}\n-//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n-//         <div className=\"d-flex justify-content-center\">\n-//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n-//             <FileViewer\n-//               alt=\"Annotated Image\"\n-//               style={{\n-//                 height: \"100%\",\n-//                 width: \"100%\",\n-//                 position: \"relative\",\n-//                 overflow: \"scroll\",\n-//               }}\n-//               fileType={\"png\"}\n-//               filePath={\n-//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n-//               }\n-//               errorComponent={() => <div>Error loading document</div>}\n-//             />\n-//           </di>\n-//           <Link\n-//             className={`btn-sm mt-7 ${\n-//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n-//             }`}\n-//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n-//           >\n-//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n-//           </Link>\n-//         </div>\n-//         {isAnnotationMode && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               top: 0,\n-//               left: 0,\n-//               width: \"100%\",\n-//               height: \"100%\",\n-//               pointerEvents: \"none\",\n-//             }}\n-//           />\n-//         )}\n-\n-//         {imageAnnotations.map((annotation, index) => (\n-//           <div\n-//             key={index}\n-//             style={{\n-//               position: \"absolute\",\n-//               left: annotation.x - 5,\n-//               top: annotation.y - 5,\n-//               cursor: \"pointer\",\n-//             }}\n-//             onClick={() => handleFlagClick(annotation)}\n-//           >\n-//             <FaFlag\n-//               style={{\n-//                 color:\n-//                   selectedAnnotation &&\n-//                   selectedAnnotation.x === annotation.x &&\n-//                   selectedAnnotation.y === annotation.y\n-//                     ? \"pink\"\n-//                     : \"red\",\n-//               }}\n-//             />\n-//           </div>\n-//         ))}\n-\n-//         {selectedAnnotation && (\n-//           <div\n-//             style={{\n-//               position: \"absolute\",\n-//               left: selectedAnnotation.x + 10,\n-//               top: selectedAnnotation.y + 20,\n-//               zIndex: 1,\n-//             }}\n-//           >\n-//             <form>\n-//               <input\n-//                 type=\"text\"\n-//                 value={\n-//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n-//                   \"\"\n-//                 }\n-//                 onChange={(e) =>\n-//                   setComments({\n-//                     ...comments,\n-//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n-//                       e.target.value,\n-//                   })\n-//                 }\n-//               />\n-//               <button\n-//                 type=\"button\"\n-//                 onClick={() => {\n-//                   setSelectedAnnotation(null);\n-//                 }}\n-//               >\n-//                 Save Comment\n-//               </button>\n-//             </form>\n-//           </div>\n-//         )}\n-\n-//         <div style={{ marginTop: \"20px\" }}>\n-//           <h2>List of Comments:</h2>\n-//           <ul>\n-//             {/* {(comments || []).map((commentItem, index) => (\n-//               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n-//                 {commentItem.comment}\n-//               </li>\n-//             ))} */}\n-//           </ul>\n-//         </div>\n-//       </div>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const adminEmails = [\n-//     \"admin1@example.com\",\n-//     \"admin2@example.com\",\n-//     \"admin3@example.com\",\n-//   ];\n-//   const [inputValue, setInputValue] = useState(\"\");\n-//   const [filteredEmails, setFilteredEmails] = useState([]);\n-\n-//   const handleInputChange = (event) => {\n-//     const value = event.target.value;\n-\n-//     // Check if the input starts with '@'\n-//     if (value.startsWith(\"@\")) {\n-//       // Filter admin emails based on input\n-//       const filteredAdminEmails = adminEmails.filter((email) =>\n-//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n-//       );\n-\n-//       // Update the filtered emails\n-//       setFilteredEmails(filteredAdminEmails);\n-//     } else {\n-//       // Reset filtered emails if input doesn't start with '@'\n-//       setFilteredEmails([]);\n-//     }\n-\n-//     // Update the input value\n-//     setInputValue(value);\n-//   };\n-\n-//   const handleEmailClick = (email) => {\n-//     // Set the selected email as the input value\n-//     setInputValue(email);\n-\n-//     // Clear the filtered emails\n-//     setFilteredEmails([]);\n-//   };\n-\n-//   const handleEmailMouseOver = (email) => {\n-//     // Highlight the email on mouseover\n-//     setInputValue(email);\n-//   };\n-\n-//   return (\n-//     <div style={{ position: \"relative\", width: \"250px\" }}>\n-//       <label>Email:</label>\n-//       <input\n-//         type=\"text\"\n-//         value={inputValue}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Comments or add others with @\"\n-//         style={{ fontSize: \"16px\", width: \"100%\" }}\n-//       />\n-//       {filteredEmails.length > 0 && (\n-//         <ul\n-//           style={{\n-//             listStyle: \"none\",\n-//             padding: 0,\n-//             margin: 0,\n-//             position: \"absolute\",\n-//             top: \"100%\",\n-//             left: 0,\n-//             width: \"100%\",\n-//             border: \"1px solid #ccc\",\n-//             borderTop: \"none\",\n-//             borderRadius: \"0 0 5px 5px\",\n-//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n-//             backgroundColor: \"#fff\",\n-//             zIndex: 1,\n-//           }}\n-//         >\n-//           {filteredEmails.map((email) => (\n-//             <li\n-//               key={email}\n-//               onClick={() => handleEmailClick(email)}\n-//               onMouseOver={() => handleEmailMouseOver(email)}\n-//               style={{\n-//                 padding: \"8px\",\n-//                 cursor: \"pointer\",\n-//               }}\n-//             >\n-//               {email}\n-//             </li>\n-//           ))}\n-//         </ul>\n-//       )}\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-//latest\n-// import React, { useState } from \"react\";\n-\n-// const Annotation = () => {\n-//   const [text, setText] = useState(\"\");\n-//   const [emails, setEmails] = useState([]);\n-//   const [comments, setComments] = useState([]);\n-//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n-\n-//   const handleInputChange = (e) => {\n-//     setText(e.target.value);\n-//     const words = e.target.value.split(/\\s/);\n-//     const lastWord = words[words.length - 1];\n-//     if (lastWord.includes(\"@\")) {\n-//       const email = lastWord.slice(1); // Exclude \"@\"\n-//       // You can fetch the list of emails based on the entered characters\n-//       // For simplicity, I'm just providing a static list of emails\n-//       setEmails([\n-//         \"example1@example.com\",\n-//         \"example2@example.com\",\n-//         \"example3@example.com\",\n-//       ]);\n-//     } else {\n-//       setEmails([]);\n-//     }\n-//   };\n-\n-//   const handleEmailSelect = (email) => {\n-//     setText(text.replace(/@\\S*$/, `@${email} `));\n-//     setSelectedEmailIndex(null);\n-//   };\n-\n-//   const handleCommentChange = (e, index) => {\n-//     const newComments = [...comments];\n-//     newComments[index] = e.target.value;\n-//     setComments(newComments);\n-//   };\n-\n-//   const handleAddComment = () => {\n-//     setComments([...comments, \"\"]);\n-//   };\n-\n-//   const handleAnnotationSubmit = () => {\n-//     // Implement logic to handle annotation submission\n-//     const newAnnotation = {\n-//       emails,\n-//       comments,\n-//     };\n-//     console.log(newAnnotation);\n-//     // Reset states\n-//     setText(\"\");\n-//     setEmails([]);\n-//     setComments([]);\n-//   };\n-\n-//   const renderEmailList = () => {\n-//     return (\n-//       <ul className=\"email-list\">\n-//         {emails.map((email, index) => (\n-//           <li key={index} onClick={() => handleEmailSelect(email)}>\n-//             {email}\n-//           </li>\n-//         ))}\n-//       </ul>\n-//     );\n-//   };\n-\n-//   const renderComments = () => {\n-//     return comments.map((comment, index) => (\n-//       <div key={index}>\n-//         <input\n-//           value={comment || \"\"}\n-//           onChange={(e) => handleCommentChange(e, index)}\n-//           placeholder=\"Add comment...\"\n-//         />\n-//       </div>\n-//     ));\n-//   };\n-\n-//   return (\n-//     <div>\n-//       <textarea\n-//         value={text}\n-//         onChange={handleInputChange}\n-//         placeholder=\"Add annotation here...\"\n-//       />\n-//       {emails.length > 0 && renderEmailList()}\n-//       {renderComments()}\n-//       <button onClick={handleAddComment}>Add Comment</button>\n-//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n-//     </div>\n-//   );\n-// };\n-\n-// export default Annotation;\n-\n-import React, { useState } from 'react';\n-import { EditorState, convertToRaw, ContentState } from 'draft-js';\n-import { Editor } from 'react-draft-wysiwyg';\n-import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n-\n-const Annotation = () => {\n-  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n-\n-  const handleEditorChange = (newEditorState) => {\n-    setEditorState(newEditorState);\n-  };\n-\n-  const handleClearEditor = () => {\n-    handleEditorChange(EditorState.createEmpty());\n-  };\n-\n-  const getContentAsPlainText = () => {\n-    const contentState = editorState.getCurrentContent();\n-    const plainText = contentState.getBlocksAsArray().map(block => block.getText()).join('\\n');\n-    return plainText;\n-  };\n-\n-  return (\n-    <div style={{ margin: '20px' }}>\n-      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n-        <Editor\n-          editorState={editorState}\n-          onEditorStateChange={handleEditorChange}\n-        />\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <button onClick={handleClearEditor}>Clear Editor</button>\n-      </div>\n-      <div style={{ marginTop: '10px' }}>\n-        <pre>{getContentAsPlainText()}</pre>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default Annotation;\n-\n"
                },
                {
                    "date": 1709532393916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -614,4 +614,5 @@\n   );\n };\n \n export default Annotation;\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1709721602902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,9 +576,9 @@\n \n // export default Annotation;\n \n import React, { useState } from 'react';\n-import { EditorState, convertToRaw } from 'draft-js';\n+import { EditorState } from 'draft-js';\n import { Editor } from 'react-draft-wysiwyg';\n import { stateToHTML } from 'draft-js-export-html';\n import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n \n"
                },
                {
                    "date": 1710503309845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n //           <h2>List of Comments:</h2>\n //           <ul>\n //             {getCommentsList().map((commentItem, index) => (\n //               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 <strong>{commentItem.coordinates}:</strong>\n //                 {commentItem.comment}\n //               </li>\n //             ))}\n //           </ul>\n@@ -374,9 +374,9 @@\n //           <h2>List of Comments:</h2>\n //           <ul>\n //             {/* {(comments || []).map((commentItem, index) => (\n //               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n+//                 <strong>{commentItem.coordinates}:</strong>\n //                 {commentItem.comment}\n //               </li>\n //             ))} */}\n //           </ul>\n"
                },
                {
                    "date": 1710504314336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n //           <h2>List of Comments:</h2>\n //           <ul>\n //             {getCommentsList().map((commentItem, index) => (\n //               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n //                 {commentItem.comment}\n //               </li>\n //             ))}\n //           </ul>\n@@ -374,9 +374,9 @@\n //           <h2>List of Comments:</h2>\n //           <ul>\n //             {/* {(comments || []).map((commentItem, index) => (\n //               <li key={index} className=\"text-break\">\n-//                 <strong>{commentItem.coordinates}:</strong>\n+//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n //                 {commentItem.comment}\n //               </li>\n //             ))} */}\n //           </ul>\n"
                }
            ],
            "date": 1709528741696,
            "name": "Commit-0",
            "content": "// import React, { useState, useEffect } from \"react\";\n// import { FaFlag } from \"react-icons/fa\";\n\n// /**\n//  * Component for text annotation and image annotation.\n//  */\n// const Annotation = () => {\n//   //  Annotation State\n//   const [imageAnnotations, setImageAnnotations] = useState([]);\n//   const [comments, setComments] = useState({});\n//   const [currentAnnotation, setCurrentAnnotation] = useState({ x: 0, y: 0 });\n//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n\n//   // Handle mouse down event to set current annotation for image annotation\n//   const handleMouseDown = (e) => {\n//     if (isAnnotationMode) {\n//       const imageRect = e.target.getBoundingClientRect();\n//       setCurrentAnnotation({\n//         x: e.clientX - imageRect.left,\n//         y: e.clientY - imageRect.top,\n//       });\n//     }\n//   };\n\n//   // Handle mouse up event to save the current annotation for image annotation\n//   const handleMouseUp = () => {\n//     if (isAnnotationMode) {\n//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n//       setCurrentAnnotation({ x: 0, y: 0 });\n//     }\n//   };\n\n//   // Toggle annotation mode for image annotation\n//   const toggleAnnotationMode = () => {\n//     setAnnotationMode(!isAnnotationMode);\n//     setSelectedAnnotation(null);\n//   };\n\n//   // Handle flag click to select the annotation and toggle the form visibility for image annotation\n//   const handleFlagClick = (annotation) => {\n//     if (\n//       selectedAnnotation &&\n//       selectedAnnotation.x === annotation.x &&\n//       selectedAnnotation.y === annotation.y\n//     ) {\n//       setSelectedAnnotation(null);\n//     } else {\n//       setSelectedAnnotation(annotation);\n//     }\n//   };\n\n//   // Generate a list of comments from the state for image annotation\n//   const getCommentsList = () => {\n//     const commentsList = [];\n//     for (const key in comments) {\n//       if (comments.hasOwnProperty(key)) {\n//         commentsList.push({ coordinates: key, comment: comments[key] });\n//       }\n//     }\n//     return commentsList;\n//   };\n\n//   // Effect to add the current annotation to the annotations array for image annotation\n//   useEffect(() => {\n//     if (currentAnnotation.x !== 0 && currentAnnotation.y !== 0) {\n//       setImageAnnotations([...imageAnnotations, currentAnnotation]);\n//       setCurrentAnnotation({ x: 0, y: 0 });\n//     }\n//   }, [currentAnnotation]);\n\n//   return (\n//     <div>\n//       {/* Annotation */}\n//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n//         <img\n//           src=\"https://image.slidesharecdn.com/nextgenerationofdatascientist-220221085037/75/next-generation-of-data-scientist-4-2048.jpg?cb=1668057843\"\n//           alt=\"Annotated Image\"\n//           style={{ height: \"50%\", width: \"50%\" }}\n//           onMouseDown={handleMouseDown}\n//           onMouseUp={handleMouseUp}\n//         />\n\n//         {imageAnnotations.map((annotation, index) => (\n//           <div\n//             key={index}\n//             style={{\n//               position: \"absolute\",\n//               left: annotation.x - 5,\n//               top: annotation.y - 5,\n//               cursor: \"pointer\",\n//             }}\n//             onClick={() => handleFlagClick(annotation)}\n//           >\n//             <FaFlag\n//               style={{\n//                 color:\n//                   selectedAnnotation &&\n//                   selectedAnnotation.x === annotation.x &&\n//                   selectedAnnotation.y === annotation.y\n//                     ? \"pink\"\n//                     : \"red\",\n//               }}\n//             />\n//           </div>\n//         ))}\n\n//         {selectedAnnotation && (\n//           <div\n//             style={{\n//               position: \"absolute\",\n//               left: selectedAnnotation.x + 10,\n//               top: selectedAnnotation.y + 20,\n//               zIndex: 1,\n//             }}\n//           >\n//             <form>\n//               <input\n//                 type=\"text\"\n//                 value={\n//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n//                   \"\"\n//                 }\n//                 onChange={(e) =>\n//                   setComments({\n//                     ...comments,\n//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n//                       e.target.value,\n//                   })\n//                 }\n//               />\n//               <button\n//                 type=\"button\"\n//                 onClick={() => {\n//                   setSelectedAnnotation(null);\n//                 }}\n//               >\n//                 Save Comment\n//               </button>\n//             </form>\n//           </div>\n//         )}\n\n//         <div style={{ marginTop: \"20px\" }}>\n//           <button onClick={toggleAnnotationMode}>\n//             {isAnnotationMode ? \"Finish Annotation\" : \"Start Annotation\"}\n//           </button>\n//           <h2>List of Comments:</h2>\n//           <ul>\n//             {getCommentsList().map((commentItem, index) => (\n//               <li key={index} className=\"text-break\">\n//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n//                 {commentItem.comment}\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Annotation;\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { FaFlag } from \"react-icons/fa\";\n// import FileViewer from \"react-file-viewer\";\n// import { MdAddComment } from \"react-icons/md\";\n// import { FcCancel } from \"react-icons/fc\";\n// import { Link } from \"react-router-dom\";\n// import { ADocAnnotation, GetCommentsAndAssign } from \"../../api/api\";\n\n// const Annotation = () => {\n//   // State for image annotations, comments, selected annotation, and annotation mode\n//   const [imageAnnotations, setImageAnnotations] = useState([]);\n//   const [comments, setComments] = useState({});\n//   const [selectedAnnotation, setSelectedAnnotation] = useState(null);\n//   const [isAnnotationMode, setAnnotationMode] = useState(false);\n//   const [assignments, setAssignments] = useState([]);\n\n//   const fileViewerRef = useRef(null);\n\n//   // Function to handle click events on the FileViewer to capture annotations\n//   const handleFileViewerClick = (e) => {\n//     if (isAnnotationMode) {\n//       const rect = fileViewerRef.current.getBoundingClientRect();\n//       const x = e.clientX - rect.left;\n//       const y = e.clientY - rect.top;\n\n//       // Add annotation\n//       addAnnotation({ x, y });\n//     }\n//   };\n\n//   // Function to add annotation based on conditions\n//   const addAnnotation = ({ x, y }) => {\n//     // Retrieve data from local storage\n//     const id = localStorage.getItem(\"adminId\");\n//     const docId = 111; //props.docId;\n//     const assignedUserId = id;\n//     const email = isEmailConditionMet() ? comments : null;\n//     const subject = \"\";\n//     const comment = isEmailConditionMet() ? null : comments;\n\n//     // Perform any other conditions or checks required for adding annotations\n\n//     // Send data to the API\n//     let res = ADocAnnotation(\n//       id,\n//       docId,\n//       assignedUserId,\n//       email,\n//       subject,\n//       comment,\n//       x,\n//       y\n//     );\n//     console.log(res);\n//     // Update state to include the new annotation\n//     setImageAnnotations([...imageAnnotations, { x, y }]);\n//   };\n\n//   // Function to check if the email condition is met\n//   const isEmailConditionMet = (comment) => {\n//     // Regular expression to match a simple email format\n//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n\n//     // Trim the comment and check if it starts with \"@\" and matches the email format\n//     return (\n//       comment.trim().startsWith(\"@\") &&\n//       emailRegex.test(comment.trim().substring(1))\n//     );\n//   };\n\n//   // Function to handle flag click to select the annotation and toggle the form visibility for image annotation\n//   const handleFlagClick = (annotation) => {\n//     if (\n//       selectedAnnotation &&\n//       selectedAnnotation.x === annotation.x &&\n//       selectedAnnotation.y === annotation.y\n//     ) {\n//       setSelectedAnnotation(null);\n//     } else {\n//       setSelectedAnnotation(annotation);\n//     }\n//   };\n\n//   // Function to get comments and assignments from the API\n//   const getCommentsAndAssign = () => {\n//     GetCommentsAndAssign()\n//       .then((response) => {\n//         // Handle successful API response\n//         console.log(\"Comments and Assignments:\", response);\n//         // Update the state with comments and assignments\n//         setAssignments(response.assignments);\n//         setComments(response.comments);\n//       })\n//       .catch((error) => {\n//         // Handle API error\n//         console.error(\"Error getting comments and assignments:\", error);\n//       });\n//   };\n\n//   // Effect to clear selected annotation when the annotation mode is toggled\n//   useEffect(() => {\n//     setSelectedAnnotation(null);\n//     // Fetch comments and assignments when the component mounts\n//     getCommentsAndAssign();\n//   }, [isAnnotationMode]);\n\n//   return (\n//     <div>\n//       {/* Annotation */}\n//       <div style={{ position: \"relative\", overflow: \"scroll\" }}>\n//         <div className=\"d-flex justify-content-center\">\n//           <di ref={fileViewerRef} onClick={handleFileViewerClick}>\n//             <FileViewer\n//               alt=\"Annotated Image\"\n//               style={{\n//                 height: \"100%\",\n//                 width: \"100%\",\n//                 position: \"relative\",\n//                 overflow: \"scroll\",\n//               }}\n//               fileType={\"png\"}\n//               filePath={\n//                 \"https://blog.hootsuite.com/wp-content/uploads/2023/09/Social-media-image-sizes-2023.png\"\n//               }\n//               errorComponent={() => <div>Error loading document</div>}\n//             />\n//           </di>\n//           <Link\n//             className={`btn-sm mt-7 ${\n//               isAnnotationMode ? \"btn-primary\" : \"btn-secondary\"\n//             }`}\n//             onClick={() => setAnnotationMode(!isAnnotationMode)}\n//           >\n//             {isAnnotationMode ? <FcCancel /> : <MdAddComment />}\n//           </Link>\n//         </div>\n//         {isAnnotationMode && (\n//           <div\n//             style={{\n//               position: \"absolute\",\n//               top: 0,\n//               left: 0,\n//               width: \"100%\",\n//               height: \"100%\",\n//               pointerEvents: \"none\",\n//             }}\n//           />\n//         )}\n\n//         {imageAnnotations.map((annotation, index) => (\n//           <div\n//             key={index}\n//             style={{\n//               position: \"absolute\",\n//               left: annotation.x - 5,\n//               top: annotation.y - 5,\n//               cursor: \"pointer\",\n//             }}\n//             onClick={() => handleFlagClick(annotation)}\n//           >\n//             <FaFlag\n//               style={{\n//                 color:\n//                   selectedAnnotation &&\n//                   selectedAnnotation.x === annotation.x &&\n//                   selectedAnnotation.y === annotation.y\n//                     ? \"pink\"\n//                     : \"red\",\n//               }}\n//             />\n//           </div>\n//         ))}\n\n//         {selectedAnnotation && (\n//           <div\n//             style={{\n//               position: \"absolute\",\n//               left: selectedAnnotation.x + 10,\n//               top: selectedAnnotation.y + 20,\n//               zIndex: 1,\n//             }}\n//           >\n//             <form>\n//               <input\n//                 type=\"text\"\n//                 value={\n//                   comments[`${selectedAnnotation.x}-${selectedAnnotation.y}`] ||\n//                   \"\"\n//                 }\n//                 onChange={(e) =>\n//                   setComments({\n//                     ...comments,\n//                     [`${selectedAnnotation.x}-${selectedAnnotation.y}`]:\n//                       e.target.value,\n//                   })\n//                 }\n//               />\n//               <button\n//                 type=\"button\"\n//                 onClick={() => {\n//                   setSelectedAnnotation(null);\n//                 }}\n//               >\n//                 Save Comment\n//               </button>\n//             </form>\n//           </div>\n//         )}\n\n//         <div style={{ marginTop: \"20px\" }}>\n//           <h2>List of Comments:</h2>\n//           <ul>\n//             {/* {(comments || []).map((commentItem, index) => (\n//               <li key={index} className=\"text-break\">\n//                 <strong>{commentItem.coordinates}:</strong>{\" \"}\n//                 {commentItem.comment}\n//               </li>\n//             ))} */}\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Annotation;\n// import React, { useState } from \"react\";\n\n// const Annotation = () => {\n//   const adminEmails = [\n//     \"admin1@example.com\",\n//     \"admin2@example.com\",\n//     \"admin3@example.com\",\n//   ];\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [filteredEmails, setFilteredEmails] = useState([]);\n\n//   const handleInputChange = (event) => {\n//     const value = event.target.value;\n\n//     // Check if the input starts with '@'\n//     if (value.startsWith(\"@\")) {\n//       // Filter admin emails based on input\n//       const filteredAdminEmails = adminEmails.filter((email) =>\n//         email.toLowerCase().includes(value.slice(1).toLowerCase())\n//       );\n\n//       // Update the filtered emails\n//       setFilteredEmails(filteredAdminEmails);\n//     } else {\n//       // Reset filtered emails if input doesn't start with '@'\n//       setFilteredEmails([]);\n//     }\n\n//     // Update the input value\n//     setInputValue(value);\n//   };\n\n//   const handleEmailClick = (email) => {\n//     // Set the selected email as the input value\n//     setInputValue(email);\n\n//     // Clear the filtered emails\n//     setFilteredEmails([]);\n//   };\n\n//   const handleEmailMouseOver = (email) => {\n//     // Highlight the email on mouseover\n//     setInputValue(email);\n//   };\n\n//   return (\n//     <div style={{ position: \"relative\", width: \"250px\" }}>\n//       <label>Email:</label>\n//       <input\n//         type=\"text\"\n//         value={inputValue}\n//         onChange={handleInputChange}\n//         placeholder=\"Comments or add others with @\"\n//         style={{ fontSize: \"16px\", width: \"100%\" }}\n//       />\n//       {filteredEmails.length > 0 && (\n//         <ul\n//           style={{\n//             listStyle: \"none\",\n//             padding: 0,\n//             margin: 0,\n//             position: \"absolute\",\n//             top: \"100%\",\n//             left: 0,\n//             width: \"100%\",\n//             border: \"1px solid #ccc\",\n//             borderTop: \"none\",\n//             borderRadius: \"0 0 5px 5px\",\n//             boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n//             backgroundColor: \"#fff\",\n//             zIndex: 1,\n//           }}\n//         >\n//           {filteredEmails.map((email) => (\n//             <li\n//               key={email}\n//               onClick={() => handleEmailClick(email)}\n//               onMouseOver={() => handleEmailMouseOver(email)}\n//               style={{\n//                 padding: \"8px\",\n//                 cursor: \"pointer\",\n//               }}\n//             >\n//               {email}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Annotation;\n//latest\n// import React, { useState } from \"react\";\n\n// const Annotation = () => {\n//   const [text, setText] = useState(\"\");\n//   const [emails, setEmails] = useState([]);\n//   const [comments, setComments] = useState([]);\n//   const [selectedEmailIndex, setSelectedEmailIndex] = useState(null);\n\n//   const handleInputChange = (e) => {\n//     setText(e.target.value);\n//     const words = e.target.value.split(/\\s/);\n//     const lastWord = words[words.length - 1];\n//     if (lastWord.includes(\"@\")) {\n//       const email = lastWord.slice(1); // Exclude \"@\"\n//       // You can fetch the list of emails based on the entered characters\n//       // For simplicity, I'm just providing a static list of emails\n//       setEmails([\n//         \"example1@example.com\",\n//         \"example2@example.com\",\n//         \"example3@example.com\",\n//       ]);\n//     } else {\n//       setEmails([]);\n//     }\n//   };\n\n//   const handleEmailSelect = (email) => {\n//     setText(text.replace(/@\\S*$/, `@${email} `));\n//     setSelectedEmailIndex(null);\n//   };\n\n//   const handleCommentChange = (e, index) => {\n//     const newComments = [...comments];\n//     newComments[index] = e.target.value;\n//     setComments(newComments);\n//   };\n\n//   const handleAddComment = () => {\n//     setComments([...comments, \"\"]);\n//   };\n\n//   const handleAnnotationSubmit = () => {\n//     // Implement logic to handle annotation submission\n//     const newAnnotation = {\n//       emails,\n//       comments,\n//     };\n//     console.log(newAnnotation);\n//     // Reset states\n//     setText(\"\");\n//     setEmails([]);\n//     setComments([]);\n//   };\n\n//   const renderEmailList = () => {\n//     return (\n//       <ul className=\"email-list\">\n//         {emails.map((email, index) => (\n//           <li key={index} onClick={() => handleEmailSelect(email)}>\n//             {email}\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n//   const renderComments = () => {\n//     return comments.map((comment, index) => (\n//       <div key={index}>\n//         <input\n//           value={comment || \"\"}\n//           onChange={(e) => handleCommentChange(e, index)}\n//           placeholder=\"Add comment...\"\n//         />\n//       </div>\n//     ));\n//   };\n\n//   return (\n//     <div>\n//       <textarea\n//         value={text}\n//         onChange={handleInputChange}\n//         placeholder=\"Add annotation here...\"\n//       />\n//       {emails.length > 0 && renderEmailList()}\n//       {renderComments()}\n//       <button onClick={handleAddComment}>Add Comment</button>\n//       <button onClick={handleAnnotationSubmit}>Submit Annotation</button>\n//     </div>\n//   );\n// };\n\n// export default Annotation;\n\nimport React, { useState } from 'react';\nimport { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nconst Annotation = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n\n  const handleEditorChange = (newEditorState) => {\n    setEditorState(newEditorState);\n  };\n\n  const handleBoldClick = () => {\n    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n  };\n\n  const handleItalicClick = () => {\n    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n  };\n\n  const handleUnderlineClick = () => {\n    handleEditorChange(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n  };\n\n  const handleAlignmentClick = (alignment) => {\n    handleEditorChange(RichUtils.toggleBlockType(editorState, alignment));\n  };\n\n  const handleColorChange = (color) => {\n    handleEditorChange(\n      RichUtils.toggleInlineStyle(editorState, COLOR_${color.toUpperCase()})\n    );\n  };\n\n  const handleClearEditor = () => {\n    handleEditorChange(EditorState.createEmpty());\n  };\n\n  return (\n    <div style={{ margin: '20px' }}>\n      <div style={{ marginBottom: '10px' }}>\n        <button onClick={handleBoldClick}>Bold</button>\n        <button onClick={handleItalicClick}>Italic</button>\n        <button onClick={handleUnderlineClick}>Underline</button>\n        <button onClick={() => handleAlignmentClick('left')}>Left Align</button>\n        <button onClick={() => handleAlignmentClick('center')}>Center Align</button>\n        <button onClick={() => handleAlignmentClick('right')}>Right Align</button>\n        <button onClick={() => handleAlignmentClick('justify')}>Justify</button>\n        <button onClick={() => handleColorChange('red')}>Red Color</button>\n        <button onClick={() => handleColorChange('blue')}>Blue Color</button>\n        <button onClick={() => handleColorChange('green')}>Green Color</button>\n        <button onClick={handleClearEditor}>Clear Editor</button>\n      </div>\n      <div style={{ border: '1px solid #ccc', minHeight: '200px', padding: '10px' }}>\n        <Editor editorState={editorState} onChange={handleEditorChange} />\n      </div>\n      <div style={{ marginTop: '10px' }}>\n        <pre>{JSON.stringify(convertToRaw(editorState.getCurrentContent()), null, 2)}</pre>\n      </div>\n    </div>\n  );\n};\n\nexport default Annotation;"
        }
    ]
}