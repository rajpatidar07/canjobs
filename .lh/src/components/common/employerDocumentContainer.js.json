{
    "sourceFile": "src/components/common/employerDocumentContainer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713876519201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713876519201,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Loader from \"./loader\";\r\nimport LazyLoad from \"react-lazy-load\";\r\nimport {\r\n  UploadEmployerDocument,\r\n  GetEmployerDocumentList,\r\n  VarifyEmployerDocument,\r\n  ADocAnnotation,\r\n  GetCommentsAndAssign,\r\n  getallAdminData,\r\n  UpdateDocuentcommentAssign,\r\n  // DeleteCommentsAndAssign,\r\n  DeleteDocument,\r\n  SendReplyCommit,\r\n  GetReplyCommit,\r\n} from \"../../api/api\";\r\nimport { toast } from \"react-toastify\";\r\n// import FileViewer from \"react-file-viewer\";\r\nimport Verified from \"../../media/verified.png\";\r\nimport { AiOutlineCloudUpload } from \"react-icons/ai\";\r\nimport { CiTrash } from \"react-icons/ci\";\r\n/*Annotation */\r\nimport { FaFlag } from \"react-icons/fa\";\r\nimport { MdAddComment } from \"react-icons/md\";\r\nimport { RxCrossCircled } from \"react-icons/rx\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport CommentBox from \"./CommentBox\";\r\n\r\nexport default function EmployerDocumrentContainer(props) {\r\n  const [otherDoc, setOtherDoc] = useState(false);\r\n  const [docName, setDocName] = useState(\"\");\r\n  const [docData, setDocData] = useState([]);\r\n  const [docTypData, setDocTypData] = useState(\"\");\r\n  const [apiCall, setApiCall] = useState(\"\");\r\n  const [docFile, setDocFile] = useState(\"\");\r\n  const [docFileBase, setDocFileBase] = useState(\"\");\r\n  const [/*docFileExt,*/ setDocFileExt] = useState(\"\");\r\n  const [docId, setDocId] = useState(\"\");\r\n  const [documentName, setDocumentName] = useState(\"\");\r\n  const [showMoreDocType, setShowMoreDocType] = useState(false);\r\n  const [showSaveDoc, setShowSaveDoc] = useState(false);\r\n  const [hide, setHide] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  let encoded;\r\n  let user_type = localStorage.getItem(\"userType\");\r\n  let admin_id = localStorage.getItem(\"admin_id\");\r\n  /**\r\n   * Annotation   */\r\n  // Annotation State\r\n  const [imageAnnotations, setImageAnnotations] = useState([]);\r\n  const [commenAapiCall, setCommentApiCall] = useState(\"\");\r\n  const [comments, setComments] = useState(\"\");\r\n  const [replyComment, setReplyComment] = useState(\"\");\r\n  const [commentsList, setCommentsList] = useState([]);\r\n  const [commentsReplyList, setCommentsReplyList] = useState([]);\r\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null);\r\n  const [isAnnotationMode, setAnnotationMode] = useState(false);\r\n  let [allAdmin, setAllAdmin] = useState([]);\r\n  let [adminid, setAdminId] = useState();\r\n  const [selectedAdmin, setSelectedAdmin] = useState(\"\");\r\n  const [selectedAdminReply, setSelectedAdminReplye] = useState(\"\");\r\n  const [addCommentFlag, setAddCommentFlag] = useState(false);\r\n  let [annotationStatus, setAnnotationStatus] = useState();\r\n  const [filteredEmails, setFilteredEmails] = useState([]);\r\n  const fileViewerRef = useRef(null);\r\n  let [replyCommentClick, setReplyCommentClick] = useState();\r\n  /*Function to get admin list */\r\n  const AdminData = async () => {\r\n    try {\r\n      const userData = await getallAdminData();\r\n      if (userData.data.length === 0) {\r\n        setAllAdmin([]);\r\n      } else {\r\n        // const filteredData = userData.data.filter(item => item.admin_type === \"manager\");\r\n        setAllAdmin(userData.data);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  /*onchange Function to set email or any other comment  */\r\n  const handleInputChange = (event, type) => {\r\n    const value = event.target.value;\r\n    if (value.startsWith(\"@\")) {\r\n      AdminData();\r\n      if (allAdmin) {\r\n        // Filter admin emails based on input\r\n        const filteredAdminEmails = allAdmin.filter((admin) =>\r\n          admin.email.toLowerCase().includes(value.slice(1).toLowerCase())\r\n        );\r\n\r\n        // Update the filtered emails\r\n        setFilteredEmails(filteredAdminEmails);\r\n      }\r\n    } else {\r\n      // Reset filtered emails if input doesn't start with '@'\r\n      setFilteredEmails([]);\r\n    }\r\n\r\n    // Update the input value\r\n    if (type === \"reply\") {\r\n      setReplyComment(value);\r\n    } else {\r\n      setComments(value);\r\n    }\r\n  };\r\n  /*Function to get the email to assign */\r\n  const handleEmailClick = (email, type) => {\r\n    // Set the selected admin and update the input value\r\n    if (type === \"reply\") {\r\n      setSelectedAdminReplye(email);\r\n      setReplyComment(replyComment);\r\n    } else {\r\n      setSelectedAdmin(email);\r\n      setComments(comments);\r\n    }\r\n    setFilteredEmails([]);\r\n  };\r\n  /*Function to get the email to input on hover */\r\n  const handleEmailMouseOver = (email, type) => {\r\n    // Highlight the email on mouseover\r\n    if (type === \"reply\") {\r\n      setReplyComment(email);\r\n    } else {\r\n      setComments(email);\r\n    }\r\n  };\r\n  // Handle click event on the FileViewer to capture annotations\r\n  const handleFileViewerClick = (e) => {\r\n    if (isAnnotationMode) {\r\n      const rect = fileViewerRef.current.getBoundingClientRect();\r\n      const x_axis = e.clientX - rect.left;\r\n      const y_axis = e.clientY - rect.top;\r\n      handleFlagClick({ x_axis, y_axis });\r\n      setImageAnnotations([...imageAnnotations, { x_axis, y_axis }]);\r\n      setAddCommentFlag(true);\r\n    }\r\n  };\r\n\r\n  // Handle flag click to select the annotation and toggle the form visibility for image annotation\r\n  const handleFlagClick = (annotation) => {\r\n    // if (\r\n    //   selectedAnnotation &&\r\n    //   selectedAnnotation.x === annotation.x &&\r\n    //   selectedAnnotation.y === annotation.y\r\n    // ) {\r\n    //   setSelectedAnnotation(null);\r\n    // } else {\r\n    setSelectedAnnotation(annotation);\r\n    // }\r\n  };\r\n\r\n  // Generate a list of comments from the state for image annotation\r\n  const getCommentsList = async () => {\r\n    if (docId || (docData && docData.find((item) => item.type === docName))) {\r\n      try {\r\n        let res = await GetCommentsAndAssign(\r\n          docId ? docId : docData.find((item) => item.type === docName).id,\r\n          adminid,\r\n          annotationStatus\r\n        );\r\n        if (res.data.status === (1 || \"1\")) {\r\n          setCommentsList(res.data.data.reverse());\r\n          setImageAnnotations(res.data.data);\r\n        } else if (res.data.message === \"Task data not found\") {\r\n          setCommentsList([]);\r\n          setImageAnnotations([]);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        setCommentsList([]);\r\n        setImageAnnotations([]);\r\n      }\r\n    } else {\r\n      setCommentsList([]);\r\n      setImageAnnotations([]);\r\n    }\r\n  };\r\n  // Generate a list of comments reply\r\n  const getCommentsReplyList = async () => {\r\n    if (docId || docData.find((item) => item.type === docName)) {\r\n      try {\r\n        let res = await GetReplyCommit(\r\n          docId ? docId : docData.find((item) => item.type === docName).id,\r\n          adminid,\r\n          annotationStatus\r\n        );\r\n        if (res.data.status === (1 || \"1\")) {\r\n          setCommentsReplyList(res.data.data.reverse());\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        setCommentsReplyList([]);\r\n      }\r\n    } else {\r\n      setCommentsReplyList([]);\r\n    }\r\n  };\r\n\r\n  /*Annotaton functionalites close */\r\n  /*Functo get Applicants Document */\r\n  const GetDocument = async () => {\r\n    try {\r\n      let response = await GetEmployerDocumentList(props.employer_id);\r\n      if (\r\n        response.data.data === undefined ||\r\n        response.data.data === \"\" ||\r\n        response.data.data === null ||\r\n        response.data.data.length === 0 ||\r\n        response.data.message === \"No data found\"\r\n      ) {\r\n        setDocData([]);\r\n        setLoading(false);\r\n      } else {\r\n        setLoading(false);\r\n        setDocData(response.data.data);\r\n        // eslint-disable-next-line\r\n        if (\r\n          docTypData === undefined ||\r\n          docTypData === \"undefined\" ||\r\n          (docTypData === \"\" && docName === \"\" && otherDoc === false)\r\n        ) {\r\n          setDocTypData(response.data.data[0]);\r\n          setDocFile(\r\n            response.data.data[0].document_url +\r\n              `?v=${new Date().getMinutes() + new Date().getSeconds()}`\r\n          );\r\n          setDocId(response.data.data[0].id);\r\n          setDocName(response.data.data[0].type);\r\n        } else if (\r\n          showMoreDocType === false &&\r\n          response.data.data.find((item) => item.type === docName)\r\n        ) {\r\n          if (\r\n            response.data.data.find((item) => item.type === docName).type ===\r\n            docName\r\n          ) {\r\n            setDocTypData(\r\n              response.data.data.find((item) => item.type === docName)\r\n            );\r\n\r\n            setDocFile(\r\n              response.data.data.find((item) => item.type === docName)\r\n                .document_url +\r\n                `?v=${new Date().getMinutes() + new Date().getSeconds()}`\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  /*Function to convert file to base64 */\r\n  const convertToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.addEventListener(\"load\", () => {\r\n        resolve({ base64: fileReader.result });\r\n      });\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n\r\n  /*Onchange function of Logo */\r\n  const handleFileChange = async (event, id) => {\r\n    const file = event.target.files[0];\r\n    // console.log(\"employer_id\",props.employer_id,\r\n    // \"document =>\", base64Name,\r\n    // \"Type =>\" , docName)\r\n    if (!file) {\r\n      toast.error(\"No file selected\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        autoClose: 1000,\r\n      });\r\n      return;\r\n    }\r\n    // Check file type\r\n    const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n    const fileType = `.${file.name.split(\".\").pop()}`;\r\n    if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n      // console.log(\"not matched\");\r\n      toast.error(\r\n        \"Invalid document type. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG\",\r\n        {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Check file size\r\n    else if (file.size > 1024 * 8000) {\r\n      toast.error(\"Document size can't be more than 8 mb\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        autoClose: 1000,\r\n      });\r\n      return;\r\n    } else {\r\n      const reader = new FileReader();\r\n      // Read the file as a data URL\r\n      reader.readAsDataURL(file);\r\n      encoded = await convertToBase64(file);\r\n      let base64Name = encoded.base64;\r\n      let DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\r\n        base64Name.split(\";\")[1]\r\n      }`;\r\n      setDocFile(base64Name);\r\n      setDocFileExt(fileType.slice(1));\r\n      setDocumentName(file.name.split(\".\")[0].replace(/ /g, \"_\"));\r\n      // console.log(file.name.split(\".\")[0].replace(/ /g, \"_\"));\r\n      setDocFileBase(DocFile);\r\n      setShowSaveDoc(true);\r\n    }\r\n  };\r\n  /*On change fnction to upload bulk document in 1 array*/\r\n  // const handleFileChange = async (event, id) => {\r\n  //     const files = event.target.files;\r\n  //     if (!files || files.length === 0) {\r\n  //       toast.error(\"No files selected\", {\r\n  //         position: toast.POSITION.TOP_RIGHT,\r\n  //         autoClose: 1000,\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Check each selected file\r\n  //     const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n  //     const maxSize = 1024 * 8000; // 8 MB\r\n\r\n  //     for (let i = 0; i < files.length; i++) {\r\n  //       const file = files[i];\r\n\r\n  //       // Check file type\r\n  //       const fileType = `.${file.name.split(\".\").pop()}`;\r\n  //       if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n  //         toast.error(\r\n  //           `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\r\n  //           {\r\n  //             position: toast.POSITION.TOP_RIGHT,\r\n  //             autoClose: 1000,\r\n  //           }\r\n  //         );\r\n  //         return;\r\n  //       }\r\n\r\n  //       // Check file size\r\n  //       if (file.size > maxSize) {\r\n  //         toast.error(\r\n  //           `Document size can't be more than 8 MB for file '${file.name}'`,\r\n  //           {\r\n  //             position: toast.POSITION.TOP_RIGHT,\r\n  //             autoClose: 1000,\r\n  //           }\r\n  //         );\r\n  //         return;\r\n  //       }\r\n  //     }\r\n\r\n  //     // All files are valid, proceed with processing\r\n  //     // Assuming you want to store all files in an array\r\n  //     const fileList = [];\r\n  //     for (let i = 0; i < files.length; i++) {\r\n  //       const file = files[i];\r\n  //       const reader = new FileReader();\r\n  //       reader.readAsDataURL(file);\r\n  //       const encoded = await convertToBase64(file);\r\n  //       const base64Name = encoded.base64;\r\n  //       const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\r\n  //         base64Name.split(\";\")[1]\r\n  //       }`;\r\n  // const DocRealName = file.name.split(\".\")[0].replace(/ /g, \"_\");\r\n  // fileList.push({\r\n  //   DocRealName: DocFile,\r\n  // });\r\n  //     }\r\n\r\n  //     // Store the array of files\r\n  //     setDocFileBase(fileList);\r\n  //     console.log(fileList);\r\n  //     setShowSaveDoc(true);\r\n  //   };\r\n  /*Function to save document */\r\n  const SaveDocument = async () => {\r\n    try {\r\n      let response = await UploadEmployerDocument(\r\n        props.employer_id,\r\n        docData[0] === docTypData ? docTypData.type : docName,\r\n        docFileBase,\r\n        docData[0] === docTypData ? docTypData.id : docId,\r\n        documentName\r\n      );\r\n      if (response.data.message === \"inserted successfully\") {\r\n        toast.success(\"Document uploaded Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setShowMoreDocType(false);\r\n        setOtherDoc(false);\r\n        setDocName(docName);\r\n        setDocFileBase(\"\");\r\n        setDocFileExt(\"\");\r\n        setDocId(\"\");\r\n        setShowSaveDoc(false);\r\n        setApiCall(true);\r\n        setCommentApiCall(true);\r\n        setHide(false);\r\n      }\r\n      if (response.data.message === \"updated successfully\") {\r\n        toast.success(\"Document Updated Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        if (commentsList.length > 0) {\r\n          OnHandleUpdateComment(\r\n            docData[0] === docTypData ? docTypData.id : docId\r\n          );\r\n        }\r\n        setShowMoreDocType(false);\r\n        setApiCall(true);\r\n        setCommentApiCall(true);\r\n        setHide(false);\r\n        setDocTypData(\r\n          docData.find(\r\n            (item) =>\r\n              item.type ===\r\n              (docData[0] === docTypData ? docTypData.type : docName)\r\n          )\r\n        );\r\n        setDocFile(\r\n          docData.find(\r\n            (item) =>\r\n              item.type ===\r\n              (docData[0] === docTypData ? docTypData.type : docName)\r\n          ).document_url +\r\n            `?v=${new Date().getMinutes() + new Date().getSeconds()}`\r\n        );\r\n      }\r\n      if (response.data.message === \"fields must not be empty !\") {\r\n        toast.error(\"Document type is requried\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setApiCall(true);\r\n        setHide(false);\r\n      }\r\n      if (\r\n        response.data.message === \"Invalid base64-encoded data !\" ||\r\n        response.data.message === \"Unsupported file type !\"\r\n      ) {\r\n        toast.error(\"Document type is not valid\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setApiCall(true);\r\n        setHide(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      setHide(false);\r\n    }\r\n  };\r\n  /* Upload documents in bulk*/\r\n  // let SaveBulkDocument= async () =>{\r\n  //   try{let response = await UploadBulkDocument(props.employer_id,docFileBase)\r\n  //   console.log(response)}catch(err){console.log(err)}\r\n  // }\r\n  /*Fuinction to render image */\r\n  const RenderNewDocFile = () => {\r\n    return (\r\n      <React.Fragment>\r\n        {docFile ? (\r\n          <>\r\n            <div\r\n              className=\"w-100 h-100vh\"\r\n              ref={fileViewerRef}\r\n              onClick={handleFileViewerClick}\r\n            >\r\n              <LazyLoad\r\n                height={\"100%\"}\r\n                offsetVertical={\"100%\"}\r\n                debounce={false}\r\n              >\r\n                {docTypData.document_name &&\r\n                docTypData.document_name.toLowerCase().includes(\"imm\") ? (\r\n                  <iframe\r\n                    src={docFile}\r\n                    height={\"768px\"}\r\n                    width={\"768px\"}\r\n                    title={docTypData.document_name}\r\n                  ></iframe>\r\n                ) : (\r\n                  \"\"\r\n                  // <FileViewer\r\n                  //   key={docTypData.id}\r\n                  //   fileType={\r\n                  //     docFileExt\r\n                  //       ? docFileExt\r\n                  //       : docTypData.extension_type ===\r\n                  //         \"vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n                  //       ? \"docx\"\r\n                  //       : docTypData.extension_type\r\n                  //   }\r\n                  //   filePath={docFile}\r\n                  //   errorComponent={() => <div>Error loading document</div>}\r\n                  // />\r\n                )}\r\n              </LazyLoad>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"text-center mt-5\">No document found</div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  /*Function to replace select box text */\r\n  const textReplaceFunction = (e) => {\r\n    let new_text = e.replaceAll(\"_\", \" \");\r\n    return new_text;\r\n  };\r\n  /*Function to verify the applicants documents */\r\n  const onVerifyDocuments = async (id, verify) => {\r\n    try {\r\n      let response = await VarifyEmployerDocument(id, verify);\r\n      if (response.data.message === \"successfully\") {\r\n        toast.success(\"Document Verify Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setApiCall(true);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  /*Type array */\r\n  let DocTypeData = [\r\n    \"Business T2\",\r\n    \"Recent PD7A\",\r\n    \"Business T4\",\r\n    \"Business Incorporation Certificate\",\r\n    \"Schedule A\",\r\n    \"Provincial Business Certificate\",\r\n    \"Representative Submission Letter\",\r\n    \"Employment Contract\",\r\n    \"Offer of Employment\",\r\n    \"LMIA Summary\",\r\n    \"LMIA Decision Letter\",\r\n    // \"passport\",\r\n    // \"drivers_license\",\r\n    // \"photograph\",\r\n    // \"immigration_status\",\r\n    // \"lmia\",\r\n    // \"job_offer_letter\",\r\n    // \"provincial_nominee_letter\",\r\n    // \"proof_of_funds\",\r\n    // \"proof_of_employment\",\r\n    // \"marriage_certificate\",\r\n    // \"education_metric\",\r\n    // \"education_higher_secondary\",\r\n    // \"education_graduation\",\r\n    // \"education_post_graduation\",\r\n    // \"resume_or_cv\",\r\n    // \"ielts\",\r\n    // \"medical\",\r\n    // \"police_clearance\",\r\n    // \"refusal_letter\",\r\n  ];\r\n\r\n  //UseEfect for document\r\n  useEffect(() => {\r\n    GetDocument();\r\n    RenderNewDocFile();\r\n    if (apiCall === true) {\r\n      setApiCall(false);\r\n    }\r\n    setAnnotationMode(false);\r\n    // eslint-disable-next-line\r\n  }, [docId, apiCall, docName]);\r\n  //USeEffect foe commet replies list\r\n  useEffect(() => {\r\n    // getCommentsReplyList();\r\n    AdminData();\r\n  }, [replyCommentClick]);\r\n  //USeEffect foe commet list\r\n  useEffect(() => {\r\n    setSelectedAnnotation(null);\r\n    getCommentsList();\r\n    if (commenAapiCall === true) {\r\n      setCommentApiCall(false);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [docId, commenAapiCall, adminid, annotationStatus]);\r\n\r\n  /*Function to change document type */\r\n  const handleDocTypeChange = (e) => {\r\n    const selectedValue = e.target.value;\r\n    if (selectedValue === \"other\") {\r\n      setOtherDoc(true);\r\n      setShowMoreDocType(false);\r\n      setDocTypData(\"\");\r\n      setDocId(\"\");\r\n      setDocName(\"\");\r\n    } else {\r\n      setOtherDoc(false);\r\n      setDocName(selectedValue);\r\n    }\r\n  };\r\n\r\n  /*Function to download Document */\r\n  const DownloadDocument = async () => {\r\n    const response = await fetch(docFile);\r\n    const blob = await response.blob();\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.download = docTypData.document_name + \".\" + docTypData.extension_type;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n\r\n    // Clean up the temporary URL\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  /*Function to Print Document  */\r\n  const PrintDocument = () => {\r\n    const printWindow = window.open(\"\", \"_blank\");\r\n    const content = `\r\n      <html>\r\n        <head>\r\n          <title>Print Document</title>\r\n        </head>\r\n        <body>\r\n          <embed src=\"${docFile}\" width=\"100%\" height=\"100%\">\r\n        </body>\r\n      </html>\r\n    `;\r\n\r\n    printWindow.document.open();\r\n    printWindow.document.write(content);\r\n    printWindow.document.close();\r\n    printWindow.onload = () => {\r\n      printWindow.print();\r\n    };\r\n  };\r\n  /*Function to delete document  */\r\n  const OnDeleteDoc = async (id) => {\r\n    try {\r\n      let res = await DeleteDocument(id, \"employer\");\r\n      if (res.data.message === \"document deleted successfully!\") {\r\n        toast.success(\"Document deleted Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setDocFile(\"\");\r\n        setDocId(\"\");\r\n        setDocData(\"\");\r\n        setDocTypData(\"\");\r\n        setDocName(\"\");\r\n        setApiCall(true);\r\n        GetDocument();\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  /*annnotations main api */\r\n  // Function to add annotation based on conditions\r\n  const addAnnotation = async (annotation) => {\r\n    setAddCommentFlag(false);\r\n    // Retrieve data from local storage\r\n    const assignedUserId = allAdmin.find((item) => item.email === comments)\r\n      ? allAdmin.find((item) => item.email === comments).admin_id\r\n      : admin_id;\r\n    const email = selectedAdmin || \"\"; ///\\S+@\\S+\\.\\S+/.test(comments) ? comments : \"\";\r\n    const subject = \"\";\r\n    const comment = /\\S+@\\S+\\.\\S+/.test(comments)\r\n      ? comments.replace(/\\S+@\\S+\\.\\S+/g, \"\")\r\n      : comments; ///\\S+@\\S+\\.\\S+/.test(comments) ? \"\" : comments;\r\n    let DocId = docId\r\n      ? docId\r\n      : docData.find((item) => item.type === docName).id;\r\n    // Send data to the API\r\n    try {\r\n      let res = await ADocAnnotation(\r\n        admin_id,\r\n        DocId,\r\n        assignedUserId,\r\n        email,\r\n        subject,\r\n        comment,\r\n        annotation.x_axis,\r\n        annotation.y_axis,\r\n        \"employer\"\r\n      );\r\n      if (res.data.message === \"task inserted successfully!\") {\r\n        toast.success(\"Comment uploaded Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setSelectedAnnotation(null);\r\n        setComments(\"\");\r\n        setSelectedAdmin(\"\");\r\n        setCommentApiCall(true);\r\n        setFilteredEmails([]);\r\n        setAnnotationMode(!isAnnotationMode);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      if (err.response.data.message === \"required fields cannot be blank\") {\r\n        toast.error(\" Please try again later.\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setSelectedAnnotation(null);\r\n        setComments(\"\");\r\n        setSelectedAdmin(\"\");\r\n        setCommentApiCall(true);\r\n        setFilteredEmails([]);\r\n        setAnnotationMode(!isAnnotationMode);\r\n        setAddCommentFlag();\r\n      }\r\n    }\r\n    // Update state to include the new annotation\r\n    // setImageAnnotations([...imageAnnotations, { x, y }]);\r\n  };\r\n  /* Function to update comment and assign */\r\n  const OnHandleUpdateComment = async (originalData) => {\r\n    let updatedData;\r\n    //Condtion to update x and y axis on documet update\r\n    if (originalData === (docData[0] === docTypData ? docTypData.id : docId)) {\r\n      updatedData = { doc_id: originalData, x_axis: 0, y_axis: 0 };\r\n    } else {\r\n      updatedData = { ...originalData };\r\n      updatedData.status = originalData.status === \"1\" ? \"0\" : \"1\";\r\n    }\r\n    try {\r\n      // Call the API with the updated data\r\n      let res = await UpdateDocuentcommentAssign(updatedData);\r\n      if (res.message === \"Task updated successfully!\") {\r\n        toast.success(\"Task completed Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setSelectedAnnotation(null);\r\n        setComments(\"\");\r\n        setCommentApiCall(true);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  /*Function to delete document comments*/\r\n  // const OnDeleteComment = async (docId) => {\r\n  //   try {\r\n  //     let res = await DeleteCommentsAndAssign(docId);\r\n  //     console.log(res);\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n  /*Function to set the color code to the background of the user name */\r\n  const determineBackgroundColor = (commentItem) => {\r\n    const colorClasses = [\r\n      \"bg-primary-opacity-7\",\r\n      \"bg-warning-opacity-7\",\r\n      \"bg-orange-opacity-6\",\r\n      \"bg-info-opacity-7\",\r\n      \"bg-secondary-opacity-7\",\r\n      \"bg-danger-opacity-6\",\r\n      \"bg-info-opacity-visible\",\r\n    ];\r\n\r\n    const assignedUserId = commentItem.assigned_to_user_id;\r\n\r\n    // Create a mapping dynamically based on assignedUserId\r\n    const userColorMap = {};\r\n\r\n    // Check if assignedUserId is present in the mapping\r\n    if (assignedUserId && userColorMap.hasOwnProperty(assignedUserId)) {\r\n      return userColorMap[assignedUserId];\r\n    }\r\n\r\n    // If not found in the mapping, use the colorClasses logic\r\n    const id = commentItem.id;\r\n    const hashCode = (str) => {\r\n      let hash = 0;\r\n      for (let i = 0; i < str.length; i++) {\r\n        const char = str.charCodeAt(i);\r\n        hash = (hash << 5) - hash + char;\r\n      }\r\n      return hash;\r\n    };\r\n\r\n    const hash = Math.abs(hashCode(id.toString()));\r\n    const index = hash % colorClasses.length;\r\n\r\n    return colorClasses[index];\r\n  };\r\n  /*Function to reply for the comment */\r\n  const ReplyAnnotation = async (data) => {\r\n    let emailrejex = /\\S+@\\S+\\.\\S+/;\r\n    let id = emailrejex.test(selectedAdminReply)\r\n      ? allAdmin.find((item) => item.email === selectedAdminReply).admin_id\r\n      : data.assined_to_user_id;\r\n    try {\r\n      let res = await SendReplyCommit(\r\n        data,\r\n        selectedAdminReply || \"\", //emailrejex.test(replyComment) ? replyComment : \"\",\r\n        /\\S+@\\S+\\.\\S+/.test(replyComment)\r\n          ? replyComment.replace(/\\S+@\\S+\\.\\S+/g, \"\")\r\n          : replyComment, //!emailrejex.test(replyComment) ? replyComment : \"\",\r\n        id\r\n      );\r\n      if (res.data.message === \"message sent successfully!\") {\r\n        toast.success(\"Replied Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setReplyComment(\"\");\r\n        setSelectedAdminReplye(\"\");\r\n        getCommentsReplyList();\r\n        setFilteredEmails([]);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      setSelectedAdminReplye(\"\");\r\n      setFilteredEmails([]);\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className={\r\n        // props.page === \"company_profile\"\r\n        //\r\n        \"document_container bg-white py-7 mb-10\"\r\n        // : \"container document_container bg-white p-5 mb-10\"\r\n      }\r\n    >\r\n      <div className=\"row m-0\">\r\n        <div className=\"col-md-3 p-0 border-right\">\r\n          <h5 className=\"pl-5 pt-5 d-flex justify-content-between align-items-center\">\r\n            Document List\r\n          </h5>\r\n          {/* Documents type list */}\r\n          <table className=\"table font-size-3\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"p-3\" scope=\"col\">\r\n                  Document\r\n                </th>\r\n                {/* <th className=\"p-3\" scope=\"col\">\r\n                  Date\r\n                </th> */}\r\n                <th className=\"p-3\" scope=\"col\"></th>\r\n                <th className=\"p-3\" scope=\"col\"></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"doc_list\">\r\n              {docData.length === 0 ? (\r\n                <tr>\r\n                  <th className=\"bg-white text-center\" colSpan={5}>\r\n                    No Data Found\r\n                  </th>\r\n                </tr>\r\n              ) : (\r\n                (docData || []).map((item, index) => (\r\n                  <tr\r\n                    key={index}\r\n                    action\r\n                    // active={\r\n                    //   docTypData.type === item.type ||\r\n                    //   (showMoreDocType === false && item.type === docName)\r\n                    // }\r\n                    active={item.type === docName}\r\n                    onClick={() => {\r\n                      setShowMoreDocType(false);\r\n                      setDocTypData(item);\r\n                      setDocName(item.type);\r\n                      setDocId(item.id);\r\n                      setOtherDoc(false);\r\n                      setReplyCommentClick();\r\n                      setHide(false);\r\n                      setFilteredEmails([]);\r\n                      setShowSaveDoc(false);\r\n                      setAnnotationMode(!isAnnotationMode);\r\n                      setDocFile(\r\n                        item.document_url +\r\n                          `?v=${\r\n                            new Date().getMinutes() + new Date().getSeconds()\r\n                          }`\r\n                      );\r\n                    }}\r\n                    className={\r\n                      item.type === docName\r\n                        ? \"text-capitalize bg-primary text-white\"\r\n                        : \"text-capitalize\"\r\n                    }\r\n                  >\r\n                    <td className=\"p-3\">\r\n                      {textReplaceFunction(item.type)}\r\n                      <p className=\"font-size-2 m-0\">\r\n                        {moment(item.updated_at).format(\"DD MMMM, YYYY\")}\r\n                      </p>\r\n                    </td>\r\n                    {/* <td className=\"p-3\">\r\n                      {item.updated_by_name\r\n                        ? item.updated_by_name\r\n                        : item.created_by_name}\r\n                    </td> */}\r\n                    <td className=\"p-3\"></td>\r\n                    <td className=\"p-3\">\r\n                      {item.is_varify === \"1\" ? (\r\n                        // <span className=\"verified_doc\">\r\n                        //   <img className=\"w-100\" src={Verified} alt=\"\" />\r\n                        // </span>\r\n                        <span>&#x2713;</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </td>\r\n                    <td className=\"p-3\">\r\n                      <Link onClick={() => OnDeleteDoc(item.id)}>\r\n                        <CiTrash\r\n                          style={{\r\n                            color: item.type === docName ? \"white\" : \"black\",\r\n                            fontSize: \"18px\",\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n          {/* <ListGroup defaultActiveKey=\"#link1\">\r\n        {(docData || []).map((item, index) => (\r\n          <ListGroup.Item\r\n            key={index}\r\n            action\r\n            // active={\r\n            //   docTypData.type === item.type ||\r\n            //   (showMoreDocType === false && item.type === docName)\r\n            // }\r\n            active={item.type === docName}\r\n            onClick={() => {\r\n              setShowMoreDocType(false);\r\n              setDocTypData(item);\r\n              setDocName(item.type);\r\n              setDocId(item.id);\r\n              setOtherDoc(false);\r\n              setHide(false);\r\n              setShowSaveDoc(false);\r\n              setDocFile(\r\n                item.document_url +\r\n                  `?v=${new Date().getMinutes() + new Date().getSeconds()}`\r\n              );\r\n            }}\r\n            className=\"text-capitalize\"\r\n          >\r\n            {textReplaceFunction(item.type)}\r\n            {item.is_varify === \"1\" ? (\r\n              <span className=\"verified_doc\">\r\n                <img className=\"w-100\" src={Verified} alt=\"\" />\r\n              </span>\r\n            ) : null}\r\n          </ListGroup.Item>\r\n        ))}\r\n        <ListGroup.Item\r\n          className={\r\n            user_type === \"company\" || user_type === \"admin\"\r\n              ? \"bg-secondary text-white\"\r\n              : \"d-none\"\r\n          }\r\n          onClick={() => {\r\n            setShowMoreDocType(true);\r\n            setDocTypData(\"\");\r\n            setDocId(\"\");\r\n            setOtherDoc(false);\r\n            setDocFile(\"\");\r\n            setHide(false);\r\n            setShowSaveDoc(false);\r\n          }}\r\n        >\r\n          <b>+ Add New Documents</b>\r\n        </ListGroup.Item>\r\n      </ListGroup> */}\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"row px-0 pt-0 pb-5 doc_upload_row m-0\">\r\n            {showMoreDocType ? (\r\n              <div className=\"doc_upload_col\">\r\n                <Form.Select\r\n                  className=\"form-control select_document_type\"\r\n                  value={docName}\r\n                  onChange={(e) => handleDocTypeChange(e)}\r\n                >\r\n                  <option value={\"\"}>Select document</option>\r\n                  {(DocTypeData || []).map((item, index) => {\r\n                    return (\r\n                      <option value={item} key={index}>\r\n                        {textReplaceFunction(item)}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                  <option value={\"other\"}>Other</option>\r\n                </Form.Select>\r\n              </div>\r\n            ) : (\r\n              <button\r\n                className={\r\n                  user_type === \"company\" || user_type === \"admin\"\r\n                    ? \"btn btn-secondary btn-sm text-white mr-0\"\r\n                    : \"d-none\"\r\n                }\r\n                onClick={() => {\r\n                  setShowMoreDocType(true);\r\n                  setDocTypData(\"\");\r\n                  setDocId(\"\");\r\n                  setOtherDoc(false);\r\n                  setDocFile(\"\");\r\n                  setHide(false);\r\n                  setShowSaveDoc(false);\r\n                }}\r\n              >\r\n                + Add New Documents\r\n              </button>\r\n            )}\r\n            {otherDoc === true ? (\r\n              <div className=\"doc_upload_col\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  value={docName}\r\n                  onChange={(e) => setDocName(e.target.value)}\r\n                  placeholder=\"Document Name\"\r\n                />\r\n              </div>\r\n            ) : null}\r\n            <div className=\"\">\r\n              <label className=\"btn btn-light\">\r\n                <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n                  style={{ display: \"none\" }}\r\n                  onChange={(e) => {\r\n                    handleFileChange(e, docTypData.id);\r\n                    setHide(true);\r\n                  }}\r\n                />\r\n                {docTypData.id\r\n                  ? \"Update Current Document\"\r\n                  : \"Upload New Document\"}\r\n              </label>\r\n            </div>\r\n            {showSaveDoc ? (\r\n              <div className=\"doc_upload_col\">\r\n                <button className=\"btn btn-primary\" onClick={SaveDocument}>\r\n                  Save Document\r\n                </button>\r\n                {/* <button className=\"btn btn-primary\" onClick={SaveBulkDocument}>\r\n                  Save Documents\r\n                </button> */}\r\n              </div>\r\n            ) : null}\r\n            {hide === true ? (\r\n              <div className=\"doc_upload_col\">\r\n                <button\r\n                  className=\"btn btn-light\"\r\n                  onClick={() => {\r\n                    setHide(false);\r\n                    setApiCall(true);\r\n                    setShowSaveDoc(false);\r\n                    setDocFile(\"\");\r\n                    setDocFileExt(\"\");\r\n                    setFilteredEmails([]);\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"doc_preview_box p-5 bg-light rounded position-relative\">\r\n            {/* {docTypData ? ( */}\r\n            <div className=\"doc_action_div\">\r\n              {docFile ? (\r\n                hide === false && docTypData && user_type === \"admin\" ? (\r\n                  <div className=\"doc_upload_col\">\r\n                    {docTypData.is_varify === \"1\" ? (\r\n                      <img className=\"verified_doc_img\" src={Verified} alt=\"\" />\r\n                    ) : (\r\n                      <button\r\n                        className=\"btn btn-info\"\r\n                        disabled={docTypData.is_varify === \"0\" ? false : true}\r\n                        onClick={() => onVerifyDocuments(docTypData.id, 1)}\r\n                      >\r\n                        Verify document\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                ) : null\r\n              ) : null}\r\n              {hide === false && docFile && docName && user_type === \"admin\" ? (\r\n                <div className=\"doc_upload_col flex-end\">\r\n                  <button\r\n                    className=\"p-1 rounded-3 btn-warning mx-3 w-auto\"\r\n                    onClick={PrintDocument}\r\n                    title=\"Print Document\"\r\n                  >\r\n                    <i className=\"fa fa-print\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                  <button\r\n                    className=\"p-1 rounded-3 btn-info w-auto\"\r\n                    onClick={DownloadDocument}\r\n                    title=\"Download Document\"\r\n                  >\r\n                    <i className=\"fa fa-download\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n            {/* Annotation */}\r\n            {loading === true ? (\r\n              <Loader />\r\n            ) : docFile ? (\r\n              <div>\r\n                <div\r\n                  id=\"annotation-container\"\r\n                  style={{\r\n                    position: \"relative\",\r\n                    overflow: \"scroll\",\r\n                    width: \"100%\",\r\n                    height: \"100vh\",\r\n                  }}\r\n                >\r\n                  <div className=\"d-flex justify-content-center\">\r\n                    {/* <RenderNewDocFile /> */}\r\n                    {RenderNewDocFile()}\r\n                    <Link\r\n                      className={` ${\r\n                        hide === false &&\r\n                        docFile &&\r\n                        docName &&\r\n                        user_type === \"admin\"\r\n                          ? `btn-sm mt-7 ${\r\n                              isAnnotationMode\r\n                                ? \"btn-primary \"\r\n                                : \"btn-secondary\"\r\n                            }`\r\n                          : \"d-none\"\r\n                      }`}\r\n                      style={{\r\n                        position: \"fixed\",\r\n                        bottom: \"285px\",\r\n                        right: \"24%\",\r\n                        zIndex: \"99\",\r\n                      }}\r\n                      onClick={() => {\r\n                        setAnnotationMode(!isAnnotationMode);\r\n                        setComments(\"\");\r\n                        setReplyCommentClick();\r\n                        setAddCommentFlag(false);\r\n                        //condition if the pdf is of imm\r\n                        if (\r\n                          docTypData.document_name &&\r\n                          !isAnnotationMode &&\r\n                          docTypData.document_name.toLowerCase().includes(\"imm\")\r\n                        ) {\r\n                          handleFlagClick({ x_axis: 1, y_axis: 1 });\r\n                        } else setSelectedAnnotation(null);\r\n                      }}\r\n                    >\r\n                      {isAnnotationMode ? <RxCrossCircled /> : <MdAddComment />}\r\n                    </Link>\r\n                  </div>\r\n                  {/* Transparent overlay for capturing click events */}\r\n                  {!hide && docFile && docName && user_type === \"admin\" && (\r\n                    <>\r\n                      {isAnnotationMode && (\r\n                        <div\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: 0,\r\n                            left: 0,\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            pointerEvents: \"none\",\r\n                          }}\r\n                        />\r\n                      )}\r\n\r\n                      {imageAnnotations.map((annotation, index) => (\r\n                        <div\r\n                          key={index}\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            left: annotation.x_axis - 5,\r\n                            top: annotation.y_axis - 5,\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={() => handleFlagClick(annotation)}\r\n                        >\r\n                          <FaFlag\r\n                            className=\"\"\r\n                            style={{\r\n                              color:\r\n                                selectedAnnotation &&\r\n                                selectedAnnotation.x_axis ===\r\n                                  annotation.x_axis &&\r\n                                selectedAnnotation.y_axis === annotation.y_axis\r\n                                  ? \"blue\"\r\n                                  : annotation.status === \"1\"\r\n                                  ? \"lightgreen\"\r\n                                  : \"red\",\r\n                              display:\r\n                                annotation.status === \"1\" ? \"none\" : \"block\",\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      ))}\r\n\r\n                      {/* {selectedAnnotation && addCommentFlag === true && (\r\n                        <div\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            left: selectedAnnotation.x_axis + 10,\r\n                            top: selectedAnnotation.y_axis + 20,\r\n                            zIndex: 1,\r\n                          }}\r\n                        >\r\n                          <form\r\n                            className=\"comment-form\"\r\n                            onSubmit={(e) => {\r\n                              e.preventDefault();\r\n                              addAnnotation(selectedAnnotation);\r\n                            }}\r\n                          >\r\n                            <div className=\"comment-input-container\">\r\n                              <input\r\n                                type=\"text\"\r\n                                value={comments || \"\"}\r\n                                onChange={handleInputChange}\r\n                                placeholder=\"Comments or add others with @\"\r\n                                className=\"rounded-pill comment-input\"\r\n                              />\r\n                              {filteredEmails.length > 0 && (\r\n                                <ul className=\"email-suggestions\">\r\n                                  {filteredEmails.map((email, index) => (\r\n                                    <li\r\n                                      key={index}\r\n                                      onClick={() =>\r\n                                        handleEmailClick(email.email)\r\n                                      }\r\n                                      onMouseOver={() =>\r\n                                        handleEmailMouseOver(email.email)\r\n                                      }\r\n                                      className=\"email-suggestion-item\"\r\n                                    >\r\n                                      <strong>{email.name}</strong>\r\n                                    </li>\r\n                                  ))}\r\n                                </ul>\r\n                              )}\r\n                            </div>\r\n                            <div className=\"button-container mx-4\">\r\n                              <button\r\n                                type=\"submit\"\r\n                                // onClick={(e) => {\r\n                                //   e.preventDefault();\r\n                                //   addAnnotation(selectedAnnotation);\r\n                                // }}\r\n                                className=\"btn-sm btn-primary rounded-pill save-comment-btn\"\r\n                              >\r\n                                Save Comment\r\n                              </button>\r\n                              <button\r\n                                className=\"btn-sm btn-info rounded-pill cancel-btn\"\r\n                                onClick={() => {\r\n                                  setAddCommentFlag();\r\n                                  setSelectedAnnotation(null);\r\n                                  setComments(\"\");\r\n                                  setAnnotationMode(!isAnnotationMode);\r\n                                  setFilteredEmails([]);\r\n                                }}\r\n                              >\r\n                                Cancel\r\n                              </button>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                      )} */}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center mt-5\">No document found</div>\r\n            )}\r\n            {/* Annotation Close */}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3 p-0 py-7 border-left\">\r\n          {/* Add Annotation form */}\r\n\r\n          {!hide &&\r\n          docFile &&\r\n          docName &&\r\n          user_type === \"admin\" &&\r\n          selectedAnnotation && //condition for imm pdf\r\n          (docTypData.document_name &&\r\n          docTypData.document_name.toLowerCase().includes(\"imm\")\r\n            ? replyCommentClick === undefined ||\r\n              replyCommentClick === \"\" ||\r\n              replyCommentClick === null\r\n            : addCommentFlag === true) ? (\r\n            <div\r\n              style={\r\n                {\r\n                  // position: \"absolute\",\r\n                  // left: selectedAnnotation.x_axis + 10,\r\n                  // top: selectedAnnotation.y_axis + 20,\r\n                  // zIndex: 1,\r\n                }\r\n              }\r\n              className=\"pt-5 pb-5\"\r\n            >\r\n              <form\r\n                className=\"comment-form\"\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  addAnnotation(selectedAnnotation);\r\n                }}\r\n              >\r\n                <div className=\"comment-input-container m-5\">\r\n                  <label>\r\n                    <b> Add Annotation:</b>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={comments || \"\"}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Comments or add others with @\"\r\n                    className=\"rounded-pill comment-input\"\r\n                  />\r\n                  {filteredEmails.length > 0 && (\r\n                    <ul className=\"email-suggestions\">\r\n                      {filteredEmails.map((email) => (\r\n                        <li\r\n                          key={email.email}\r\n                          onClick={() => handleEmailClick(email.email)}\r\n                          onMouseOver={() => handleEmailMouseOver(email.email)}\r\n                          className=\"email-suggestion-item\"\r\n                        >\r\n                          <strong>{email.name}</strong>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  )}\r\n                </div>\r\n                <div className=\"button-container mx-4\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    // onClick={(e) => {\r\n                    //   e.preventDefault();\r\n                    //   addAnnotation(selectedAnnotation);\r\n\r\n                    // }}\r\n                    className=\"btn-sm btn-primary rounded-pill save-comment-btn\"\r\n                  >\r\n                    Save Comment\r\n                  </button>\r\n                  <button\r\n                    className=\"btn-sm btn-info rounded-pill cancel-btn\"\r\n                    onClick={() => {\r\n                      setAddCommentFlag();\r\n                      setSelectedAnnotation(null);\r\n                      setComments(\"\");\r\n                      setAnnotationMode(!isAnnotationMode);\r\n                      setFilteredEmails([]);\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          ) : null}\r\n          {/* Comment box */}\r\n          {user_type === \"admin\" && (\r\n            <CommentBox\r\n              commentsReplyList={commentsReplyList}\r\n              docData={docData}\r\n              adminid={adminid}\r\n              setAdminId={setAdminId}\r\n              allAdmin={allAdmin}\r\n              annotationStatus={annotationStatus}\r\n              setAnnotationStatus={setAnnotationStatus}\r\n              commentsList={commentsList}\r\n              selectedAnnotation={selectedAnnotation}\r\n              setSelectedAnnotation={setSelectedAnnotation}\r\n              OnHandleUpdateComment={OnHandleUpdateComment}\r\n              determineBackgroundColor={determineBackgroundColor}\r\n              setReplyCommentClick={setReplyCommentClick}\r\n              replyCommentClick={replyCommentClick}\r\n              replyComment={replyComment}\r\n              handleInputChange={handleInputChange}\r\n              filteredEmails={filteredEmails}\r\n              handleEmailClick={handleEmailClick}\r\n              handleEmailMouseOver={handleEmailMouseOver}\r\n              ReplyAnnotation={ReplyAnnotation}\r\n              getCommentsReplyList={getCommentsReplyList}\r\n              setAddCommentFlag={setAddCommentFlag}\r\n              setFilteredEmails={setFilteredEmails}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}