{
    "sourceFile": "src/components/common/employerDocumentContainer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1692954908178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1692954908178,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {\r\n  UploadEmployerDocument,\r\n  GetEmployerDocumentList,\r\n  VarifyEmployerDocument,\r\n} from \"../../api/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport FileViewer from \"react-file-viewer\";\r\nimport { useEffect } from \"react\";\r\nimport Verified from \"../../media/verified.png\";\r\nimport { AiOutlineCloudUpload } from \"react-icons/ai\";\r\nexport default function EmployerDocumrentContainer(props) {\r\n  const [otherDoc, setOtherDoc] = useState(false);\r\n  const [docName, setDocName] = useState(\"\");\r\n  const [docData, setDocData] = useState([]);\r\n  const [docTypData, setDocTypData] = useState(\"\");\r\n  const [apiCall, setApiCall] = useState(\"\");\r\n  const [docFile, setDocFile] = useState(\"\");\r\n  const [docFileBase, setDocFileBase] = useState(\"\");\r\n  const [docFileExt, setDocFileExt] = useState(\"\");\r\n  const [docId, setDocId] = useState(\"\");\r\n  const [showMoreDocType, setShowMoreDocType] = useState(false);\r\n  const [showSaveDoc, setShowSaveDoc] = useState(false);\r\n  const [hide, setHide] = useState(false);\r\n  let encoded;\r\n  let user_type = localStorage.getItem(\"userType\");\r\n  /*Functo get Applicants Document */\r\n  const GetDocument = async () => {\r\n    try {\r\n      let response = await GetEmployerDocumentList(props.employer_id);\r\n      if (\r\n        response.data.data === undefined ||\r\n        response.data.data === \"\" ||\r\n        response.data.data === null ||\r\n        response.data.data.length === 0\r\n      ) {\r\n        setDocData([]);\r\n      } else {\r\n        setDocData(response.data.data);\r\n        // eslint-disable-next-line\r\n        if (\r\n          docTypData === undefined ||\r\n          docTypData === \"undefined\" ||\r\n          (docTypData === \"\" && docName === \"\" && otherDoc === false)\r\n        ) {\r\n          setDocTypData(response.data.data[0]);\r\n          setDocFile(\r\n            response.data.data[0].document_url +\r\n            `?v=${new Date().getMinutes() + new Date().getSeconds()}`\r\n          );\r\n          setDocName(response.data.data[0].type);\r\n        } else if (\r\n          showMoreDocType === false &&\r\n          response.data.data.find((item) => item.type === docName)\r\n        ) {\r\n          if (\r\n            response.data.data.find((item) => item.type === docName).type ===\r\n            docName\r\n          ) {\r\n            setDocTypData(\r\n              response.data.data.find((item) => item.type === docName)\r\n            );\r\n\r\n            setDocFile(\r\n              response.data.data.find((item) => item.type === docName)\r\n                .document_url +\r\n              `?v=${new Date().getMinutes() + new Date().getSeconds()}`\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  };\r\n\r\n  /*Function to convert file to base64 */\r\n  const convertToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.addEventListener(\"load\", () => {\r\n        resolve({ base64: fileReader.result });\r\n      });\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n\r\n  /*Onchange function of Logo */\r\n  const handleFileChange = async (event, id) => {\r\n    const file = event.target.files[0];\r\n    // console.log(\"employer_id\",props.employer_id,\r\n    // \"document =>\", base64Name,\r\n    // \"Type =>\" , docName)\r\n    if (!file) {\r\n      toast.error(\"No file selected\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        autoClose: 1000,\r\n      });\r\n      return;\r\n    }\r\n    // Check file type\r\n    const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\r\n    const fileType = `.${file.name.split(\".\").pop()}`;\r\n    if (!allowedTypes.includes(fileType.toLowerCase())) {\r\n      // console.log(\"not matched\");\r\n      toast.error(\r\n        \"Invalid document type. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG\",\r\n        {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    // Check file size\r\n    else if (file.size > 1024 * 5000) {\r\n      toast.error(\"Document size can't be more than 5 mb\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        autoClose: 1000,\r\n      });\r\n      return;\r\n    } else {\r\n      const reader = new FileReader();\r\n      // Read the file as a data URL\r\n      reader.readAsDataURL(file);\r\n      encoded = await convertToBase64(file);\r\n      let base64Name = encoded.base64;\r\n      let DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\r\n        }`;\r\n      setDocFile(base64Name);\r\n      setDocFileExt(fileType.slice(1));\r\n      setDocFileBase(DocFile);\r\n      setShowSaveDoc(true);\r\n    }\r\n  };\r\n\r\n  /*Function to save document */\r\n  const SaveDocument = async () => {\r\n    try {\r\n      let response = await UploadEmployerDocument(\r\n        props.employer_id,\r\n        docData[0] === docTypData ? docTypData.type : docName,\r\n        docFileBase,\r\n        docData[0] === docTypData ? docTypData.id : docId\r\n      );\r\n      if (response.data.message === \"inserted successfully\") {\r\n        toast.success(\"Document uploaded Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        // console.log(docName);\r\n        setShowMoreDocType(false);\r\n        setOtherDoc(false);\r\n        setDocName(docName);\r\n        setDocFileBase(\"\");\r\n        setDocFileExt(\"\");\r\n        setDocId(\"\");\r\n        setShowSaveDoc(false);\r\n        setApiCall(true);\r\n        setHide(false);\r\n      }\r\n      if (response.data.message === \"updated successfully\") {\r\n        toast.success(\"Document Updated Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setShowMoreDocType(false);\r\n        setApiCall(true);\r\n        setHide(false);\r\n        // console.log(docData.find((item)=>item.type === docName))\r\n        setDocTypData(\r\n          docData.find(\r\n            (item) =>\r\n              item.type ===\r\n              (docData[0] === docTypData ? docTypData.type : docName)\r\n          )\r\n        );\r\n        setDocFile(\r\n          docData.find(\r\n            (item) =>\r\n              item.type ===\r\n              (docData[0] === docTypData ? docTypData.type : docName)\r\n          ).document_url +\r\n          `?v=${new Date().getMinutes() + new Date().getSeconds()}`\r\n        );\r\n      }\r\n      if (response.data.message === \"Invalid base64-encoded data !\") {\r\n        toast.error(\"Document type is not valid\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setApiCall(true);\r\n        setHide(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err)\r\n      setHide(false);\r\n    }\r\n  };\r\n\r\n  /*Fuinction to render image */\r\n  const RenderNewDocFile = () => {\r\n    // console.log(docFile, \"???????\");\r\n    return (\r\n      <FileViewer\r\n        key={docTypData.id}\r\n        fileType={\r\n          docFileExt\r\n            ? docFileExt\r\n            : docTypData.extension_type ===\r\n              \"vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n              ? \"docx\"\r\n              : docTypData.extension_type\r\n        }\r\n        filePath={docFile}\r\n        errorComponent={() => <div>Error loading document</div>}\r\n      />\r\n    );\r\n  };\r\n  /*Function to replace select box text */\r\n  const textReplaceFunction = (e) => {\r\n    let new_text = e.replaceAll(\"_\", \" \");\r\n    return new_text;\r\n  };\r\n  /*Function to verify the applicants documents */\r\n  const onVerifyDocuments = async (id, verify) => {\r\n    try {\r\n      let response = await VarifyEmployerDocument(id, verify);\r\n      if (response.data.message === \"successfully\") {\r\n        toast.success(\"Document Verify Successfully\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          autoClose: 1000,\r\n        });\r\n        setApiCall(true);\r\n      }\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  };\r\n\r\n  /*Type array */\r\n  let DocTypeData = [\r\n    \"passport\",\r\n    \"drivers_license\",\r\n    \"photograph\",\r\n    \"immigration_status\",\r\n    \"lmia\",\r\n    \"job_offer_letter\",\r\n    \"provincial_nominee_letter\",\r\n    \"proof_of_funds\",\r\n    \"proof_of_employment\",\r\n    \"marriage_certificate\",\r\n    \"education_metric\",\r\n    \"education_higher_secondary\",\r\n    \"education_graduation\",\r\n    \"education_post_graduation\",\r\n    \"resume_or_cv\",\r\n    \"ielts\",\r\n    \"medical\",\r\n    \"police_clearance\",\r\n    \"refusal_letter\",\r\n  ];\r\n\r\n  /*Render method */\r\n  useEffect(() => {\r\n    GetDocument();\r\n    RenderNewDocFile();\r\n    if (apiCall === true) {\r\n      setApiCall(false);\r\n    }\r\n  }, [docName, apiCall]);\r\n\r\n  /*Function to change document type */\r\n  const handleDocTypeChange = (e) => {\r\n    const selectedValue = e.target.value;\r\n    if (selectedValue === \"other\") {\r\n      setOtherDoc(true);\r\n      setShowMoreDocType(false);\r\n      setDocTypData(\"\");\r\n      setDocId(\"\");\r\n      setDocName(\"\");\r\n    } else {\r\n      setOtherDoc(false);\r\n      setDocName(selectedValue);\r\n    }\r\n  };\r\n\r\n  /*Function to download Document */\r\n  const DownloadDocument = async () => {\r\n    const response = await fetch(docFile);\r\n    const blob = await response.blob();\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.download = docFile + docFileExt;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n\r\n    // Clean up the temporary URL\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  /*Function to Print Document  */\r\n  const PrintDocument = () => {\r\n    const printWindow = window.open(\"\", \"_blank\");\r\n    const content = `\r\n      <html>\r\n        <head>\r\n          <title>Print Document</title>\r\n        </head>\r\n        <body>\r\n          <embed src=\"${docFile}\" width=\"100%\" height=\"100%\">\r\n        </body>\r\n      </html>\r\n    `;\r\n\r\n    printWindow.document.open();\r\n    printWindow.document.write(content);\r\n    printWindow.document.close();\r\n    printWindow.onload = () => {\r\n      printWindow.print();\r\n    };\r\n  };\r\n  return (\r\n    <div\r\n      className={\r\n        props.page === \"company_profile\"\r\n          ? \"document_container bg-white py-7 mb-10\"\r\n          : \"container document_container bg-white p-5 mb-10\"\r\n      }\r\n    >\r\n      <div className=\"row m-0\">\r\n        <div className=\"col-md-4 p-0 border-right\">\r\n          <h5 className=\"pl-5 pt-5 d-flex justify-content-between align-items-center\">\r\n            Document List\r\n          </h5>\r\n          {/* Documents type list */}\r\n          <table className=\"table font-size-3\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"p-3\" scope=\"col\">\r\n                  Document\r\n                </th>\r\n                <th className=\"p-3\" scope=\"col\">\r\n                  Added By\r\n                </th>\r\n                <th className=\"p-3\" scope=\"col\">\r\n                  Date\r\n                </th>\r\n                <th className=\"p-3\" scope=\"col\">\r\n                  Verified\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {docData.length === 0 ? (\r\n                <tr>\r\n                  <th className=\"bg-white\"></th>\r\n                  <th className=\"bg-white\"></th>\r\n                  <th className=\"bg-white\">No Data Found</th>\r\n                  <th className=\"bg-white\"></th>\r\n                </tr>\r\n              ) : (docData || []).map((item, index) => (\r\n                <tr\r\n                  key={index}\r\n                  action\r\n                  // active={\r\n                  //   docTypData.type === item.type ||\r\n                  //   (showMoreDocType === false && item.type === docName)\r\n                  // }\r\n                  active={item.type === docName}\r\n                  onClick={() => {\r\n                    setShowMoreDocType(false);\r\n                    setDocTypData(item);\r\n                    setDocName(item.type);\r\n                    setDocId(item.id);\r\n                    setOtherDoc(false);\r\n                    setHide(false);\r\n                    setShowSaveDoc(false);\r\n                    setDocFile(\r\n                      item.document_url +\r\n                      `?v=${new Date().getMinutes() + new Date().getSeconds()\r\n                      }`\r\n                    );\r\n                  }}\r\n                  className={\r\n                    item.type === docName\r\n                      ? \"text-capitalize bg-primary text-white\"\r\n                      : \"text-capitalize\"\r\n                  }\r\n                >\r\n                  <td className=\"p-3\"> {textReplaceFunction(item.type)}</td>\r\n                  <td className=\"p-3\">\r\n                    {item.updated_by_name\r\n                      ? item.updated_by_name\r\n                      : item.created_by_name}\r\n                  </td>\r\n                  <td className=\"p-3\">{item.updated_at}</td>\r\n                  <td className=\"p-3\">\r\n                    {item.is_varify === \"1\"\r\n                      ? // <span className=\"verified_doc\">\r\n                      //   <img className=\"w-100\" src={Verified} alt=\"\" />\r\n                      // </span>\r\n                      \"Yes\"\r\n                      : \"No\"}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          {/* <ListGroup defaultActiveKey=\"#link1\">\r\n            {(docData || []).map((item, index) => (\r\n              <ListGroup.Item\r\n                key={index}\r\n                action\r\n                // active={\r\n                //   docTypData.type === item.type ||\r\n                //   (showMoreDocType === false && item.type === docName)\r\n                // }\r\n                active={item.type === docName}\r\n                onClick={() => {\r\n                  setShowMoreDocType(false);\r\n                  setDocTypData(item);\r\n                  setDocName(item.type);\r\n                  setDocId(item.id);\r\n                  setOtherDoc(false);\r\n                  setHide(false);\r\n                  setShowSaveDoc(false);\r\n                  setDocFile(\r\n                    item.document_url +\r\n                      `?v=${new Date().getMinutes() + new Date().getSeconds()}`\r\n                  );\r\n                }}\r\n                className=\"text-capitalize\"\r\n              >\r\n                {textReplaceFunction(item.type)}\r\n                {item.is_varify === \"1\" ? (\r\n                  <span className=\"verified_doc\">\r\n                    <img className=\"w-100\" src={Verified} alt=\"\" />\r\n                  </span>\r\n                ) : null}\r\n              </ListGroup.Item>\r\n            ))}\r\n            <ListGroup.Item\r\n              className={\r\n                user_type === \"company\" || user_type === \"admin\"\r\n                  ? \"bg-secondary text-white\"\r\n                  : \"d-none\"\r\n              }\r\n              onClick={() => {\r\n                setShowMoreDocType(true);\r\n                setDocTypData(\"\");\r\n                setDocId(\"\");\r\n                setOtherDoc(false);\r\n                setDocFile(\"\");\r\n                setHide(false);\r\n                setShowSaveDoc(false);\r\n              }}\r\n            >\r\n              <b>+ Add New Documents</b>\r\n            </ListGroup.Item>\r\n          </ListGroup> */}\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          <div className=\"row px-0 pt-0 pb-5 doc_upload_row m-0\">\r\n            {showMoreDocType ? (\r\n              <div className=\"doc_upload_col\">\r\n                <Form.Select\r\n                  className=\"form-control select_document_type\"\r\n                  value={docName}\r\n                  onChange={(e) => handleDocTypeChange(e)}\r\n                >\r\n                  <option value={\"\"}>Select document</option>\r\n                  {(DocTypeData || []).map((item, index) => {\r\n                    return (\r\n                      <option value={item} key={index}>\r\n                        {/* {item}/ */}\r\n                        {textReplaceFunction(item)}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                  <option value={\"other\"}>Other</option>\r\n                </Form.Select>\r\n              </div>\r\n            ) : (\r\n              <button\r\n                className={\r\n                  user_type === \"company\" || user_type === \"admin\"\r\n                    ? \"btn btn-secondary btn-sm text-white mr-0\"\r\n                    : \"d-none\"\r\n                }\r\n                onClick={() => {\r\n                  setShowMoreDocType(true);\r\n                  setDocTypData(\"\");\r\n                  setDocId(\"\");\r\n                  setOtherDoc(false);\r\n                  setDocFile(\"\");\r\n                  setHide(false);\r\n                  setShowSaveDoc(false);\r\n                }}\r\n              >\r\n                + Add New Documents\r\n              </button>\r\n            )}\r\n            {otherDoc === true ? (\r\n              <div className=\"doc_upload_col\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  value={docName}\r\n                  onChange={(e) => setDocName(e.target.value)}\r\n                  placeholder=\"Docuent Name\"\r\n                />\r\n              </div>\r\n            ) : null}\r\n            <div className=\"\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\r\n                style={{ display: \"none\" }}\r\n                onChange={(e) => handleFileChange(e, docTypData.id)}\r\n              />\r\n              <button\r\n                className={\r\n                  (user_type === \"company\" && (showMoreDocType || otherDoc)) ||\r\n                    user_type === \"admin\"\r\n                    ? \"btn btn-light\"\r\n                    : \"d-none\"\r\n                }\r\n                onClick={() => {\r\n                  document.querySelector('input[type=\"file\"]').click();\r\n                  setHide(true);\r\n                }}\r\n              >\r\n                <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\r\n                {docTypData.id\r\n                  ? \"Update Current Document\"\r\n                  : \"Upload New Document\"}\r\n              </button>\r\n            </div>\r\n            {showSaveDoc ? (\r\n              <div className=\"doc_upload_col\">\r\n                <button className=\"btn btn-primary\" onClick={SaveDocument}>\r\n                  Save Document\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n            {hide === true ? (\r\n              <div className=\"doc_upload_col\">\r\n                <button\r\n                  className=\"btn btn-light\"\r\n                  onClick={() => {\r\n                    setHide(false);\r\n                    setApiCall(true);\r\n                    setShowSaveDoc(false);\r\n                    setDocFile(\"\");\r\n                    setDocFileExt(\"\");\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"doc_preview_box p-5 bg-light rounded position-relative\">\r\n            {/* {docTypData ? ( */}\r\n            <div className=\"doc_action_div\">\r\n              {hide === false && docTypData && user_type === \"admin\" ? (\r\n                <div className=\"doc_upload_col\">\r\n                  {docTypData.is_varify === \"1\" ? (\r\n                    <img className=\"verified_doc_img\" src={Verified} alt=\"\" />\r\n                  ) : (\r\n                    <button\r\n                      className=\"btn btn-info\"\r\n                      disabled={docTypData.is_varify === \"0\" ? false : true}\r\n                      onClick={() => onVerifyDocuments(docTypData.id, 1)}\r\n                    >\r\n                      Verify document\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              ) : null}\r\n              {hide === false && docFile && user_type === \"admin\" ? (\r\n                <div className=\"doc_upload_col flex-end\">\r\n                  <button\r\n                    className=\"p-1 rounded-3 btn-warning mx-3 w-auto\"\r\n                    onClick={PrintDocument}\r\n                    title=\"Print Document\"\r\n                  >\r\n                    <i className=\"fa fa-print\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                  <button\r\n                    className=\"p-1 rounded-3 btn-info w-auto\"\r\n                    onClick={DownloadDocument}\r\n                    title=\"Download Document\"\r\n                  >\r\n                    <i className=\"fa fa-download\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n            <RenderNewDocFile />\r\n            {/* ) : (\r\n              <div className=\"text-center\">\r\n                <h2> No Documents </h2>\r\n              </div>\r\n            )} */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}