{
    "sourceFile": "src/components/common/resetPassword.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1709013399457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709105429749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+import React, { useState } from \"react\";\r\n+import {\r\n+  EmployeeResetPasswordApi,\r\n+  AdminResetPasswordApi,\r\n+  EmployerResetPasswordApi,\r\n+  ResetAgentPasswordApi,\r\n+} from \"../../api/api\";\r\n+import useValidation from \"../common/useValidation\";\r\n+import { useNavigate, useLocation } from \"react-router-dom\";\r\n+import { toast, ToastContainer } from \"react-toastify\";\r\n+// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// New AWS backend\r\n+const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+export default function ResetPassword() {\r\n+  const location = useLocation();\r\n+  const path = location.pathname;\r\n+  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n+  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n+  let navigate = useNavigate();\r\n+  let [loading, setLoading] = useState(false);\r\n+  /*----USER RESET PASSWORD VALIDATION----*/\r\n+  const initialFormState = {\r\n+    password: \"\",\r\n+    conf_password: \"\",\r\n+    token: Token,\r\n+  };\r\n+  /*----VALIDATION CONTENT----*/\r\n+  const validators = {\r\n+    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n+    conf_password: [\r\n+      (value) =>\r\n+        value === \"\"\r\n+          ? \"Confirm Password is required\"\r\n+          : value !== state.password\r\n+          ? \"Confirm Password must be Same as Password\"\r\n+          : \"\",\r\n+    ],\r\n+  };\r\n+  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n+  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n+    initialFormState,\r\n+    validators\r\n+  );\r\n+  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n+  const onUserResetPasswordClick = async (event) => {\r\n+    event.preventDefault();\r\n+    if (validate()) {\r\n+      setLoading(true);\r\n+      // handle form submission\r\n+      if (userType === \"user\") {\r\n+        try {\r\n+          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"company\") {\r\n+        try {\r\n+          let updatedTodo = await EmployerResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"admin\") {\r\n+        try {\r\n+          let updatedTodo = await AdminResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"agent\") {\r\n+        try {\r\n+          let updatedTodo = await ResetAgentPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  // END USER RESET PASSWORD VALIDATION\r\n+  return (\r\n+    <>\r\n+      {/* <!-- RESET PASSWORD --> */}\r\n+      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n+      />\r\n+      <div className=\"d-flex justify-content-center pt-21\">\r\n+        <ToastContainer />\r\n+        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n+          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n+            <div className=\"pb-5 mb-5 text-center\">\r\n+              <img\r\n+                src={`${API_URL}/image/logo-main-black.png`}\r\n+                className=\"img-fluid \"\r\n+                height={200}\r\n+                width={200}\r\n+                alt=\"logo\"\r\n+              />\r\n+            </div>\r\n+            {/* user RESET PASSWORD form */}\r\n+            <form onSubmit={onUserResetPasswordClick}>\r\n+              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Password\r\n+                </label>\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={state.password}\r\n+                  onChange={onInputChange}\r\n+                  className={\r\n+                    errors.password\r\n+                      ? \"form-control border border-danger\"\r\n+                      : \"form-control\"\r\n+                  }\r\n+                  placeholder=\"example@gmail.com\"\r\n+                  id=\"password\"\r\n+                />\r\n+                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n+                {errors.password && (\r\n+                  <span>\r\n+                    {errors.password.map((error) => (\r\n+                      <span key={error} className=\"text-danger font-size-3\">\r\n+                        {error}\r\n+                      </span>\r\n+                    ))}\r\n+                  </span>\r\n+                )}\r\n+              </div>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"conf_password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Confirm Password\r\n+                </label>\r\n+                <div className=\"position-relative\">\r\n+                  <input\r\n+                    name=\"conf_password\"\r\n+                    type=\"password\"\r\n+                    value={state.conf_password}\r\n+                    onChange={onInputChange}\r\n+                    className={\r\n+                      errors.conf_password\r\n+                        ? \"form-control border border-danger\"\r\n+                        : \"form-control\"\r\n+                    }\r\n+                    placeholder=\"Enter confirm password\"\r\n+                    id=\"conf_password\"\r\n+                  />\r\n+                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n+                  {errors.conf_password && (\r\n+                    <span>\r\n+                      {errors.conf_password.map((error) => (\r\n+                        <span key={error} className=\"text-danger font-size-2\">\r\n+                          {error}\r\n+                        </span>\r\n+                      ))}\r\n+                    </span>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"form-group mb-8\">\r\n+                {loading === true ? (\r\n+                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n+                    <span\r\n+                      className=\"spinner-border spinner-border-sm \"\r\n+                      role=\"status\"\r\n+                      aria-hidden=\"true\"\r\n+                    ></span>\r\n+                    <span className=\"sr-only\">Loading...</span>\r\n+                  </button>\r\n+                ) : (\r\n+                  <button\r\n+                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n+                    type=\"submit\"\r\n+                  >\r\n+                    SUBMIT\r\n+                  </button>\r\n+                )}\r\n+              </div>\r\n+            </form>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1709122670680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+import React, { useState } from \"react\";\r\n+import {\r\n+  EmployeeResetPasswordApi,\r\n+  AdminResetPasswordApi,\r\n+  EmployerResetPasswordApi,\r\n+  ResetAgentPasswordApi,\r\n+} from \"../../api/api\";\r\n+import useValidation from \"../common/useValidation\";\r\n+import { useNavigate, useLocation } from \"react-router-dom\";\r\n+import { toast, ToastContainer } from \"react-toastify\";\r\n+const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// New AWS backend\r\n+// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+export default function ResetPassword() {\r\n+  const location = useLocation();\r\n+  const path = location.pathname;\r\n+  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n+  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n+  let navigate = useNavigate();\r\n+  let [loading, setLoading] = useState(false);\r\n+  /*----USER RESET PASSWORD VALIDATION----*/\r\n+  const initialFormState = {\r\n+    password: \"\",\r\n+    conf_password: \"\",\r\n+    token: Token,\r\n+  };\r\n+  /*----VALIDATION CONTENT----*/\r\n+  const validators = {\r\n+    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n+    conf_password: [\r\n+      (value) =>\r\n+        value === \"\"\r\n+          ? \"Confirm Password is required\"\r\n+          : value !== state.password\r\n+          ? \"Confirm Password must be Same as Password\"\r\n+          : \"\",\r\n+    ],\r\n+  };\r\n+  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n+  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n+    initialFormState,\r\n+    validators\r\n+  );\r\n+  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n+  const onUserResetPasswordClick = async (event) => {\r\n+    event.preventDefault();\r\n+    if (validate()) {\r\n+      setLoading(true);\r\n+      // handle form submission\r\n+      if (userType === \"user\") {\r\n+        try {\r\n+          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"company\") {\r\n+        try {\r\n+          let updatedTodo = await EmployerResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"admin\") {\r\n+        try {\r\n+          let updatedTodo = await AdminResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"agent\") {\r\n+        try {\r\n+          let updatedTodo = await ResetAgentPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  // END USER RESET PASSWORD VALIDATION\r\n+  return (\r\n+    <>\r\n+      {/* <!-- RESET PASSWORD --> */}\r\n+      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n+      />\r\n+      <div className=\"d-flex justify-content-center pt-21\">\r\n+        <ToastContainer />\r\n+        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n+          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n+            <div className=\"pb-5 mb-5 text-center\">\r\n+              <img\r\n+                src={`${API_URL}/image/logo-main-black.png`}\r\n+                className=\"img-fluid \"\r\n+                height={200}\r\n+                width={200}\r\n+                alt=\"logo\"\r\n+              />\r\n+            </div>\r\n+            {/* user RESET PASSWORD form */}\r\n+            <form onSubmit={onUserResetPasswordClick}>\r\n+              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Password\r\n+                </label>\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={state.password}\r\n+                  onChange={onInputChange}\r\n+                  className={\r\n+                    errors.password\r\n+                      ? \"form-control border border-danger\"\r\n+                      : \"form-control\"\r\n+                  }\r\n+                  placeholder=\"example@gmail.com\"\r\n+                  id=\"password\"\r\n+                />\r\n+                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n+                {errors.password && (\r\n+                  <span>\r\n+                    {errors.password.map((error) => (\r\n+                      <span key={error} className=\"text-danger font-size-3\">\r\n+                        {error}\r\n+                      </span>\r\n+                    ))}\r\n+                  </span>\r\n+                )}\r\n+              </div>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"conf_password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Confirm Password\r\n+                </label>\r\n+                <div className=\"position-relative\">\r\n+                  <input\r\n+                    name=\"conf_password\"\r\n+                    type=\"password\"\r\n+                    value={state.conf_password}\r\n+                    onChange={onInputChange}\r\n+                    className={\r\n+                      errors.conf_password\r\n+                        ? \"form-control border border-danger\"\r\n+                        : \"form-control\"\r\n+                    }\r\n+                    placeholder=\"Enter confirm password\"\r\n+                    id=\"conf_password\"\r\n+                  />\r\n+                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n+                  {errors.conf_password && (\r\n+                    <span>\r\n+                      {errors.conf_password.map((error) => (\r\n+                        <span key={error} className=\"text-danger font-size-2\">\r\n+                          {error}\r\n+                        </span>\r\n+                      ))}\r\n+                    </span>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"form-group mb-8\">\r\n+                {loading === true ? (\r\n+                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n+                    <span\r\n+                      className=\"spinner-border spinner-border-sm \"\r\n+                      role=\"status\"\r\n+                      aria-hidden=\"true\"\r\n+                    ></span>\r\n+                    <span className=\"sr-only\">Loading...</span>\r\n+                  </button>\r\n+                ) : (\r\n+                  <button\r\n+                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n+                    type=\"submit\"\r\n+                  >\r\n+                    SUBMIT\r\n+                  </button>\r\n+                )}\r\n+              </div>\r\n+            </form>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1709125466478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+import React, { useState } from \"react\";\r\n+import {\r\n+  EmployeeResetPasswordApi,\r\n+  AdminResetPasswordApi,\r\n+  EmployerResetPasswordApi,\r\n+  ResetAgentPasswordApi,\r\n+} from \"../../api/api\";\r\n+import useValidation from \"../common/useValidation\";\r\n+import { useNavigate, useLocation } from \"react-router-dom\";\r\n+import { toast, ToastContainer } from \"react-toastify\";\r\n+// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// New AWS backend\r\n+const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+export default function ResetPassword() {\r\n+  const location = useLocation();\r\n+  const path = location.pathname;\r\n+  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n+  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n+  let navigate = useNavigate();\r\n+  let [loading, setLoading] = useState(false);\r\n+  /*----USER RESET PASSWORD VALIDATION----*/\r\n+  const initialFormState = {\r\n+    password: \"\",\r\n+    conf_password: \"\",\r\n+    token: Token,\r\n+  };\r\n+  /*----VALIDATION CONTENT----*/\r\n+  const validators = {\r\n+    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n+    conf_password: [\r\n+      (value) =>\r\n+        value === \"\"\r\n+          ? \"Confirm Password is required\"\r\n+          : value !== state.password\r\n+          ? \"Confirm Password must be Same as Password\"\r\n+          : \"\",\r\n+    ],\r\n+  };\r\n+  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n+  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n+    initialFormState,\r\n+    validators\r\n+  );\r\n+  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n+  const onUserResetPasswordClick = async (event) => {\r\n+    event.preventDefault();\r\n+    if (validate()) {\r\n+      setLoading(true);\r\n+      // handle form submission\r\n+      if (userType === \"user\") {\r\n+        try {\r\n+          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"company\") {\r\n+        try {\r\n+          let updatedTodo = await EmployerResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"admin\") {\r\n+        try {\r\n+          let updatedTodo = await AdminResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"agent\") {\r\n+        try {\r\n+          let updatedTodo = await ResetAgentPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  // END USER RESET PASSWORD VALIDATION\r\n+  return (\r\n+    <>\r\n+      {/* <!-- RESET PASSWORD --> */}\r\n+      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n+      />\r\n+      <div className=\"d-flex justify-content-center pt-21\">\r\n+        <ToastContainer />\r\n+        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n+          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n+            <div className=\"pb-5 mb-5 text-center\">\r\n+              <img\r\n+                src={`${API_URL}/image/logo-main-black.png`}\r\n+                className=\"img-fluid \"\r\n+                height={200}\r\n+                width={200}\r\n+                alt=\"logo\"\r\n+              />\r\n+            </div>\r\n+            {/* user RESET PASSWORD form */}\r\n+            <form onSubmit={onUserResetPasswordClick}>\r\n+              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Password\r\n+                </label>\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={state.password}\r\n+                  onChange={onInputChange}\r\n+                  className={\r\n+                    errors.password\r\n+                      ? \"form-control border border-danger\"\r\n+                      : \"form-control\"\r\n+                  }\r\n+                  placeholder=\"example@gmail.com\"\r\n+                  id=\"password\"\r\n+                />\r\n+                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n+                {errors.password && (\r\n+                  <span>\r\n+                    {errors.password.map((error) => (\r\n+                      <span key={error} className=\"text-danger font-size-3\">\r\n+                        {error}\r\n+                      </span>\r\n+                    ))}\r\n+                  </span>\r\n+                )}\r\n+              </div>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"conf_password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Confirm Password\r\n+                </label>\r\n+                <div className=\"position-relative\">\r\n+                  <input\r\n+                    name=\"conf_password\"\r\n+                    type=\"password\"\r\n+                    value={state.conf_password}\r\n+                    onChange={onInputChange}\r\n+                    className={\r\n+                      errors.conf_password\r\n+                        ? \"form-control border border-danger\"\r\n+                        : \"form-control\"\r\n+                    }\r\n+                    placeholder=\"Enter confirm password\"\r\n+                    id=\"conf_password\"\r\n+                  />\r\n+                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n+                  {errors.conf_password && (\r\n+                    <span>\r\n+                      {errors.conf_password.map((error) => (\r\n+                        <span key={error} className=\"text-danger font-size-2\">\r\n+                          {error}\r\n+                        </span>\r\n+                      ))}\r\n+                    </span>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"form-group mb-8\">\r\n+                {loading === true ? (\r\n+                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n+                    <span\r\n+                      className=\"spinner-border spinner-border-sm \"\r\n+                      role=\"status\"\r\n+                      aria-hidden=\"true\"\r\n+                    ></span>\r\n+                    <span className=\"sr-only\">Loading...</span>\r\n+                  </button>\r\n+                ) : (\r\n+                  <button\r\n+                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n+                    type=\"submit\"\r\n+                  >\r\n+                    SUBMIT\r\n+                  </button>\r\n+                )}\r\n+              </div>\r\n+            </form>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1709126004764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+import React, { useState } from \"react\";\r\n+import {\r\n+  EmployeeResetPasswordApi,\r\n+  AdminResetPasswordApi,\r\n+  EmployerResetPasswordApi,\r\n+  ResetAgentPasswordApi,\r\n+} from \"../../api/api\";\r\n+import useValidation from \"../common/useValidation\";\r\n+import { useNavigate, useLocation } from \"react-router-dom\";\r\n+import { toast, ToastContainer } from \"react-toastify\";\r\n+const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// New AWS backend\r\n+// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+export default function ResetPassword() {\r\n+  const location = useLocation();\r\n+  const path = location.pathname;\r\n+  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n+  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n+  let navigate = useNavigate();\r\n+  let [loading, setLoading] = useState(false);\r\n+  /*----USER RESET PASSWORD VALIDATION----*/\r\n+  const initialFormState = {\r\n+    password: \"\",\r\n+    conf_password: \"\",\r\n+    token: Token,\r\n+  };\r\n+  /*----VALIDATION CONTENT----*/\r\n+  const validators = {\r\n+    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n+    conf_password: [\r\n+      (value) =>\r\n+        value === \"\"\r\n+          ? \"Confirm Password is required\"\r\n+          : value !== state.password\r\n+          ? \"Confirm Password must be Same as Password\"\r\n+          : \"\",\r\n+    ],\r\n+  };\r\n+  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n+  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n+    initialFormState,\r\n+    validators\r\n+  );\r\n+  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n+  const onUserResetPasswordClick = async (event) => {\r\n+    event.preventDefault();\r\n+    if (validate()) {\r\n+      setLoading(true);\r\n+      // handle form submission\r\n+      if (userType === \"user\") {\r\n+        try {\r\n+          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"company\") {\r\n+        try {\r\n+          let updatedTodo = await EmployerResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"admin\") {\r\n+        try {\r\n+          let updatedTodo = await AdminResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"agent\") {\r\n+        try {\r\n+          let updatedTodo = await ResetAgentPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  // END USER RESET PASSWORD VALIDATION\r\n+  return (\r\n+    <>\r\n+      {/* <!-- RESET PASSWORD --> */}\r\n+      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n+      />\r\n+      <div className=\"d-flex justify-content-center pt-21\">\r\n+        <ToastContainer />\r\n+        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n+          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n+            <div className=\"pb-5 mb-5 text-center\">\r\n+              <img\r\n+                src={`${API_URL}/image/logo-main-black.png`}\r\n+                className=\"img-fluid \"\r\n+                height={200}\r\n+                width={200}\r\n+                alt=\"logo\"\r\n+              />\r\n+            </div>\r\n+            {/* user RESET PASSWORD form */}\r\n+            <form onSubmit={onUserResetPasswordClick}>\r\n+              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Password\r\n+                </label>\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={state.password}\r\n+                  onChange={onInputChange}\r\n+                  className={\r\n+                    errors.password\r\n+                      ? \"form-control border border-danger\"\r\n+                      : \"form-control\"\r\n+                  }\r\n+                  placeholder=\"example@gmail.com\"\r\n+                  id=\"password\"\r\n+                />\r\n+                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n+                {errors.password && (\r\n+                  <span>\r\n+                    {errors.password.map((error) => (\r\n+                      <span key={error} className=\"text-danger font-size-3\">\r\n+                        {error}\r\n+                      </span>\r\n+                    ))}\r\n+                  </span>\r\n+                )}\r\n+              </div>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"conf_password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Confirm Password\r\n+                </label>\r\n+                <div className=\"position-relative\">\r\n+                  <input\r\n+                    name=\"conf_password\"\r\n+                    type=\"password\"\r\n+                    value={state.conf_password}\r\n+                    onChange={onInputChange}\r\n+                    className={\r\n+                      errors.conf_password\r\n+                        ? \"form-control border border-danger\"\r\n+                        : \"form-control\"\r\n+                    }\r\n+                    placeholder=\"Enter confirm password\"\r\n+                    id=\"conf_password\"\r\n+                  />\r\n+                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n+                  {errors.conf_password && (\r\n+                    <span>\r\n+                      {errors.conf_password.map((error) => (\r\n+                        <span key={error} className=\"text-danger font-size-2\">\r\n+                          {error}\r\n+                        </span>\r\n+                      ))}\r\n+                    </span>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"form-group mb-8\">\r\n+                {loading === true ? (\r\n+                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n+                    <span\r\n+                      className=\"spinner-border spinner-border-sm \"\r\n+                      role=\"status\"\r\n+                      aria-hidden=\"true\"\r\n+                    ></span>\r\n+                    <span className=\"sr-only\">Loading...</span>\r\n+                  </button>\r\n+                ) : (\r\n+                  <button\r\n+                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n+                    type=\"submit\"\r\n+                  >\r\n+                    SUBMIT\r\n+                  </button>\r\n+                )}\r\n+              </div>\r\n+            </form>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1709126249813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n } from \"../../api/api\";\r\n import useValidation from \"../common/useValidation\";\r\n import { useNavigate, useLocation } from \"react-router-dom\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n-const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n // New AWS backend\r\n-// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n export default function ResetPassword() {\r\n   const location = useLocation();\r\n   const path = location.pathname;\r\n   let Token = path.split(\"/\")[2].split(\":\")[1];\r\n"
                },
                {
                    "date": 1709126442326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,526 +7,8 @@\n } from \"../../api/api\";\r\n import useValidation from \"../common/useValidation\";\r\n import { useNavigate, useLocation } from \"react-router-dom\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n-// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n-// New AWS backend\r\n-const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n-export default function ResetPassword() {\r\n-  const location = useLocation();\r\n-  const path = location.pathname;\r\n-  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n-  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n-  let navigate = useNavigate();\r\n-  let [loading, setLoading] = useState(false);\r\n-  /*----USER RESET PASSWORD VALIDATION----*/\r\n-  const initialFormState = {\r\n-    password: \"\",\r\n-    conf_password: \"\",\r\n-    token: Token,\r\n-  };\r\n-  /*----VALIDATION CONTENT----*/\r\n-  const validators = {\r\n-    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n-    conf_password: [\r\n-      (value) =>\r\n-        value === \"\"\r\n-          ? \"Confirm Password is required\"\r\n-          : value !== state.password\r\n-          ? \"Confirm Password must be Same as Password\"\r\n-          : \"\",\r\n-    ],\r\n-  };\r\n-  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n-  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n-    initialFormState,\r\n-    validators\r\n-  );\r\n-  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n-  const onUserResetPasswordClick = async (event) => {\r\n-    event.preventDefault();\r\n-    if (validate()) {\r\n-      setLoading(true);\r\n-      // handle form submission\r\n-      if (userType === \"user\") {\r\n-        try {\r\n-          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"company\") {\r\n-        try {\r\n-          let updatedTodo = await EmployerResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"admin\") {\r\n-        try {\r\n-          let updatedTodo = await AdminResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"agent\") {\r\n-        try {\r\n-          let updatedTodo = await ResetAgentPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  // END USER RESET PASSWORD VALIDATION\r\n-  return (\r\n-    <>\r\n-      {/* <!-- RESET PASSWORD --> */}\r\n-      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n-      />\r\n-      <div className=\"d-flex justify-content-center pt-21\">\r\n-        <ToastContainer />\r\n-        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n-          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n-            <div className=\"pb-5 mb-5 text-center\">\r\n-              <img\r\n-                src={`${API_URL}/image/logo-main-black.png`}\r\n-                className=\"img-fluid \"\r\n-                height={200}\r\n-                width={200}\r\n-                alt=\"logo\"\r\n-              />\r\n-            </div>\r\n-            {/* user RESET PASSWORD form */}\r\n-            <form onSubmit={onUserResetPasswordClick}>\r\n-              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Password\r\n-                </label>\r\n-                <input\r\n-                  type=\"password\"\r\n-                  name=\"password\"\r\n-                  value={state.password}\r\n-                  onChange={onInputChange}\r\n-                  className={\r\n-                    errors.password\r\n-                      ? \"form-control border border-danger\"\r\n-                      : \"form-control\"\r\n-                  }\r\n-                  placeholder=\"example@gmail.com\"\r\n-                  id=\"password\"\r\n-                />\r\n-                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n-                {errors.password && (\r\n-                  <span>\r\n-                    {errors.password.map((error) => (\r\n-                      <span key={error} className=\"text-danger font-size-3\">\r\n-                        {error}\r\n-                      </span>\r\n-                    ))}\r\n-                  </span>\r\n-                )}\r\n-              </div>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"conf_password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Confirm Password\r\n-                </label>\r\n-                <div className=\"position-relative\">\r\n-                  <input\r\n-                    name=\"conf_password\"\r\n-                    type=\"password\"\r\n-                    value={state.conf_password}\r\n-                    onChange={onInputChange}\r\n-                    className={\r\n-                      errors.conf_password\r\n-                        ? \"form-control border border-danger\"\r\n-                        : \"form-control\"\r\n-                    }\r\n-                    placeholder=\"Enter confirm password\"\r\n-                    id=\"conf_password\"\r\n-                  />\r\n-                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n-                  {errors.conf_password && (\r\n-                    <span>\r\n-                      {errors.conf_password.map((error) => (\r\n-                        <span key={error} className=\"text-danger font-size-2\">\r\n-                          {error}\r\n-                        </span>\r\n-                      ))}\r\n-                    </span>\r\n-                  )}\r\n-                </div>\r\n-              </div>\r\n-              <div className=\"form-group mb-8\">\r\n-                {loading === true ? (\r\n-                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n-                    <span\r\n-                      className=\"spinner-border spinner-border-sm \"\r\n-                      role=\"status\"\r\n-                      aria-hidden=\"true\"\r\n-                    ></span>\r\n-                    <span className=\"sr-only\">Loading...</span>\r\n-                  </button>\r\n-                ) : (\r\n-                  <button\r\n-                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n-                    type=\"submit\"\r\n-                  >\r\n-                    SUBMIT\r\n-                  </button>\r\n-                )}\r\n-              </div>\r\n-            </form>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState } from \"react\";\r\n-import {\r\n-  EmployeeResetPasswordApi,\r\n-  AdminResetPasswordApi,\r\n-  EmployerResetPasswordApi,\r\n-  ResetAgentPasswordApi,\r\n-} from \"../../api/api\";\r\n-import useValidation from \"../common/useValidation\";\r\n-import { useNavigate, useLocation } from \"react-router-dom\";\r\n-import { toast, ToastContainer } from \"react-toastify\";\r\n-// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n-// New AWS backend\r\n-const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n-export default function ResetPassword() {\r\n-  const location = useLocation();\r\n-  const path = location.pathname;\r\n-  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n-  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n-  let navigate = useNavigate();\r\n-  let [loading, setLoading] = useState(false);\r\n-  /*----USER RESET PASSWORD VALIDATION----*/\r\n-  const initialFormState = {\r\n-    password: \"\",\r\n-    conf_password: \"\",\r\n-    token: Token,\r\n-  };\r\n-  /*----VALIDATION CONTENT----*/\r\n-  const validators = {\r\n-    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n-    conf_password: [\r\n-      (value) =>\r\n-        value === \"\"\r\n-          ? \"Confirm Password is required\"\r\n-          : value !== state.password\r\n-          ? \"Confirm Password must be Same as Password\"\r\n-          : \"\",\r\n-    ],\r\n-  };\r\n-  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n-  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n-    initialFormState,\r\n-    validators\r\n-  );\r\n-  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n-  const onUserResetPasswordClick = async (event) => {\r\n-    event.preventDefault();\r\n-    if (validate()) {\r\n-      setLoading(true);\r\n-      // handle form submission\r\n-      if (userType === \"user\") {\r\n-        try {\r\n-          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"company\") {\r\n-        try {\r\n-          let updatedTodo = await EmployerResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"admin\") {\r\n-        try {\r\n-          let updatedTodo = await AdminResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"agent\") {\r\n-        try {\r\n-          let updatedTodo = await ResetAgentPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  // END USER RESET PASSWORD VALIDATION\r\n-  return (\r\n-    <>\r\n-      {/* <!-- RESET PASSWORD --> */}\r\n-      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n-      />\r\n-      <div className=\"d-flex justify-content-center pt-21\">\r\n-        <ToastContainer />\r\n-        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n-          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n-            <div className=\"pb-5 mb-5 text-center\">\r\n-              <img\r\n-                src={`${API_URL}/image/logo-main-black.png`}\r\n-                className=\"img-fluid \"\r\n-                height={200}\r\n-                width={200}\r\n-                alt=\"logo\"\r\n-              />\r\n-            </div>\r\n-            {/* user RESET PASSWORD form */}\r\n-            <form onSubmit={onUserResetPasswordClick}>\r\n-              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Password\r\n-                </label>\r\n-                <input\r\n-                  type=\"password\"\r\n-                  name=\"password\"\r\n-                  value={state.password}\r\n-                  onChange={onInputChange}\r\n-                  className={\r\n-                    errors.password\r\n-                      ? \"form-control border border-danger\"\r\n-                      : \"form-control\"\r\n-                  }\r\n-                  placeholder=\"example@gmail.com\"\r\n-                  id=\"password\"\r\n-                />\r\n-                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n-                {errors.password && (\r\n-                  <span>\r\n-                    {errors.password.map((error) => (\r\n-                      <span key={error} className=\"text-danger font-size-3\">\r\n-                        {error}\r\n-                      </span>\r\n-                    ))}\r\n-                  </span>\r\n-                )}\r\n-              </div>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"conf_password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Confirm Password\r\n-                </label>\r\n-                <div className=\"position-relative\">\r\n-                  <input\r\n-                    name=\"conf_password\"\r\n-                    type=\"password\"\r\n-                    value={state.conf_password}\r\n-                    onChange={onInputChange}\r\n-                    className={\r\n-                      errors.conf_password\r\n-                        ? \"form-control border border-danger\"\r\n-                        : \"form-control\"\r\n-                    }\r\n-                    placeholder=\"Enter confirm password\"\r\n-                    id=\"conf_password\"\r\n-                  />\r\n-                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n-                  {errors.conf_password && (\r\n-                    <span>\r\n-                      {errors.conf_password.map((error) => (\r\n-                        <span key={error} className=\"text-danger font-size-2\">\r\n-                          {error}\r\n-                        </span>\r\n-                      ))}\r\n-                    </span>\r\n-                  )}\r\n-                </div>\r\n-              </div>\r\n-              <div className=\"form-group mb-8\">\r\n-                {loading === true ? (\r\n-                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n-                    <span\r\n-                      className=\"spinner-border spinner-border-sm \"\r\n-                      role=\"status\"\r\n-                      aria-hidden=\"true\"\r\n-                    ></span>\r\n-                    <span className=\"sr-only\">Loading...</span>\r\n-                  </button>\r\n-                ) : (\r\n-                  <button\r\n-                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n-                    type=\"submit\"\r\n-                  >\r\n-                    SUBMIT\r\n-                  </button>\r\n-                )}\r\n-              </div>\r\n-            </form>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState } from \"react\";\r\n-import {\r\n-  EmployeeResetPasswordApi,\r\n-  AdminResetPasswordApi,\r\n-  EmployerResetPasswordApi,\r\n-  ResetAgentPasswordApi,\r\n-} from \"../../api/api\";\r\n-import useValidation from \"../common/useValidation\";\r\n-import { useNavigate, useLocation } from \"react-router-dom\";\r\n-import { toast, ToastContainer } from \"react-toastify\";\r\n const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n // New AWS backend\r\n // const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n export default function ResetPassword() {\r\n@@ -774,522 +256,4 @@\n       </div>\r\n     </>\r\n   );\r\n }\r\n-import React, { useState } from \"react\";\r\n-import {\r\n-  EmployeeResetPasswordApi,\r\n-  AdminResetPasswordApi,\r\n-  EmployerResetPasswordApi,\r\n-  ResetAgentPasswordApi,\r\n-} from \"../../api/api\";\r\n-import useValidation from \"../common/useValidation\";\r\n-import { useNavigate, useLocation } from \"react-router-dom\";\r\n-import { toast, ToastContainer } from \"react-toastify\";\r\n-// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n-// New AWS backend\r\n-const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n-export default function ResetPassword() {\r\n-  const location = useLocation();\r\n-  const path = location.pathname;\r\n-  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n-  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n-  let navigate = useNavigate();\r\n-  let [loading, setLoading] = useState(false);\r\n-  /*----USER RESET PASSWORD VALIDATION----*/\r\n-  const initialFormState = {\r\n-    password: \"\",\r\n-    conf_password: \"\",\r\n-    token: Token,\r\n-  };\r\n-  /*----VALIDATION CONTENT----*/\r\n-  const validators = {\r\n-    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n-    conf_password: [\r\n-      (value) =>\r\n-        value === \"\"\r\n-          ? \"Confirm Password is required\"\r\n-          : value !== state.password\r\n-          ? \"Confirm Password must be Same as Password\"\r\n-          : \"\",\r\n-    ],\r\n-  };\r\n-  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n-  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n-    initialFormState,\r\n-    validators\r\n-  );\r\n-  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n-  const onUserResetPasswordClick = async (event) => {\r\n-    event.preventDefault();\r\n-    if (validate()) {\r\n-      setLoading(true);\r\n-      // handle form submission\r\n-      if (userType === \"user\") {\r\n-        try {\r\n-          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"company\") {\r\n-        try {\r\n-          let updatedTodo = await EmployerResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"admin\") {\r\n-        try {\r\n-          let updatedTodo = await AdminResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"agent\") {\r\n-        try {\r\n-          let updatedTodo = await ResetAgentPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  // END USER RESET PASSWORD VALIDATION\r\n-  return (\r\n-    <>\r\n-      {/* <!-- RESET PASSWORD --> */}\r\n-      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n-      />\r\n-      <div className=\"d-flex justify-content-center pt-21\">\r\n-        <ToastContainer />\r\n-        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n-          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n-            <div className=\"pb-5 mb-5 text-center\">\r\n-              <img\r\n-                src={`${API_URL}/image/logo-main-black.png`}\r\n-                className=\"img-fluid \"\r\n-                height={200}\r\n-                width={200}\r\n-                alt=\"logo\"\r\n-              />\r\n-            </div>\r\n-            {/* user RESET PASSWORD form */}\r\n-            <form onSubmit={onUserResetPasswordClick}>\r\n-              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Password\r\n-                </label>\r\n-                <input\r\n-                  type=\"password\"\r\n-                  name=\"password\"\r\n-                  value={state.password}\r\n-                  onChange={onInputChange}\r\n-                  className={\r\n-                    errors.password\r\n-                      ? \"form-control border border-danger\"\r\n-                      : \"form-control\"\r\n-                  }\r\n-                  placeholder=\"example@gmail.com\"\r\n-                  id=\"password\"\r\n-                />\r\n-                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n-                {errors.password && (\r\n-                  <span>\r\n-                    {errors.password.map((error) => (\r\n-                      <span key={error} className=\"text-danger font-size-3\">\r\n-                        {error}\r\n-                      </span>\r\n-                    ))}\r\n-                  </span>\r\n-                )}\r\n-              </div>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"conf_password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Confirm Password\r\n-                </label>\r\n-                <div className=\"position-relative\">\r\n-                  <input\r\n-                    name=\"conf_password\"\r\n-                    type=\"password\"\r\n-                    value={state.conf_password}\r\n-                    onChange={onInputChange}\r\n-                    className={\r\n-                      errors.conf_password\r\n-                        ? \"form-control border border-danger\"\r\n-                        : \"form-control\"\r\n-                    }\r\n-                    placeholder=\"Enter confirm password\"\r\n-                    id=\"conf_password\"\r\n-                  />\r\n-                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n-                  {errors.conf_password && (\r\n-                    <span>\r\n-                      {errors.conf_password.map((error) => (\r\n-                        <span key={error} className=\"text-danger font-size-2\">\r\n-                          {error}\r\n-                        </span>\r\n-                      ))}\r\n-                    </span>\r\n-                  )}\r\n-                </div>\r\n-              </div>\r\n-              <div className=\"form-group mb-8\">\r\n-                {loading === true ? (\r\n-                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n-                    <span\r\n-                      className=\"spinner-border spinner-border-sm \"\r\n-                      role=\"status\"\r\n-                      aria-hidden=\"true\"\r\n-                    ></span>\r\n-                    <span className=\"sr-only\">Loading...</span>\r\n-                  </button>\r\n-                ) : (\r\n-                  <button\r\n-                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n-                    type=\"submit\"\r\n-                  >\r\n-                    SUBMIT\r\n-                  </button>\r\n-                )}\r\n-              </div>\r\n-            </form>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState } from \"react\";\r\n-import {\r\n-  EmployeeResetPasswordApi,\r\n-  AdminResetPasswordApi,\r\n-  EmployerResetPasswordApi,\r\n-  ResetAgentPasswordApi,\r\n-} from \"../../api/api\";\r\n-import useValidation from \"../common/useValidation\";\r\n-import { useNavigate, useLocation } from \"react-router-dom\";\r\n-import { toast, ToastContainer } from \"react-toastify\";\r\n-const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n-// New AWS backend\r\n-// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n-export default function ResetPassword() {\r\n-  const location = useLocation();\r\n-  const path = location.pathname;\r\n-  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n-  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n-  let navigate = useNavigate();\r\n-  let [loading, setLoading] = useState(false);\r\n-  /*----USER RESET PASSWORD VALIDATION----*/\r\n-  const initialFormState = {\r\n-    password: \"\",\r\n-    conf_password: \"\",\r\n-    token: Token,\r\n-  };\r\n-  /*----VALIDATION CONTENT----*/\r\n-  const validators = {\r\n-    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n-    conf_password: [\r\n-      (value) =>\r\n-        value === \"\"\r\n-          ? \"Confirm Password is required\"\r\n-          : value !== state.password\r\n-          ? \"Confirm Password must be Same as Password\"\r\n-          : \"\",\r\n-    ],\r\n-  };\r\n-  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n-  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n-    initialFormState,\r\n-    validators\r\n-  );\r\n-  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n-  const onUserResetPasswordClick = async (event) => {\r\n-    event.preventDefault();\r\n-    if (validate()) {\r\n-      setLoading(true);\r\n-      // handle form submission\r\n-      if (userType === \"user\") {\r\n-        try {\r\n-          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"company\") {\r\n-        try {\r\n-          let updatedTodo = await EmployerResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"admin\") {\r\n-        try {\r\n-          let updatedTodo = await AdminResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"agent\") {\r\n-        try {\r\n-          let updatedTodo = await ResetAgentPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  // END USER RESET PASSWORD VALIDATION\r\n-  return (\r\n-    <>\r\n-      {/* <!-- RESET PASSWORD --> */}\r\n-      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n-      />\r\n-      <div className=\"d-flex justify-content-center pt-21\">\r\n-        <ToastContainer />\r\n-        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n-          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n-            <div className=\"pb-5 mb-5 text-center\">\r\n-              <img\r\n-                src={`${API_URL}/image/logo-main-black.png`}\r\n-                className=\"img-fluid \"\r\n-                height={200}\r\n-                width={200}\r\n-                alt=\"logo\"\r\n-              />\r\n-            </div>\r\n-            {/* user RESET PASSWORD form */}\r\n-            <form onSubmit={onUserResetPasswordClick}>\r\n-              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Password\r\n-                </label>\r\n-                <input\r\n-                  type=\"password\"\r\n-                  name=\"password\"\r\n-                  value={state.password}\r\n-                  onChange={onInputChange}\r\n-                  className={\r\n-                    errors.password\r\n-                      ? \"form-control border border-danger\"\r\n-                      : \"form-control\"\r\n-                  }\r\n-                  placeholder=\"example@gmail.com\"\r\n-                  id=\"password\"\r\n-                />\r\n-                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n-                {errors.password && (\r\n-                  <span>\r\n-                    {errors.password.map((error) => (\r\n-                      <span key={error} className=\"text-danger font-size-3\">\r\n-                        {error}\r\n-                      </span>\r\n-                    ))}\r\n-                  </span>\r\n-                )}\r\n-              </div>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"conf_password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Confirm Password\r\n-                </label>\r\n-                <div className=\"position-relative\">\r\n-                  <input\r\n-                    name=\"conf_password\"\r\n-                    type=\"password\"\r\n-                    value={state.conf_password}\r\n-                    onChange={onInputChange}\r\n-                    className={\r\n-                      errors.conf_password\r\n-                        ? \"form-control border border-danger\"\r\n-                        : \"form-control\"\r\n-                    }\r\n-                    placeholder=\"Enter confirm password\"\r\n-                    id=\"conf_password\"\r\n-                  />\r\n-                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n-                  {errors.conf_password && (\r\n-                    <span>\r\n-                      {errors.conf_password.map((error) => (\r\n-                        <span key={error} className=\"text-danger font-size-2\">\r\n-                          {error}\r\n-                        </span>\r\n-                      ))}\r\n-                    </span>\r\n-                  )}\r\n-                </div>\r\n-              </div>\r\n-              <div className=\"form-group mb-8\">\r\n-                {loading === true ? (\r\n-                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n-                    <span\r\n-                      className=\"spinner-border spinner-border-sm \"\r\n-                      role=\"status\"\r\n-                      aria-hidden=\"true\"\r\n-                    ></span>\r\n-                    <span className=\"sr-only\">Loading...</span>\r\n-                  </button>\r\n-                ) : (\r\n-                  <button\r\n-                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n-                    type=\"submit\"\r\n-                  >\r\n-                    SUBMIT\r\n-                  </button>\r\n-                )}\r\n-              </div>\r\n-            </form>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1709281867357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n } from \"../../api/api\";\r\n import useValidation from \"../common/useValidation\";\r\n import { useNavigate, useLocation } from \"react-router-dom\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n-const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n // New AWS backend\r\n-// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n export default function ResetPassword() {\r\n   const location = useLocation();\r\n   const path = location.pathname;\r\n   let Token = path.split(\"/\")[2].split(\":\")[1];\r\n"
                },
                {
                    "date": 1709352364388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n } from \"../../api/api\";\r\n import useValidation from \"../common/useValidation\";\r\n import { useNavigate, useLocation } from \"react-router-dom\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n-// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n // New AWS backend\r\n-const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n export default function ResetPassword() {\r\n   const location = useLocation();\r\n   const path = location.pathname;\r\n   let Token = path.split(\"/\")[2].split(\":\")[1];\r\n"
                },
                {
                    "date": 1709361030711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n } from \"../../api/api\";\r\n import useValidation from \"../common/useValidation\";\r\n import { useNavigate, useLocation } from \"react-router-dom\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n-const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n // New AWS backend\r\n-// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n export default function ResetPassword() {\r\n   const location = useLocation();\r\n   const path = location.pathname;\r\n   let Token = path.split(\"/\")[2].split(\":\")[1];\r\n"
                },
                {
                    "date": 1710412017736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n } from \"../../api/api\";\r\n import useValidation from \"../common/useValidation\";\r\n import { useNavigate, useLocation } from \"react-router-dom\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n-// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n // New AWS backend\r\n-const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n export default function ResetPassword() {\r\n   const location = useLocation();\r\n   const path = location.pathname;\r\n   let Token = path.split(\"/\")[2].split(\":\")[1];\r\n"
                },
                {
                    "date": 1710413229605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n } from \"../../api/api\";\r\n import useValidation from \"../common/useValidation\";\r\n import { useNavigate, useLocation } from \"react-router-dom\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n-const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n // New AWS backend\r\n-// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n export default function ResetPassword() {\r\n   const location = useLocation();\r\n   const path = location.pathname;\r\n   let Token = path.split(\"/\")[2].split(\":\")[1];\r\n"
                },
                {
                    "date": 1710420278568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+import React, { useState } from \"react\";\r\n+import {\r\n+  EmployeeResetPasswordApi,\r\n+  AdminResetPasswordApi,\r\n+  EmployerResetPasswordApi,\r\n+  ResetAgentPasswordApi,\r\n+} from \"../../api/api\";\r\n+import useValidation from \"../common/useValidation\";\r\n+import { useNavigate, useLocation } from \"react-router-dom\";\r\n+import { toast, ToastContainer } from \"react-toastify\";\r\n+const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// New AWS backend\r\n+// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+export default function ResetPassword() {\r\n+  const location = useLocation();\r\n+  const path = location.pathname;\r\n+  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n+  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n+  let navigate = useNavigate();\r\n+  let [loading, setLoading] = useState(false);\r\n+  /*----USER RESET PASSWORD VALIDATION----*/\r\n+  const initialFormState = {\r\n+    password: \"\",\r\n+    conf_password: \"\",\r\n+    token: Token,\r\n+  };\r\n+  /*----VALIDATION CONTENT----*/\r\n+  const validators = {\r\n+    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n+    conf_password: [\r\n+      (value) =>\r\n+        value === \"\"\r\n+          ? \"Confirm Password is required\"\r\n+          : value !== state.password\r\n+          ? \"Confirm Password must be Same as Password\"\r\n+          : \"\",\r\n+    ],\r\n+  };\r\n+  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n+  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n+    initialFormState,\r\n+    validators\r\n+  );\r\n+  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n+  const onUserResetPasswordClick = async (event) => {\r\n+    event.preventDefault();\r\n+    if (validate()) {\r\n+      setLoading(true);\r\n+      // handle form submission\r\n+      if (userType === \"user\") {\r\n+        try {\r\n+          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"company\") {\r\n+        try {\r\n+          let updatedTodo = await EmployerResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"admin\") {\r\n+        try {\r\n+          let updatedTodo = await AdminResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"agent\") {\r\n+        try {\r\n+          let updatedTodo = await ResetAgentPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  // END USER RESET PASSWORD VALIDATION\r\n+  return (\r\n+    <>\r\n+      {/* <!-- RESET PASSWORD --> */}\r\n+      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n+      />\r\n+      <div className=\"d-flex justify-content-center pt-21\">\r\n+        <ToastContainer />\r\n+        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n+          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n+            <div className=\"pb-5 mb-5 text-center\">\r\n+              <img\r\n+                src={`${API_URL}/image/logo-main-black.png`}\r\n+                className=\"img-fluid \"\r\n+                height={200}\r\n+                width={200}\r\n+                alt=\"logo\"\r\n+              />\r\n+            </div>\r\n+            {/* user RESET PASSWORD form */}\r\n+            <form onSubmit={onUserResetPasswordClick}>\r\n+              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Password\r\n+                </label>\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={state.password}\r\n+                  onChange={onInputChange}\r\n+                  className={\r\n+                    errors.password\r\n+                      ? \"form-control border border-danger\"\r\n+                      : \"form-control\"\r\n+                  }\r\n+                  placeholder=\"example@gmail.com\"\r\n+                  id=\"password\"\r\n+                />\r\n+                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n+                {errors.password && (\r\n+                  <span>\r\n+                    {errors.password.map((error) => (\r\n+                      <span key={error} className=\"text-danger font-size-3\">\r\n+                        {error}\r\n+                      </span>\r\n+                    ))}\r\n+                  </span>\r\n+                )}\r\n+              </div>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"conf_password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Confirm Password\r\n+                </label>\r\n+                <div className=\"position-relative\">\r\n+                  <input\r\n+                    name=\"conf_password\"\r\n+                    type=\"password\"\r\n+                    value={state.conf_password}\r\n+                    onChange={onInputChange}\r\n+                    className={\r\n+                      errors.conf_password\r\n+                        ? \"form-control border border-danger\"\r\n+                        : \"form-control\"\r\n+                    }\r\n+                    placeholder=\"Enter confirm password\"\r\n+                    id=\"conf_password\"\r\n+                  />\r\n+                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n+                  {errors.conf_password && (\r\n+                    <span>\r\n+                      {errors.conf_password.map((error) => (\r\n+                        <span key={error} className=\"text-danger font-size-2\">\r\n+                          {error}\r\n+                        </span>\r\n+                      ))}\r\n+                    </span>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"form-group mb-8\">\r\n+                {loading === true ? (\r\n+                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n+                    <span\r\n+                      className=\"spinner-border spinner-border-sm \"\r\n+                      role=\"status\"\r\n+                      aria-hidden=\"true\"\r\n+                    ></span>\r\n+                    <span className=\"sr-only\">Loading...</span>\r\n+                  </button>\r\n+                ) : (\r\n+                  <button\r\n+                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n+                    type=\"submit\"\r\n+                  >\r\n+                    SUBMIT\r\n+                  </button>\r\n+                )}\r\n+              </div>\r\n+            </form>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1710420305640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,267 +7,8 @@\n } from \"../../api/api\";\r\n import useValidation from \"../common/useValidation\";\r\n import { useNavigate, useLocation } from \"react-router-dom\";\r\n import { toast, ToastContainer } from \"react-toastify\";\r\n-const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n-// New AWS backend\r\n-// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n-export default function ResetPassword() {\r\n-  const location = useLocation();\r\n-  const path = location.pathname;\r\n-  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n-  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n-  let navigate = useNavigate();\r\n-  let [loading, setLoading] = useState(false);\r\n-  /*----USER RESET PASSWORD VALIDATION----*/\r\n-  const initialFormState = {\r\n-    password: \"\",\r\n-    conf_password: \"\",\r\n-    token: Token,\r\n-  };\r\n-  /*----VALIDATION CONTENT----*/\r\n-  const validators = {\r\n-    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n-    conf_password: [\r\n-      (value) =>\r\n-        value === \"\"\r\n-          ? \"Confirm Password is required\"\r\n-          : value !== state.password\r\n-          ? \"Confirm Password must be Same as Password\"\r\n-          : \"\",\r\n-    ],\r\n-  };\r\n-  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n-  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n-    initialFormState,\r\n-    validators\r\n-  );\r\n-  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n-  const onUserResetPasswordClick = async (event) => {\r\n-    event.preventDefault();\r\n-    if (validate()) {\r\n-      setLoading(true);\r\n-      // handle form submission\r\n-      if (userType === \"user\") {\r\n-        try {\r\n-          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"company\") {\r\n-        try {\r\n-          let updatedTodo = await EmployerResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"admin\") {\r\n-        try {\r\n-          let updatedTodo = await AdminResetPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-      if (userType === \"agent\") {\r\n-        try {\r\n-          let updatedTodo = await ResetAgentPasswordApi(state);\r\n-          if (\r\n-            updatedTodo.status === true ||\r\n-            updatedTodo.message === \"Password updated successfully\"\r\n-          ) {\r\n-            toast.success(\"Password updated successfully\", {\r\n-              position: toast.POSITION.TOP_RIGHT,\r\n-              autoClose: 1000,\r\n-            });\r\n-            setLoading(false);\r\n-            setState(initialFormState);\r\n-            navigate(\"/\");\r\n-            window.location.reload();\r\n-          }\r\n-        } catch (err) {\r\n-          console.log(err);\r\n-          setLoading(false);\r\n-        }\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  // END USER RESET PASSWORD VALIDATION\r\n-  return (\r\n-    <>\r\n-      {/* <!-- RESET PASSWORD --> */}\r\n-      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n-      />\r\n-      <link\r\n-        rel=\"stylesheet\"\r\n-        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n-      />\r\n-      <div className=\"d-flex justify-content-center pt-21\">\r\n-        <ToastContainer />\r\n-        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n-          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n-            <div className=\"pb-5 mb-5 text-center\">\r\n-              <img\r\n-                src={`${API_URL}/image/logo-main-black.png`}\r\n-                className=\"img-fluid \"\r\n-                height={200}\r\n-                width={200}\r\n-                alt=\"logo\"\r\n-              />\r\n-            </div>\r\n-            {/* user RESET PASSWORD form */}\r\n-            <form onSubmit={onUserResetPasswordClick}>\r\n-              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Password\r\n-                </label>\r\n-                <input\r\n-                  type=\"password\"\r\n-                  name=\"password\"\r\n-                  value={state.password}\r\n-                  onChange={onInputChange}\r\n-                  className={\r\n-                    errors.password\r\n-                      ? \"form-control border border-danger\"\r\n-                      : \"form-control\"\r\n-                  }\r\n-                  placeholder=\"example@gmail.com\"\r\n-                  id=\"password\"\r\n-                />\r\n-                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n-                {errors.password && (\r\n-                  <span>\r\n-                    {errors.password.map((error) => (\r\n-                      <span key={error} className=\"text-danger font-size-3\">\r\n-                        {error}\r\n-                      </span>\r\n-                    ))}\r\n-                  </span>\r\n-                )}\r\n-              </div>\r\n-              <div className=\"form-group\">\r\n-                <label\r\n-                  htmlFor=\"conf_password\"\r\n-                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n-                >\r\n-                  Confirm Password\r\n-                </label>\r\n-                <div className=\"position-relative\">\r\n-                  <input\r\n-                    name=\"conf_password\"\r\n-                    type=\"password\"\r\n-                    value={state.conf_password}\r\n-                    onChange={onInputChange}\r\n-                    className={\r\n-                      errors.conf_password\r\n-                        ? \"form-control border border-danger\"\r\n-                        : \"form-control\"\r\n-                    }\r\n-                    placeholder=\"Enter confirm password\"\r\n-                    id=\"conf_password\"\r\n-                  />\r\n-                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n-                  {errors.conf_password && (\r\n-                    <span>\r\n-                      {errors.conf_password.map((error) => (\r\n-                        <span key={error} className=\"text-danger font-size-2\">\r\n-                          {error}\r\n-                        </span>\r\n-                      ))}\r\n-                    </span>\r\n-                  )}\r\n-                </div>\r\n-              </div>\r\n-              <div className=\"form-group mb-8\">\r\n-                {loading === true ? (\r\n-                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n-                    <span\r\n-                      className=\"spinner-border spinner-border-sm \"\r\n-                      role=\"status\"\r\n-                      aria-hidden=\"true\"\r\n-                    ></span>\r\n-                    <span className=\"sr-only\">Loading...</span>\r\n-                  </button>\r\n-                ) : (\r\n-                  <button\r\n-                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n-                    type=\"submit\"\r\n-                  >\r\n-                    SUBMIT\r\n-                  </button>\r\n-                )}\r\n-              </div>\r\n-            </form>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState } from \"react\";\r\n-import {\r\n-  EmployeeResetPasswordApi,\r\n-  AdminResetPasswordApi,\r\n-  EmployerResetPasswordApi,\r\n-  ResetAgentPasswordApi,\r\n-} from \"../../api/api\";\r\n-import useValidation from \"../common/useValidation\";\r\n-import { useNavigate, useLocation } from \"react-router-dom\";\r\n-import { toast, ToastContainer } from \"react-toastify\";\r\n // const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n // New AWS backend\r\n const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n export default function ResetPassword() {\r\n"
                },
                {
                    "date": 1710421115192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+import React, { useState } from \"react\";\r\n+import {\r\n+  EmployeeResetPasswordApi,\r\n+  AdminResetPasswordApi,\r\n+  EmployerResetPasswordApi,\r\n+  ResetAgentPasswordApi,\r\n+} from \"../../api/api\";\r\n+import useValidation from \"../common/useValidation\";\r\n+import { useNavigate, useLocation } from \"react-router-dom\";\r\n+import { toast, ToastContainer } from \"react-toastify\";\r\n+const API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n+// New AWS backend\r\n+// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\n+export default function ResetPassword() {\r\n+  const location = useLocation();\r\n+  const path = location.pathname;\r\n+  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n+  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n+  let navigate = useNavigate();\r\n+  let [loading, setLoading] = useState(false);\r\n+  /*----USER RESET PASSWORD VALIDATION----*/\r\n+  const initialFormState = {\r\n+    password: \"\",\r\n+    conf_password: \"\",\r\n+    token: Token,\r\n+  };\r\n+  /*----VALIDATION CONTENT----*/\r\n+  const validators = {\r\n+    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n+    conf_password: [\r\n+      (value) =>\r\n+        value === \"\"\r\n+          ? \"Confirm Password is required\"\r\n+          : value !== state.password\r\n+          ? \"Confirm Password must be Same as Password\"\r\n+          : \"\",\r\n+    ],\r\n+  };\r\n+  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n+  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n+    initialFormState,\r\n+    validators\r\n+  );\r\n+  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n+  const onUserResetPasswordClick = async (event) => {\r\n+    event.preventDefault();\r\n+    if (validate()) {\r\n+      setLoading(true);\r\n+      // handle form submission\r\n+      if (userType === \"user\") {\r\n+        try {\r\n+          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"company\") {\r\n+        try {\r\n+          let updatedTodo = await EmployerResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"admin\") {\r\n+        try {\r\n+          let updatedTodo = await AdminResetPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+      if (userType === \"agent\") {\r\n+        try {\r\n+          let updatedTodo = await ResetAgentPasswordApi(state);\r\n+          if (\r\n+            updatedTodo.status === true ||\r\n+            updatedTodo.message === \"Password updated successfully\"\r\n+          ) {\r\n+            toast.success(\"Password updated successfully\", {\r\n+              position: toast.POSITION.TOP_RIGHT,\r\n+              autoClose: 1000,\r\n+            });\r\n+            setLoading(false);\r\n+            setState(initialFormState);\r\n+            navigate(\"/\");\r\n+            window.location.reload();\r\n+          }\r\n+        } catch (err) {\r\n+          console.log(err);\r\n+          setLoading(false);\r\n+        }\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  // END USER RESET PASSWORD VALIDATION\r\n+  return (\r\n+    <>\r\n+      {/* <!-- RESET PASSWORD --> */}\r\n+      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n+      />\r\n+      <link\r\n+        rel=\"stylesheet\"\r\n+        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n+      />\r\n+      <div className=\"d-flex justify-content-center pt-21\">\r\n+        <ToastContainer />\r\n+        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n+          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n+            <div className=\"pb-5 mb-5 text-center\">\r\n+              <img\r\n+                src={`${API_URL}/image/logo-main-black.png`}\r\n+                className=\"img-fluid \"\r\n+                height={200}\r\n+                width={200}\r\n+                alt=\"logo\"\r\n+              />\r\n+            </div>\r\n+            {/* user RESET PASSWORD form */}\r\n+            <form onSubmit={onUserResetPasswordClick}>\r\n+              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Password\r\n+                </label>\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={state.password}\r\n+                  onChange={onInputChange}\r\n+                  className={\r\n+                    errors.password\r\n+                      ? \"form-control border border-danger\"\r\n+                      : \"form-control\"\r\n+                  }\r\n+                  placeholder=\"example@gmail.com\"\r\n+                  id=\"password\"\r\n+                />\r\n+                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n+                {errors.password && (\r\n+                  <span>\r\n+                    {errors.password.map((error) => (\r\n+                      <span key={error} className=\"text-danger font-size-3\">\r\n+                        {error}\r\n+                      </span>\r\n+                    ))}\r\n+                  </span>\r\n+                )}\r\n+              </div>\r\n+              <div className=\"form-group\">\r\n+                <label\r\n+                  htmlFor=\"conf_password\"\r\n+                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n+                >\r\n+                  Confirm Password\r\n+                </label>\r\n+                <div className=\"position-relative\">\r\n+                  <input\r\n+                    name=\"conf_password\"\r\n+                    type=\"password\"\r\n+                    value={state.conf_password}\r\n+                    onChange={onInputChange}\r\n+                    className={\r\n+                      errors.conf_password\r\n+                        ? \"form-control border border-danger\"\r\n+                        : \"form-control\"\r\n+                    }\r\n+                    placeholder=\"Enter confirm password\"\r\n+                    id=\"conf_password\"\r\n+                  />\r\n+                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n+                  {errors.conf_password && (\r\n+                    <span>\r\n+                      {errors.conf_password.map((error) => (\r\n+                        <span key={error} className=\"text-danger font-size-2\">\r\n+                          {error}\r\n+                        </span>\r\n+                      ))}\r\n+                    </span>\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              <div className=\"form-group mb-8\">\r\n+                {loading === true ? (\r\n+                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n+                    <span\r\n+                      className=\"spinner-border spinner-border-sm \"\r\n+                      role=\"status\"\r\n+                      aria-hidden=\"true\"\r\n+                    ></span>\r\n+                    <span className=\"sr-only\">Loading...</span>\r\n+                  </button>\r\n+                ) : (\r\n+                  <button\r\n+                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n+                    type=\"submit\"\r\n+                  >\r\n+                    SUBMIT\r\n+                  </button>\r\n+                )}\r\n+              </div>\r\n+            </form>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1709013399457,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\r\nimport {\r\n  EmployeeResetPasswordApi,\r\n  AdminResetPasswordApi,\r\n  EmployerResetPasswordApi,\r\n  ResetAgentPasswordApi,\r\n} from \"../../api/api\";\r\nimport useValidation from \"../common/useValidation\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nconst API_URL = \"https://apnaorganicstore.in/canjobs/\";\r\n// New AWS backend\r\n// const API_URL = \"https://api.canpathwaysjobs.com/canjobs/\";\r\nexport default function ResetPassword() {\r\n  const location = useLocation();\r\n  const path = location.pathname;\r\n  let Token = path.split(\"/\")[2].split(\":\")[1];\r\n  let userType = path.split(\"/\")[2].split(\":\")[0];\r\n  let navigate = useNavigate();\r\n  let [loading, setLoading] = useState(false);\r\n  /*----USER RESET PASSWORD VALIDATION----*/\r\n  const initialFormState = {\r\n    password: \"\",\r\n    conf_password: \"\",\r\n    token: Token,\r\n  };\r\n  /*----VALIDATION CONTENT----*/\r\n  const validators = {\r\n    password: [(value) => (value === \"\" ? \"Password is required\" : null)],\r\n    conf_password: [\r\n      (value) =>\r\n        value === \"\"\r\n          ? \"Confirm Password is required\"\r\n          : value !== state.password\r\n          ? \"Confirm Password must be Same as Password\"\r\n          : \"\",\r\n    ],\r\n  };\r\n  /*----RESET PASSWORD ONCHANGE FUNCTION----*/\r\n  const { state, onInputChange, setState, errors, validate } = useValidation(\r\n    initialFormState,\r\n    validators\r\n  );\r\n  /*----RESET PASSWORD SUBMIT FUNCTION----*/\r\n  const onUserResetPasswordClick = async (event) => {\r\n    event.preventDefault();\r\n    if (validate()) {\r\n      setLoading(true);\r\n      // handle form submission\r\n      if (userType === \"user\") {\r\n        try {\r\n          let updatedTodo = await EmployeeResetPasswordApi(state);\r\n          if (\r\n            updatedTodo.status === true ||\r\n            updatedTodo.message === \"Password updated successfully\"\r\n          ) {\r\n            toast.success(\"Password updated successfully\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              autoClose: 1000,\r\n            });\r\n            setLoading(false);\r\n            setState(initialFormState);\r\n            navigate(\"/\");\r\n            window.location.reload();\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n          setLoading(false);\r\n        }\r\n      }\r\n      if (userType === \"company\") {\r\n        try {\r\n          let updatedTodo = await EmployerResetPasswordApi(state);\r\n          if (\r\n            updatedTodo.status === true ||\r\n            updatedTodo.message === \"Password updated successfully\"\r\n          ) {\r\n            toast.success(\"Password updated successfully\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              autoClose: 1000,\r\n            });\r\n            setLoading(false);\r\n            setState(initialFormState);\r\n            navigate(\"/\");\r\n            window.location.reload();\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n          setLoading(false);\r\n        }\r\n      }\r\n      if (userType === \"admin\") {\r\n        try {\r\n          let updatedTodo = await AdminResetPasswordApi(state);\r\n          if (\r\n            updatedTodo.status === true ||\r\n            updatedTodo.message === \"Password updated successfully\"\r\n          ) {\r\n            toast.success(\"Password updated successfully\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              autoClose: 1000,\r\n            });\r\n            setLoading(false);\r\n            setState(initialFormState);\r\n            navigate(\"/\");\r\n            window.location.reload();\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n          setLoading(false);\r\n        }\r\n      }\r\n      if (userType === \"agent\") {\r\n        try {\r\n          let updatedTodo = await ResetAgentPasswordApi(state);\r\n          if (\r\n            updatedTodo.status === true ||\r\n            updatedTodo.message === \"Password updated successfully\"\r\n          ) {\r\n            toast.success(\"Password updated successfully\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n              autoClose: 1000,\r\n            });\r\n            setLoading(false);\r\n            setState(initialFormState);\r\n            navigate(\"/\");\r\n            window.location.reload();\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n          setLoading(false);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // END USER RESET PASSWORD VALIDATION\r\n  return (\r\n    <>\r\n      {/* <!-- RESET PASSWORD --> */}\r\n      <link rel=\"stylesheet\" href={`${API_URL}/css/bootstrap.css`} />\r\n      <link\r\n        rel=\"stylesheet\"\r\n        href={`${API_URL}/fonts/icon-font/css/style.css`}\r\n      />\r\n      <link\r\n        rel=\"stylesheet\"\r\n        href={`${API_URL}/fonts/fontawesome-5/css/all.css`}\r\n      />\r\n      <link\r\n        rel=\"stylesheet\"\r\n        href={`${API_URL}/fonts/fontawesome-5/css/main.css`}\r\n      />\r\n      <div className=\"d-flex justify-content-center pt-21\">\r\n        <ToastContainer />\r\n        <div className=\"bg-white rounded-8 overflow-hidden pt-21\">\r\n          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box \">\r\n            <div className=\"pb-5 mb-5 text-center\">\r\n              <img\r\n                src={`${API_URL}/image/logo-main-black.png`}\r\n                className=\"img-fluid \"\r\n                height={200}\r\n                width={200}\r\n                alt=\"logo\"\r\n              />\r\n            </div>\r\n            {/* user RESET PASSWORD form */}\r\n            <form onSubmit={onUserResetPasswordClick}>\r\n              <h5 className=\"text-center pb-8\"> Reset Password</h5>\r\n              <div className=\"form-group\">\r\n                <label\r\n                  htmlFor=\"password\"\r\n                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n                >\r\n                  Password\r\n                </label>\r\n                <input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  value={state.password}\r\n                  onChange={onInputChange}\r\n                  className={\r\n                    errors.password\r\n                      ? \"form-control border border-danger\"\r\n                      : \"form-control\"\r\n                  }\r\n                  placeholder=\"example@gmail.com\"\r\n                  id=\"password\"\r\n                />\r\n                {/*----ERROR MESSAGE FOR EMAIL----*/}\r\n                {errors.password && (\r\n                  <span>\r\n                    {errors.password.map((error) => (\r\n                      <span key={error} className=\"text-danger font-size-3\">\r\n                        {error}\r\n                      </span>\r\n                    ))}\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label\r\n                  htmlFor=\"conf_password\"\r\n                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\r\n                >\r\n                  Confirm Password\r\n                </label>\r\n                <div className=\"position-relative\">\r\n                  <input\r\n                    name=\"conf_password\"\r\n                    type=\"password\"\r\n                    value={state.conf_password}\r\n                    onChange={onInputChange}\r\n                    className={\r\n                      errors.conf_password\r\n                        ? \"form-control border border-danger\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder=\"Enter confirm password\"\r\n                    id=\"conf_password\"\r\n                  />\r\n                  {/*----ERROR MESSAGE FOR CONFIRM PASSWORD----*/}\r\n                  {errors.conf_password && (\r\n                    <span>\r\n                      {errors.conf_password.map((error) => (\r\n                        <span key={error} className=\"text-danger font-size-2\">\r\n                          {error}\r\n                        </span>\r\n                      ))}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group mb-8\">\r\n                {loading === true ? (\r\n                  <button className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\">\r\n                    <span\r\n                      className=\"spinner-border spinner-border-sm \"\r\n                      role=\"status\"\r\n                      aria-hidden=\"true\"\r\n                    ></span>\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    className=\"btn btn-primary btn-medium w-100 rounded-5 text-uppercase\"\r\n                    type=\"submit\"\r\n                  >\r\n                    SUBMIT\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"
        }
    ]
}