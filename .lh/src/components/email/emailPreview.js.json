{
    "sourceFile": "src/components/email/emailPreview.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1699001857292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1699001864629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { GetPreviewEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+const PreviewEmail = ({ id }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data*/\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewEmail(id);\n+      // console.log(Res.data);\n+      if (\n+        Res.messsage === \"No data found\" ||\n+        Res.status === \"0\" ||\n+        Res.status === 0 ||\n+        Res.data === undefined ||\n+        Res.data.length === 0\n+      ) {\n+        setemailData({});\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData({});\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  const openPDFInNewTab = (base64PDFData) => {\n+    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+    const newWindow = window.open();\n+    newWindow.document.write(\n+      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+    );\n+  };\n+\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : emailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n+              <p>From: {emailData.from}</p>\n+              <p>To: {emailData.to}</p>\n+            </div>\n+            <div className=\"email-body\">\n+              {/* {emailData.body_data &&\n+                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n+                true ? (\n+                  <div\n+                    dangerouslySetInnerHTML={{\n+                      __html: atob(emailData.body_data),\n+                    }}\n+                  />\n+                ) : ( */}\n+                  <div>{emailData.body_data}</div>\n+                {/* ))} */}\n+            </div>\n+            <div className=\"attachments\">\n+              {emailData.attachment &&\n+                (emailData.attachment[0] || []).map((item, index) => (\n+                  <>\n+                    {item.ext_type === \"pdf\" ? (\n+                      <Link\n+                        onClick={() => {\n+                          openPDFInNewTab(item.file_data);\n+                        }}\n+                      >\n+                        <img\n+                          key={index}\n+                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                          alt=\"pdf\"\n+                        />\n+                      </Link>\n+                    ) : item.ext_type === \"html\" ? (\n+                      <div\n+                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                      />\n+                    ) : (\n+                      <img\n+                        key={index}\n+                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n+                        alt={`attachment-${index}`}\n+                        width={500}\n+                        height={500}\n+                      />\n+                    )}\n+                  </>\n+                ))}\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1699001903537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n                       __html: atob(emailData.body_data),\n                     }}\n                   />\n                 ) : ( */}\n-                  <div>{emailData.body_data}</div>\n+                  <p>{emailData.body_data}</p>\n                 {/* ))} */}\n             </div>\n             <div className=\"attachments\">\n               {emailData.attachment &&\n@@ -142,149 +142,4 @@\n   );\n };\n \n export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n-      if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n-      ) {\n-        setemailData({});\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData({});\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-    );\n-  };\n-\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : emailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n-            </div>\n-            <div className=\"email-body\">\n-              {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n-                  <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : (\n-                  <div>{emailData.body_data}</div>\n-                ))}\n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n-                          key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n-                      />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n-                    )}\n-                  </>\n-                ))}\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n"
                },
                {
                    "date": 1699002484162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n // src/PreviewEmail.js\n import React, { useState, useEffect } from \"react\";\n import { GetPreviewEmail } from \"../../api/api\";\n import Loader from \"../common/loader\";\n+import { Letter } from 'react-letter';\n+import { extract } from 'letterparser';\n // import { FileViewer } from \"react-file-viewer\";\n // import { ToastContainer } from \"react-toastify\";\n // import AdminSidebar from \"../admin/sidebar\";\n // import AdminHeader from \"../admin/header\";\n@@ -70,8 +72,9 @@\n       `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n     );\n   };\n \n+  const { html, text } = extract(emailData.body_data);\n   return (\n     /*---- Email preview Page ----*/\n     <div>\n       {isLoading ? (\n@@ -99,10 +102,12 @@\n                       __html: atob(emailData.body_data),\n                     }}\n                   />\n                 ) : ( */}\n-                  <p>{emailData.body_data}</p>\n+                  {/* <p>{emailData.body_data}</p> */}\n                 {/* ))} */}\n+                <Letter html={html} text={text} />;\n+\n             </div>\n             <div className=\"attachments\">\n               {emailData.attachment &&\n                 (emailData.attachment[0] || []).map((item, index) => (\n"
                },
                {
                    "date": 1699002578438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { GetPreviewEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+import { Letter } from 'react-letter';\n+import {extract} from\"react-letter\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+const PreviewEmail = ({ id }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data*/\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewEmail(id);\n+      // console.log(Res.data);\n+      if (\n+        Res.messsage === \"No data found\" ||\n+        Res.status === \"0\" ||\n+        Res.status === 0 ||\n+        Res.data === undefined ||\n+        Res.data.length === 0\n+      ) {\n+        setemailData({});\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData({});\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  const openPDFInNewTab = (base64PDFData) => {\n+    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+    const newWindow = window.open();\n+    newWindow.document.write(\n+      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+    );\n+  };\n+\n+  const { html, text } = extract(emailData.body_data);\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : emailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n+              <p>From: {emailData.from}</p>\n+              <p>To: {emailData.to}</p>\n+            </div>\n+            <div className=\"email-body\">\n+              {/* {emailData.body_data &&\n+                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n+                true ? (\n+                  <div\n+                    dangerouslySetInnerHTML={{\n+                      __html: atob(emailData.body_data),\n+                    }}\n+                  />\n+                ) : ( */}\n+                  {/* <p>{emailData.body_data}</p> */}\n+                {/* ))} */}\n+                <Letter html={html} text={text} />;\n+\n+            </div>\n+            <div className=\"attachments\">\n+              {emailData.attachment &&\n+                (emailData.attachment[0] || []).map((item, index) => (\n+                  <>\n+                    {item.ext_type === \"pdf\" ? (\n+                      <Link\n+                        onClick={() => {\n+                          openPDFInNewTab(item.file_data);\n+                        }}\n+                      >\n+                        <img\n+                          key={index}\n+                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                          alt=\"pdf\"\n+                        />\n+                      </Link>\n+                    ) : item.ext_type === \"html\" ? (\n+                      <div\n+                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                      />\n+                    ) : (\n+                      <img\n+                        key={index}\n+                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n+                        alt={`attachment-${index}`}\n+                        width={500}\n+                        height={500}\n+                      />\n+                    )}\n+                  </>\n+                ))}\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1699002584200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,300 +1,145 @@\n // src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n+import React, {useState, useEffect} from \"react\";\n+import {GetPreviewEmail} from \"../../api/api\";\n import Loader from \"../common/loader\";\n-import { Letter } from 'react-letter';\n-import {extract} from\"react-letter\";\n+import {Letter} from 'react-letter';\n+import {extract} from \"react-letter\";\n // import { FileViewer } from \"react-file-viewer\";\n // import { ToastContainer } from \"react-toastify\";\n // import AdminSidebar from \"../admin/sidebar\";\n // import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n-      if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n-      ) {\n-        setemailData({});\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData({});\n-    }\n-  };\n+import { /*useNavigate,*/\n+    Link\n+} from \"react-router-dom\";\n+const PreviewEmail = ({id}) => { /* states */\n+    let [apiCall, setApiCall] = useState(false);\n+    let [isLoading, setIsLoading] = useState(true);\n+    const [emailData, setemailData] = useState([]);\n+    /* Function to get Employee visa data*/\n+    const EmailData = async () => {\n+        setIsLoading(true);\n+        try {\n+            const Res = await GetPreviewEmail(id);\n+            // console.log(Res.data);\n+            if (Res.messsage === \"No data found\" || Res.status === \"0\" || Res.status === 0 || Res.data === undefined || Res.data.length === 0) {\n+                setemailData({});\n+                setIsLoading(false);\n+            } else {\n+                setemailData(Res.data);\n+                // setTotalData(Res.data.total_rows);\n+                setIsLoading(false);\n+            }\n+        } catch (err) {\n+            console.log(err);\n+            setIsLoading(false);\n+            setemailData({});\n+        }\n+    };\n \n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n+    /*Render function to get the employee data*/\n+    useEffect(() => {\n+        EmailData();\n+        if (apiCall === true) {\n+            setApiCall(false);\n+        }\n+    }, [apiCall, id]);\n \n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n+    /*Function to decode the email subject */\n+    function decodeEmailSubject(encodedSubject) {\n+        if (! encodedSubject) {\n+            return \"\";\n+        } else {\n+            return decodeURIComponent(encodedSubject.replace(/=\\?UTF-8\\?Q\\?/g, \"\").replace(/\\?=/g, \"\").replace(/=([0-9A-F]{2})/g, (_, p1) => String.fromCharCode(parseInt(p1, 16))));\n+        }\n     }\n-  }\n-  /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-    );\n-  };\n+    /*Funcion to open pdf n new window */\n+    const openPDFInNewTab = (base64PDFData) => {\n+        const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+        const newWindow = window.open();\n+        newWindow.document.write(`<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`);\n+    };\n \n-  const { html, text } = extract(emailData.body_data);\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : emailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n-            </div>\n-            <div className=\"email-body\">\n-              {/* {emailData.body_data &&\n+    const {html, text} = extract(emailData.body_data);\n+    return(\n+        /*---- Email preview Page ----*/ <div> {\n+            isLoading ? (\n+                <Loader/>) : emailData === \"\" ? (\n+                <div className=\"gmail-preview-container \">\n+                    <div className=\"email-content\">\n+                        <div className=\"email-header\">No Email found</div>\n+                    </div>\n+                </div>\n+            ) : (\n+                <div className=\"gmail-preview-container \">\n+                    <div className=\"email-content\">\n+                        <div className=\"email-header\">\n+                            <h2>{\n+                                decodeEmailSubject(emailData.subject)\n+                            }</h2>\n+                            <p>From: {\n+                                emailData.from\n+                            }</p>\n+                            <p>To: {\n+                                emailData.to\n+                            }</p>\n+                        </div>\n+                        <div className=\"email-body\">\n+                            {/* {emailData.body_data &&\n                 (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n                 true ? (\n                   <div\n                     dangerouslySetInnerHTML={{\n                       __html: atob(emailData.body_data),\n                     }}\n                   />\n                 ) : ( */}\n-                  {/* <p>{emailData.body_data}</p> */}\n-                {/* ))} */}\n-                <Letter html={html} text={text} />;\n+                            {/* <p>{emailData.body_data}</p> */}\n+                            {/* ))} */}\n+                            <Letter html={html}\n+                                text={text}/>;\n \n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n-                          key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n-                      />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n-                    )}\n-                  </>\n-                ))}\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-import { Letter } from 'react-letter';\n-import { extract } from 'letterparser';\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n-      if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n-      ) {\n-        setemailData({});\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData({});\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+                        </div>\n+                        <div className=\"attachments\">\n+                            {\n+                            emailData.attachment && (emailData.attachment[0] || []).map((item, index) => (\n+                                <> {\n+                                    item.ext_type === \"pdf\" ? (\n+                                        <Link onClick={\n+                                            () => {\n+                                                openPDFInNewTab(item.file_data);\n+                                            }\n+                                        }>\n+                                            <img key={index}\n+                                                src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                                                alt=\"pdf\"/>\n+                                        </Link>\n+                                    ) : item.ext_type === \"html\" ? (\n+                                        <div dangerouslySetInnerHTML={\n+                                            {__html: item.file_data}\n+                                        }/>\n+                                    ) : (\n+                                        <img key={index}\n+                                            src={\n+                                                `data:image/${\n+                                                    item.ext_type\n+                                                };base64,${\n+                                                    item.file_data\n+                                                }`\n+                                            }\n+                                            alt={\n+                                                `attachment-${index}`\n+                                            }\n+                                            width={500}\n+                                            height={500}/>\n+                                    )\n+                                } </>\n+                            ))\n+                        } </div>\n+                    </div>\n+                </div>\n+            )\n+        } </div>\n     );\n-  };\n-\n-  const { html, text } = extract(emailData.body_data);\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : emailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n-            </div>\n-            <div className=\"email-body\">\n-              {/* {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n-                  <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : ( */}\n-                  {/* <p>{emailData.body_data}</p> */}\n-                {/* ))} */}\n-                <Letter html={html} text={text} />;\n-\n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n-                          key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n-                      />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n-                    )}\n-                  </>\n-                ))}\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n };\n \n export default PreviewEmail;\n"
                },
                {
                    "date": 1699003927330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { GetPreviewEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+const PreviewEmail = ({ id }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data*/\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewEmail(id);\n+      // console.log(Res.data);\n+      if (\n+        Res.messsage === \"No data found\" ||\n+        Res.status === \"0\" ||\n+        Res.status === 0 ||\n+        Res.data === undefined ||\n+        Res.data.length === 0\n+      ) {\n+        setemailData({});\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData({});\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  const openPDFInNewTab = (base64PDFData) => {\n+    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+    const newWindow = window.open();\n+    newWindow.document.write(\n+      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+    );\n+  };\n+\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : emailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n+              <p>From: {emailData.from}</p>\n+              <p>To: {emailData.to}</p>\n+            </div>\n+            <div className=\"email-body\">\n+              {/* {emailData.body_data &&\n+                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n+                true ? (\n+                  <div\n+                    dangerouslySetInnerHTML={{\n+                      __html: atob(emailData.body_data),\n+                    }}\n+                  />\n+                ) : ( */}\n+                  <div>{emailData.body_data}</div>\n+                {/* ))} */}\n+            </div>\n+            <div className=\"attachments\">\n+              {emailData.attachment &&\n+                (emailData.attachment[0] || []).map((item, index) => (\n+                  <>\n+                    {item.ext_type === \"pdf\" ? (\n+                      <Link\n+                        onClick={() => {\n+                          openPDFInNewTab(item.file_data);\n+                        }}\n+                      >\n+                        <img\n+                          key={index}\n+                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                          alt=\"pdf\"\n+                        />\n+                      </Link>\n+                    ) : item.ext_type === \"html\" ? (\n+                      <div\n+                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                      />\n+                    ) : (\n+                      <img\n+                        key={index}\n+                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n+                        alt={`attachment-${index}`}\n+                        width={500}\n+                        height={500}\n+                      />\n+                    )}\n+                  </>\n+                ))}\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1699009337791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { GetPreviewEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+const PreviewEmail = ({ id }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data*/\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewEmail(id);\n+      // console.log(Res.data);\n+      if (\n+        Res.messsage === \"No data found\" ||\n+        Res.status === \"0\" ||\n+        Res.status === 0 ||\n+        Res.data === undefined ||\n+        Res.data.length === 0\n+      ) {\n+        setemailData({});\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData({});\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  const openPDFInNewTab = (base64PDFData) => {\n+    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+    const newWindow = window.open();\n+    newWindow.document.write(\n+      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+    );\n+  };\n+\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : emailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n+              <p>From: {emailData.from}</p>\n+              <p>To: {emailData.to}</p>\n+            </div>\n+            <div className=\"email-body\">\n+              {emailData.body_data &&\n+                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n+                true ? (\n+                  <div\n+                    dangerouslySetInnerHTML={{\n+                      __html: atob(emailData.body_data),\n+                    }}\n+                  />\n+                ) : (\n+                  <di>{emailData.body_data}</di>\n+                ))}\n+            </div>\n+            <div className=\"attachments\">\n+              {emailData.attachment &&\n+                (emailData.attachment[0] || []).map((item, index) => (\n+                  <>\n+                    {item.ext_type === \"pdf\" ? (\n+                      <Link\n+                        onClick={() => {\n+                          openPDFInNewTab(item.file_data);\n+                        }}\n+                      >\n+                        <img\n+                          key={index}\n+                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                          alt=\"pdf\"\n+                        />\n+                      </Link>\n+                    ) : item.ext_type === \"html\" ? (\n+                      <div\n+                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                      />\n+                    ) : (\n+                      <img\n+                        key={index}\n+                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n+                        alt={`attachment-${index}`}\n+                        width={500}\n+                        height={500}\n+                      />\n+                    )}\n+                  </>\n+                ))}\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1699009379534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { GetPreviewEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+const PreviewEmail = ({ id }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data*/\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewEmail(id);\n+      // console.log(Res.data);\n+      if (\n+        Res.messsage === \"No data found\" ||\n+        Res.status === \"0\" ||\n+        Res.status === 0 ||\n+        Res.data === undefined ||\n+        Res.data.length === 0\n+      ) {\n+        setemailData({});\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData({});\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  const openPDFInNewTab = (base64PDFData) => {\n+    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+    const newWindow = window.open();\n+    newWindow.document.write(\n+      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+    );\n+  };\n+\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : emailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n+              <p>From: {emailData.from}</p>\n+              <p>To: {emailData.to}</p>\n+            </div>\n+            <div className=\"email-body\">\n+              {emailData.body_data &&\n+                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n+                true ? (\n+                  <div\n+                    dangerouslySetInnerHTML={{\n+                      __html: atob(emailData.body_data),\n+                    }}\n+                  />\n+                ) : (\n+                  <div>{emailData.body_data}</div>\n+                ))}\n+            </div>\n+            <div className=\"attachments\">\n+              {emailData.attachment &&\n+                (emailData.attachment[0] || []).map((item, index) => (\n+                  <>\n+                    {item.ext_type === \"pdf\" ? (\n+                      <Link\n+                        onClick={() => {\n+                          openPDFInNewTab(item.file_data);\n+                        }}\n+                      >\n+                        <img\n+                          key={index}\n+                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                          alt=\"pdf\"\n+                        />\n+                      </Link>\n+                    ) : item.ext_type === \"html\" ? (\n+                      <div\n+                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                      />\n+                    ) : (\n+                      <img\n+                        key={index}\n+                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n+                        alt={`attachment-${index}`}\n+                        width={500}\n+                        height={500}\n+                      />\n+                    )}\n+                  </>\n+                ))}\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1699010212109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { GetPreviewEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+const PreviewEmail = ({ id }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data*/\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewEmail(id);\n+      // console.log(Res.data);\n+      if (\n+        Res.messsage === \"No data found\" ||\n+        Res.status === \"0\" ||\n+        Res.status === 0 ||\n+        Res.data === undefined ||\n+        Res.data.length === 0\n+      ) {\n+        setemailData({});\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData({});\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  const openPDFInNewTab = (base64PDFData) => {\n+    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+    const newWindow = window.open();\n+    newWindow.document.write(\n+      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+    );\n+  };\n+\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : emailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n+              <p>From: {emailData.from}</p>\n+              <p>To: {emailData.to}</p>\n+            </div>\n+            <div className=\"email-body\">\n+              {/* {emailData.body_data &&\n+                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n+                true ? (\n+                  <div\n+                    dangerouslySetInnerHTML={{\n+                      __html: atob(emailData.body_data),\n+                    }}\n+                  />\n+                ) : ( */}\n+                  <div>{emailData.body_data}</div>\n+                {/* ))} */}\n+            </div>\n+            <div className=\"attachments\">\n+              {emailData.attachment &&\n+                (emailData.attachment[0] || []).map((item, index) => (\n+                  <>\n+                    {item.ext_type === \"pdf\" ? (\n+                      <Link\n+                        onClick={() => {\n+                          openPDFInNewTab(item.file_data);\n+                        }}\n+                      >\n+                        <img\n+                          key={index}\n+                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                          alt=\"pdf\"\n+                        />\n+                      </Link>\n+                    ) : item.ext_type === \"html\" ? (\n+                      <div\n+                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                      />\n+                    ) : (\n+                      <img\n+                        key={index}\n+                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n+                        alt={`attachment-${index}`}\n+                        width={500}\n+                        height={500}\n+                      />\n+                    )}\n+                  </>\n+                ))}\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1699010319014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { GetPreviewEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+const PreviewEmail = ({ id }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data*/\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewEmail(id);\n+      // console.log(Res.data);\n+      if (\n+        Res.messsage === \"No data found\" ||\n+        Res.status === \"0\" ||\n+        Res.status === 0 ||\n+        Res.data === undefined ||\n+        Res.data.length === 0\n+      ) {\n+        setemailData({});\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData({});\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  const openPDFInNewTab = (base64PDFData) => {\n+    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+    const newWindow = window.open();\n+    newWindow.document.write(\n+      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+    );\n+  };\n+\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : emailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n+              <p>From: {emailData.from}</p>\n+              <p>To: {emailData.to}</p>\n+            </div>\n+            <div className=\"email-body\">\n+              {emailData.body_data &&\n+                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n+                true ? (\n+                  <div\n+                    dangerouslySetInnerHTML={{\n+                      __html: atob(emailData.body_data),\n+                    }}\n+                  />\n+                ) : (\n+                  <p>{emailData.body_data}</p>\n+                ))}\n+            </div>\n+            <div className=\"attachments\">\n+              {emailData.attachment &&\n+                (emailData.attachment[0] || []).map((item, index) => (\n+                  <>\n+                    {item.ext_type === \"pdf\" ? (\n+                      <Link\n+                        onClick={() => {\n+                          openPDFInNewTab(item.file_data);\n+                        }}\n+                      >\n+                        <img\n+                          key={index}\n+                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                          alt=\"pdf\"\n+                        />\n+                      </Link>\n+                    ) : item.ext_type === \"html\" ? (\n+                      <div\n+                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                      />\n+                    ) : (\n+                      <img\n+                        key={index}\n+                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n+                        alt={`attachment-${index}`}\n+                        width={500}\n+                        height={500}\n+                      />\n+                    )}\n+                  </>\n+                ))}\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1699010754105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { GetPreviewEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+const PreviewEmail = ({ id }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data*/\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewEmail(id);\n+      // console.log(Res.data);\n+      if (\n+        Res.messsage === \"No data found\" ||\n+        Res.status === \"0\" ||\n+        Res.status === 0 ||\n+        Res.data === undefined ||\n+        Res.data.length === 0\n+      ) {\n+        setemailData({});\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData({});\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  const openPDFInNewTab = (base64PDFData) => {\n+    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+    const newWindow = window.open();\n+    newWindow.document.write(\n+      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+    );\n+  };\n+\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : emailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n+              <p>From: {emailData.from}</p>\n+              <p>To: {emailData.to}</p>\n+            </div>\n+            <div className=\"email-body\">\n+              {emailData.body_data &&\n+                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n+                true ? (\n+                  <div\n+                    dangerouslySetInnerHTML={{\n+                      __html: atob(emailData.body_data),\n+                    }}\n+                  />\n+                ) : (\n+                  <p>{emailData.body_data}</p>\n+                ))}\n+            </div>\n+            <div className=\"attachments\">\n+              {emailData.attachment &&\n+                (emailData.attachment[0] || []).map((item, index) => (\n+                  <>\n+                    {item.ext_type === \"pdf\" ? (\n+                      <Link\n+                        onClick={() => {\n+                          openPDFInNewTab(item.file_data);\n+                        }}\n+                      >\n+                        <img\n+                          key={index}\n+                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n+                          alt=\"pdf\"\n+                        />\n+                      </Link>\n+                    ) : item.ext_type === \"html\" ? (\n+                      <div\n+                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                      />\n+                    ) : (\n+                      <img\n+                        key={index}\n+                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n+                        alt={`attachment-${index}`}\n+                        width={500}\n+                        height={500}\n+                      />\n+                    )}\n+                  </>\n+                ))}\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1709031309293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,43 @@\n // src/PreviewEmail.js\n import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n+import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n import Loader from \"../common/loader\";\n // import { FileViewer } from \"react-file-viewer\";\n // import { ToastContainer } from \"react-toastify\";\n // import AdminSidebar from \"../admin/sidebar\";\n // import AdminHeader from \"../admin/header\";\n import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n+import { AiOutlineDownload } from \"react-icons/ai\";\n+const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n+  console.log(singleEmailData)\n   /* states */\n   let [apiCall, setApiCall] = useState(false);\n   let [isLoading, setIsLoading] = useState(true);\n   const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n+  /* Function to get Employee visa data */\n   const EmailData = async () => {\n     setIsLoading(true);\n     try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n+      const Res = await GetPreviewAttchmentEmail(emailType, id);\n       if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n+        // Res.messsage === \"No data found\" ||\n+        // Res.status === \"0\" ||\n+        // Res.status === 0 ||\n+        Res.data.value === undefined ||\n+        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n       ) {\n-        setemailData({});\n+        setemailData([]);\n         setIsLoading(false);\n       } else {\n-        setemailData(Res.data);\n+        setemailData(Res.data.value);\n         // setTotalData(Res.data.total_rows);\n         setIsLoading(false);\n       }\n     } catch (err) {\n       console.log(err);\n       setIsLoading(false);\n-      setemailData({});\n+      setemailData([]);\n     }\n   };\n \n   /*Render function to get the employee data*/\n@@ -62,22 +63,30 @@\n       );\n     }\n   }\n   /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-    );\n-  };\n+  // const openPDFInNewTab = (base64PDFData) => {\n+  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+  //   const newWindow = window.open();\n+  //   newWindow.document.write(\n+  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+  //   );\n+  // };\n \n+  // const openBase64HtmlInNewWindow = (base64Html) => {\n+  // const decodedHtml = atob(base64Html);\n+  // const newWindow = window.open(\"\", \"_blank\");\n+  // if (newWindow) {\n+  //   newWindow.document.write(decodedHtml);\n+  //   newWindow.document.close();\n+  // }\n+  // };\n   return (\n     /*---- Email preview Page ----*/\n     <div>\n       {isLoading ? (\n         <Loader />\n-      ) : emailData === \"\" ? (\n+      ) : singleEmailData === \"\" ? (\n         <div className=\"gmail-preview-container \">\n           <div className=\"email-content\">\n             <div className=\"email-header\">No Email found</div>\n           </div>\n@@ -85,201 +94,129 @@\n       ) : (\n         <div className=\"gmail-preview-container \">\n           <div className=\"email-content\">\n             <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">FROM:</b>{\" \"}\n+                {singleEmailData.Sender.EmailAddress.Address}\n+              </p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">TO:</b>{\" \"}\n+                {singleEmailData.ToRecipients[0].EmailAddress.Address}\n+              </p>\n+              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n+                {decodeEmailSubject(singleEmailData.Subject)}\n+              </p>\n             </div>\n-            <div className=\"email-body\">\n-              {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n+            <div className=\"email-body text-break px-5 py-3\">\n+              {singleEmailData.Body.Content && (\n+                <div\n+                  dangerouslySetInnerHTML={{\n+                    __html: singleEmailData.Body.Content,\n+                  }}\n+                />\n+              )}\n+              <div className=\"attachments py-3 d-flex flex-wrap\">\n+                {/* {emailData &&\n+                emailData.map((item, index) => (\n                   <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : (\n-                  <p>{emailData.body_data}</p>\n-                ))}\n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n-                          key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n+                    key={index}\n+                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n+                  >\n+                    {item.Name && (\n+                      <FileViewer\n+                        fileType={item.Name.split(\".\")[1]}\n+                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                        errorComponent={() => <div>Error loading document</div>}\n+                        onError={(e) => console.error(\"Error occurred:\", e)}\n                       />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n                     )}\n-                  </>\n-                ))}\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n+                  </div>\n+                ))} */}\n+                {emailData.length === 0\n+                  ? null\n+                  : (emailData || []).map((item, index) => {\n+                      let iconSrc = \"\";\n+                      let title = \"\";\n \n-export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n-      if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n-      ) {\n-        setemailData({});\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData({});\n-    }\n-  };\n+                      if (\n+                        item.ContentType === \"APPLICATION/PDF\" ||\n+                        item.ContentType === \"application/pdf\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType === \"TEXT/HTML\" ||\n+                        item.ContentType === \"text/plain\" ||\n+                        item.ContentType === \"text/html\"\n+                      ) {\n+                        iconSrc =\n+                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType.startsWith(\"IMAGE/\") ||\n+                        item.ContentType.startsWith(\"image/\")\n+                      ) {\n+                        iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType ===\n+                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n+                        item.ContentType ===\n+                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n+                        title = item.Name;\n+                      } else {\n+                        iconSrc =\n+                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n+                        title = item.Name;\n+                      }\n \n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-    );\n-  };\n-\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : emailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n-            </div>\n-            <div className=\"email-body\">\n-              {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n-                  <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : (\n-                  <p>{emailData.body_data}</p>\n-                ))}\n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n+                      return (\n+                        <div\n                           key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n-                      />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n-                    )}\n-                  </>\n-                ))}\n+                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n+                          title={item.Name}\n+                        >\n+                          <Link\n+                          // onClick={() =>\n+                          //   openBase64FileInNewWindow(item.data, item.ContentType)\n+                          // }\n+                          >\n+                            <img\n+                              src={iconSrc}\n+                              alt={title}\n+                              title={title}\n+                              width={45}\n+                              height={45}\n+                              style={{ zIndex: \"1\" }}\n+                            />\n+                            <div>\n+                              <small\n+                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n+                                style={{ maxWidth: \"100%\" }}\n+                              >\n+                                {item.Name}\n+                              </small>\n+                            </div>\n+                          </Link>\n+                          <div className=\"download-icon\">\n+                            <Link\n+                              to={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                              download={item.Name}\n+                              className=\"text-dark\"\n+                            >\n+                              <AiOutlineDownload />\n+                            </Link>\n+                          </div>\n+                        </div>\n+                      );\n+                    })}\n+              </div>\n             </div>\n           </div>\n         </div>\n       )}\n@@ -287,729 +224,4 @@\n   );\n };\n \n export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n-      if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n-      ) {\n-        setemailData({});\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData({});\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-    );\n-  };\n-\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : emailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n-            </div>\n-            <div className=\"email-body\">\n-              {/* {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n-                  <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : ( */}\n-                  <div>{emailData.body_data}</div>\n-                {/* ))} */}\n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n-                          key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n-                      />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n-                    )}\n-                  </>\n-                ))}\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n-      if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n-      ) {\n-        setemailData({});\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData({});\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-    );\n-  };\n-\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : emailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n-            </div>\n-            <div className=\"email-body\">\n-              {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n-                  <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : (\n-                  <div>{emailData.body_data}</div>\n-                ))}\n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n-                          key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n-                      />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n-                    )}\n-                  </>\n-                ))}\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n-      if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n-      ) {\n-        setemailData({});\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData({});\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-    );\n-  };\n-\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : emailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n-            </div>\n-            <div className=\"email-body\">\n-              {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n-                  <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : (\n-                  <di>{emailData.body_data}</di>\n-                ))}\n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n-                          key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n-                      />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n-                    )}\n-                  </>\n-                ))}\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { GetPreviewEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-const PreviewEmail = ({ id }) => {\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data*/\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewEmail(id);\n-      // console.log(Res.data);\n-      if (\n-        Res.messsage === \"No data found\" ||\n-        Res.status === \"0\" ||\n-        Res.status === 0 ||\n-        Res.data === undefined ||\n-        Res.data.length === 0\n-      ) {\n-        setemailData({});\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData({});\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  const openPDFInNewTab = (base64PDFData) => {\n-    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-    const newWindow = window.open();\n-    newWindow.document.write(\n-      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-    );\n-  };\n-\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : emailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n-              <p>From: {emailData.from}</p>\n-              <p>To: {emailData.to}</p>\n-            </div>\n-            <div className=\"email-body\">\n-              {/* {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n-                  <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : ( */}\n-                  <div>{emailData.body_data}</div>\n-                {/* ))} */}\n-            </div>\n-            <div className=\"attachments\">\n-              {emailData.attachment &&\n-                (emailData.attachment[0] || []).map((item, index) => (\n-                  <>\n-                    {item.ext_type === \"pdf\" ? (\n-                      <Link\n-                        onClick={() => {\n-                          openPDFInNewTab(item.file_data);\n-                        }}\n-                      >\n-                        <img\n-                          key={index}\n-                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                          alt=\"pdf\"\n-                        />\n-                      </Link>\n-                    ) : item.ext_type === \"html\" ? (\n-                      <div\n-                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n-                      />\n-                    ) : (\n-                      <img\n-                        key={index}\n-                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n-                        alt={`attachment-${index}`}\n-                        width={500}\n-                        height={500}\n-                      />\n-                    )}\n-                  </>\n-                ))}\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, {useState, useEffect} from \"react\";\n-import {GetPreviewEmail} from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-import {Letter} from 'react-letter';\n-import {extract} from \"react-letter\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/\n-    Link\n-} from \"react-router-dom\";\n-const PreviewEmail = ({id}) => { /* states */\n-    let [apiCall, setApiCall] = useState(false);\n-    let [isLoading, setIsLoading] = useState(true);\n-    const [emailData, setemailData] = useState([]);\n-    /* Function to get Employee visa data*/\n-    const EmailData = async () => {\n-        setIsLoading(true);\n-        try {\n-            const Res = await GetPreviewEmail(id);\n-            // console.log(Res.data);\n-            if (Res.messsage === \"No data found\" || Res.status === \"0\" || Res.status === 0 || Res.data === undefined || Res.data.length === 0) {\n-                setemailData({});\n-                setIsLoading(false);\n-            } else {\n-                setemailData(Res.data);\n-                // setTotalData(Res.data.total_rows);\n-                setIsLoading(false);\n-            }\n-        } catch (err) {\n-            console.log(err);\n-            setIsLoading(false);\n-            setemailData({});\n-        }\n-    };\n-\n-    /*Render function to get the employee data*/\n-    useEffect(() => {\n-        EmailData();\n-        if (apiCall === true) {\n-            setApiCall(false);\n-        }\n-    }, [apiCall, id]);\n-\n-    /*Function to decode the email subject */\n-    function decodeEmailSubject(encodedSubject) {\n-        if (! encodedSubject) {\n-            return \"\";\n-        } else {\n-            return decodeURIComponent(encodedSubject.replace(/=\\?UTF-8\\?Q\\?/g, \"\").replace(/\\?=/g, \"\").replace(/=([0-9A-F]{2})/g, (_, p1) => String.fromCharCode(parseInt(p1, 16))));\n-        }\n-    }\n-    /*Funcion to open pdf n new window */\n-    const openPDFInNewTab = (base64PDFData) => {\n-        const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-        const newWindow = window.open();\n-        newWindow.document.write(`<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`);\n-    };\n-\n-    const {html, text} = extract(emailData.body_data);\n-    return(\n-        /*---- Email preview Page ----*/ <div> {\n-            isLoading ? (\n-                <Loader/>) : emailData === \"\" ? (\n-                <div className=\"gmail-preview-container \">\n-                    <div className=\"email-content\">\n-                        <div className=\"email-header\">No Email found</div>\n-                    </div>\n-                </div>\n-            ) : (\n-                <div className=\"gmail-preview-container \">\n-                    <div className=\"email-content\">\n-                        <div className=\"email-header\">\n-                            <h2>{\n-                                decodeEmailSubject(emailData.subject)\n-                            }</h2>\n-                            <p>From: {\n-                                emailData.from\n-                            }</p>\n-                            <p>To: {\n-                                emailData.to\n-                            }</p>\n-                        </div>\n-                        <div className=\"email-body\">\n-                            {/* {emailData.body_data &&\n-                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n-                true ? (\n-                  <div\n-                    dangerouslySetInnerHTML={{\n-                      __html: atob(emailData.body_data),\n-                    }}\n-                  />\n-                ) : ( */}\n-                            {/* <p>{emailData.body_data}</p> */}\n-                            {/* ))} */}\n-                            <Letter html={html}\n-                                text={text}/>;\n-\n-                        </div>\n-                        <div className=\"attachments\">\n-                            {\n-                            emailData.attachment && (emailData.attachment[0] || []).map((item, index) => (\n-                                <> {\n-                                    item.ext_type === \"pdf\" ? (\n-                                        <Link onClick={\n-                                            () => {\n-                                                openPDFInNewTab(item.file_data);\n-                                            }\n-                                        }>\n-                                            <img key={index}\n-                                                src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n-                                                alt=\"pdf\"/>\n-                                        </Link>\n-                                    ) : item.ext_type === \"html\" ? (\n-                                        <div dangerouslySetInnerHTML={\n-                                            {__html: item.file_data}\n-                                        }/>\n-                                    ) : (\n-                                        <img key={index}\n-                                            src={\n-                                                `data:image/${\n-                                                    item.ext_type\n-                                                };base64,${\n-                                                    item.file_data\n-                                                }`\n-                                            }\n-                                            alt={\n-                                                `attachment-${index}`\n-                                            }\n-                                            width={500}\n-                                            height={500}/>\n-                                    )\n-                                } </>\n-                            ))\n-                        } </div>\n-                    </div>\n-                </div>\n-            )\n-        } </div>\n-    );\n-};\n-\n-export default PreviewEmail;\n"
                },
                {
                    "date": 1709031448436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+import { AiOutlineDownload } from \"react-icons/ai\";\n+const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n+  console.log(singleEmailData)\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data */\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewAttchmentEmail(emailType, id);\n+      if (\n+        // Res.messsage === \"No data found\" ||\n+        // Res.status === \"0\" ||\n+        // Res.status === 0 ||\n+        Res.data.value === undefined ||\n+        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n+      ) {\n+        setemailData([]);\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data.value);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData([]);\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  // const openPDFInNewTab = (base64PDFData) => {\n+  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+  //   const newWindow = window.open();\n+  //   newWindow.document.write(\n+  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+  //   );\n+  // };\n+\n+  // const openBase64HtmlInNewWindow = (base64Html) => {\n+  // const decodedHtml = atob(base64Html);\n+  // const newWindow = window.open(\"\", \"_blank\");\n+  // if (newWindow) {\n+  //   newWindow.document.write(decodedHtml);\n+  //   newWindow.document.close();\n+  // }\n+  // };\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : singleEmailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">FROM:</b>{\" \"}\n+                {singleEmailData.sender.emailAddress.address}\n+              </p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">TO:</b>{\" \"}\n+                {singleEmailData.toRecipients[0].emailAddress.address}\n+              </p>\n+              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n+                {decodeEmailSubject(singleEmailData.subject)}\n+              </p>\n+            </div>\n+            <div className=\"email-body text-break px-5 py-3\">\n+              {singleEmailData.Body.Content && (\n+                <div\n+                  dangerouslySetInnerHTML={{\n+                    __html: singleEmailData.body.content,\n+                  }}\n+                />\n+              )}\n+              <div className=\"attachments py-3 d-flex flex-wrap\">\n+                {/* {emailData &&\n+                emailData.map((item, index) => (\n+                  <div\n+                    key={index}\n+                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n+                  >\n+                    {item.Name && (\n+                      <FileViewer\n+                        fileType={item.Name.split(\".\")[1]}\n+                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                        errorComponent={() => <div>Error loading document</div>}\n+                        onError={(e) => console.error(\"Error occurred:\", e)}\n+                      />\n+                    )}\n+                  </div>\n+                ))} */}\n+                {emailData.length === 0\n+                  ? null\n+                  : (emailData || []).map((item, index) => {\n+                      let iconSrc = \"\";\n+                      let title = \"\";\n+\n+                      if (\n+                        item.ContentType === \"APPLICATION/PDF\" ||\n+                        item.ContentType === \"application/pdf\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType === \"TEXT/HTML\" ||\n+                        item.ContentType === \"text/plain\" ||\n+                        item.ContentType === \"text/html\"\n+                      ) {\n+                        iconSrc =\n+                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType.startsWith(\"IMAGE/\") ||\n+                        item.ContentType.startsWith(\"image/\")\n+                      ) {\n+                        iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType ===\n+                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n+                        item.ContentType ===\n+                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n+                        title = item.Name;\n+                      } else {\n+                        iconSrc =\n+                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n+                        title = item.Name;\n+                      }\n+\n+                      return (\n+                        <div\n+                          key={index}\n+                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n+                          title={item.Name}\n+                        >\n+                          <Link\n+                          // onClick={() =>\n+                          //   openBase64FileInNewWindow(item.data, item.ContentType)\n+                          // }\n+                          >\n+                            <img\n+                              src={iconSrc}\n+                              alt={title}\n+                              title={title}\n+                              width={45}\n+                              height={45}\n+                              style={{ zIndex: \"1\" }}\n+                            />\n+                            <div>\n+                              <small\n+                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n+                                style={{ maxWidth: \"100%\" }}\n+                              >\n+                                {item.Name}\n+                              </small>\n+                            </div>\n+                          </Link>\n+                          <div className=\"download-icon\">\n+                            <Link\n+                              to={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                              download={item.Name}\n+                              className=\"text-dark\"\n+                            >\n+                              <AiOutlineDownload />\n+                            </Link>\n+                          </div>\n+                        </div>\n+                      );\n+                    })}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1709031505971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+import { AiOutlineDownload } from \"react-icons/ai\";\n+const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n+  console.log(singleEmailData)\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data */\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewAttchmentEmail(emailType, id);\n+      if (\n+        // Res.messsage === \"No data found\" ||\n+        // Res.status === \"0\" ||\n+        // Res.status === 0 ||\n+        Res.data.value === undefined ||\n+        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n+      ) {\n+        setemailData([]);\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data.value);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData([]);\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  // const openPDFInNewTab = (base64PDFData) => {\n+  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+  //   const newWindow = window.open();\n+  //   newWindow.document.write(\n+  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+  //   );\n+  // };\n+\n+  // const openBase64HtmlInNewWindow = (base64Html) => {\n+  // const decodedHtml = atob(base64Html);\n+  // const newWindow = window.open(\"\", \"_blank\");\n+  // if (newWindow) {\n+  //   newWindow.document.write(decodedHtml);\n+  //   newWindow.document.close();\n+  // }\n+  // };\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : singleEmailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">FROM:</b>{\" \"}\n+                {singleEmailData.sender.emailAddress.address}\n+              </p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">TO:</b>{\" \"}\n+                {singleEmailData.toRecipients[0].emailAddress.address}\n+              </p>\n+              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n+                {decodeEmailSubject(singleEmailData.subject)}\n+              </p>\n+            </div>\n+            <div className=\"email-body text-break px-5 py-3\">\n+              {singleEmailDataa.body.content && (\n+                <div\n+                  dangerouslySetInnerHTML={{\n+                    __html: singleEmailData.body.content,\n+                  }}\n+                />\n+              )}\n+              <div className=\"attachments py-3 d-flex flex-wrap\">\n+                {/* {emailData &&\n+                emailData.map((item, index) => (\n+                  <div\n+                    key={index}\n+                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n+                  >\n+                    {item.Name && (\n+                      <FileViewer\n+                        fileType={item.Name.split(\".\")[1]}\n+                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                        errorComponent={() => <div>Error loading document</div>}\n+                        onError={(e) => console.error(\"Error occurred:\", e)}\n+                      />\n+                    )}\n+                  </div>\n+                ))} */}\n+                {emailData.length === 0\n+                  ? null\n+                  : (emailData || []).map((item, index) => {\n+                      let iconSrc = \"\";\n+                      let title = \"\";\n+\n+                      if (\n+                        item.ContentType === \"APPLICATION/PDF\" ||\n+                        item.ContentType === \"application/pdf\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType === \"TEXT/HTML\" ||\n+                        item.ContentType === \"text/plain\" ||\n+                        item.ContentType === \"text/html\"\n+                      ) {\n+                        iconSrc =\n+                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType.startsWith(\"IMAGE/\") ||\n+                        item.ContentType.startsWith(\"image/\")\n+                      ) {\n+                        iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType ===\n+                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n+                        item.ContentType ===\n+                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n+                        title = item.Name;\n+                      } else {\n+                        iconSrc =\n+                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n+                        title = item.Name;\n+                      }\n+\n+                      return (\n+                        <div\n+                          key={index}\n+                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n+                          title={item.Name}\n+                        >\n+                          <Link\n+                          // onClick={() =>\n+                          //   openBase64FileInNewWindow(item.data, item.ContentType)\n+                          // }\n+                          >\n+                            <img\n+                              src={iconSrc}\n+                              alt={title}\n+                              title={title}\n+                              width={45}\n+                              height={45}\n+                              style={{ zIndex: \"1\" }}\n+                            />\n+                            <div>\n+                              <small\n+                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n+                                style={{ maxWidth: \"100%\" }}\n+                              >\n+                                {item.Name}\n+                              </small>\n+                            </div>\n+                          </Link>\n+                          <div className=\"download-icon\">\n+                            <Link\n+                              to={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                              download={item.Name}\n+                              className=\"text-dark\"\n+                            >\n+                              <AiOutlineDownload />\n+                            </Link>\n+                          </div>\n+                        </div>\n+                      );\n+                    })}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1709031522902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,13 +104,13 @@\n                 {singleEmailData.toRecipients[0].emailAddress.address}\n               </p>\n               <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n                 <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n-                {decodeEmailSubject(singleEmailData.subject)}\n+                {decodeEmailSubject(.subject)}\n               </p>\n             </div>\n             <div className=\"email-body text-break px-5 py-3\">\n-              {singleEmailDataa.body.content && (\n+              {singleEmailData.body.content && (\n                 <div\n                   dangerouslySetInnerHTML={{\n                     __html: singleEmailData.body.content,\n                   }}\n"
                },
                {
                    "date": 1709031528476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+import { AiOutlineDownload } from \"react-icons/ai\";\n+const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n+  console.log(singleEmailData)\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data */\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewAttchmentEmail(emailType, id);\n+      if (\n+        // Res.messsage === \"No data found\" ||\n+        // Res.status === \"0\" ||\n+        // Res.status === 0 ||\n+        Res.data.value === undefined ||\n+        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n+      ) {\n+        setemailData([]);\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data.value);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData([]);\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  // const openPDFInNewTab = (base64PDFData) => {\n+  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+  //   const newWindow = window.open();\n+  //   newWindow.document.write(\n+  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+  //   );\n+  // };\n+\n+  // const openBase64HtmlInNewWindow = (base64Html) => {\n+  // const decodedHtml = atob(base64Html);\n+  // const newWindow = window.open(\"\", \"_blank\");\n+  // if (newWindow) {\n+  //   newWindow.document.write(decodedHtml);\n+  //   newWindow.document.close();\n+  // }\n+  // };\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : singleEmailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">FROM:</b>{\" \"}\n+                {singleEmailData.sender.emailAddress.address}\n+              </p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">TO:</b>{\" \"}\n+                {singleEmailData.toRecipients[0].emailAddress.address}\n+              </p>\n+              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n+                {decodeEmailSubject(singleEmailData.subject)}\n+              </p>\n+            </div>\n+            <div className=\"email-body text-break px-5 py-3\">\n+              {singleEmailData.body.content && (\n+                <div\n+                  dangerouslySetInnerHTML={{\n+                    __html: singleEmailData.body.content,\n+                  }}\n+                />\n+              )}\n+              <div className=\"attachments py-3 d-flex flex-wrap\">\n+                {/* {emailData &&\n+                emailData.map((item, index) => (\n+                  <div\n+                    key={index}\n+                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n+                  >\n+                    {item.Name && (\n+                      <FileViewer\n+                        fileType={item.Name.split(\".\")[1]}\n+                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                        errorComponent={() => <div>Error loading document</div>}\n+                        onError={(e) => console.error(\"Error occurred:\", e)}\n+                      />\n+                    )}\n+                  </div>\n+                ))} */}\n+                {emailData.length === 0\n+                  ? null\n+                  : (emailData || []).map((item, index) => {\n+                      let iconSrc = \"\";\n+                      let title = \"\";\n+\n+                      if (\n+                        item.ContentType === \"APPLICATION/PDF\" ||\n+                        item.ContentType === \"application/pdf\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType === \"TEXT/HTML\" ||\n+                        item.ContentType === \"text/plain\" ||\n+                        item.ContentType === \"text/html\"\n+                      ) {\n+                        iconSrc =\n+                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType.startsWith(\"IMAGE/\") ||\n+                        item.ContentType.startsWith(\"image/\")\n+                      ) {\n+                        iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType ===\n+                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n+                        item.ContentType ===\n+                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n+                        title = item.Name;\n+                      } else {\n+                        iconSrc =\n+                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n+                        title = item.Name;\n+                      }\n+\n+                      return (\n+                        <div\n+                          key={index}\n+                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n+                          title={item.Name}\n+                        >\n+                          <Link\n+                          // onClick={() =>\n+                          //   openBase64FileInNewWindow(item.data, item.ContentType)\n+                          // }\n+                          >\n+                            <img\n+                              src={iconSrc}\n+                              alt={title}\n+                              title={title}\n+                              width={45}\n+                              height={45}\n+                              style={{ zIndex: \"1\" }}\n+                            />\n+                            <div>\n+                              <small\n+                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n+                                style={{ maxWidth: \"100%\" }}\n+                              >\n+                                {item.Name}\n+                              </small>\n+                            </div>\n+                          </Link>\n+                          <div className=\"download-icon\">\n+                            <Link\n+                              to={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                              download={item.Name}\n+                              className=\"text-dark\"\n+                            >\n+                              <AiOutlineDownload />\n+                            </Link>\n+                          </div>\n+                        </div>\n+                      );\n+                    })}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1709031578763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n                   ? null\n                   : (emailData || []).map((item, index) => {\n                       let iconSrc = \"\";\n                       let title = \"\";\n-\n+                      console.log(item)\n                       if (\n                         item.ContentType === \"APPLICATION/PDF\" ||\n                         item.ContentType === \"application/pdf\"\n                       ) {\n@@ -157,8 +157,9 @@\n                       } else if (\n                         item.ContentType.startsWith(\"IMAGE/\") ||\n                         item.ContentType.startsWith(\"image/\")\n                       ) {\n+                        \n                         iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n                         title = item.Name;\n                       } else if (\n                         item.ContentType ===\n@@ -224,685 +225,4 @@\n   );\n };\n \n export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-import { AiOutlineDownload } from \"react-icons/ai\";\n-const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n-  console.log(singleEmailData)\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data */\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewAttchmentEmail(emailType, id);\n-      if (\n-        // Res.messsage === \"No data found\" ||\n-        // Res.status === \"0\" ||\n-        // Res.status === 0 ||\n-        Res.data.value === undefined ||\n-        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n-      ) {\n-        setemailData([]);\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data.value);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData([]);\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  // const openPDFInNewTab = (base64PDFData) => {\n-  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-  //   const newWindow = window.open();\n-  //   newWindow.document.write(\n-  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-  //   );\n-  // };\n-\n-  // const openBase64HtmlInNewWindow = (base64Html) => {\n-  // const decodedHtml = atob(base64Html);\n-  // const newWindow = window.open(\"\", \"_blank\");\n-  // if (newWindow) {\n-  //   newWindow.document.write(decodedHtml);\n-  //   newWindow.document.close();\n-  // }\n-  // };\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : singleEmailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <p className=\"px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">FROM:</b>{\" \"}\n-                {singleEmailData.sender.emailAddress.address}\n-              </p>\n-              <p className=\"px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">TO:</b>{\" \"}\n-                {singleEmailData.toRecipients[0].emailAddress.address}\n-              </p>\n-              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n-                {decodeEmailSubject(.subject)}\n-              </p>\n-            </div>\n-            <div className=\"email-body text-break px-5 py-3\">\n-              {singleEmailData.body.content && (\n-                <div\n-                  dangerouslySetInnerHTML={{\n-                    __html: singleEmailData.body.content,\n-                  }}\n-                />\n-              )}\n-              <div className=\"attachments py-3 d-flex flex-wrap\">\n-                {/* {emailData &&\n-                emailData.map((item, index) => (\n-                  <div\n-                    key={index}\n-                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n-                  >\n-                    {item.Name && (\n-                      <FileViewer\n-                        fileType={item.Name.split(\".\")[1]}\n-                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n-                        errorComponent={() => <div>Error loading document</div>}\n-                        onError={(e) => console.error(\"Error occurred:\", e)}\n-                      />\n-                    )}\n-                  </div>\n-                ))} */}\n-                {emailData.length === 0\n-                  ? null\n-                  : (emailData || []).map((item, index) => {\n-                      let iconSrc = \"\";\n-                      let title = \"\";\n-\n-                      if (\n-                        item.ContentType === \"APPLICATION/PDF\" ||\n-                        item.ContentType === \"application/pdf\"\n-                      ) {\n-                        iconSrc =\n-                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType === \"TEXT/HTML\" ||\n-                        item.ContentType === \"text/plain\" ||\n-                        item.ContentType === \"text/html\"\n-                      ) {\n-                        iconSrc =\n-                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType.startsWith(\"IMAGE/\") ||\n-                        item.ContentType.startsWith(\"image/\")\n-                      ) {\n-                        iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType ===\n-                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n-                        item.ContentType ===\n-                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n-                      ) {\n-                        iconSrc =\n-                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n-                        title = item.Name;\n-                      } else {\n-                        iconSrc =\n-                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n-                        title = item.Name;\n-                      }\n-\n-                      return (\n-                        <div\n-                          key={index}\n-                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n-                          title={item.Name}\n-                        >\n-                          <Link\n-                          // onClick={() =>\n-                          //   openBase64FileInNewWindow(item.data, item.ContentType)\n-                          // }\n-                          >\n-                            <img\n-                              src={iconSrc}\n-                              alt={title}\n-                              title={title}\n-                              width={45}\n-                              height={45}\n-                              style={{ zIndex: \"1\" }}\n-                            />\n-                            <div>\n-                              <small\n-                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n-                                style={{ maxWidth: \"100%\" }}\n-                              >\n-                                {item.Name}\n-                              </small>\n-                            </div>\n-                          </Link>\n-                          <div className=\"download-icon\">\n-                            <Link\n-                              to={`data:${item.ContentType};base64,${item.ContentBytes}`}\n-                              download={item.Name}\n-                              className=\"text-dark\"\n-                            >\n-                              <AiOutlineDownload />\n-                            </Link>\n-                          </div>\n-                        </div>\n-                      );\n-                    })}\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-import { AiOutlineDownload } from \"react-icons/ai\";\n-const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n-  console.log(singleEmailData)\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data */\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewAttchmentEmail(emailType, id);\n-      if (\n-        // Res.messsage === \"No data found\" ||\n-        // Res.status === \"0\" ||\n-        // Res.status === 0 ||\n-        Res.data.value === undefined ||\n-        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n-      ) {\n-        setemailData([]);\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data.value);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData([]);\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  // const openPDFInNewTab = (base64PDFData) => {\n-  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-  //   const newWindow = window.open();\n-  //   newWindow.document.write(\n-  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-  //   );\n-  // };\n-\n-  // const openBase64HtmlInNewWindow = (base64Html) => {\n-  // const decodedHtml = atob(base64Html);\n-  // const newWindow = window.open(\"\", \"_blank\");\n-  // if (newWindow) {\n-  //   newWindow.document.write(decodedHtml);\n-  //   newWindow.document.close();\n-  // }\n-  // };\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : singleEmailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <p className=\"px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">FROM:</b>{\" \"}\n-                {singleEmailData.sender.emailAddress.address}\n-              </p>\n-              <p className=\"px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">TO:</b>{\" \"}\n-                {singleEmailData.toRecipients[0].emailAddress.address}\n-              </p>\n-              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n-                {decodeEmailSubject(singleEmailData.subject)}\n-              </p>\n-            </div>\n-            <div className=\"email-body text-break px-5 py-3\">\n-              {singleEmailData.Body.Content && (\n-                <div\n-                  dangerouslySetInnerHTML={{\n-                    __html: singleEmailData.body.content,\n-                  }}\n-                />\n-              )}\n-              <div className=\"attachments py-3 d-flex flex-wrap\">\n-                {/* {emailData &&\n-                emailData.map((item, index) => (\n-                  <div\n-                    key={index}\n-                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n-                  >\n-                    {item.Name && (\n-                      <FileViewer\n-                        fileType={item.Name.split(\".\")[1]}\n-                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n-                        errorComponent={() => <div>Error loading document</div>}\n-                        onError={(e) => console.error(\"Error occurred:\", e)}\n-                      />\n-                    )}\n-                  </div>\n-                ))} */}\n-                {emailData.length === 0\n-                  ? null\n-                  : (emailData || []).map((item, index) => {\n-                      let iconSrc = \"\";\n-                      let title = \"\";\n-\n-                      if (\n-                        item.ContentType === \"APPLICATION/PDF\" ||\n-                        item.ContentType === \"application/pdf\"\n-                      ) {\n-                        iconSrc =\n-                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType === \"TEXT/HTML\" ||\n-                        item.ContentType === \"text/plain\" ||\n-                        item.ContentType === \"text/html\"\n-                      ) {\n-                        iconSrc =\n-                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType.startsWith(\"IMAGE/\") ||\n-                        item.ContentType.startsWith(\"image/\")\n-                      ) {\n-                        iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType ===\n-                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n-                        item.ContentType ===\n-                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n-                      ) {\n-                        iconSrc =\n-                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n-                        title = item.Name;\n-                      } else {\n-                        iconSrc =\n-                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n-                        title = item.Name;\n-                      }\n-\n-                      return (\n-                        <div\n-                          key={index}\n-                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n-                          title={item.Name}\n-                        >\n-                          <Link\n-                          // onClick={() =>\n-                          //   openBase64FileInNewWindow(item.data, item.ContentType)\n-                          // }\n-                          >\n-                            <img\n-                              src={iconSrc}\n-                              alt={title}\n-                              title={title}\n-                              width={45}\n-                              height={45}\n-                              style={{ zIndex: \"1\" }}\n-                            />\n-                            <div>\n-                              <small\n-                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n-                                style={{ maxWidth: \"100%\" }}\n-                              >\n-                                {item.Name}\n-                              </small>\n-                            </div>\n-                          </Link>\n-                          <div className=\"download-icon\">\n-                            <Link\n-                              to={`data:${item.ContentType};base64,${item.ContentBytes}`}\n-                              download={item.Name}\n-                              className=\"text-dark\"\n-                            >\n-                              <AiOutlineDownload />\n-                            </Link>\n-                          </div>\n-                        </div>\n-                      );\n-                    })}\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n-// src/PreviewEmail.js\n-import React, { useState, useEffect } from \"react\";\n-import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n-import Loader from \"../common/loader\";\n-// import { FileViewer } from \"react-file-viewer\";\n-// import { ToastContainer } from \"react-toastify\";\n-// import AdminSidebar from \"../admin/sidebar\";\n-// import AdminHeader from \"../admin/header\";\n-import { /*useNavigate,*/ Link } from \"react-router-dom\";\n-import { AiOutlineDownload } from \"react-icons/ai\";\n-const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n-  console.log(singleEmailData)\n-  /* states */\n-  let [apiCall, setApiCall] = useState(false);\n-  let [isLoading, setIsLoading] = useState(true);\n-  const [emailData, setemailData] = useState([]);\n-  /* Function to get Employee visa data */\n-  const EmailData = async () => {\n-    setIsLoading(true);\n-    try {\n-      const Res = await GetPreviewAttchmentEmail(emailType, id);\n-      if (\n-        // Res.messsage === \"No data found\" ||\n-        // Res.status === \"0\" ||\n-        // Res.status === 0 ||\n-        Res.data.value === undefined ||\n-        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n-      ) {\n-        setemailData([]);\n-        setIsLoading(false);\n-      } else {\n-        setemailData(Res.data.value);\n-        // setTotalData(Res.data.total_rows);\n-        setIsLoading(false);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-      setIsLoading(false);\n-      setemailData([]);\n-    }\n-  };\n-\n-  /*Render function to get the employee data*/\n-  useEffect(() => {\n-    EmailData();\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, id]);\n-\n-  /*Function to decode the email subject */\n-  function decodeEmailSubject(encodedSubject) {\n-    if (!encodedSubject) {\n-      return \"\";\n-    } else {\n-      return decodeURIComponent(\n-        encodedSubject\n-          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n-          .replace(/\\?=/g, \"\")\n-          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n-            String.fromCharCode(parseInt(p1, 16))\n-          )\n-      );\n-    }\n-  }\n-  /*Funcion to open pdf n new window */\n-  // const openPDFInNewTab = (base64PDFData) => {\n-  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n-  //   const newWindow = window.open();\n-  //   newWindow.document.write(\n-  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n-  //   );\n-  // };\n-\n-  // const openBase64HtmlInNewWindow = (base64Html) => {\n-  // const decodedHtml = atob(base64Html);\n-  // const newWindow = window.open(\"\", \"_blank\");\n-  // if (newWindow) {\n-  //   newWindow.document.write(decodedHtml);\n-  //   newWindow.document.close();\n-  // }\n-  // };\n-  return (\n-    /*---- Email preview Page ----*/\n-    <div>\n-      {isLoading ? (\n-        <Loader />\n-      ) : singleEmailData === \"\" ? (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">No Email found</div>\n-          </div>\n-        </div>\n-      ) : (\n-        <div className=\"gmail-preview-container \">\n-          <div className=\"email-content\">\n-            <div className=\"email-header\">\n-              <p className=\"px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">FROM:</b>{\" \"}\n-                {singleEmailData.Sender.EmailAddress.Address}\n-              </p>\n-              <p className=\"px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">TO:</b>{\" \"}\n-                {singleEmailData.ToRecipients[0].EmailAddress.Address}\n-              </p>\n-              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n-                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n-                {decodeEmailSubject(singleEmailData.Subject)}\n-              </p>\n-            </div>\n-            <div className=\"email-body text-break px-5 py-3\">\n-              {singleEmailData.Body.Content && (\n-                <div\n-                  dangerouslySetInnerHTML={{\n-                    __html: singleEmailData.Body.Content,\n-                  }}\n-                />\n-              )}\n-              <div className=\"attachments py-3 d-flex flex-wrap\">\n-                {/* {emailData &&\n-                emailData.map((item, index) => (\n-                  <div\n-                    key={index}\n-                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n-                  >\n-                    {item.Name && (\n-                      <FileViewer\n-                        fileType={item.Name.split(\".\")[1]}\n-                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n-                        errorComponent={() => <div>Error loading document</div>}\n-                        onError={(e) => console.error(\"Error occurred:\", e)}\n-                      />\n-                    )}\n-                  </div>\n-                ))} */}\n-                {emailData.length === 0\n-                  ? null\n-                  : (emailData || []).map((item, index) => {\n-                      let iconSrc = \"\";\n-                      let title = \"\";\n-\n-                      if (\n-                        item.ContentType === \"APPLICATION/PDF\" ||\n-                        item.ContentType === \"application/pdf\"\n-                      ) {\n-                        iconSrc =\n-                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType === \"TEXT/HTML\" ||\n-                        item.ContentType === \"text/plain\" ||\n-                        item.ContentType === \"text/html\"\n-                      ) {\n-                        iconSrc =\n-                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType.startsWith(\"IMAGE/\") ||\n-                        item.ContentType.startsWith(\"image/\")\n-                      ) {\n-                        iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n-                        title = item.Name;\n-                      } else if (\n-                        item.ContentType ===\n-                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n-                        item.ContentType ===\n-                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n-                      ) {\n-                        iconSrc =\n-                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n-                        title = item.Name;\n-                      } else {\n-                        iconSrc =\n-                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n-                        title = item.Name;\n-                      }\n-\n-                      return (\n-                        <div\n-                          key={index}\n-                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n-                          title={item.Name}\n-                        >\n-                          <Link\n-                          // onClick={() =>\n-                          //   openBase64FileInNewWindow(item.data, item.ContentType)\n-                          // }\n-                          >\n-                            <img\n-                              src={iconSrc}\n-                              alt={title}\n-                              title={title}\n-                              width={45}\n-                              height={45}\n-                              style={{ zIndex: \"1\" }}\n-                            />\n-                            <div>\n-                              <small\n-                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n-                                style={{ maxWidth: \"100%\" }}\n-                              >\n-                                {item.Name}\n-                              </small>\n-                            </div>\n-                          </Link>\n-                          <div className=\"download-icon\">\n-                            <Link\n-                              to={`data:${item.ContentType};base64,${item.ContentBytes}`}\n-                              download={item.Name}\n-                              className=\"text-dark\"\n-                            >\n-                              <AiOutlineDownload />\n-                            </Link>\n-                          </div>\n-                        </div>\n-                      );\n-                    })}\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default PreviewEmail;\n"
                },
                {
                    "date": 1709031586065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+import { AiOutlineDownload } from \"react-icons/ai\";\n+const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data */\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewAttchmentEmail(emailType, id);\n+      if (\n+        // Res.messsage === \"No data found\" ||\n+        // Res.status === \"0\" ||\n+        // Res.status === 0 ||\n+        Res.data.value === undefined ||\n+        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n+      ) {\n+        setemailData([]);\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data.value);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData([]);\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  // const openPDFInNewTab = (base64PDFData) => {\n+  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+  //   const newWindow = window.open();\n+  //   newWindow.document.write(\n+  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+  //   );\n+  // };\n+\n+  // const openBase64HtmlInNewWindow = (base64Html) => {\n+  // const decodedHtml = atob(base64Html);\n+  // const newWindow = window.open(\"\", \"_blank\");\n+  // if (newWindow) {\n+  //   newWindow.document.write(decodedHtml);\n+  //   newWindow.document.close();\n+  // }\n+  // };\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : singleEmailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">FROM:</b>{\" \"}\n+                {singleEmailData.sender.emailAddress.address}\n+              </p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">TO:</b>{\" \"}\n+                {singleEmailData.toRecipients[0].emailAddress.address}\n+              </p>\n+              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n+                {decodeEmailSubject(singleEmailData.subject)}\n+              </p>\n+            </div>\n+            <div className=\"email-body text-break px-5 py-3\">\n+              {singleEmailData.body.content && (\n+                <div\n+                  dangerouslySetInnerHTML={{\n+                    __html: singleEmailData.body.content,\n+                  }}\n+                />\n+              )}\n+              <div className=\"attachments py-3 d-flex flex-wrap\">\n+                {/* {emailData &&\n+                emailData.map((item, index) => (\n+                  <div\n+                    key={index}\n+                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n+                  >\n+                    {item.Name && (\n+                      <FileViewer\n+                        fileType={item.Name.split(\".\")[1]}\n+                        filePath={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                        errorComponent={() => <div>Error loading document</div>}\n+                        onError={(e) => console.error(\"Error occurred:\", e)}\n+                      />\n+                    )}\n+                  </div>\n+                ))} */}\n+                {emailData.length === 0\n+                  ? null\n+                  : (emailData || []).map((item, index) => {\n+                      let iconSrc = \"\";\n+                      let title = \"\";\n+                      console.log(item)\n+                      if (\n+                        item.ContentType === \"APPLICATION/PDF\" ||\n+                        item.ContentType === \"application/pdf\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType === \"TEXT/HTML\" ||\n+                        item.ContentType === \"text/plain\" ||\n+                        item.ContentType === \"text/html\"\n+                      ) {\n+                        iconSrc =\n+                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType.startsWith(\"IMAGE/\") ||\n+                        item.ContentType.startsWith(\"image/\")\n+                      ) {\n+                        \n+                        iconSrc = `data:${item.ContentType};base64,${item.ContentBytes}`;\n+                        title = item.Name;\n+                      } else if (\n+                        item.ContentType ===\n+                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n+                        item.ContentType ===\n+                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n+                        title = item.Name;\n+                      } else {\n+                        iconSrc =\n+                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n+                        title = item.Name;\n+                      }\n+\n+                      return (\n+                        <div\n+                          key={index}\n+                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n+                          title={item.Name}\n+                        >\n+                          <Link\n+                          // onClick={() =>\n+                          //   openBase64FileInNewWindow(item.data, item.ContentType)\n+                          // }\n+                          >\n+                            <img\n+                              src={iconSrc}\n+                              alt={title}\n+                              title={title}\n+                              width={45}\n+                              height={45}\n+                              style={{ zIndex: \"1\" }}\n+                            />\n+                            <div>\n+                              <small\n+                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n+                                style={{ maxWidth: \"100%\" }}\n+                              >\n+                                {item.Name}\n+                              </small>\n+                            </div>\n+                          </Link>\n+                          <div className=\"download-icon\">\n+                            <Link\n+                              to={`data:${item.ContentType};base64,${item.ContentBytes}`}\n+                              download={item.Name}\n+                              className=\"text-dark\"\n+                            >\n+                              <AiOutlineDownload />\n+                            </Link>\n+                          </div>\n+                        </div>\n+                      );\n+                    })}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1709031720709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+import { AiOutlineDownload } from \"react-icons/ai\";\n+const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data */\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewAttchmentEmail(emailType, id);\n+      if (\n+        // Res.messsage === \"No data found\" ||\n+        // Res.status === \"0\" ||\n+        // Res.status === 0 ||\n+        Res.data.value === undefined ||\n+        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n+      ) {\n+        setemailData([]);\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data.value);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData([]);\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  // const openPDFInNewTab = (base64PDFData) => {\n+  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+  //   const newWindow = window.open();\n+  //   newWindow.document.write(\n+  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+  //   );\n+  // };\n+\n+  // const openBase64HtmlInNewWindow = (base64Html) => {\n+  // const decodedHtml = atob(base64Html);\n+  // const newWindow = window.open(\"\", \"_blank\");\n+  // if (newWindow) {\n+  //   newWindow.document.write(decodedHtml);\n+  //   newWindow.document.close();\n+  // }\n+  // };\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : singleEmailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">FROM:</b>{\" \"}\n+                {singleEmailData.sender.emailAddress.address}\n+              </p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">TO:</b>{\" \"}\n+                {singleEmailData.toRecipients[0].emailAddress.address}\n+              </p>\n+              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n+                {decodeEmailSubject(singleEmailData.subject)}\n+              </p>\n+            </div>\n+            <div className=\"email-body text-break px-5 py-3\">\n+              {singleEmailData.body.content && (\n+                <div\n+                  dangerouslySetInnerHTML={{\n+                    __html: singleEmailData.body.content,\n+                  }}\n+                />\n+              )}\n+              <div className=\"attachments py-3 d-flex flex-wrap\">\n+                {/* {emailData &&\n+                emailData.map((item, index) => (\n+                  <div\n+                    key={index}\n+                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n+                  >\n+                    {item.Name && (\n+                      <FileViewer\n+                        fileType={item.Name.split(\".\")[1]}\n+                        filePath={`data:${item.contentType};base64,${item.ContentBytes}`}\n+                        errorComponent={() => <div>Error loading document</div>}\n+                        onError={(e) => console.error(\"Error occurred:\", e)}\n+                      />\n+                    )}\n+                  </div>\n+                ))} */}\n+                {emailData.length === 0\n+                  ? null\n+                  : (emailData || []).map((item, index) => {\n+                      let iconSrc = \"\";\n+                      let title = \"\";\n+                      console.log(item)\n+                      if (\n+                        item.contentType === \"APPLICATION/PDF\" ||\n+                        item.contentType === \"application/pdf\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.contentType === \"TEXT/HTML\" ||\n+                        item.contentType === \"text/plain\" ||\n+                        item.contentType === \"text/html\"\n+                      ) {\n+                        iconSrc =\n+                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n+                        title = item.Name;\n+                      } else if (\n+                        item.contentType.startsWith(\"IMAGE/\") ||\n+                        item.contentType.startsWith(\"image/\")\n+                      ) {\n+                        \n+                        iconSrc = `data:${item.contentType};base64,${item.ContentBytes}`;\n+                        title = item.Name;\n+                      } else if (\n+                        item.contentType ===\n+                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n+                        item.contentType ===\n+                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n+                        title = item.Name;\n+                      } else {\n+                        iconSrc =\n+                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n+                        title = item.Name;\n+                      }\n+\n+                      return (\n+                        <div\n+                          key={index}\n+                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n+                          title={item.Name}\n+                        >\n+                          <Link\n+                          // onClick={() =>\n+                          //   openBase64FileInNewWindow(item.data, item.contentType)\n+                          // }\n+                          >\n+                            <img\n+                              src={iconSrc}\n+                              alt={title}\n+                              title={title}\n+                              width={45}\n+                              height={45}\n+                              style={{ zIndex: \"1\" }}\n+                            />\n+                            <div>\n+                              <small\n+                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n+                                style={{ maxWidth: \"100%\" }}\n+                              >\n+                                {item.Name}\n+                              </small>\n+                            </div>\n+                          </Link>\n+                          <div className=\"download-icon\">\n+                            <Link\n+                              to={`data:${item.contentType};base64,${item.ContentBytes}`}\n+                              download={item.Name}\n+                              className=\"text-dark\"\n+                            >\n+                              <AiOutlineDownload />\n+                            </Link>\n+                          </div>\n+                        </div>\n+                      );\n+                    })}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1709031781094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+import { AiOutlineDownload } from \"react-icons/ai\";\n+const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data */\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewAttchmentEmail(emailType, id);\n+      if (\n+        // Res.messsage === \"No data found\" ||\n+        // Res.status === \"0\" ||\n+        // Res.status === 0 ||\n+        Res.data.value === undefined ||\n+        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n+      ) {\n+        setemailData([]);\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data.value);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData([]);\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  // const openPDFInNewTab = (base64PDFData) => {\n+  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+  //   const newWindow = window.open();\n+  //   newWindow.document.write(\n+  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+  //   );\n+  // };\n+\n+  // const openBase64HtmlInNewWindow = (base64Html) => {\n+  // const decodedHtml = atob(base64Html);\n+  // const newWindow = window.open(\"\", \"_blank\");\n+  // if (newWindow) {\n+  //   newWindow.document.write(decodedHtml);\n+  //   newWindow.document.close();\n+  // }\n+  // };\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : singleEmailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">FROM:</b>{\" \"}\n+                {singleEmailData.sender.emailAddress.address}\n+              </p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">TO:</b>{\" \"}\n+                {singleEmailData.toRecipients[0].emailAddress.address}\n+              </p>\n+              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n+                {decodeEmailSubject(singleEmailData.subject)}\n+              </p>\n+            </div>\n+            <div className=\"email-body text-break px-5 py-3\">\n+              {singleEmailData.body.content && (\n+                <div\n+                  dangerouslySetInnerHTML={{\n+                    __html: singleEmailData.body.content,\n+                  }}\n+                />\n+              )}\n+              <div className=\"attachments py-3 d-flex flex-wrap\">\n+                {/* {emailData &&\n+                emailData.map((item, index) => (\n+                  <div\n+                    key={index}\n+                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n+                  >\n+                    {item.name && (\n+                      <FileViewer\n+                        fileType={item.name.split(\".\")[1]}\n+                        filePath={`data:${item.contentType};base64,${item.contentBytes}`}\n+                        errorComponent={() => <div>Error loading document</div>}\n+                        onError={(e) => console.error(\"Error occurred:\", e)}\n+                      />\n+                    )}\n+                  </div>\n+                ))} */}\n+                {emailData.length === 0\n+                  ? null\n+                  : (emailData || []).map((item, index) => {\n+                      let iconSrc = \"\";\n+                      let title = \"\";\n+                      console.log(item)\n+                      if (\n+                        item.contentType === \"APPLICATION/PDF\" ||\n+                        item.contentType === \"application/pdf\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n+                        title = item.name;\n+                      } else if (\n+                        item.contentType === \"TEXT/HTML\" ||\n+                        item.contentType === \"text/plain\" ||\n+                        item.contentType === \"text/html\"\n+                      ) {\n+                        iconSrc =\n+                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n+                        title = item.name;\n+                      } else if (\n+                        item.contentType.startsWith(\"IMAGE/\") ||\n+                        item.contentType.startsWith(\"image/\")\n+                      ) {\n+                        \n+                        iconSrc = `data:${item.contentType};base64,${item.contentBytes}`;\n+                        title = item.name;\n+                      } else if (\n+                        item.contentType ===\n+                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n+                        item.contentType ===\n+                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n+                        title = item.name;\n+                      } else {\n+                        iconSrc =\n+                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n+                        title = item.name;\n+                      }\n+\n+                      return (\n+                        <div\n+                          key={index}\n+                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n+                          title={item.name}\n+                        >\n+                          <Link\n+                          // onClick={() =>\n+                          //   openBase64FileInNewWindow(item.data, item.contentType)\n+                          // }\n+                          >\n+                            <img\n+                              src={iconSrc}\n+                              alt={title}\n+                              title={title}\n+                              width={45}\n+                              height={45}\n+                              style={{ zIndex: \"1\" }}\n+                            />\n+                            <div>\n+                              <small\n+                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n+                                style={{ maxWidth: \"100%\" }}\n+                              >\n+                                {item.name}\n+                              </small>\n+                            </div>\n+                          </Link>\n+                          <div className=\"download-icon\">\n+                            <Link\n+                              to={`data:${item.contentType};base64,${item.contentBytes}`}\n+                              download={item.name}\n+                              className=\"text-dark\"\n+                            >\n+                              <AiOutlineDownload />\n+                            </Link>\n+                          </div>\n+                        </div>\n+                      );\n+                    })}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                },
                {
                    "date": 1709031863419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+// src/PreviewEmail.js\n+import React, { useState, useEffect } from \"react\";\n+import { /*GetPreviewEmail*/ GetPreviewAttchmentEmail } from \"../../api/api\";\n+import Loader from \"../common/loader\";\n+// import { FileViewer } from \"react-file-viewer\";\n+// import { ToastContainer } from \"react-toastify\";\n+// import AdminSidebar from \"../admin/sidebar\";\n+// import AdminHeader from \"../admin/header\";\n+import { /*useNavigate,*/ Link } from \"react-router-dom\";\n+import { AiOutlineDownload } from \"react-icons/ai\";\n+const PreviewEmail = ({ id, emailType, singleEmailData }) => {\n+  /* states */\n+  let [apiCall, setApiCall] = useState(false);\n+  let [isLoading, setIsLoading] = useState(true);\n+  const [emailData, setemailData] = useState([]);\n+  /* Function to get Employee visa data */\n+  const EmailData = async () => {\n+    setIsLoading(true);\n+    try {\n+      const Res = await GetPreviewAttchmentEmail(emailType, id);\n+      if (\n+        // Res.messsage === \"No data found\" ||\n+        // Res.status === \"0\" ||\n+        // Res.status === 0 ||\n+        Res.data.value === undefined ||\n+        Res.data.value.length === 0 // && JSON.parse(Res.data)[0])\n+      ) {\n+        setemailData([]);\n+        setIsLoading(false);\n+      } else {\n+        setemailData(Res.data.value);\n+        // setTotalData(Res.data.total_rows);\n+        setIsLoading(false);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+      setIsLoading(false);\n+      setemailData([]);\n+    }\n+  };\n+\n+  /*Render function to get the employee data*/\n+  useEffect(() => {\n+    EmailData();\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, id]);\n+\n+  /*Function to decode the email subject */\n+  function decodeEmailSubject(encodedSubject) {\n+    if (!encodedSubject) {\n+      return \"\";\n+    } else {\n+      return decodeURIComponent(\n+        encodedSubject\n+          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n+          .replace(/\\?=/g, \"\")\n+          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n+            String.fromCharCode(parseInt(p1, 16))\n+          )\n+      );\n+    }\n+  }\n+  /*Funcion to open pdf n new window */\n+  // const openPDFInNewTab = (base64PDFData) => {\n+  //   const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n+  //   const newWindow = window.open();\n+  //   newWindow.document.write(\n+  //     `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n+  //   );\n+  // };\n+\n+  // const openBase64HtmlInNewWindow = (base64Html) => {\n+  // const decodedHtml = atob(base64Html);\n+  // const newWindow = window.open(\"\", \"_blank\");\n+  // if (newWindow) {\n+  //   newWindow.document.write(decodedHtml);\n+  //   newWindow.document.close();\n+  // }\n+  // };\n+  return (\n+    /*---- Email preview Page ----*/\n+    <div>\n+      {isLoading ? (\n+        <Loader />\n+      ) : singleEmailData === \"\" ? (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">No Email found</div>\n+          </div>\n+        </div>\n+      ) : (\n+        <div className=\"gmail-preview-container \">\n+          <div className=\"email-content\">\n+            <div className=\"email-header\">\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">FROM:</b>{\" \"}\n+                {singleEmailData.sender.emailAddress.address}\n+              </p>\n+              <p className=\"px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">TO:</b>{\" \"}\n+                {singleEmailData.toRecipients[0].emailAddress.address}\n+              </p>\n+              <p className=\"font-size-3 font-weight-bold px-5 py-3 border-bottom\">\n+                <b className=\"font-size-2\">SUBJECT:</b>{\" \"}\n+                {decodeEmailSubject(singleEmailData.subject)}\n+              </p>\n+            </div>\n+            <div className=\"email-body text-break px-5 py-3\">\n+              {singleEmailData.body.content && (\n+                <div\n+                  dangerouslySetInnerHTML={{\n+                    __html: singleEmailData.body.content,\n+                  }}\n+                />\n+              )}\n+              <div className=\"attachments py-3 d-flex flex-wrap\">\n+                {/* {emailData &&\n+                emailData.map((item, index) => (\n+                  <div\n+                    key={index}\n+                    className=\"col align-items-center p-3 m-3 rounded shadow bg-white position-relative htmlFileCls\"\n+                  >\n+                    {item.name && (\n+                      <FileViewer\n+                        fileType={item.name.split(\".\")[1]}\n+                        filePath={`data:${item.contentType};base64,${item.contentBytes}`}\n+                        errorComponent={() => <div>Error loading document</div>}\n+                        onError={(e) => console.error(\"Error occurred:\", e)}\n+                      />\n+                    )}\n+                  </div>\n+                ))} */}\n+                {emailData.length === 0\n+                  ? null\n+                  : (emailData || []).map((item, index) => {\n+                      let iconSrc = \"\";\n+                      let title = \"\";\n+                      if (\n+                        item.contentType === \"APPLICATION/PDF\" ||\n+                        item.contentType === \"application/pdf\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://ssl.gstatic.com/docs/doclist/images/mediatype/icon_3_pdf_x16.png\";\n+                        title = item.name;\n+                      } else if (\n+                        item.contentType === \"TEXT/HTML\" ||\n+                        item.contentType === \"text/plain\" ||\n+                        item.contentType === \"text/html\"\n+                      ) {\n+                        iconSrc =\n+                          \"//ssl.gstatic.com/docs/doclist/images/mediatype/icon_1_text_x16.png\";\n+                        title = item.name;\n+                      } else if (\n+                        item.contentType.startsWith(\"IMAGE/\") ||\n+                        item.contentType.startsWith(\"image/\")\n+                      ) {\n+                        \n+                        iconSrc = `data:${item.contentType};base64,${item.contentBytes}`;\n+                        title = item.name;\n+                      } else if (\n+                        item.contentType ===\n+                          \"APPLICATION/VND.OPENXMLFORMATS-OFFICEDOCUMENT.WORDPROCESSINGML.DOCUMENT\" ||\n+                        item.contentType ===\n+                          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n+                      ) {\n+                        iconSrc =\n+                          \"https://e7.pngegg.com/pngimages/18/655/png-clipart-computer-icons-microsoft-word-document-file-format-word-icon-blue-angle.png\";\n+                        title = item.name;\n+                      } else {\n+                        iconSrc =\n+                          \"https://icons.iconarchive.com/icons/thehoth/seo/256/seo-web-code-icon.png\";\n+                        title = item.name;\n+                      }\n+\n+                      return (\n+                        <div\n+                          key={index}\n+                          className=\"align-items-center mr-3 mb-3 rounded border bg-white position-relative htmlFileCls text-center p-2\"\n+                          title={item.name}\n+                        >\n+                          <Link\n+                          // onClick={() =>\n+                          //   openBase64FileInNewWindow(item.data, item.contentType)\n+                          // }\n+                          >\n+                            <img\n+                              src={iconSrc}\n+                              alt={title}\n+                              title={title}\n+                              width={45}\n+                              height={45}\n+                              style={{ zIndex: \"1\" }}\n+                            />\n+                            <div>\n+                              <small\n+                                className=\"d-inline-block text-truncate text-decoration-none text-dark\"\n+                                style={{ maxWidth: \"100%\" }}\n+                              >\n+                                {item.name}\n+                              </small>\n+                            </div>\n+                          </Link>\n+                          <div className=\"download-icon\">\n+                            <Link\n+                              to={`data:${item.contentType};base64,${item.contentBytes}`}\n+                              download={item.name}\n+                              className=\"text-dark\"\n+                            >\n+                              <AiOutlineDownload />\n+                            </Link>\n+                          </div>\n+                        </div>\n+                      );\n+                    })}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default PreviewEmail;\n"
                }
            ],
            "date": 1699001857292,
            "name": "Commit-0",
            "content": "// src/PreviewEmail.js\nimport React, { useState, useEffect } from \"react\";\nimport { GetPreviewEmail } from \"../../api/api\";\nimport Loader from \"../common/loader\";\n// import { FileViewer } from \"react-file-viewer\";\n// import { ToastContainer } from \"react-toastify\";\n// import AdminSidebar from \"../admin/sidebar\";\n// import AdminHeader from \"../admin/header\";\nimport { /*useNavigate,*/ Link } from \"react-router-dom\";\nconst PreviewEmail = ({ id }) => {\n  /* states */\n  let [apiCall, setApiCall] = useState(false);\n  let [isLoading, setIsLoading] = useState(true);\n  const [emailData, setemailData] = useState([]);\n  /* Function to get Employee visa data*/\n  const EmailData = async () => {\n    setIsLoading(true);\n    try {\n      const Res = await GetPreviewEmail(id);\n      // console.log(Res.data);\n      if (\n        Res.messsage === \"No data found\" ||\n        Res.status === \"0\" ||\n        Res.status === 0 ||\n        Res.data === undefined ||\n        Res.data.length === 0\n      ) {\n        setemailData({});\n        setIsLoading(false);\n      } else {\n        setemailData(Res.data);\n        // setTotalData(Res.data.total_rows);\n        setIsLoading(false);\n      }\n    } catch (err) {\n      console.log(err);\n      setIsLoading(false);\n      setemailData({});\n    }\n  };\n\n  /*Render function to get the employee data*/\n  useEffect(() => {\n    EmailData();\n    if (apiCall === true) {\n      setApiCall(false);\n    }\n  }, [apiCall, id]);\n\n  /*Function to decode the email subject */\n  function decodeEmailSubject(encodedSubject) {\n    if (!encodedSubject) {\n      return \"\";\n    } else {\n      return decodeURIComponent(\n        encodedSubject\n          .replace(/=\\?UTF-8\\?Q\\?/g, \"\")\n          .replace(/\\?=/g, \"\")\n          .replace(/=([0-9A-F]{2})/g, (_, p1) =>\n            String.fromCharCode(parseInt(p1, 16))\n          )\n      );\n    }\n  }\n  /*Funcion to open pdf n new window */\n  const openPDFInNewTab = (base64PDFData) => {\n    const dataUri = `data:application/pdf;base64,${base64PDFData}`;\n    const newWindow = window.open();\n    newWindow.document.write(\n      `<iframe src=\"${dataUri}\" style=\"width:100%;height:100%;\" frameborder=\"0\"></iframe>`\n    );\n  };\n\n  return (\n    /*---- Email preview Page ----*/\n    <div>\n      {isLoading ? (\n        <Loader />\n      ) : emailData === \"\" ? (\n        <div className=\"gmail-preview-container \">\n          <div className=\"email-content\">\n            <div className=\"email-header\">No Email found</div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"gmail-preview-container \">\n          <div className=\"email-content\">\n            <div className=\"email-header\">\n              <h2>{decodeEmailSubject(emailData.subject)}</h2>\n              <p>From: {emailData.from}</p>\n              <p>To: {emailData.to}</p>\n            </div>\n            <div className=\"email-body\">\n              {emailData.body_data &&\n                (emailData.body_data.includes(\"W2ltYWdlOiBHb29nbGVd\") ===\n                true ? (\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: atob(emailData.body_data),\n                    }}\n                  />\n                ) : (\n                  <div>{emailData.body_data}</div>\n                ))}\n            </div>\n            <div className=\"attachments\">\n              {emailData.attachment &&\n                (emailData.attachment[0] || []).map((item, index) => (\n                  <>\n                    {item.ext_type === \"pdf\" ? (\n                      <Link\n                        onClick={() => {\n                          openPDFInNewTab(item.file_data);\n                        }}\n                      >\n                        <img\n                          key={index}\n                          src={`https://s.yimg.com/fz/api/res/1.2/O0oW0TRMJLWcDOyAgUZScg--~C/YXBwaWQ9c3JjaGRkO2ZpPWZpdDtoPTEzMDtxPTgwO3c9MTA1/https://s.yimg.com/zb/imgv1/9a8b4cb8-aba2-3b23-b911-7b50ca0139d2/t_500x300`}\n                          alt=\"pdf\"\n                        />\n                      </Link>\n                    ) : item.ext_type === \"html\" ? (\n                      <div\n                        dangerouslySetInnerHTML={{ __html: item.file_data }}\n                      />\n                    ) : (\n                      <img\n                        key={index}\n                        src={`data:image/${item.ext_type};base64,${item.file_data}`}\n                        alt={`attachment-${index}`}\n                        width={500}\n                        height={500}\n                      />\n                    )}\n                  </>\n                ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PreviewEmail;\n"
        }
    ]
}