{
    "sourceFile": "src/components/company/company_singup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713876201584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713876201584,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport { Link, useSearchParams, useNavigate } from \"react-router-dom\";\nimport useValidation from \"../common/useValidation\";\nimport {\n  EmployerSignUp,\n  SendOtp,\n  LinkedInSignupEmployer,\n  SocialCompanyLogin,\n} from \"../../api/api\";\nimport Permissions from \"../json/emailPermisionJson\";\nimport { toast } from \"react-toastify\";\n// import { useGoogleLogin } from '@react-oauth/google';\n// import axios from \"axios\";\n// import { useLinkedIn , LinkedIn} from \"react-linkedin-login-oauth2\";\n// import linkedin from 'react-linkedin-login-oauth2/assets/linkedin.png';\n// import FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props'\nfunction CompanySingupForm(props) {\n  let [loading, setLoading] = useState(false);\n  let [otpBox, setOtpBox] = useState(false);\n  const [SingUpSuccess, setSingUpSuccess] = useState(\"\");\n  const [otpErr, setotperr] = useState(\"\");\n  // let [facebook, setFacebook] = useState(false);\n  let i = 0;\n  let navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  let code = searchParams.get(\"code\");\n  if (props.show === true) {\n    localStorage.setItem(\"linkedin\", \"employerSignup\");\n  }\n  const type = localStorage.getItem(\"linkedin\");\n  /*Function to close he modal */\n  //   const close = () => {\n  //     setErrors(\"\");\n  //     setState(initialFormState);\n  //     setOtpBox(false);\n  //     //props.close()();\n  //   };\n  // USER SIGNUP VALIDATION\n\n  // INITIAL STATE ASSIGNMENT\n  const initialFormState = {\n    email: \"\",\n    password: \"\",\n    contact_no: \"\",\n    term_and_condition: \"\",\n    otp: \"\",\n    Credentials: \"\",\n  };\n  // VALIDATION CONDITIONS\n  const validators = {\n    email: [\n      (value) =>\n        value === \"\" || value.trim() === \"\"\n          ? \"Email is required\"\n          : /\\S+@\\S+\\.\\S+/.test(value)\n          ? null\n          : \"Email is invalid\",\n    ],\n    password: [\n      (value) =>\n        value === \"\"\n          ? \"Password is required\"\n          : /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/.test(\n              value\n            )\n          ? null\n          : \"Password must contain digit, one uppercase letter, one special character, no space, and it must be 8-16 characters long\",\n    ],\n    contact_no: [\n      (value) =>\n        value.trim() === \"\" || value === \"\" || value === null\n          ? \"Contact no is required\"\n          : value.length < 10 || value.length > 11\n          ? \"Contact no should be of 10 digits\"\n          : \"\",\n    ],\n    term_and_condition: [\n      (value) =>\n        otpBox === false\n          ? \"\"\n          : value === null || value === \"\" || value === false\n          ? \"Please accept terms and conditions continue\"\n          : \"\",\n    ],\n    otp: [\n      (value) =>\n        otpBox\n          ? value === null || value === \"\"\n            ? \"Otp is requried\"\n            : otpErr === \"Invalid Otp\"\n            ? \"Invalid Otp\"\n            : \"\"\n          : \"\",\n    ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState, setErrors, onInputChange, errors, validate } =\n    useValidation(initialFormState, validators);\n\n  // USER SIGNUP SUBMIT BUTTON\n  const onCompanySignUpClick = async (event) => {\n    event.preventDefault();\n    if (validate() && state.otp && state.term_and_condition) {\n      /*Api to signup */\n      try {\n        let Response = await EmployerSignUp(state, Permissions);\n        if (Response.message === \"Employer has been registered\") {\n          setErrors(\"\");\n          setState(initialFormState);\n          setOtpBox(false);\n          setSingUpSuccess(\"success\");\n        } else if (Response.message === \n          \" incorrect otp \") {\n          setLoading(false);\n          setotperr(\"Invalid Otp\");\n          setErrors({ ...errors, term_and_condition: \"\" });\n          setErrors({ ...errors, contact_no: \"\" });\n        } else if (Response.message === \"Email already exists\") {\n          setErrors({ ...errors, email: [\"Email already exists\"] });\n          setState(initialFormState);\n          setOtpBox(false);\n        }\n      } catch (err) {\n        console.log(err);\n        setErrors({ ...errors, Credentials: [\"Please try again later.\"] });\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n      }\n    } else if (otpBox === false && validate()) {\n      /*Api to get otp */\n      setLoading(true);\n      try {\n        const updatedTodo = await SendOtp(state, \"employer\");\n        if (updatedTodo.message === \"successful\") {\n          toast.success(\"Otp sent Successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          setOtpBox(true);\n          setLoading(false);\n          setErrors(\"\");\n        }\n        if (updatedTodo.message === \"Email already exists\") {\n          setErrors({ ...errors, Credentials: [\"Email already exists\"] });\n          setState(initialFormState);\n          setOtpBox(false);\n          setLoading(false);\n        }\n      } catch (err) {\n        console.log(err);\n        setErrors({ ...errors, Credentials: [\"Please try again later.\"] });\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setLoading(false);\n      }\n    }\n  };\n  // END USER SIGNUP VALIDATION\n  /*Function to Sign Up with google */\n  // const GoogleLogin = useGoogleLogin({\n  //   onSuccess: async (tokenResponse) => {\n  //     try {\n  //       let data = await axios(\"https://www.googleapis.com/oauth2/v3/userinfo\", {\n  //         headers: {\n  //           \"Authorization\": `Bearer ${tokenResponse.access_token}`\n  //         }\n  //       });\n  //       if (data.data.email_verified === true) {\n  //         try {\n  //           let res = await SocialCompanyLogin(data.data.sub, data.data.email, data.data.name, data.data.picture, \"Google\");\n  //           localStorage.setItem(\"token\", res.token);\n  //           localStorage.setItem(\"userType\", \"company\");\n  //           localStorage.setItem(\"employee_id\", res.employer_id);\n  //           localStorage.setItem(\"profile_photo\", res.company_logo);\n  //           toast.success(\"Logged In Successfully\", {\n  //             position: toast.POSITION.TOP_RIGHT,\n  //             autoClose: 1000,\n  //           });\n  //           //props.close()();\n  //           navigate(\"/client\");\n  //           window.location.reload();\n  //         } catch (err) {\n  //          console.log(err) ;\n  //         }\n  //       }\n  //     } catch (err) {\n  //       console.log(err);\n  //     }\n  //   }\n  // });\n\n  /*Function to Sign Up  with Linked in */\n  /*Code to get access token */\n  // axios.post(`https://www.linkedin.com/oauth/v2/accessToken?code=${code}&grant_type=authorization_code&client_id=78mhwjaumkvtbm&client_secret=ZoZKbJgORl0vYJFr&redirect_uri=${window.location.origin}`)\n  // .then(response => {\n  // })\n  // .catch(error => {\n  //   console.error('Error:', error.message);\n  // });\n  const handleLinkedInLogin = () => {\n    const clientId = \"78mhwjaumkvtbm\";\n    const redirectUri = \"http://localhost:3000/\";\n    const scope =\n      \"r_liteprofile r_emailaddress w_member_social profile email openid\";\n\n    window.location.href = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=${clientId}&redirect_uri=${encodeURIComponent(\n      redirectUri\n    )}&scope=${encodeURIComponent(scope)}`;\n  };\n  useEffect(() => {\n    // eslint-disable-next-line\n    i = i + 2;\n    if (\n      (code !== \"\" ||\n        code !== undefined ||\n        code !== \"undefined\" ||\n        code !== null) &&\n      i === 2 &&\n      type === \"employerSignup\"\n    ) {\n      const response = LinkedInSignupEmployer(code, type);\n      response\n        .then((res) => {\n          let decode = JSON.parse(res.data);\n          if (res.data.email_verified === true) {\n            try {\n              let data = SocialCompanyLogin(\n                res.data.sub,\n                res.data.email,\n                res.data.name,\n                res.data.picture,\n                \"Linkedin\"\n              );\n              localStorage.setItem(\"token\", data.token);\n              localStorage.setItem(\"userType\", \"company\");\n              localStorage.setItem(\"employee_id\", data.employer_id);\n              localStorage.setItem(\"profile_photo\", data.company_logo);\n              toast.success(\"Logged In Successfully\", {\n                position: toast.POSITION.TOP_RIGHT,\n                autoClose: 1000,\n              });\n              //props.close()();\n              navigate(\"/client\");\n              window.location.reload();\n            } catch (err) {\n              console.log(err);\n            }\n          }\n          if (\n            res.data.message ===\n              \"The token used in the request has been revoked by the user\" ||\n            decode.error_description ===\n              \"Unable to retrieve access token: appid/redirect uri/code verifier does not match authorization code. Or authorization code expired. Or external member binding exists\"\n          ) {\n            toast.error(\"Token Expired\", {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            });\n            navigate(\"/client\");\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, []);\n\n  /*FUnctiom to Sign Up with facebook */\n  // const responseFacebook = async (response) => {\n  //   if (response.graphDomain === \"facebook\") {\n  //     try {\n  //       let data = await SocialCompanyLogin(response.userID, response.email, response.name, response.picture.data.url, \"Facebook\");\n  //       localStorage.setItem(\"token\", data.token);\n  //       localStorage.setItem(\"userType\", \"company\");\n  //       localStorage.setItem(\"employee_id\", data.employer_id);\n  //       localStorage.setItem(\"profile_photo\", data.company_logo);\n  //       toast.success(\"Logged In Successfully\",{\n  //         position: toast.POSITION.TOP_RIGHT,\n  //         autoClose: 1000,\n  //       });\n  //       //props.close()();\n  //       navigate(\"/client\");\n  //       window.location.reload();\n  //     } catch (err) {\n  //      console.log(err)\n  //     }\n  //   }\n  // }\n  return (\n    <div\n      className=\"row no-gutters justify-content-center\"\n      style={{ overflow: \"auto\", margin: \"7% auto\" }}\n    >\n      <div className=\"col-lg-4 col-md-6 card\">\n        {SingUpSuccess === \"success\" ? (\n          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box\">\n            Congratulations! <br />\n            You have successfully registered your account. Please login to\n            continue\n            <br />\n            <Link to=\"/client_login\" className=\"btn btn-primary mt-12\">\n              Login\n            </Link>\n          </div>\n        ) : (\n          <div className=\"bg-white-2 h-100 px-11 pt-11 pb-7 login_Modal_box\">\n            <div className=\"brand-logo mb-10 text-center\">\n              <Link to=\"/\">\n                <img\n                  src=\"image/00logo-main-black.png\"\n                  alt=\"\"\n                  className=\"light-version-logo default-logo\"\n                  style={{ maxWidth: \"250px\", maxHeight: \"80px\" }}\n                />\n              </Link>\n            </div>\n            {/* SOCIAL MEDIA LINK BUTTONS */}\n            <div className=\"row d-none\">\n              <div className=\"col-4 col-xs-12\">\n                <button\n                  onClick={handleLinkedInLogin}\n                  className=\"font-size-4 font-weight-semibold position-relative text-white bg-allports h-px-48 flex-all-center w-100 px-6 rounded-5 mb-4 border-0\"\n                >\n                  <i className=\"fab fa-linkedin pos-xs-abs-cl font-size-7 ml-xs-4\"></i>\n                  <span className=\"d-none d-xs-block mx-5 px-3\">\n                    Import from LinkedIn\n                  </span>\n                </button>\n              </div>\n              {/* <div className=\"col-4 col-xs-12\">\n                    <Link\n                      to=\"\" onClick={GoogleLogin}\n                      className=\"font-size-4 font-weight-semibold position-relative text-white bg-poppy h-px-48 flex-all-center w-100 px-6 rounded-5 mb-4\"\n                    >\n                      <i className=\"fab fa-google pos-xs-abs-cl font-size-7 ml-xs-4\"></i>\n                      <span className=\"d-none d-xs-block mx-5 px-3\">\n                        Import from Google\n                      </span>\n                    </Link>\n                  </div>\n                  <div className=\"col-4 col-xs-12\">\n                    <Link\n                      to=\"\" onClick={() => setFacebook(true)}\n                      className=\"font-size-4 font-weight-semibold position-relative text-white bg-marino h-px-48 flex-all-center w-100 px-6 rounded-5 mb-4\"\n                    >\n                      <i className=\"fab fa-facebook-square pos-xs-abs-cl font-size-7 ml-xs-4\"></i>\n                      <span className=\"d-none d-xs-block mx-5 px-3\">\n                        Import from Facebook\n                      </span>\n                    </Link>\n                    {facebook ?\n                      <FacebookLogin\n                        appId=\"2170088543184291\"\n                        autoLoad\n                        callback={responseFacebook}\n                        fields=\"name,email,picture\"\n                        scope=\"public_profile,user_friends,email,user_actions.books\"\n                        className=\"font-size-4 font-weight-semibold position-relative text-white bg-marino h-px-48 flex-all-center w-100 px-6 rounded-5 mb-4\"\n                        render={renderProps => (\n                          <button onClick={renderProps.onClick} className=\"d-none\">\n                          </button>\n                        )}\n                      />\n                      : null}\n                  </div> */}\n            </div>\n            {/* END SOCIAL MEDIA LINK BUTTONS */}\n            <div className=\"or-devider d-none\">\n              <span className=\"font-size-3 line-height-reset\">Or</span>\n            </div>\n\n            {/* SIGNUP FORM */}\n            <form onSubmit={onCompanySignUpClick}>\n              {/* FORM FIELDS */}\n              <div className=\"form-group\">\n                <label\n                  htmlFor=\"email\"\n                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\n                >\n                  E-mail<span className=\"text-danger\"> *</span>:\n                </label>\n                <input\n                  name=\"email\"\n                  value={state.email || \"\"}\n                  onChange={onInputChange}\n                  type=\"email\"\n                  className={\n                    errors.email\n                      ? \"form-control border border-danger\"\n                      : \"form-control\"\n                  }\n                  placeholder=\"example@gmail.com\"\n                  id=\"email\"\n                />\n                {/* ERROR MSG FOR email */}\n                {errors.email && (\n                  <span key={errors.email} className=\"text-danger font-size-3\">\n                    {errors.email}\n                  </span>\n                )}\n              </div>\n              <div className=\"form-group\">\n                <label\n                  htmlFor=\"contact_no\"\n                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\n                >\n                  Contact Number\n                </label>\n                <input\n                  type=\"number\"\n                  name=\"contact_no\"\n                  value={\"\" || state.contact_no}\n                  onChange={onInputChange}\n                  className={\n                    errors.contact_no\n                      ? \"form-control border border-danger\"\n                      : \"form-control\"\n                  }\n                  placeholder=\"Contact Number\"\n                  id=\"contact_no\"\n                  min={0}\n                />\n                {/* ERROR MSG FOR Company no */}\n                {errors.contact_no && (\n                  <span\n                    key={errors.contact_no}\n                    className=\"text-danger font-size-3\"\n                  >\n                    {errors.contact_no}\n                  </span>\n                )}\n              </div>\n              <div className=\"form-group\">\n                <label\n                  htmlFor=\"password\"\n                  className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\n                >\n                  Password<span className=\"text-danger\"> *</span> :\n                </label>\n                <div className=\"position-relative\">\n                  <input\n                    name=\"password\"\n                    value={state.password || \"\"}\n                    onChange={onInputChange}\n                    type=\"password\"\n                    className={\n                      errors.password\n                        ? \"form-control border border-danger\"\n                        : \"form-control\"\n                    }\n                    id=\"password\"\n                    placeholder=\"Enter password\"\n                  />\n                  {/* ERROR MSG FOR PASSWORD */}\n                  {errors.password && (\n                    <span\n                      key={errors.password}\n                      className=\"text-danger font-size-3\"\n                    >\n                      {errors.password}\n                    </span>\n                  )}\n                  {/* <Link\n                      to=\"/\"\n                      className=\"show-password pos-abs-cr fas mr-6 text-black-2\"\n                      data-show-pass=\"password2\"\n                    ></Link> */}\n                </div>\n              </div>\n              {/* <div className={\"form-group \"}>\n                    <label\n                      htmlFor=\"reffer_by\"\n                      className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\n                    >\n                      Reffered by:<span className=\"text-danger\">*</span>\n                    </label>\n                    <Select\n                      options={\"\" || agentList}\n                      name=\"reffer_by\"\n                      id=\"reffer_by\"\n                      onChange={onSelectChange}\n                      className={\n                        errors.reffer_by\n                          ? \"form-control border border-danger\"\n                          : \"form-control px-0 pt-4 border-0\"\n                      }\n                    />\n                    ERROR MSG FOR REFFER BY\n                    {errors.reffer_by && (\n                      <span\n                        key={errors.reffer_by}\n                        className=\"text-danger font-size-3\"\n                      >\n                        {errors.reffer_by}\n                      </span>\n                    )}  \n                  </div> */}\n              {otpBox ? (\n                <div className=\"form-group\">\n                  <label\n                    htmlFor=\"otp\"\n                    className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\n                  >\n                    Enter OTP\n                  </label>\n                  <div className=\"position-relative\">\n                    <input\n                      type=\"number\"\n                      min={0}\n                      value={state.otp || \"\"}\n                      onChange={onInputChange}\n                      maxLength={6}\n                      name=\"otp\"\n                      id=\"otp\"\n                      className={\n                        errors.otp\n                          ? \"form-control border border-danger\"\n                          : \"form-control\"\n                      }\n                      placeholder=\"Otp\"\n                    />\n                    {errors.otp && (\n                      <span\n                        key={errors.otp}\n                        className=\"text-danger font-size-3\"\n                      >\n                        {errors.otp}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ) : null}\n              {/* END FORM FIELDS  */}\n              <div className=\" d-flex flex-wrap justify-content-between mb-1 col-md-12 \">\n                <label htmlFor=\"tandr\" className=\"gr-check-input d-flex  mr-3\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"term_and_condition\"\n                    name=\"term_and_condition\"\n                    onChange={(event) =>\n                      setState({\n                        ...state,\n                        term_and_condition: event.target.checked,\n                      })\n                    }\n                    className=\"text-black-2 pt-5 mr-5\"\n                  />\n                  <span className=\"font-size-3 mb-0 line-height-reset d-block\">\n                    Agree to the\n                    <Link to=\"\" className=\"text-primary\">\n                      Terms & Conditions\n                    </Link>\n                  </span>\n                </label>\n                {/*----ERROR MESSAGE FOR terms----*/}\n                <span\n                  key={errors.term_and_condition}\n                  className=\"text-danger font-size-3\"\n                >\n                  {errors.term_and_condition}\n                </span>\n              </div>\n              {errors.Credentials && (\n                <span\n                  key={errors.Credentials}\n                  className=\"text-danger font-size-3\"\n                >\n                  {errors.Credentials}\n                </span>\n              )}\n              <div className=\"form-group text-center\">\n                {loading === true ? (\n                  <button\n                    className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                    type=\"button\"\n                    disabled\n                  >\n                    <span\n                      className=\"spinner-border spinner-border-sm \"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                    ></span>\n                    <span className=\"sr-only\">Loading...</span>\n                  </button>\n                ) : otpBox ? (\n                  <button\n                    className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                    type=\"submit\"\n                  >\n                    Sign Up\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                    type=\"submit\"\n                  >\n                    Send OTP\n                  </button>\n                )}\n              </div>\n              <p className=\"font-size-4 text-center heading-default-color\">\n                Already have an account?\n                <Link to={\"/client_login\"} className=\"text-primary ml-2\">\n                  Login\n                </Link>\n              </p>\n            </form>\n            {/* END SIGNUP FORM */}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CompanySingupForm;\n"
        }
    ]
}