{
    "sourceFile": "src/components/forms/admin/add_agent.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713876085474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713876085474,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\n// import { Modal } from \"react-bootstrap\";\nimport useValidation from \"../../common/useValidation\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// import filterjson from \"../../json/filterjson\";\nimport { AddUpdateAgent, GetAgent } from \"../../../api/api\";\n\nfunction AddNewAgent(props) {\n  let encoded;\n  const [imgError, setImgError] = useState(\"\");\n  //   let [already, setAlready] = useState(\"\");\n  let [loading, setLoading] = useState(false);\n  //   const [showPassword, setShowPassword] = useState(false);\n\n  /*Function to show hide password */\n  //   const toggleShowPassword = () => setShowPassword((prev) => !prev);\n\n  //   const renderIcon = () => {\n  //     if (state.password.length > 0) {\n  //       return showPassword ? (\n  //         <i className=\"fa fa-eye-slash\"></i>\n  //       ) : (\n  //         <i className=\"fa fa-eye\"></i>\n  //       );\n  //     }\n  //     return null;\n  //   };\n\n  /* Functionality to close the modal */\n  const close = () => {\n    setState(initialFormState);\n    setErrors(\"\");\n    props.close();\n    setLoading(false);\n    // setAlready(\"\");\n  };\n  // USER agent PROFILE UPDATE VALIDATION\n\n  // INITIAL STATE ASSIGNMENT\n  const initialFormState = {\n    name: \"\",\n    email: \"\",\n    // password: \"\",\n    type: \"\",\n    contact_no: \"\",\n    profile_image: \"\",\n    address: \"\",\n    country: \"\",\n    state: \"\",\n    city: \"\",\n    id: props.agentId === \"0\" ? \"\" : props.agentId,\n  };\n  // VALIDATION CONDITIONS\n  const validators = {\n    name: [\n      (value) =>\n        value === \"\" || value.trim() === \"\"\n          ? \"Name is required\"\n          : /[-]?\\d+(\\.\\d+)?/.test(value)\n          ? \"Name can not have a number.\"\n          : value.length < 2\n          ? \"Name should have 2 or more letters\"\n          : /[^A-Za-z 0-9]/g.test(value)\n          ? \"Cannot use special character \"\n          : \"\",\n    ],\n    // email: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\"\n    //       ? \"Email is required\"\n    //       : /\\S+@\\S+\\.\\S+/.test(value)\n    //       ? null\n    //       : \"Email is invalid\",\n    // ],\n    // password: [\n    //   (value) =>\n    //     state.agent_id\n    //       ? value === \"\"\n    //       : value === \"\"\n    //       ? \"Password is required\"\n    //       : /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/.test(\n    //           value\n    //         )\n    //       ? null\n    //       : \"Password must contain digit, one uppercase letter, one special character, no space, and it must be 8-16 characters long\",\n    // ],\n    // type: [(value) => (value === \"\" ? \"Type is required\" : null)],\n    // contact_no: [\n    //   (value) =>\n    //     value === \"\" || value === null || value.trim() === \"\"\n    //       ? \"Contact no is required\"\n    //       : value.length < 10\n    //       ? \"Contact no can not be less than 10 digit\"\n    //       : value.length > 13\n    //       ? \"Contact no can not be more than 13 digit\"\n    //       : \"\",\n    // ],\n    // address: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\"\n    //       ? \"Address is required\"\n    //       : value.length < 2\n    //       ? \"Address should have 2 or more letters\"\n    //       : \"\",\n    // ],\n    // country: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\"\n    //       ? \"Country is required\"\n    //       : /[-]?\\d+(\\.\\d+)?/.test(value)\n    //       ? \"Country can not have a number.\"\n    //       : value.length < 2\n    //       ? \"Country should have 2 or more letters\"\n    //       : /[^A-Za-z 0-9]/g.test(value)\n    //       ? \"Cannot use special character \"\n    //       : \"\",\n    // ],\n    // state: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\"\n    //       ? \"State is required\"\n    //       : /[-]?\\d+(\\.\\d+)?/.test(value)\n    //       ? \"State can not have a number.\"\n    //       : value.length < 2\n    //       ? \"State should have 2 or more letters\"\n    //       : /[^A-Za-z 0-9]/g.test(value)\n    //       ? \"Cannot use special character \"\n    //       : \"\",\n    // ],\n    // city: [\n    //   (value) =>\n    //     value === \"\" || value.trim() === \"\"\n    //       ? \"City is required\"\n    //       : /[-]?\\d+(\\.\\d+)?/.test(value)\n    //       ? \"City can not have a number.\"\n    //       : value.length < 2\n    //       ? \"City should have 2 or more letters\"\n    //       : /[^A-Za-z 0-9]/g.test(value)\n    //       ? \"Cannot use special character \"\n    //       : \"\",\n    // ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState, setErrors, onInputChange, errors, validate } =\n    useValidation(initialFormState, validators);\n\n  /*Function to convert file to base64 */\n  const convertToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.addEventListener(\"load\", () => {\n        resolve({ base64: fileReader.result });\n      });\n      fileReader.readAsDataURL(file);\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n\n  /*Onchange function of profile */\n  const handleFileChange = async (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const img = new Image();\n      img.onload = () => {\n        if (/*file.size > 1024 * 100*/ (file.size > 100) * 1024 === true) {\n          setImgError(\"Image size can't be more then 100 kb\");\n        } else {\n          setImgError(\"\");\n          setState({ ...state, profile_image: event.target.result });\n        }\n      };\n      img.src = event.target.result;\n    };\n\n    // Read the file as a data URL\n    reader.readAsDataURL(file);\n    encoded = await convertToBase64(file);\n    let base64Name = encoded.base64;\n    setState({ ...state, profile_image: base64Name });\n  };\n  /*Function to get agent detail */\n  const AgentData = async () => {\n    try {\n      const userData = await GetAgent(props.agentId);\n      if (userData) {\n        setState(userData.data.data[0]);\n      } else {\n        setState(initialFormState);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    if (props.agentId === \"0\" || props.agentId === undefined) {\n      setState(initialFormState);\n    } else {\n      AgentData();\n    }\n    // eslint-disable-next-line\n  }, [props.agentId]);\n\n  // USER agent PROFILE UPDATE SUBMIT BUTTON\n  const onAgentProfileUpdateClick = async (event) => {\n    event.preventDefault();\n    if (validate()) {\n      setLoading(true);\n      try {\n        const responseData = await AddUpdateAgent(state);\n        if (responseData.message === \"created successfully\") {\n          toast.success(\"Partner added successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          props.setApiCall(true);\n          return close();\n        }\n        if (responseData.message === \"updated successfully\") {\n          toast.success(\"Partner Updated successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          props.setApiCall(true);\n          return close();\n        }\n        // if (responseData.message === \"agent already exists\") {\n        //   setAlready(\"agent already exists\");\n        //   setLoading(false);\n        // }\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n    }\n  };\n  // END USER agent PROFILE UPDATE VALIDATION\n  return (\n    <>\n      <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n        {props.agentId === \"0\" ? (\n          <h5 className=\"text-center pt-2 mb-7\">Add Partner</h5>\n        ) : (\n          <h5 className=\"text-center pt-2 mb-7\">Update Partner</h5>\n        )}\n        <form onSubmit={onAgentProfileUpdateClick}>\n          <div className=\"form-group mx-auto text-center\">\n            <div className=\"mb-4 position-relative\">\n              <input\n                type={\"file\"}\n                id=\"profile_image\"\n                accept=\"image/png,image/jpeg,image/jpg,image/gif\"\n                onChange={handleFileChange}\n                className=\"d-none\"\n              />\n              <img\n                className=\"rounded-circle\"\n                src={\n                  state.profile_image\n                    ? state.profile_image\n                    : \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png\"\n                }\n                alt=\"\"\n                width={\"100px\"}\n                height={\"100px\"}\n              />\n              <label\n                className=\"mt-lg-20 mx-lg-31\n                   bg-transparent edit_profile_icon\"\n                htmlFor=\"profile_image\"\n              >\n                <span className=\"fas fa-pen text-white bg-gray p-1 rounded mx-lg-1 mt-lg-3 \"></span>\n              </label>\n            </div>\n            <small className=\"text-danger\">{imgError}</small>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-group col-md-6\">\n              <label\n                htmlFor=\"name\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                Partner's Name <span className=\"text-danger\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                className={\n                  errors.name\n                    ? \"form-control border border-danger\"\n                    : \"form-control\"\n                }\n                value={state.name}\n                onChange={onInputChange}\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"eg. Apple\"\n                maxLength={60}\n              />\n              {/*----ERROR MESSAGE FOR agent Name----*/}\n              {errors.name && (\n                <span key={errors.name} className=\"text-danger font-size-3\">\n                  {errors.name}\n                </span>\n              )}\n            </div>\n            <div className=\"form-group col-md-6\">\n              <label\n                htmlFor=\"contact_no\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                Contact No <span className=\"text-danger\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                className={\n                  errors.contact_no\n                    ? \"form-control border border-danger\"\n                    : \"form-control\"\n                }\n                value={state.contact_no}\n                onChange={onInputChange}\n                id=\"contact_no\"\n                name=\"contact_no\"\n                min={0}\n                placeholder=\"Enter contact no\"\n                maxLength={13}\n              />\n              {/*----ERROR MESSAGE FOR agent Name----*/}\n              {errors.contact_no && (\n                <span\n                  key={errors.contact_no}\n                  className=\"text-danger font-size-3\"\n                >\n                  {errors.contact_no}\n                </span>\n              )}\n            </div>\n            <div className=\"form-group col-md-6 \">\n              <label\n                htmlFor=\"email\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                E-mail Id<span className=\"text-danger\">*</span> :\n              </label>\n              <input\n                className={\n                  errors.email\n                    ? \"form-control border border-danger\"\n                    : \"form-control\"\n                }\n                value={state.email}\n                onChange={onInputChange}\n                id=\"email\"\n                name=\"email\"\n                type={\"email\"}\n                // disabled={props.agentId === \"0\" ? false : true}\n                placeholder=\"Enter email address\"\n                maxLength={60}\n              />\n              {/*----ERROR MESSAGE FOR EMAIL----*/}\n              {errors.email && (\n                <span key={errors.email} className=\"text-danger font-size-3\">\n                  {errors.email}\n                </span>\n              )}\n            </div>\n            {/* {state.agent_id ? null : (\n              <div className=\"form-group col-md-6 \">\n                <label\n                  htmlFor=\"password\"\n                  className=\"font-size-4 text-black-2  line-height-reset\"\n                >\n                  Password <span className=\"text-danger\">*</span> :\n                </label>\n                <div className=\"position-relative\">\n                  <input\n                    type={showPassword ? \"text\" : \"password\"}\n                    className={\n                      errors.password\n                        ? \"form-control border border-danger\"\n                        : \"form-control\"\n                    }\n                    value={state.password}\n                    onChange={onInputChange}\n                    id=\"password\"\n                    name=\"password\"\n                  />\n                  <span className=\"password-icon\" onClick={toggleShowPassword}>\n                    {renderIcon()}\n                  </span>\n                </div>\n                // {/*----ERROR MESSAGE FOR agent PASSWORD----*\n                {errors.password && (\n                  <span\n                    key={errors.password}\n                    className=\"text-danger font-size-3\"\n                  >\n                    {errors.password}\n                  </span>\n                )}\n              </div>\n            )} */}\n            {/* <div className=\"form-group col-md-6 \">\n                <label\n                  htmlFor=\"type\"\n                  className=\"font-size-4 text-black-2  line-height-reset\"\n                >\n                  Type <span className=\"text-danger\">*</span> :\n                </label>\n                <select\n                  type={\"text\"}\n                  className={\n                    errors.type\n                      ? \"form-control border border-danger text-capitalize\"\n                      : \"form-control\"\n                  }\n                  value={state.type}\n                  onChange={onInputChange}\n                  id=\"type\"\n                  name=\"type\"\n                  multiple={false}\n                >\n                  <option value={\"\"}>Select</option>\n                  <option value={\"agent\"}>Agent</option>\n                  {/* {(filterjson.agenttype || []).map((item, index) => {\n                  return (\n                    <option\n                      value={item}\n                      key={index}\n                      className=\" text-capitalize\"\n                    >\n                      {item}\n                    </option>\n                  );\n                })} \n                </select>\n                {/*----ERROR MESSAGE FOR agent TYPE----\n                {errors.type && (\n                  <span key={errors.type} className=\"text-danger font-size-3\">\n                    {errors.type}\n                  </span>\n                )}\n              </div> */}\n            <div className=\"form-group col-md-6 \">\n              <label\n                htmlFor=\"type\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                Address <span className=\"text-danger\">*</span> :\n              </label>\n              <input\n                type={\"text\"}\n                className={\n                  errors.address\n                    ? \"form-control border border-danger text-capitalize\"\n                    : \"form-control\"\n                }\n                value={state.address}\n                onChange={onInputChange}\n                id=\"address\"\n                name=\"address\"\n                placeholder=\"Current Address\"\n              />\n\n              {/*----ERROR MESSAGE FOR ADDRESS----*/}\n              {errors.address && (\n                <span key={errors.address} className=\"text-danger font-size-3\">\n                  {errors.address}\n                </span>\n              )}\n            </div>\n            <div className=\"form-group col-md-6 \">\n              <label\n                htmlFor=\"type\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                Country <span className=\"text-danger\">*</span> :\n              </label>\n              <input\n                type={\"text\"}\n                className={\n                  errors.country\n                    ? \"form-control border border-danger text-capitalize\"\n                    : \"form-control\"\n                }\n                value={state.country}\n                onChange={onInputChange}\n                id=\"country\"\n                name=\"country\"\n                placeholder=\"Current Country\"\n                maxLength={60}\n              />\n\n              {/*----ERROR MESSAGE FOR COUNTRY----*/}\n              {errors.country && (\n                <span key={errors.country} className=\"text-danger font-size-3\">\n                  {errors.country}\n                </span>\n              )}\n            </div>\n            <div className=\"form-group col-md-6 \">\n              <label\n                htmlFor=\"type\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                State <span className=\"text-danger\">*</span> :\n              </label>\n              <input\n                type={\"text\"}\n                className={\n                  errors.state\n                    ? \"form-control border border-danger text-capitalize\"\n                    : \"form-control\"\n                }\n                value={state.state}\n                onChange={onInputChange}\n                id=\"state\"\n                name=\"state\"\n                placeholder=\"Current state\"\n                maxLength={60}\n              />\n\n              {/*----ERROR MESSAGE FOR STATE----*/}\n              {errors.state && (\n                <span key={errors.state} className=\"text-danger font-size-3\">\n                  {errors.state}\n                </span>\n              )}\n            </div>\n            <div className=\"form-group col-md-6 \">\n              <label\n                htmlFor=\"type\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                City <span className=\"text-danger\">*</span> :\n              </label>\n              <input\n                type={\"text\"}\n                className={\n                  errors.city\n                    ? \"form-control border border-danger text-capitalize\"\n                    : \"form-control\"\n                }\n                value={state.city}\n                onChange={onInputChange}\n                id=\"city\"\n                name=\"city\"\n                placeholder=\"Current city\"\n                maxLength={60}\n              />\n\n              {/*----ERROR MESSAGE FOR City----*/}\n              {errors.city && (\n                <span key={errors.city} className=\"text-danger font-size-3\">\n                  {errors.city}\n                </span>\n              )}\n            </div>\n          </div>\n          <div className=\"form-group text-center\">\n            {loading === true ? (\n              <button\n                className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                type=\"button\"\n                disabled\n              >\n                <span\n                  className=\"spinner-border spinner-border-sm \"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n                <span className=\"sr-only\">Loading...</span>\n              </button>\n            ) : (\n              <button\n                className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                type=\"submit\"\n              >\n                Submit\n              </button>\n            )}\n          </div>\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default AddNewAgent;\n"
        }
    ]
}