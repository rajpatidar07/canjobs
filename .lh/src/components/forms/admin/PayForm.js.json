{
    "sourceFile": "src/components/forms/admin/PayForm.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710313133610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710313133610,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\nimport useValidation from \"../../common/useValidation\";\nimport { toast } from \"react-toastify\";\nimport { useLocation, useNavigate, Link } from \"react-router-dom\";\nimport {\n  CreateRazorpay,\n  AddRazorpay,\n  GetStripePaymentDetails,\n} from \"../../../api/api\";\nimport PayPalButton from \"../../common/PayPal\";\nimport { SiRazorpay } from \"react-icons/si\";\nimport StripePay from \"../../common/Stripe\";\nimport { FaStripe } from \"react-icons/fa\";\nimport BraintreeDropIn from \"../../common/braintreepayment\";\nexport default function PayForm({ setApicall, data, user, user_id }) {\n  const [loading, setLoading] = useState(false);\n  const [stripePayment, setStripePayment] = useState(false);\n  const [braintreePayment, setBraintreePayment] = useState(false);\n  const [stopStripePayment, setStopStripePayment] = useState(true);\n\n  const navigate = useNavigate();\n  let location = useLocation();\n  // let name = localStorage.getItem(\"name\")\n  /*Initial state */\n  const initialFormState = {\n    amount: \"\",\n    // method: \"\",\n  };\n\n  /*Validation */\n  const validators = {\n    amount: [\n      (value) =>\n        value === \"\" || value === null || value.trim() === \"\"\n          ? \"amount is required\"\n          : \"\",\n    ],\n    // method: [\n    //   (value) =>\n    //     value === \"\" || value === null || value.trim() === \"\"\n    //       ? \"method is required\"\n    //       : \"\",\n    // ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState, onInputChange, errors, setErrors, validate } =\n    useValidation(initialFormState, validators);\n\n  /*Function to made razor pay payment*/\n  const onPayentClick = async (e) => {\n    // console.log(errors, data);\n    if (validate() && (data.name || data.company_name)) {\n      const script = document.createElement(\"script\");\n      script.src = \"https://checkout.razorpay.com/v1/checkout.js\";\n      script.onerror = () => {\n        alert(\"RazorPay SDK failed to load\");\n      };\n      script.onload = async () => {\n        try {\n          setLoading(true);\n          // const total = userData.cart.reduce((a, b) => a + +b.price, 0).toFixed(0);\n          const result = await CreateRazorpay(state.amount, \"USD\");\n          const { amount, id: orderId, currency } = result.data.data;\n          // const getkey = await axios.get(\"http://localhost:8080/payment/get-razorpay-key\");\n          const key = \"rzp_test_m5J59Uvpq9YHDx\";\n          const options = {\n            key: key,\n            amount: amount.toString(),\n            currency: currency,\n            name: user === \"employee\" ? data.name : data.company_name,\n            description: \"FIRST RAZOR PAY\",\n            order_id: orderId,\n            handler: async function (response) {\n              await AddRazorpay(amount, response, user);\n              // Perform any additional actions on successful payment here\n              toast.success(\"Payment Successful.\", {\n                position: toast.POSITION.TOP_RIGHT,\n                autoClose: 5000,\n              });\n              setState(initialFormState);\n              setApicall(true);\n              navigate(location.pathname);\n            },\n            prefill: {\n              name: user === \"employee\" ? data.name : data.company_name,\n              email: data.email,\n              contact:\n                user === \"employee\" ? data.contact_contact_no : data.contact_no,\n            },\n          };\n          setLoading(false);\n          const paymentObject = new window.Razorpay(options);\n          paymentObject.open();\n        } catch (error) {\n          console.log(error);\n          setLoading(false);\n        }\n      };\n      document.body.appendChild(script);\n    }\n    if (!data) {\n      toast.error(\"Please complete your profile first\", {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: 6000,\n      });\n    } else {\n      setLoading(false);\n    }\n  };\n\n  /*Function to send the amount to paypal component */\n  function getAmt() {\n    return new Promise((resolve, reject) => {\n      var amount_value = document.getElementById(\"amount\").value;\n\n      resolve(amount_value);\n    });\n  }\n  /*COde to set the sripe payment details to the database */\n  let params = new URLSearchParams(window.location.search);\n  let piId = params.get(\"payment_intent\");\n  /*Function to get strie payment details */\n  const GetStripeDetails = async () => {\n    try {\n      let res = await GetStripePaymentDetails(\n        piId,\n        user_id,\n        user,\n        \"Stripe pay\",\n        \"success\"\n      );\n      if (res.status === (200 || \"200\")) {\n        setApicall(true);\n        setStripePayment(false);\n        /*code to remove the url params from url */\n        const paramsToRemove = [\n          \"payment_intent\",\n          \"payment_intent_client_secret\",\n          \"redirect_status\",\n        ];\n        const url = new URL(window.location.href);\n\n        paramsToRemove.forEach((param) => url.searchParams.delete(param));\n\n        window.history.replaceState({}, document.title, url.toString());\n        setStopStripePayment(false);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  if (piId && stopStripePayment) {\n    GetStripeDetails();\n  }\n  return (\n    <form className=\"col-md-4 p-10\">\n      <label className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\">\n        Payment from: <span className=\"text-danger\">*</span>\n      </label>\n      <div className=\"row\">\n        <div\n          className={`col-6 text-capitalize`}\n          //   onClick={() => handleSubStageSelection(expandedStatus, subStage)}\n        >\n          <input\n            type=\"radio\"\n            className=\"mx-2\"\n            // checked={(selectedStatus || []).some(\n            //   (item) => item.substage === subStage\n            // )}\n            readOnly\n            name=\"nationality\"\n          />\n          Canada & US\n        </div>\n        <div\n          className={`col-6 text-capitalize`}\n          //   onClick={() => handleSubStageSelection(expandedStatus, subStage)}\n        >\n          <input\n            type=\"radio\"\n            className=\"mx-2\"\n            name=\"nationality\"\n            // checked={(selectedStatus || []).some(\n            //   (item) => item.substage === subStage\n            // )}\n            readOnly\n          />\n          Outside Canada\n        </div>\n      </div>\n      {/* <label\n        htmlFor=\"amount\"\n        className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n      >\n        Payment method: <span className=\"text-danger\">*</span>\n      </label>\n      <div className=\"row\">\n        <div></div>\n      </div>\n     <div className=\"row\">\n    <div\n      className={`col-6 text-capitalize`}\n      //   onClick={() => handleSubStageSelection(expandedStatus, subStage)}\n    >\n      <input\n        type=\"radio\"\n        className=\"mx-2\"\n        // checked={(selectedStatus || []).some(\n        //   (item) => item.substage === subStage\n        // )}\n        readOnly\n        name=\"upi\"\n      />\n     UPI\n    </div>\n    <div\n      className={`col-6 text-capitalize`}\n      //   onClick={() => handleSubStageSelection(expandedStatus, subStage)}\n    >\n      <input\n        type=\"radio\"\n        className=\"mx-2\"\n        name=\"paypal\"\n        // checked={(selectedStatus || []).some(\n        //   (item) => item.substage === subStage\n        // )}\n        readOnly\n      />\n      Paypal\n    </div>\n    <div\n      className={`col-6 text-capitalize`}\n      //   onClick={() => handleSubStageSelection(expandedStatus, subStage)}\n    >\n      <input\n        type=\"radio\"\n        className=\"mx-2\"\n        name=\"banking\"\n        // checked={(selectedStatus || []).some(\n        //   (item) => item.substage === subStage\n        // )}\n        readOnly\n      />\n      Net bankink\n    </div>\n    </div> */}\n      <div className=\"m-3\">\n        <label\n          htmlFor=\"amount\"\n          className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n        >\n          Amount: <span className=\"text-danger\">*</span>\n        </label>\n        <div className=\"position-relative\">\n          <div\n            className={\n              errors.amount\n                ? \"border border-danger rounded overflow-hidden\"\n                : \"border rounded overflow-hidden\"\n            }\n          >\n            <input\n              name=\"amount\"\n              value={state.amount}\n              onChange={onInputChange}\n              type=\"number\"\n              min={0}\n              className={\n                errors.amount\n                  ? \"form-control border border-danger hide-spin-buttons\"\n                  : \"form-control hide-spin-buttons\"\n              }\n              id=\"amount\"\n              maxLength={10}\n            ></input>\n          </div>\n          {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n          {errors.amount && (\n            <span key={errors.amount} className=\"text-danger font-size-3\">\n              {errors.amount}\n            </span>\n          )}\n        </div>\n      </div>\n      <div className=\"text-center\">\n        {stripePayment && state.amount ? (\n          <StripePay\n            amount={state.amount}\n            getAmt={getAmt}\n            setErrors={setErrors}\n            errors={errors}\n            setApicall={setApicall}\n            setState={setState}\n            state={state}\n            setStripePayment={setStripePayment}\n          />\n        ) : braintreePayment && state.amount ? (\n          <BraintreeDropIn\n            amount={state.amount}\n            getAmt={getAmt}\n            setErrors={setErrors}\n            errors={errors}\n            setApicall={setApicall}\n            setState={setState}\n            state={state}\n            setBraintreePayment={setBraintreePayment}\n            show={braintreePayment}\n            user_id={user_id}\n            user={user}\n          />\n        ) : (\n          <>\n            {loading === true ? (\n              <button\n                className=\"btn btn-secondary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n                type=\"button\"\n                disabled\n              >\n                <span\n                  className=\"spinner-border spinner-border-sm \"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n                <span className=\"sr-only\">Loading...</span>\n              </button>\n            ) : (\n              <button\n                onClick={(e) => onPayentClick(e)}\n                className=\"btn btn-secondary btn-small w-100 mb-5 rounded-5 text-uppercase\"\n                type=\"button\"\n                title=\"Razor pay\"\n              >\n                <SiRazorpay />\n              </button>\n            )}\n            <button\n              type=\"button\"\n              onClick={() =>\n                state.amount\n                  ? setStripePayment(true)\n                  : setErrors({\n                      ...errors,\n                      amount: \"Please set the amount before payment\",\n                    })\n              }\n              className=\"btn btn-info btn-small w-100 mb-5 rounded-5 text-uppercase\"\n              title=\"Stripe pay\"\n            >\n              <FaStripe style={{ fontSize: \"-webkit-xxx-large\" }} />\n            </button>\n\n            <Link\n              type=\"button\"\n              onClick={() =>\n                state.amount\n                  ? setBraintreePayment(true)\n                  : setErrors({\n                      ...errors,\n                      amount: \"Please set the amount before payment\",\n                    })\n              }\n              className=\"w-100 mb-5 rounded-5 text-uppercase\"\n              title=\"Braintree pay\"\n            >\n              <img\n                src=\"https://s3.amazonaws.com/braintree-badges/braintree-badge-wide-dark.png\"\n                width=\"100%\"\n                height=\"50px\"\n                alt=\"Braintree\"\n              />\n            </Link>\n\n            <PayPalButton\n              amount={Number(state.amount)}\n              getAmt={getAmt}\n              setErrors={setErrors}\n              error={errors}\n              setApicall={setApicall}\n              setState={setState}\n              state={state}\n              user_id={user_id}\n              user={user}\n            />\n          </>\n        )}\n      </div>\n    </form>\n  );\n}\n"
        }
    ]
}