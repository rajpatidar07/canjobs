{
    "sourceFile": "src/components/forms/admin/lmiastatus.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1692954318165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692954385864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,12 +220,9 @@\n           props.setApiCall(true)\n             close()\n         }\n       } catch (err) {\n-        toast.error(\"Something went wrong\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n+        console.log(err)\n         setLoading(false)\n       }\n     } else {\n       setLoading(false);\n"
                },
                {
                    "date": 1692954398588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,544 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Modal } from \"react-bootstrap\";\n+import useValidation from \"../../common/useValidation\";\n+import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n+import { toast } from \"react-toastify\";\n+import { useLocation } from \"react-router-dom\"\n+import \"react-toastify/dist/ReactToastify.css\";\n+import FilterJson from \"../../json/filterjson\";\n+import LmiaTime from \"../../common/lmiaTime\";\n+import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n+function LmiaStatus(props) {\n+  let [loading, setLoading] = useState(false);\n+  let [apiCall, setApiCall] = useState(false);\n+  const [selectedStatus, setSelectedStatus] = useState([]);\n+  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n+  let employeeId =\n+    props.resData === undefined ? null : props.resData.employee_id;\n+  let lmia_status = props.resData.lmia_status\n+  // let completion_time = props.resData.expected_time_of_completion\n+  let location = useLocation()\n+  let jobId = props.resData.job_id;\n+  // const [company] = useState([]);\n+  // eslint-disable-next-line\n+  let isExpanded = false\n+\n+  /*Function to get lima sub stage */\n+  const GetSubSTage = async () => {\n+    try {\n+      let Response\n+      if (props.job === \"yes\") {\n+        Response = await GetJobLimaSubStages(jobId, lmia_status)\n+      } else {\n+        Response = await GetLimaSubStages(props.resData.id)\n+      }\n+      setSelectedStatus(Response.data.data)\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  }\n+\n+  // Function to handle checkbox selection\n+  const handleSubStageSelection = async (status, subStage) => {\n+    const isSelected = selectedStatus.some(\n+      (item) => item.lmia_status === status && item.lmia_substage === subStage\n+    );\n+    let data;\n+    /*Condition to check the selected substages */\n+    if (isSelected) {\n+      setSelectedStatus(\n+        selectedStatus.filter(\n+          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n+        )\n+      );\n+      let id = selectedStatus.filter(\n+        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n+      )[0].id\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          id: id,\n+          job_id: jobId,\n+          lmia_substage: \"false\",\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Job lima sub stages */\n+        data = {\n+          id: id,\n+          lmia_id: props.resData.id,\n+          lmia_substage: \"false\",\n+          lmia_status: status\n+        }\n+      }\n+    } else {\n+      setSelectedStatus([\n+        ...selectedStatus,\n+        { status: status, subStage: subStage },\n+      ]);\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          job_id: jobId,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Employee lima sub stages */\n+        data = {\n+          lmia_id: props.resData.id,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      }\n+    }\n+    try {\n+      let Response\n+      /*APi called */\n+      if (props.job === \"yes\") {\n+        Response = await AddUpdateJobLmiaSubStage(data)\n+      } else {\n+        Response = await AddUpdateEmployeeLmiaSubStage(data)\n+      }\n+      /*Removed sub stage response */\n+      if (Response.message === \"updated successfully\") {\n+        toast.success(\"Lmia Sub Stage Removed successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+      /*Added sub stage response */\n+      if (Response.message === 'insert successfully') {\n+        toast.success(\"Lmia Sub Stage Added successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  };\n+  // console.log(\"Sub Stages =>\", selectedStatus)\n+  /* Functionality to close the modal */\n+  const close = () => {\n+    setState({ ...state, lmia_status: \"\" });\n+    setErrors(\"\");\n+    setLoading(false);\n+    props.close();\n+  };\n+  // USER LIMIA UPDATE VALIDATION\n+  useEffect(() => {\n+    GetSubSTage()\n+    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n+    if (apiCall === true) {\n+      setApiCall(false)\n+    }\n+  }, [apiCall, lmia_status]);\n+\n+  useEffect(() => { }, [])\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    lmia_status: \"\",\n+    // completion_time: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    lmia_status: [\n+      (value) =>\n+        value === \"\" || value === null\n+          ? \"Lmia status is required\"\n+          : \"\",\n+    ],\n+    // completion_time: [\n+    //   (value) =>\n+    //     value === \"\" || value === null \n+    //       ? \"Expected time of completion is required\"\n+    //       : \"\",\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n+  const onLmiaUpdateClick = async (event) => {\n+    event.preventDefault();\n+    if (validate() && props.job === \"yes\") {\n+      let data = {\n+        // completion_time: state.completion_time,\n+        lmia_status: state.lmia_status,\n+        job_id: jobId\n+      }\n+      try {\n+        let responseData = await AddJob(data);\n+        if (responseData.message === \"job data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+            close()\n+        }\n+      } catch (err) {\n+        toast.error(\"Something went wrong\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+      }\n+    }\n+    if (validate()) {\n+      setLoading(true);\n+      try {\n+        const responseData = await AddLimia(state, employeeId, jobId);\n+        if (responseData.message === \"Data added successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+            close()\n+        }\n+        if (responseData.message === \"Data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+            close()\n+        }\n+      } catch (err) {\n+        console.log(err)\n+        setLoading(false)\n+      }\n+    } else {\n+      setLoading(false);\n+    }\n+\n+  };\n+  // END LIMIA VALIDATION\n+\n+\n+  return (\n+    <>\n+      <Modal\n+        show={props.show}\n+        size=\"lg\"\n+        aria-labelledby=\"contained-modal-title-vcenter\"\n+        centered\n+      >\n+        <button\n+          type=\"button\"\n+          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n+          data-dismiss=\"modal\"\n+          onClick={close}\n+        >\n+          <i className=\"fas fa-times\"></i>\n+        </button>\n+        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n+\n+          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n+          <LmiaTime lmia={state.lmia_status}\n+            job={props.job}\n+            location={location.pathname} />\n+          <form onSubmit={onLmiaUpdateClick}>\n+            {expandedStatus && (\n+              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n+              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n+              //     <div\n+              //       key={j}\n+              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n+              //         (item) =>\n+              //           item.lmia_substage === subStage\n+              //       )\n+              //         ? 'selected'\n+              //         : ''\n+              //         }`}\n+              //       onClick={() =>\n+              //         handleSubStageSelection(expandedStatus, subStage)\n+              //       }\n+              //     >\n+\n+              //       <input\n+              //         type=\"checkbox\"\n+              //         className='mx-2'\n+              //         checked={(selectedStatus || []).some(\n+              //           (item) =>\n+              //             // item.lmia_status === expandedStatus &&\n+              //             item.lmia_substage === subStage\n+              //         )}\n+              //         readOnly\n+              //       />{subStage}\n+              //     </div>\n+              //   ))}\n+              // </div>\n+              <LmiaSubStageSelector\n+              expandedStatus={expandedStatus}\n+              selectedStatus={selectedStatus}\n+              FilterJson={FilterJson}\n+              handleSubStageSelection={handleSubStageSelection}\n+            />\n+            )}\n+            <div className=\"form-group \">\n+              <label\n+                htmlFor=\"lmia_status\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Lmia status <span className=\"text-danger\">*</span>:\n+              </label>\n+              <select\n+                type={\"text\"}\n+                className={\n+                  errors.lmia_status\n+                    ? \"form-control text-capitalize border border-danger\"\n+                    : \"form-control text-capitalize\"\n+                }\n+                value={state.lmia_status || \"\"}\n+                onChange={(e) => {\n+                  setState({ ...state, lmia_status: e.target.value });\n+                  setExpandedStatus(e.target.value);\n+                }}\n+                id=\"lmia_status\"\n+                name=\"lmia_status\"\n+                multiple={false}\n+              >\n+                <option value={\"\"}>Select lmia status</option>\n+                {(FilterJson.lmia_status || []).map((status, i) => {\n+                  isExpanded = expandedStatus === status\n+                  return (\n+                    props.job === \"yes\" ? (i <= 2 && (\n+                      <option value={status} key={i}\n+                      >\n+\n+                        {status}\n+                      </option>\n+                    )) : (i > 2 && (\n+                      <option value={status} key={i}\n+                      >\n+                        {status}\n+                      </option>\n+                    ))\n+                  )\n+                })}\n+              </select>\n+              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n+              {errors.lmia_status && (\n+                <span\n+                  key={errors.lmia_status}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.lmia_status}\n+                </span>\n+              )}\n+            </div>\n+\n+            {/* <div className=\"form-group mt-5\">\n+              <label\n+                htmlFor=\"completion_time\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Expected time of completion<span className=\"text-danger\">*</span>:\n+              </label>\n+              <input\n+                type=\"date\"\n+                className={\n+                  errors.completion_time\n+                    ? \"form-control coustam_datepicker border border-danger\"\n+                    : \"form-control coustam_datepicker\"\n+                }\n+                value={moment(state.completion_time).format(\"YYYY-MM-DD\") || \"\"}\n+                onChange={onInputChange}\n+                id=\"completion_time\"\n+                name=\"completion_time\"\n+                onKeyDownCapture={(e) => e.preventDefault()}\n+                min={moment().format(\"YYYY-MM-DD\")}\n+              />\n+              ----ERROR MESSAGE FOR Admin Name----\n+              {errors.completion_time && (\n+                <span\n+                  key={errors.completion_time}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.completion_time}\n+                </span>\n+              )}\n+            </div> */}\n+            {/* {state.lmia_status === \"complete\" ? (\n+              <>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"posted\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Posted :\n+                  </label>\n+                  <select\n+                    type={\"text\"}\n+                    className={\n+                      errors.posted\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.posted}\n+                    onChange={onInputChange}\n+                    id=\"posted\"\n+                    name=\"posted\"\n+                    multiple={false}\n+                  >\n+                    <option value={\"\"}>Select lmia status</option>\n+                    <option value={\"Yes\"}>Yes</option>\n+                    <option value={\"No\"}>No</option>\n+                  </select>\n+                  ----ERROR MESSAGE FOR LIMA STATUS----\n+                  {errors.posted && (\n+                    <span\n+                      key={errors.posted}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"job_category_id\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Company <span className=\"text-danger\"> *</span> :\n+                  </label>\n+                  <div className=\"position-relative\">\n+                    <select\n+                      name=\"posted_company_id\"\n+                      value={state.posted_company_id}\n+                      onChange={onInputChange}\n+                      className={\n+                        errors.posted_company_id\n+                          ? \" form-control border border-danger position-relative overflow-hidden\"\n+                          : \" form-control position-relative overflow-hidden\"\n+                      }\n+                      placeholder=\"company name\"\n+                      id=\"posted_company_id\"\n+                    >\n+                      <option value={\"\"}>Select Company</option>\n+                      {(company || []).map((com) => (\n+                        <option key={com.company_id} value={com.company_id}>\n+                          {com.company_name}\n+                        </option>\n+                      ))}\n+                    </select>\n+                  </div>\n+                  ----ERROR MESSAGE FOR COMPANY----\n+                  {errors.posted_company_id && (\n+                    <span\n+                      key={errors.posted_company_id}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted_company_id}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Date of posting :\n+                  </label>\n+                  <input\n+                    type={\"date\"}\n+                    className={\n+                      errors.date_of_posting\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.date_of_posting}\n+                    onChange={onInputChange}\n+                    id=\"date_of_posting\"\n+                    name=\"date_of_posting\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.date_of_posting && (\n+                    <span\n+                      key={errors.date_of_posting}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.date_of_posting}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Designation\n+                  </label>\n+                  <input\n+                    type={\"text\"}\n+                    className={\n+                      errors.designation\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.designation}\n+                    onChange={onInputChange}\n+                    id=\"designation\"\n+                    name=\"designation\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.designation && (\n+                    <span\n+                      key={errors.designation}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.designation}\n+                    </span>\n+                  )}\n+                </div>\n+              </>\n+            ) : null} */}\n+            <div className=\"form-group text-center\">\n+              {loading === true ? (\n+                <button\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"button\"\n+                  disabled\n+                >\n+                  <span\n+                    className=\"spinner-border spinner-border-sm \"\n+                    role=\"status\"\n+                    aria-hidden=\"true\"\n+                  ></span>\n+                  <span className=\"sr-only\">Loading...</span>\n+                </button>\n+              ) : (\n+                <button\n+                  onClick={onLmiaUpdateClick}\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"submit\"\n+                >\n+                  Submit\n+                </button>\n+              )}\n+            </div>\n+          </form>\n+        </div>\n+      </Modal>\n+    </>\n+  );\n+}\n+\n+export default LmiaStatus;\n"
                },
                {
                    "date": 1693029580236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,544 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Modal } from \"react-bootstrap\";\n+import useValidation from \"../../common/useValidation\";\n+import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n+import { toast } from \"react-toastify\";\n+import { useLocation } from \"react-router-dom\"\n+import \"react-toastify/dist/ReactToastify.css\";\n+import FilterJson from \"../../json/filterjson\";\n+import LmiaTime from \"../../common/lmiaTime\";\n+import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n+function LmiaStatus(props) {\n+  let [loading, setLoading] = useState(false);\n+  let [apiCall, setApiCall] = useState(false);\n+  const [selectedStatus, setSelectedStatus] = useState([]);\n+  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n+  let employeeId =\n+    props.resData === undefined ? null : props.resData.employee_id;\n+  let lmia_status = props.resData.lmia_status\n+  // let completion_time = props.resData.expected_time_of_completion\n+  let location = useLocation()\n+  let jobId = props.resData.job_id;\n+  // const [company] = useState([]);\n+  // eslint-disable-next-line\n+  let isExpanded = false\n+\n+  /*Function to get lima sub stage */\n+  const GetSubSTage = async () => {\n+    try {\n+      let Response\n+      if (props.job === \"yes\") {\n+        Response = await GetJobLimaSubStages(jobId, lmia_status)\n+      } else {\n+        Response = await GetLimaSubStages(props.resData.id)\n+      }\n+      setSelectedStatus(Response.data.data)\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  }\n+\n+  // Function to handle checkbox selection\n+  const handleSubStageSelection = async (status, subStage) => {\n+    const isSelected = selectedStatus.some(\n+      (item) => item.lmia_status === status && item.lmia_substage === subStage\n+    );\n+    let data;\n+    /*Condition to check the selected substages */\n+    if (isSelected) {\n+      setSelectedStatus(\n+        selectedStatus.filter(\n+          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n+        )\n+      );\n+      let id = selectedStatus.filter(\n+        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n+      )[0].id\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          id: id,\n+          job_id: jobId,\n+          lmia_substage: \"false\",\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Job lima sub stages */\n+        data = {\n+          id: id,\n+          lmia_id: props.resData.id,\n+          lmia_substage: \"false\",\n+          lmia_status: status\n+        }\n+      }\n+    } else {\n+      setSelectedStatus([\n+        ...selectedStatus,\n+        { status: status, subStage: subStage },\n+      ]);\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          job_id: jobId,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Employee lima sub stages */\n+        data = {\n+          lmia_id: props.resData.id,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      }\n+    }\n+    try {\n+      let Response\n+      /*APi called */\n+      if (props.job === \"yes\") {\n+        Response = await AddUpdateJobLmiaSubStage(data)\n+      } else {\n+        Response = await AddUpdateEmployeeLmiaSubStage(data)\n+      }\n+      /*Removed sub stage response */\n+      if (Response.message === \"updated successfully\") {\n+        toast.success(\"Lmia Sub Stage Removed successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+      /*Added sub stage response */\n+      if (Response.message === 'insert successfully') {\n+        toast.success(\"Lmia Sub Stage Added successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  };\n+  // console.log(\"Sub Stages =>\", selectedStatus)\n+  /* Functionality to close the modal */\n+  const close = () => {\n+    setState({ ...state, lmia_status: \"\" });\n+    setErrors(\"\");\n+    setLoading(false);\n+    props.close();\n+  };\n+  // USER LIMIA UPDATE VALIDATION\n+  useEffect(() => {\n+    GetSubSTage()\n+    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n+    if (apiCall === true) {\n+      setApiCall(false)\n+    }\n+  }, [apiCall, lmia_status]);\n+\n+  useEffect(() => { }, [])\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    lmia_status: \"\",\n+    // completion_time: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    lmia_status: [\n+      (value) =>\n+        value === \"\" || value === null\n+          ? \"Lmia status is required\"\n+          : \"\",\n+    ],\n+    // completion_time: [\n+    //   (value) =>\n+    //     value === \"\" || value === null \n+    //       ? \"Expected time of completion is required\"\n+    //       : \"\",\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n+  const onLmiaUpdateClick = async (event) => {\n+    event.preventDefault();\n+    if (validate() && props.job === \"yes\") {\n+      let data = {\n+        // completion_time: state.completion_time,\n+        lmia_status: state.lmia_status,\n+        job_id: jobId\n+      }\n+      try {\n+        let responseData = await AddJob(data);\n+        if (responseData.message === \"job data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+      } catch (err) {\n+        toast.error(\"Something went wrong\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+      }\n+    }\n+    if (validate()) {\n+      setLoading(true);\n+      try {\n+        const responseData = await AddLimia(state, employeeId, jobId);\n+        if (responseData.message === \"Data added successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+        if (responseData.message === \"Data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+      } catch (err) {\n+        console.log(err)\n+        setLoading(false)\n+      }\n+    } else {\n+      setLoading(false);\n+    }\n+\n+  };\n+  // END LIMIA VALIDATION\n+\n+\n+  return (\n+    <>\n+      <Modal\n+        show={props.show}\n+        size=\"lg\"\n+        aria-labelledby=\"contained-modal-title-vcenter\"\n+        centered\n+      >\n+        <button\n+          type=\"button\"\n+          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n+          data-dismiss=\"modal\"\n+          onClick={close}\n+        >\n+          <i className=\"fas fa-times\"></i>\n+        </button>\n+        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n+\n+          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n+          <LmiaTime lmia={state.lmia_status}\n+            job={props.job}\n+            location={location.pathname} />\n+          <form onSubmit={onLmiaUpdateClick}>\n+            {expandedStatus && (\n+              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n+              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n+              //     <div\n+              //       key={j}\n+              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n+              //         (item) =>\n+              //           item.lmia_substage === subStage\n+              //       )\n+              //         ? 'selected'\n+              //         : ''\n+              //         }`}\n+              //       onClick={() =>\n+              //         handleSubStageSelection(expandedStatus, subStage)\n+              //       }\n+              //     >\n+\n+              //       <input\n+              //         type=\"checkbox\"\n+              //         className='mx-2'\n+              //         checked={(selectedStatus || []).some(\n+              //           (item) =>\n+              //             // item.lmia_status === expandedStatus &&\n+              //             item.lmia_substage === subStage\n+              //         )}\n+              //         readOnly\n+              //       />{subStage}\n+              //     </div>\n+              //   ))}\n+              // </div>\n+              <LmiaSubStageSelector\n+                expandedStatus={expandedStatus}\n+                selectedStatus={selectedStatus}\n+                FilterJson={FilterJson}\n+                handleSubStageSelection={handleSubStageSelection}\n+              />\n+            )}\n+            <div className=\"form-group \">\n+              <label\n+                htmlFor=\"lmia_status\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Lmia status <span className=\"text-danger\">*</span>:\n+              </label>\n+              <select\n+                type={\"text\"}\n+                className={\n+                  errors.lmia_status\n+                    ? \"form-control text-capitalize border border-danger\"\n+                    : \"form-control text-capitalize\"\n+                }\n+                value={state.lmia_status || \"\"}\n+                onChange={(e) => {\n+                  setState({ ...state, lmia_status: e.target.value });\n+                  setExpandedStatus(e.target.value);\n+                }}\n+                id=\"lmia_status\"\n+                name=\"lmia_status\"\n+                multiple={false}\n+              >\n+                <option value={\"\"}>Select lmia status</option>\n+                {(FilterJson.lmia_status || []).map((status, i) => {\n+                  isExpanded = expandedStatus === status\n+                  return (\n+                    props.job === \"yes\" ? (i <= 2 && (\n+                      <option value={status} key={i}\n+                      >\n+\n+                        {status}\n+                      </option>\n+                    )) : (i > 2 && (\n+                      <option value={status} key={i}\n+                      >\n+                        {status}\n+                      </option>\n+                    ))\n+                  )\n+                })}\n+              </select>\n+              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n+              {errors.lmia_status && (\n+                <span\n+                  key={errors.lmia_status}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.lmia_status}\n+                </span>\n+              )}\n+            </div>\n+\n+            {/* <div className=\"form-group mt-5\">\n+              <label\n+                htmlFor=\"completion_time\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Expected time of completion<span className=\"text-danger\">*</span>:\n+              </label>\n+              <input\n+                type=\"date\"\n+                className={\n+                  errors.completion_time\n+                    ? \"form-control coustam_datepicker border border-danger\"\n+                    : \"form-control coustam_datepicker\"\n+                }\n+                value={moment(state.completion_time).format(\"YYYY-MM-DD\") || \"\"}\n+                onChange={onInputChange}\n+                id=\"completion_time\"\n+                name=\"completion_time\"\n+                onKeyDownCapture={(e) => e.preventDefault()}\n+                min={moment().format(\"YYYY-MM-DD\")}\n+              />\n+              ----ERROR MESSAGE FOR Admin Name----\n+              {errors.completion_time && (\n+                <span\n+                  key={errors.completion_time}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.completion_time}\n+                </span>\n+              )}\n+            </div> */}\n+            {/* {state.lmia_status === \"complete\" ? (\n+              <>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"posted\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Posted :\n+                  </label>\n+                  <select\n+                    type={\"text\"}\n+                    className={\n+                      errors.posted\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.posted}\n+                    onChange={onInputChange}\n+                    id=\"posted\"\n+                    name=\"posted\"\n+                    multiple={false}\n+                  >\n+                    <option value={\"\"}>Select lmia status</option>\n+                    <option value={\"Yes\"}>Yes</option>\n+                    <option value={\"No\"}>No</option>\n+                  </select>\n+                  ----ERROR MESSAGE FOR LIMA STATUS----\n+                  {errors.posted && (\n+                    <span\n+                      key={errors.posted}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"job_category_id\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Company <span className=\"text-danger\"> *</span> :\n+                  </label>\n+                  <div className=\"position-relative\">\n+                    <select\n+                      name=\"posted_company_id\"\n+                      value={state.posted_company_id}\n+                      onChange={onInputChange}\n+                      className={\n+                        errors.posted_company_id\n+                          ? \" form-control border border-danger position-relative overflow-hidden\"\n+                          : \" form-control position-relative overflow-hidden\"\n+                      }\n+                      placeholder=\"company name\"\n+                      id=\"posted_company_id\"\n+                    >\n+                      <option value={\"\"}>Select Company</option>\n+                      {(company || []).map((com) => (\n+                        <option key={com.company_id} value={com.company_id}>\n+                          {com.company_name}\n+                        </option>\n+                      ))}\n+                    </select>\n+                  </div>\n+                  ----ERROR MESSAGE FOR COMPANY----\n+                  {errors.posted_company_id && (\n+                    <span\n+                      key={errors.posted_company_id}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted_company_id}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Date of posting :\n+                  </label>\n+                  <input\n+                    type={\"date\"}\n+                    className={\n+                      errors.date_of_posting\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.date_of_posting}\n+                    onChange={onInputChange}\n+                    id=\"date_of_posting\"\n+                    name=\"date_of_posting\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.date_of_posting && (\n+                    <span\n+                      key={errors.date_of_posting}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.date_of_posting}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Designation\n+                  </label>\n+                  <input\n+                    type={\"text\"}\n+                    className={\n+                      errors.designation\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.designation}\n+                    onChange={onInputChange}\n+                    id=\"designation\"\n+                    name=\"designation\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.designation && (\n+                    <span\n+                      key={errors.designation}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.designation}\n+                    </span>\n+                  )}\n+                </div>\n+              </>\n+            ) : null} */}\n+            <div className=\"form-group text-center\">\n+              {loading === true ? (\n+                <button\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"button\"\n+                  disabled\n+                >\n+                  <span\n+                    className=\"spinner-border spinner-border-sm \"\n+                    role=\"status\"\n+                    aria-hidden=\"true\"\n+                  ></span>\n+                  <span className=\"sr-only\">Loading...</span>\n+                </button>\n+              ) : (\n+                <button\n+                  onClick={onLmiaUpdateClick}\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"submit\"\n+                >\n+                  Submit\n+                </button>\n+              )}\n+            </div>\n+          </form>\n+        </div>\n+      </Modal>\n+    </>\n+  );\n+}\n+\n+export default LmiaStatus;\n"
                },
                {
                    "date": 1693029590080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -541,1092 +541,4 @@\n   );\n }\n \n export default LmiaStatus;\n-import React, { useEffect, useState } from \"react\";\n-import { Modal } from \"react-bootstrap\";\n-import useValidation from \"../../common/useValidation\";\n-import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n-import { toast } from \"react-toastify\";\n-import { useLocation } from \"react-router-dom\"\n-import \"react-toastify/dist/ReactToastify.css\";\n-import FilterJson from \"../../json/filterjson\";\n-import LmiaTime from \"../../common/lmiaTime\";\n-import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n-function LmiaStatus(props) {\n-  let [loading, setLoading] = useState(false);\n-  let [apiCall, setApiCall] = useState(false);\n-  const [selectedStatus, setSelectedStatus] = useState([]);\n-  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n-  let employeeId =\n-    props.resData === undefined ? null : props.resData.employee_id;\n-  let lmia_status = props.resData.lmia_status\n-  // let completion_time = props.resData.expected_time_of_completion\n-  let location = useLocation()\n-  let jobId = props.resData.job_id;\n-  // const [company] = useState([]);\n-  // eslint-disable-next-line\n-  let isExpanded = false\n-\n-  /*Function to get lima sub stage */\n-  const GetSubSTage = async () => {\n-    try {\n-      let Response\n-      if (props.job === \"yes\") {\n-        Response = await GetJobLimaSubStages(jobId, lmia_status)\n-      } else {\n-        Response = await GetLimaSubStages(props.resData.id)\n-      }\n-      setSelectedStatus(Response.data.data)\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  }\n-\n-  // Function to handle checkbox selection\n-  const handleSubStageSelection = async (status, subStage) => {\n-    const isSelected = selectedStatus.some(\n-      (item) => item.lmia_status === status && item.lmia_substage === subStage\n-    );\n-    let data;\n-    /*Condition to check the selected substages */\n-    if (isSelected) {\n-      setSelectedStatus(\n-        selectedStatus.filter(\n-          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n-        )\n-      );\n-      let id = selectedStatus.filter(\n-        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n-      )[0].id\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          job_id: jobId,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          lmia_id: props.resData.id,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n-      }\n-    } else {\n-      setSelectedStatus([\n-        ...selectedStatus,\n-        { status: status, subStage: subStage },\n-      ]);\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          job_id: jobId,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Employee lima sub stages */\n-        data = {\n-          lmia_id: props.resData.id,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      }\n-    }\n-    try {\n-      let Response\n-      /*APi called */\n-      if (props.job === \"yes\") {\n-        Response = await AddUpdateJobLmiaSubStage(data)\n-      } else {\n-        Response = await AddUpdateEmployeeLmiaSubStage(data)\n-      }\n-      /*Removed sub stage response */\n-      if (Response.message === \"updated successfully\") {\n-        toast.success(\"Lmia Sub Stage Removed successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-      /*Added sub stage response */\n-      if (Response.message === 'insert successfully') {\n-        toast.success(\"Lmia Sub Stage Added successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  };\n-  // console.log(\"Sub Stages =>\", selectedStatus)\n-  /* Functionality to close the modal */\n-  const close = () => {\n-    setState({ ...state, lmia_status: \"\" });\n-    setErrors(\"\");\n-    setLoading(false);\n-    props.close();\n-  };\n-  // USER LIMIA UPDATE VALIDATION\n-  useEffect(() => {\n-    GetSubSTage()\n-    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n-    if (apiCall === true) {\n-      setApiCall(false)\n-    }\n-  }, [apiCall, lmia_status]);\n-\n-  useEffect(() => { }, [])\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    lmia_status: \"\",\n-    // completion_time: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    lmia_status: [\n-      (value) =>\n-        value === \"\" || value === null\n-          ? \"Lmia status is required\"\n-          : \"\",\n-    ],\n-    // completion_time: [\n-    //   (value) =>\n-    //     value === \"\" || value === null \n-    //       ? \"Expected time of completion is required\"\n-    //       : \"\",\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n-  const onLmiaUpdateClick = async (event) => {\n-    event.preventDefault();\n-    if (validate() && props.job === \"yes\") {\n-      let data = {\n-        // completion_time: state.completion_time,\n-        lmia_status: state.lmia_status,\n-        job_id: jobId\n-      }\n-      try {\n-        let responseData = await AddJob(data);\n-        if (responseData.message === \"job data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-            close()\n-        }\n-      } catch (err) {\n-        toast.error(\"Something went wrong\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-      }\n-    }\n-    if (validate()) {\n-      setLoading(true);\n-      try {\n-        const responseData = await AddLimia(state, employeeId, jobId);\n-        if (responseData.message === \"Data added successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-            close()\n-        }\n-        if (responseData.message === \"Data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-            close()\n-        }\n-      } catch (err) {\n-        console.log(err)\n-        setLoading(false)\n-      }\n-    } else {\n-      setLoading(false);\n-    }\n-\n-  };\n-  // END LIMIA VALIDATION\n-\n-\n-  return (\n-    <>\n-      <Modal\n-        show={props.show}\n-        size=\"lg\"\n-        aria-labelledby=\"contained-modal-title-vcenter\"\n-        centered\n-      >\n-        <button\n-          type=\"button\"\n-          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n-          data-dismiss=\"modal\"\n-          onClick={close}\n-        >\n-          <i className=\"fas fa-times\"></i>\n-        </button>\n-        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n-\n-          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n-          <LmiaTime lmia={state.lmia_status}\n-            job={props.job}\n-            location={location.pathname} />\n-          <form onSubmit={onLmiaUpdateClick}>\n-            {expandedStatus && (\n-              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n-              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n-              //     <div\n-              //       key={j}\n-              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n-              //         (item) =>\n-              //           item.lmia_substage === subStage\n-              //       )\n-              //         ? 'selected'\n-              //         : ''\n-              //         }`}\n-              //       onClick={() =>\n-              //         handleSubStageSelection(expandedStatus, subStage)\n-              //       }\n-              //     >\n-\n-              //       <input\n-              //         type=\"checkbox\"\n-              //         className='mx-2'\n-              //         checked={(selectedStatus || []).some(\n-              //           (item) =>\n-              //             // item.lmia_status === expandedStatus &&\n-              //             item.lmia_substage === subStage\n-              //         )}\n-              //         readOnly\n-              //       />{subStage}\n-              //     </div>\n-              //   ))}\n-              // </div>\n-              <LmiaSubStageSelector\n-              expandedStatus={expandedStatus}\n-              selectedStatus={selectedStatus}\n-              FilterJson={FilterJson}\n-              handleSubStageSelection={handleSubStageSelection}\n-            />\n-            )}\n-            <div className=\"form-group \">\n-              <label\n-                htmlFor=\"lmia_status\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Lmia status <span className=\"text-danger\">*</span>:\n-              </label>\n-              <select\n-                type={\"text\"}\n-                className={\n-                  errors.lmia_status\n-                    ? \"form-control text-capitalize border border-danger\"\n-                    : \"form-control text-capitalize\"\n-                }\n-                value={state.lmia_status || \"\"}\n-                onChange={(e) => {\n-                  setState({ ...state, lmia_status: e.target.value });\n-                  setExpandedStatus(e.target.value);\n-                }}\n-                id=\"lmia_status\"\n-                name=\"lmia_status\"\n-                multiple={false}\n-              >\n-                <option value={\"\"}>Select lmia status</option>\n-                {(FilterJson.lmia_status || []).map((status, i) => {\n-                  isExpanded = expandedStatus === status\n-                  return (\n-                    props.job === \"yes\" ? (i <= 2 && (\n-                      <option value={status} key={i}\n-                      >\n-\n-                        {status}\n-                      </option>\n-                    )) : (i > 2 && (\n-                      <option value={status} key={i}\n-                      >\n-                        {status}\n-                      </option>\n-                    ))\n-                  )\n-                })}\n-              </select>\n-              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n-              {errors.lmia_status && (\n-                <span\n-                  key={errors.lmia_status}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.lmia_status}\n-                </span>\n-              )}\n-            </div>\n-\n-            {/* <div className=\"form-group mt-5\">\n-              <label\n-                htmlFor=\"completion_time\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Expected time of completion<span className=\"text-danger\">*</span>:\n-              </label>\n-              <input\n-                type=\"date\"\n-                className={\n-                  errors.completion_time\n-                    ? \"form-control coustam_datepicker border border-danger\"\n-                    : \"form-control coustam_datepicker\"\n-                }\n-                value={moment(state.completion_time).format(\"YYYY-MM-DD\") || \"\"}\n-                onChange={onInputChange}\n-                id=\"completion_time\"\n-                name=\"completion_time\"\n-                onKeyDownCapture={(e) => e.preventDefault()}\n-                min={moment().format(\"YYYY-MM-DD\")}\n-              />\n-              ----ERROR MESSAGE FOR Admin Name----\n-              {errors.completion_time && (\n-                <span\n-                  key={errors.completion_time}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.completion_time}\n-                </span>\n-              )}\n-            </div> */}\n-            {/* {state.lmia_status === \"complete\" ? (\n-              <>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"posted\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Posted :\n-                  </label>\n-                  <select\n-                    type={\"text\"}\n-                    className={\n-                      errors.posted\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.posted}\n-                    onChange={onInputChange}\n-                    id=\"posted\"\n-                    name=\"posted\"\n-                    multiple={false}\n-                  >\n-                    <option value={\"\"}>Select lmia status</option>\n-                    <option value={\"Yes\"}>Yes</option>\n-                    <option value={\"No\"}>No</option>\n-                  </select>\n-                  ----ERROR MESSAGE FOR LIMA STATUS----\n-                  {errors.posted && (\n-                    <span\n-                      key={errors.posted}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"job_category_id\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Company <span className=\"text-danger\"> *</span> :\n-                  </label>\n-                  <div className=\"position-relative\">\n-                    <select\n-                      name=\"posted_company_id\"\n-                      value={state.posted_company_id}\n-                      onChange={onInputChange}\n-                      className={\n-                        errors.posted_company_id\n-                          ? \" form-control border border-danger position-relative overflow-hidden\"\n-                          : \" form-control position-relative overflow-hidden\"\n-                      }\n-                      placeholder=\"company name\"\n-                      id=\"posted_company_id\"\n-                    >\n-                      <option value={\"\"}>Select Company</option>\n-                      {(company || []).map((com) => (\n-                        <option key={com.company_id} value={com.company_id}>\n-                          {com.company_name}\n-                        </option>\n-                      ))}\n-                    </select>\n-                  </div>\n-                  ----ERROR MESSAGE FOR COMPANY----\n-                  {errors.posted_company_id && (\n-                    <span\n-                      key={errors.posted_company_id}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted_company_id}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Date of posting :\n-                  </label>\n-                  <input\n-                    type={\"date\"}\n-                    className={\n-                      errors.date_of_posting\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.date_of_posting}\n-                    onChange={onInputChange}\n-                    id=\"date_of_posting\"\n-                    name=\"date_of_posting\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.date_of_posting && (\n-                    <span\n-                      key={errors.date_of_posting}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.date_of_posting}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Designation\n-                  </label>\n-                  <input\n-                    type={\"text\"}\n-                    className={\n-                      errors.designation\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.designation}\n-                    onChange={onInputChange}\n-                    id=\"designation\"\n-                    name=\"designation\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.designation && (\n-                    <span\n-                      key={errors.designation}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.designation}\n-                    </span>\n-                  )}\n-                </div>\n-              </>\n-            ) : null} */}\n-            <div className=\"form-group text-center\">\n-              {loading === true ? (\n-                <button\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"button\"\n-                  disabled\n-                >\n-                  <span\n-                    className=\"spinner-border spinner-border-sm \"\n-                    role=\"status\"\n-                    aria-hidden=\"true\"\n-                  ></span>\n-                  <span className=\"sr-only\">Loading...</span>\n-                </button>\n-              ) : (\n-                <button\n-                  onClick={onLmiaUpdateClick}\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"submit\"\n-                >\n-                  Submit\n-                </button>\n-              )}\n-            </div>\n-          </form>\n-        </div>\n-      </Modal>\n-    </>\n-  );\n-}\n-\n-export default LmiaStatus;\n-import React, { useEffect, useState } from \"react\";\n-import { Modal } from \"react-bootstrap\";\n-import useValidation from \"../../common/useValidation\";\n-import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n-import { toast } from \"react-toastify\";\n-import { useLocation } from \"react-router-dom\"\n-import \"react-toastify/dist/ReactToastify.css\";\n-import FilterJson from \"../../json/filterjson\";\n-import LmiaTime from \"../../common/lmiaTime\";\n-import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n-function LmiaStatus(props) {\n-  let [loading, setLoading] = useState(false);\n-  let [apiCall, setApiCall] = useState(false);\n-  const [selectedStatus, setSelectedStatus] = useState([]);\n-  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n-  let employeeId =\n-    props.resData === undefined ? null : props.resData.employee_id;\n-  let lmia_status = props.resData.lmia_status\n-  // let completion_time = props.resData.expected_time_of_completion\n-  let location = useLocation()\n-  let jobId = props.resData.job_id;\n-  // const [company] = useState([]);\n-  // eslint-disable-next-line\n-  let isExpanded = false\n-\n-  /*Function to get lima sub stage */\n-  const GetSubSTage = async () => {\n-    try {\n-      let Response\n-      if (props.job === \"yes\") {\n-        Response = await GetJobLimaSubStages(jobId, lmia_status)\n-      } else {\n-        Response = await GetLimaSubStages(props.resData.id)\n-      }\n-      setSelectedStatus(Response.data.data)\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  }\n-\n-  // Function to handle checkbox selection\n-  const handleSubStageSelection = async (status, subStage) => {\n-    const isSelected = selectedStatus.some(\n-      (item) => item.lmia_status === status && item.lmia_substage === subStage\n-    );\n-    let data;\n-    /*Condition to check the selected substages */\n-    if (isSelected) {\n-      setSelectedStatus(\n-        selectedStatus.filter(\n-          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n-        )\n-      );\n-      let id = selectedStatus.filter(\n-        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n-      )[0].id\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          job_id: jobId,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          lmia_id: props.resData.id,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n-      }\n-    } else {\n-      setSelectedStatus([\n-        ...selectedStatus,\n-        { status: status, subStage: subStage },\n-      ]);\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          job_id: jobId,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Employee lima sub stages */\n-        data = {\n-          lmia_id: props.resData.id,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      }\n-    }\n-    try {\n-      let Response\n-      /*APi called */\n-      if (props.job === \"yes\") {\n-        Response = await AddUpdateJobLmiaSubStage(data)\n-      } else {\n-        Response = await AddUpdateEmployeeLmiaSubStage(data)\n-      }\n-      /*Removed sub stage response */\n-      if (Response.message === \"updated successfully\") {\n-        toast.success(\"Lmia Sub Stage Removed successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-      /*Added sub stage response */\n-      if (Response.message === 'insert successfully') {\n-        toast.success(\"Lmia Sub Stage Added successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  };\n-  // console.log(\"Sub Stages =>\", selectedStatus)\n-  /* Functionality to close the modal */\n-  const close = () => {\n-    setState({ ...state, lmia_status: \"\" });\n-    setErrors(\"\");\n-    setLoading(false);\n-    props.close();\n-  };\n-  // USER LIMIA UPDATE VALIDATION\n-  useEffect(() => {\n-    GetSubSTage()\n-    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n-    if (apiCall === true) {\n-      setApiCall(false)\n-    }\n-  }, [apiCall, lmia_status]);\n-\n-  useEffect(() => { }, [])\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    lmia_status: \"\",\n-    // completion_time: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    lmia_status: [\n-      (value) =>\n-        value === \"\" || value === null\n-          ? \"Lmia status is required\"\n-          : \"\",\n-    ],\n-    // completion_time: [\n-    //   (value) =>\n-    //     value === \"\" || value === null \n-    //       ? \"Expected time of completion is required\"\n-    //       : \"\",\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n-  const onLmiaUpdateClick = async (event) => {\n-    event.preventDefault();\n-    if (validate() && props.job === \"yes\") {\n-      let data = {\n-        // completion_time: state.completion_time,\n-        lmia_status: state.lmia_status,\n-        job_id: jobId\n-      }\n-      try {\n-        let responseData = await AddJob(data);\n-        if (responseData.message === \"job data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-            close()\n-        }\n-      } catch (err) {\n-        toast.error(\"Something went wrong\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-      }\n-    }\n-    if (validate()) {\n-      setLoading(true);\n-      try {\n-        const responseData = await AddLimia(state, employeeId, jobId);\n-        if (responseData.message === \"Data added successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-            close()\n-        }\n-        if (responseData.message === \"Data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-            close()\n-        }\n-      } catch (err) {\n-        console.log(err)\n-        setLoading(false)\n-      }\n-    } else {\n-      setLoading(false);\n-    }\n-\n-  };\n-  // END LIMIA VALIDATION\n-\n-\n-  return (\n-    <>\n-      <Modal\n-        show={props.show}\n-        size=\"lg\"\n-        aria-labelledby=\"contained-modal-title-vcenter\"\n-        centered\n-      >\n-        <button\n-          type=\"button\"\n-          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n-          data-dismiss=\"modal\"\n-          onClick={close}\n-        >\n-          <i className=\"fas fa-times\"></i>\n-        </button>\n-        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n-\n-          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n-          <LmiaTime lmia={state.lmia_status}\n-            job={props.job}\n-            location={location.pathname} />\n-          <form onSubmit={onLmiaUpdateClick}>\n-            {expandedStatus && (\n-              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n-              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n-              //     <div\n-              //       key={j}\n-              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n-              //         (item) =>\n-              //           item.lmia_substage === subStage\n-              //       )\n-              //         ? 'selected'\n-              //         : ''\n-              //         }`}\n-              //       onClick={() =>\n-              //         handleSubStageSelection(expandedStatus, subStage)\n-              //       }\n-              //     >\n-\n-              //       <input\n-              //         type=\"checkbox\"\n-              //         className='mx-2'\n-              //         checked={(selectedStatus || []).some(\n-              //           (item) =>\n-              //             // item.lmia_status === expandedStatus &&\n-              //             item.lmia_substage === subStage\n-              //         )}\n-              //         readOnly\n-              //       />{subStage}\n-              //     </div>\n-              //   ))}\n-              // </div>\n-              <LmiaSubStageSelector\n-              expandedStatus={expandedStatus}\n-              selectedStatus={selectedStatus}\n-              FilterJson={FilterJson}\n-              handleSubStageSelection={handleSubStageSelection}\n-            />\n-            )}\n-            <div className=\"form-group \">\n-              <label\n-                htmlFor=\"lmia_status\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Lmia status <span className=\"text-danger\">*</span>:\n-              </label>\n-              <select\n-                type={\"text\"}\n-                className={\n-                  errors.lmia_status\n-                    ? \"form-control text-capitalize border border-danger\"\n-                    : \"form-control text-capitalize\"\n-                }\n-                value={state.lmia_status || \"\"}\n-                onChange={(e) => {\n-                  setState({ ...state, lmia_status: e.target.value });\n-                  setExpandedStatus(e.target.value);\n-                }}\n-                id=\"lmia_status\"\n-                name=\"lmia_status\"\n-                multiple={false}\n-              >\n-                <option value={\"\"}>Select lmia status</option>\n-                {(FilterJson.lmia_status || []).map((status, i) => {\n-                  isExpanded = expandedStatus === status\n-                  return (\n-                    props.job === \"yes\" ? (i <= 2 && (\n-                      <option value={status} key={i}\n-                      >\n-\n-                        {status}\n-                      </option>\n-                    )) : (i > 2 && (\n-                      <option value={status} key={i}\n-                      >\n-                        {status}\n-                      </option>\n-                    ))\n-                  )\n-                })}\n-              </select>\n-              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n-              {errors.lmia_status && (\n-                <span\n-                  key={errors.lmia_status}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.lmia_status}\n-                </span>\n-              )}\n-            </div>\n-\n-            {/* <div className=\"form-group mt-5\">\n-              <label\n-                htmlFor=\"completion_time\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Expected time of completion<span className=\"text-danger\">*</span>:\n-              </label>\n-              <input\n-                type=\"date\"\n-                className={\n-                  errors.completion_time\n-                    ? \"form-control coustam_datepicker border border-danger\"\n-                    : \"form-control coustam_datepicker\"\n-                }\n-                value={moment(state.completion_time).format(\"YYYY-MM-DD\") || \"\"}\n-                onChange={onInputChange}\n-                id=\"completion_time\"\n-                name=\"completion_time\"\n-                onKeyDownCapture={(e) => e.preventDefault()}\n-                min={moment().format(\"YYYY-MM-DD\")}\n-              />\n-              ----ERROR MESSAGE FOR Admin Name----\n-              {errors.completion_time && (\n-                <span\n-                  key={errors.completion_time}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.completion_time}\n-                </span>\n-              )}\n-            </div> */}\n-            {/* {state.lmia_status === \"complete\" ? (\n-              <>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"posted\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Posted :\n-                  </label>\n-                  <select\n-                    type={\"text\"}\n-                    className={\n-                      errors.posted\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.posted}\n-                    onChange={onInputChange}\n-                    id=\"posted\"\n-                    name=\"posted\"\n-                    multiple={false}\n-                  >\n-                    <option value={\"\"}>Select lmia status</option>\n-                    <option value={\"Yes\"}>Yes</option>\n-                    <option value={\"No\"}>No</option>\n-                  </select>\n-                  ----ERROR MESSAGE FOR LIMA STATUS----\n-                  {errors.posted && (\n-                    <span\n-                      key={errors.posted}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"job_category_id\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Company <span className=\"text-danger\"> *</span> :\n-                  </label>\n-                  <div className=\"position-relative\">\n-                    <select\n-                      name=\"posted_company_id\"\n-                      value={state.posted_company_id}\n-                      onChange={onInputChange}\n-                      className={\n-                        errors.posted_company_id\n-                          ? \" form-control border border-danger position-relative overflow-hidden\"\n-                          : \" form-control position-relative overflow-hidden\"\n-                      }\n-                      placeholder=\"company name\"\n-                      id=\"posted_company_id\"\n-                    >\n-                      <option value={\"\"}>Select Company</option>\n-                      {(company || []).map((com) => (\n-                        <option key={com.company_id} value={com.company_id}>\n-                          {com.company_name}\n-                        </option>\n-                      ))}\n-                    </select>\n-                  </div>\n-                  ----ERROR MESSAGE FOR COMPANY----\n-                  {errors.posted_company_id && (\n-                    <span\n-                      key={errors.posted_company_id}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted_company_id}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Date of posting :\n-                  </label>\n-                  <input\n-                    type={\"date\"}\n-                    className={\n-                      errors.date_of_posting\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.date_of_posting}\n-                    onChange={onInputChange}\n-                    id=\"date_of_posting\"\n-                    name=\"date_of_posting\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.date_of_posting && (\n-                    <span\n-                      key={errors.date_of_posting}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.date_of_posting}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Designation\n-                  </label>\n-                  <input\n-                    type={\"text\"}\n-                    className={\n-                      errors.designation\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.designation}\n-                    onChange={onInputChange}\n-                    id=\"designation\"\n-                    name=\"designation\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.designation && (\n-                    <span\n-                      key={errors.designation}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.designation}\n-                    </span>\n-                  )}\n-                </div>\n-              </>\n-            ) : null} */}\n-            <div className=\"form-group text-center\">\n-              {loading === true ? (\n-                <button\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"button\"\n-                  disabled\n-                >\n-                  <span\n-                    className=\"spinner-border spinner-border-sm \"\n-                    role=\"status\"\n-                    aria-hidden=\"true\"\n-                  ></span>\n-                  <span className=\"sr-only\">Loading...</span>\n-                </button>\n-              ) : (\n-                <button\n-                  onClick={onLmiaUpdateClick}\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"submit\"\n-                >\n-                  Submit\n-                </button>\n-              )}\n-            </div>\n-          </form>\n-        </div>\n-      </Modal>\n-    </>\n-  );\n-}\n-\n-export default LmiaStatus;\n"
                },
                {
                    "date": 1693041282808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,544 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Modal } from \"react-bootstrap\";\n+import useValidation from \"../../common/useValidation\";\n+import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n+import { toast } from \"react-toastify\";\n+import { useLocation } from \"react-router-dom\"\n+import \"react-toastify/dist/ReactToastify.css\";\n+import FilterJson from \"../../json/filterjson\";\n+import LmiaTime from \"../../common/lmiaTime\";\n+import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n+function LmiaStatus(props) {\n+  let [loading, setLoading] = useState(false);\n+  let [apiCall, setApiCall] = useState(false);\n+  const [selectedStatus, setSelectedStatus] = useState([]);\n+  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n+  let employeeId =\n+    props.resData === undefined ? null : props.resData.employee_id;\n+  let lmia_status = props.resData.lmia_status\n+  // let completion_time = props.resData.expected_time_of_completion\n+  let location = useLocation()\n+  let jobId = props.resData.job_id;\n+  // const [company] = useState([]);\n+  // eslint-disable-next-line\n+  let isExpanded = false\n+\n+  /*Function to get lima sub stage */\n+  const GetSubSTage = async () => {\n+    try {\n+      let Response\n+      if (props.job === \"yes\") {\n+        Response = await GetJobLimaSubStages(jobId, lmia_status)\n+      } else {\n+        Response = await GetLimaSubStages(props.resData.id)\n+      }\n+      setSelectedStatus(Response.data.data)\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  }\n+\n+  // Function to handle checkbox selection\n+  const handleSubStageSelection = async (status, subStage) => {\n+    const isSelected = selectedStatus.some(\n+      (item) => item.lmia_status === status && item.lmia_substage === subStage\n+    );\n+    let data;\n+    /*Condition to check the selected substages */\n+    if (isSelected) {\n+      setSelectedStatus(\n+        selectedStatus.filter(\n+          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n+        )\n+      );\n+      let id = selectedStatus.filter(\n+        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n+      )[0].id\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          id: id,\n+          job_id: jobId,\n+          lmia_substage: \"false\",\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Job lima sub stages */\n+        data = {\n+          id: id,\n+          lmia_id: props.resData.id,\n+          lmia_substage: \"false\",\n+          lmia_status: status\n+        }\n+      }\n+    } else {\n+      setSelectedStatus([\n+        ...selectedStatus,\n+        { status: status, subStage: subStage },\n+      ]);\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          job_id: jobId,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Employee lima sub stages */\n+        data = {\n+          lmia_id: props.resData.id,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      }\n+    }\n+    try {\n+      let Response\n+      /*APi called */\n+      if (props.job === \"yes\") {\n+        Response = await AddUpdateJobLmiaSubStage(data)\n+      } else {\n+        Response = await AddUpdateEmployeeLmiaSubStage(data)\n+      }\n+      /*Removed sub stage response */\n+      if (Response.message === \"updated successfully\") {\n+        toast.success(\"Lmia Sub Stage Removed successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+      /*Added sub stage response */\n+      if (Response.message === 'insert successfully') {\n+        toast.success(\"Lmia Sub Stage Added successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  };\n+  // console.log(\"Sub Stages =>\", selectedStatus)\n+  /* Functionality to close the modal */\n+  const close = () => {\n+    setState({ ...state, lmia_status: \"\" });\n+    setErrors(\"\");\n+    setLoading(false);\n+    props.close();\n+  };\n+  // USER LIMIA UPDATE VALIDATION\n+  useEffect(() => {\n+    GetSubSTage()\n+    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n+    if (apiCall === true) {\n+      setApiCall(false)\n+    }\n+  }, [apiCall, lmia_status]);\n+\n+  useEffect(() => { }, [])\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    lmia_status: \"\",\n+    // completion_time: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    lmia_status: [\n+      (value) =>\n+        value === \"\" || value === null\n+          ? \"Lmia status is required\"\n+          : \"\",\n+    ],\n+    // completion_time: [\n+    //   (value) =>\n+    //     value === \"\" || value === null \n+    //       ? \"Expected time of completion is required\"\n+    //       : \"\",\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n+  const onLmiaUpdateClick = async (event) => {\n+    event.preventDefault();\n+    if (validate() && props.job === \"yes\") {\n+      let data = {\n+        // completion_time: state.completion_time,\n+        lmia_status: state.lmia_status,\n+        job_id: jobId\n+      }\n+      try {\n+        let responseData = await AddJob(data);\n+        if (responseData.message === \"job data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+      } catch (err) {\n+        toast.error(\"Something went wrong\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+      }\n+    }\n+    if (validate()) {\n+      setLoading(true);\n+      try {\n+        const responseData = await AddLimia(state, employeeId, jobId);\n+        if (responseData.message === \"Data added successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+        if (responseData.message === \"Data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+      } catch (err) {\n+        console.log(err)\n+        setLoading(false)\n+      }\n+    } else {\n+      setLoading(false);\n+    }\n+\n+  };\n+  // END LIMIA VALIDATION\n+\n+\n+  return (\n+    <>\n+      <Modal\n+        show={props.show}\n+        size=\"lg\"\n+        aria-labelledby=\"contained-modal-title-vcenter\"\n+        centered\n+      >\n+        <button\n+          type=\"button\"\n+          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n+          data-dismiss=\"modal\"\n+          onClick={close}\n+        >\n+          <i className=\"fas fa-times\"></i>\n+        </button>\n+        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n+\n+          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n+          <LmiaTime lmia={state.lmia_status}\n+            job={props.job}\n+            location={location.pathname} />\n+          <form onSubmit={onLmiaUpdateClick}>\n+            {expandedStatus && (\n+              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n+              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n+              //     <div\n+              //       key={j}\n+              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n+              //         (item) =>\n+              //           item.lmia_substage === subStage\n+              //       )\n+              //         ? 'selected'\n+              //         : ''\n+              //         }`}\n+              //       onClick={() =>\n+              //         handleSubStageSelection(expandedStatus, subStage)\n+              //       }\n+              //     >\n+\n+              //       <input\n+              //         type=\"checkbox\"\n+              //         className='mx-2'\n+              //         checked={(selectedStatus || []).some(\n+              //           (item) =>\n+              //             // item.lmia_status === expandedStatus &&\n+              //             item.lmia_substage === subStage\n+              //         )}\n+              //         readOnly\n+              //       />{subStage}\n+              //     </div>\n+              //   ))}\n+              // </div>\n+              <LmiaSubStageSelector\n+                expandedStatus={expandedStatus}\n+                selectedStatus={selectedStatus}\n+                FilterJson={FilterJson}\n+                handleSubStageSelection={handleSubStageSelection}\n+              />\n+            )}\n+            <div className=\"form-group \">\n+              <label\n+                htmlFor=\"lmia_status\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Lmia status <span className=\"text-danger\">*</span>:\n+              </label>\n+              <select\n+                type={\"text\"}\n+                className={\n+                  errors.lmia_status\n+                    ? \"form-control text-capitalize border border-danger\"\n+                    : \"form-control text-capitalize\"\n+                }\n+                value={state.lmia_status || \"\"}\n+                onChange={(e) => {\n+                  setState({ ...state, lmia_status: e.target.value });\n+                  setExpandedStatus(e.target.value);\n+                }}\n+                id=\"lmia_status\"\n+                name=\"lmia_status\"\n+                multiple={false}\n+              >\n+                <option value={\"\"}>Select lmia status</option>\n+                {(FilterJson.lmia_status || []).map((status, i) => {\n+                  isExpanded = expandedStatus === status\n+                  return (\n+                    props.job === \"yes\" ? ( (\n+                      <option value={status} key={i}\n+                      >\n+\n+                        {status}\n+                      </option>\n+                    )) : (i > 2 && (\n+                      <option value={status} key={i}\n+                      >\n+                        {status}\n+                      </option>\n+                    ))\n+                  )\n+                })}\n+              </select>\n+              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n+              {errors.lmia_status && (\n+                <span\n+                  key={errors.lmia_status}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.lmia_status}\n+                </span>\n+              )}\n+            </div>\n+\n+            {/* <div className=\"form-group mt-5\">\n+              <label\n+                htmlFor=\"completion_time\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Expected time of completion<span className=\"text-danger\">*</span>:\n+              </label>\n+              <input\n+                type=\"date\"\n+                className={\n+                  errors.completion_time\n+                    ? \"form-control coustam_datepicker border border-danger\"\n+                    : \"form-control coustam_datepicker\"\n+                }\n+                value={moment(state.completion_time).format(\"YYYY-MM-DD\") || \"\"}\n+                onChange={onInputChange}\n+                id=\"completion_time\"\n+                name=\"completion_time\"\n+                onKeyDownCapture={(e) => e.preventDefault()}\n+                min={moment().format(\"YYYY-MM-DD\")}\n+              />\n+              ----ERROR MESSAGE FOR Admin Name----\n+              {errors.completion_time && (\n+                <span\n+                  key={errors.completion_time}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.completion_time}\n+                </span>\n+              )}\n+            </div> */}\n+            {/* {state.lmia_status === \"complete\" ? (\n+              <>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"posted\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Posted :\n+                  </label>\n+                  <select\n+                    type={\"text\"}\n+                    className={\n+                      errors.posted\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.posted}\n+                    onChange={onInputChange}\n+                    id=\"posted\"\n+                    name=\"posted\"\n+                    multiple={false}\n+                  >\n+                    <option value={\"\"}>Select lmia status</option>\n+                    <option value={\"Yes\"}>Yes</option>\n+                    <option value={\"No\"}>No</option>\n+                  </select>\n+                  ----ERROR MESSAGE FOR LIMA STATUS----\n+                  {errors.posted && (\n+                    <span\n+                      key={errors.posted}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"job_category_id\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Company <span className=\"text-danger\"> *</span> :\n+                  </label>\n+                  <div className=\"position-relative\">\n+                    <select\n+                      name=\"posted_company_id\"\n+                      value={state.posted_company_id}\n+                      onChange={onInputChange}\n+                      className={\n+                        errors.posted_company_id\n+                          ? \" form-control border border-danger position-relative overflow-hidden\"\n+                          : \" form-control position-relative overflow-hidden\"\n+                      }\n+                      placeholder=\"company name\"\n+                      id=\"posted_company_id\"\n+                    >\n+                      <option value={\"\"}>Select Company</option>\n+                      {(company || []).map((com) => (\n+                        <option key={com.company_id} value={com.company_id}>\n+                          {com.company_name}\n+                        </option>\n+                      ))}\n+                    </select>\n+                  </div>\n+                  ----ERROR MESSAGE FOR COMPANY----\n+                  {errors.posted_company_id && (\n+                    <span\n+                      key={errors.posted_company_id}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted_company_id}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Date of posting :\n+                  </label>\n+                  <input\n+                    type={\"date\"}\n+                    className={\n+                      errors.date_of_posting\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.date_of_posting}\n+                    onChange={onInputChange}\n+                    id=\"date_of_posting\"\n+                    name=\"date_of_posting\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.date_of_posting && (\n+                    <span\n+                      key={errors.date_of_posting}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.date_of_posting}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Designation\n+                  </label>\n+                  <input\n+                    type={\"text\"}\n+                    className={\n+                      errors.designation\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.designation}\n+                    onChange={onInputChange}\n+                    id=\"designation\"\n+                    name=\"designation\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.designation && (\n+                    <span\n+                      key={errors.designation}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.designation}\n+                    </span>\n+                  )}\n+                </div>\n+              </>\n+            ) : null} */}\n+            <div className=\"form-group text-center\">\n+              {loading === true ? (\n+                <button\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"button\"\n+                  disabled\n+                >\n+                  <span\n+                    className=\"spinner-border spinner-border-sm \"\n+                    role=\"status\"\n+                    aria-hidden=\"true\"\n+                  ></span>\n+                  <span className=\"sr-only\">Loading...</span>\n+                </button>\n+              ) : (\n+                <button\n+                  onClick={onLmiaUpdateClick}\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"submit\"\n+                >\n+                  Submit\n+                </button>\n+              )}\n+            </div>\n+          </form>\n+        </div>\n+      </Modal>\n+    </>\n+  );\n+}\n+\n+export default LmiaStatus;\n"
                },
                {
                    "date": 1693200781067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -358,14 +358,14 @@\n                   errors.completion_time\n                     ? \"form-control coustam_datepicker border border-danger\"\n                     : \"form-control coustam_datepicker\"\n                 }\n-                value={moment(state.completion_time).format(\"YYYY-MM-DD\") || \"\"}\n+                value={moment(state.completion_time).format(\"DD-MM-YYYY\") || \"\"}\n                 onChange={onInputChange}\n                 id=\"completion_time\"\n                 name=\"completion_time\"\n                 onKeyDownCapture={(e) => e.preventDefault()}\n-                min={moment().format(\"YYYY-MM-DD\")}\n+                min={moment().format(\"DD-MM-YYYY\")}\n               />\n               ----ERROR MESSAGE FOR Admin Name----\n               {errors.completion_time && (\n                 <span\n@@ -541,548 +541,4 @@\n   );\n }\n \n export default LmiaStatus;\n-import React, { useEffect, useState } from \"react\";\n-import { Modal } from \"react-bootstrap\";\n-import useValidation from \"../../common/useValidation\";\n-import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n-import { toast } from \"react-toastify\";\n-import { useLocation } from \"react-router-dom\"\n-import \"react-toastify/dist/ReactToastify.css\";\n-import FilterJson from \"../../json/filterjson\";\n-import LmiaTime from \"../../common/lmiaTime\";\n-import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n-function LmiaStatus(props) {\n-  let [loading, setLoading] = useState(false);\n-  let [apiCall, setApiCall] = useState(false);\n-  const [selectedStatus, setSelectedStatus] = useState([]);\n-  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n-  let employeeId =\n-    props.resData === undefined ? null : props.resData.employee_id;\n-  let lmia_status = props.resData.lmia_status\n-  // let completion_time = props.resData.expected_time_of_completion\n-  let location = useLocation()\n-  let jobId = props.resData.job_id;\n-  // const [company] = useState([]);\n-  // eslint-disable-next-line\n-  let isExpanded = false\n-\n-  /*Function to get lima sub stage */\n-  const GetSubSTage = async () => {\n-    try {\n-      let Response\n-      if (props.job === \"yes\") {\n-        Response = await GetJobLimaSubStages(jobId, lmia_status)\n-      } else {\n-        Response = await GetLimaSubStages(props.resData.id)\n-      }\n-      setSelectedStatus(Response.data.data)\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  }\n-\n-  // Function to handle checkbox selection\n-  const handleSubStageSelection = async (status, subStage) => {\n-    const isSelected = selectedStatus.some(\n-      (item) => item.lmia_status === status && item.lmia_substage === subStage\n-    );\n-    let data;\n-    /*Condition to check the selected substages */\n-    if (isSelected) {\n-      setSelectedStatus(\n-        selectedStatus.filter(\n-          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n-        )\n-      );\n-      let id = selectedStatus.filter(\n-        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n-      )[0].id\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          job_id: jobId,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          lmia_id: props.resData.id,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n-      }\n-    } else {\n-      setSelectedStatus([\n-        ...selectedStatus,\n-        { status: status, subStage: subStage },\n-      ]);\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          job_id: jobId,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Employee lima sub stages */\n-        data = {\n-          lmia_id: props.resData.id,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      }\n-    }\n-    try {\n-      let Response\n-      /*APi called */\n-      if (props.job === \"yes\") {\n-        Response = await AddUpdateJobLmiaSubStage(data)\n-      } else {\n-        Response = await AddUpdateEmployeeLmiaSubStage(data)\n-      }\n-      /*Removed sub stage response */\n-      if (Response.message === \"updated successfully\") {\n-        toast.success(\"Lmia Sub Stage Removed successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-      /*Added sub stage response */\n-      if (Response.message === 'insert successfully') {\n-        toast.success(\"Lmia Sub Stage Added successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  };\n-  // console.log(\"Sub Stages =>\", selectedStatus)\n-  /* Functionality to close the modal */\n-  const close = () => {\n-    setState({ ...state, lmia_status: \"\" });\n-    setErrors(\"\");\n-    setLoading(false);\n-    props.close();\n-  };\n-  // USER LIMIA UPDATE VALIDATION\n-  useEffect(() => {\n-    GetSubSTage()\n-    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n-    if (apiCall === true) {\n-      setApiCall(false)\n-    }\n-  }, [apiCall, lmia_status]);\n-\n-  useEffect(() => { }, [])\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    lmia_status: \"\",\n-    // completion_time: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    lmia_status: [\n-      (value) =>\n-        value === \"\" || value === null\n-          ? \"Lmia status is required\"\n-          : \"\",\n-    ],\n-    // completion_time: [\n-    //   (value) =>\n-    //     value === \"\" || value === null \n-    //       ? \"Expected time of completion is required\"\n-    //       : \"\",\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n-  const onLmiaUpdateClick = async (event) => {\n-    event.preventDefault();\n-    if (validate() && props.job === \"yes\") {\n-      let data = {\n-        // completion_time: state.completion_time,\n-        lmia_status: state.lmia_status,\n-        job_id: jobId\n-      }\n-      try {\n-        let responseData = await AddJob(data);\n-        if (responseData.message === \"job data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-      } catch (err) {\n-        toast.error(\"Something went wrong\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-      }\n-    }\n-    if (validate()) {\n-      setLoading(true);\n-      try {\n-        const responseData = await AddLimia(state, employeeId, jobId);\n-        if (responseData.message === \"Data added successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-        if (responseData.message === \"Data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-      } catch (err) {\n-        console.log(err)\n-        setLoading(false)\n-      }\n-    } else {\n-      setLoading(false);\n-    }\n-\n-  };\n-  // END LIMIA VALIDATION\n-\n-\n-  return (\n-    <>\n-      <Modal\n-        show={props.show}\n-        size=\"lg\"\n-        aria-labelledby=\"contained-modal-title-vcenter\"\n-        centered\n-      >\n-        <button\n-          type=\"button\"\n-          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n-          data-dismiss=\"modal\"\n-          onClick={close}\n-        >\n-          <i className=\"fas fa-times\"></i>\n-        </button>\n-        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n-\n-          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n-          <LmiaTime lmia={state.lmia_status}\n-            job={props.job}\n-            location={location.pathname} />\n-          <form onSubmit={onLmiaUpdateClick}>\n-            {expandedStatus && (\n-              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n-              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n-              //     <div\n-              //       key={j}\n-              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n-              //         (item) =>\n-              //           item.lmia_substage === subStage\n-              //       )\n-              //         ? 'selected'\n-              //         : ''\n-              //         }`}\n-              //       onClick={() =>\n-              //         handleSubStageSelection(expandedStatus, subStage)\n-              //       }\n-              //     >\n-\n-              //       <input\n-              //         type=\"checkbox\"\n-              //         className='mx-2'\n-              //         checked={(selectedStatus || []).some(\n-              //           (item) =>\n-              //             // item.lmia_status === expandedStatus &&\n-              //             item.lmia_substage === subStage\n-              //         )}\n-              //         readOnly\n-              //       />{subStage}\n-              //     </div>\n-              //   ))}\n-              // </div>\n-              <LmiaSubStageSelector\n-                expandedStatus={expandedStatus}\n-                selectedStatus={selectedStatus}\n-                FilterJson={FilterJson}\n-                handleSubStageSelection={handleSubStageSelection}\n-              />\n-            )}\n-            <div className=\"form-group \">\n-              <label\n-                htmlFor=\"lmia_status\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Lmia status <span className=\"text-danger\">*</span>:\n-              </label>\n-              <select\n-                type={\"text\"}\n-                className={\n-                  errors.lmia_status\n-                    ? \"form-control text-capitalize border border-danger\"\n-                    : \"form-control text-capitalize\"\n-                }\n-                value={state.lmia_status || \"\"}\n-                onChange={(e) => {\n-                  setState({ ...state, lmia_status: e.target.value });\n-                  setExpandedStatus(e.target.value);\n-                }}\n-                id=\"lmia_status\"\n-                name=\"lmia_status\"\n-                multiple={false}\n-              >\n-                <option value={\"\"}>Select lmia status</option>\n-                {(FilterJson.lmia_status || []).map((status, i) => {\n-                  isExpanded = expandedStatus === status\n-                  return (\n-                    props.job === \"yes\" ? (i <= 2 && (\n-                      <option value={status} key={i}\n-                      >\n-\n-                        {status}\n-                      </option>\n-                    )) : (i > 2 && (\n-                      <option value={status} key={i}\n-                      >\n-                        {status}\n-                      </option>\n-                    ))\n-                  )\n-                })}\n-              </select>\n-              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n-              {errors.lmia_status && (\n-                <span\n-                  key={errors.lmia_status}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.lmia_status}\n-                </span>\n-              )}\n-            </div>\n-\n-            {/* <div className=\"form-group mt-5\">\n-              <label\n-                htmlFor=\"completion_time\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Expected time of completion<span className=\"text-danger\">*</span>:\n-              </label>\n-              <input\n-                type=\"date\"\n-                className={\n-                  errors.completion_time\n-                    ? \"form-control coustam_datepicker border border-danger\"\n-                    : \"form-control coustam_datepicker\"\n-                }\n-                value={moment(state.completion_time).format(\"YYYY-MM-DD\") || \"\"}\n-                onChange={onInputChange}\n-                id=\"completion_time\"\n-                name=\"completion_time\"\n-                onKeyDownCapture={(e) => e.preventDefault()}\n-                min={moment().format(\"YYYY-MM-DD\")}\n-              />\n-              ----ERROR MESSAGE FOR Admin Name----\n-              {errors.completion_time && (\n-                <span\n-                  key={errors.completion_time}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.completion_time}\n-                </span>\n-              )}\n-            </div> */}\n-            {/* {state.lmia_status === \"complete\" ? (\n-              <>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"posted\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Posted :\n-                  </label>\n-                  <select\n-                    type={\"text\"}\n-                    className={\n-                      errors.posted\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.posted}\n-                    onChange={onInputChange}\n-                    id=\"posted\"\n-                    name=\"posted\"\n-                    multiple={false}\n-                  >\n-                    <option value={\"\"}>Select lmia status</option>\n-                    <option value={\"Yes\"}>Yes</option>\n-                    <option value={\"No\"}>No</option>\n-                  </select>\n-                  ----ERROR MESSAGE FOR LIMA STATUS----\n-                  {errors.posted && (\n-                    <span\n-                      key={errors.posted}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"job_category_id\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Company <span className=\"text-danger\"> *</span> :\n-                  </label>\n-                  <div className=\"position-relative\">\n-                    <select\n-                      name=\"posted_company_id\"\n-                      value={state.posted_company_id}\n-                      onChange={onInputChange}\n-                      className={\n-                        errors.posted_company_id\n-                          ? \" form-control border border-danger position-relative overflow-hidden\"\n-                          : \" form-control position-relative overflow-hidden\"\n-                      }\n-                      placeholder=\"company name\"\n-                      id=\"posted_company_id\"\n-                    >\n-                      <option value={\"\"}>Select Company</option>\n-                      {(company || []).map((com) => (\n-                        <option key={com.company_id} value={com.company_id}>\n-                          {com.company_name}\n-                        </option>\n-                      ))}\n-                    </select>\n-                  </div>\n-                  ----ERROR MESSAGE FOR COMPANY----\n-                  {errors.posted_company_id && (\n-                    <span\n-                      key={errors.posted_company_id}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted_company_id}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Date of posting :\n-                  </label>\n-                  <input\n-                    type={\"date\"}\n-                    className={\n-                      errors.date_of_posting\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.date_of_posting}\n-                    onChange={onInputChange}\n-                    id=\"date_of_posting\"\n-                    name=\"date_of_posting\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.date_of_posting && (\n-                    <span\n-                      key={errors.date_of_posting}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.date_of_posting}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Designation\n-                  </label>\n-                  <input\n-                    type={\"text\"}\n-                    className={\n-                      errors.designation\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.designation}\n-                    onChange={onInputChange}\n-                    id=\"designation\"\n-                    name=\"designation\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.designation && (\n-                    <span\n-                      key={errors.designation}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.designation}\n-                    </span>\n-                  )}\n-                </div>\n-              </>\n-            ) : null} */}\n-            <div className=\"form-group text-center\">\n-              {loading === true ? (\n-                <button\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"button\"\n-                  disabled\n-                >\n-                  <span\n-                    className=\"spinner-border spinner-border-sm \"\n-                    role=\"status\"\n-                    aria-hidden=\"true\"\n-                  ></span>\n-                  <span className=\"sr-only\">Loading...</span>\n-                </button>\n-              ) : (\n-                <button\n-                  onClick={onLmiaUpdateClick}\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"submit\"\n-                >\n-                  Submit\n-                </button>\n-              )}\n-            </div>\n-          </form>\n-        </div>\n-      </Modal>\n-    </>\n-  );\n-}\n-\n-export default LmiaStatus;\n"
                },
                {
                    "date": 1693471803689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,545 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Modal } from \"react-bootstrap\";\n+import useValidation from \"../../common/useValidation\";\n+import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n+import { toast } from \"react-toastify\";\n+import { useLocation } from \"react-router-dom\"\n+import \"react-toastify/dist/ReactToastify.css\";\n+import FilterJson from \"../../json/filterjson\";\n+import LmiaTime from \"../../common/lmiaTime\";\n+import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n+function LmiaStatus(props) {\n+  let [loading, setLoading] = useState(false);\n+  let [apiCall, setApiCall] = useState(false);\n+  const [selectedStatus, setSelectedStatus] = useState([]);\n+  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n+  let employeeId =\n+    props.resData === undefined ? null : props.resData.employee_id;\n+  let lmia_status = props.resData.lmia_status\n+  // let completion_time = props.resData.expected_time_of_completion\n+  let location = useLocation()\n+  let jobId = props.resData.job_id;\n+  // const [company] = useState([]);\n+  // eslint-disable-next-line\n+  let isExpanded = false\n+\n+  /*Function to get lima sub stage */\n+  const GetSubSTage = async () => {\n+    try {\n+      let Response\n+      if (props.job === \"yes\") {\n+        Response = await GetJobLimaSubStages(jobId, lmia_status)\n+      } else {\n+        Response = await GetLimaSubStages(props.resData.id)\n+      }\n+      setSelectedStatus(Response.data.data)\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  }\n+\n+  // Function to handle checkbox selection\n+  const handleSubStageSelection = async (status, subStage) => {\n+    const isSelected = selectedStatus.some(\n+      (item) => item.lmia_status === status && item.lmia_substage === subStage\n+    );\n+    let data;\n+    /*Condition to check the selected substages */\n+    if (isSelected) {\n+      setSelectedStatus(\n+        selectedStatus.filter(\n+          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n+        )\n+      );\n+      let id = selectedStatus.filter(\n+        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n+      )[0].id\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          id: id,\n+          job_id: jobId,\n+          lmia_substage: \"false\",\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Job lima sub stages */\n+        data = {\n+          id: id,\n+          lmia_id: props.resData.id,\n+          lmia_substage: \"false\",\n+          lmia_status: status\n+        }\n+      }\n+    } else {\n+      setSelectedStatus([\n+        ...selectedStatus,\n+        { status: status, subStage: subStage },\n+      ]);\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          job_id: jobId,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Employee lima sub stages */\n+        data = {\n+          lmia_id: props.resData.id,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      }\n+    }\n+    try {\n+      let Response\n+      /*APi called */\n+      if (props.job === \"yes\") {\n+        Response = await AddUpdateJobLmiaSubStage(data)\n+      } else {\n+        Response = await AddUpdateEmployeeLmiaSubStage(data)\n+      }\n+      /*Removed sub stage response */\n+      if (Response.message === \"updated successfully\") {\n+        toast.success(\"Lmia Sub Stage Removed successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+      /*Added sub stage response */\n+      if (Response.message === 'insert successfully') {\n+        toast.success(\"Lmia Sub Stage Added successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  };\n+  // console.log(\"Sub Stages =>\", selectedStatus)\n+  /* Functionality to close the modal */\n+  const close = () => {\n+    setState({ ...state, lmia_status: \"\" });\n+    setErrors(\"\");\n+    setLoading(false);\n+    props.close();\n+  };\n+  // USER LIMIA UPDATE VALIDATION\n+  useEffect(() => {\n+    GetSubSTage()\n+    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n+    if (apiCall === true) {\n+      setApiCall(false)\n+    }\n+  }, [apiCall, lmia_status]);\n+\n+  useEffect(() => { }, [])\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    lmia_status: \"\",\n+    // completion_time: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    lmia_status: [\n+      (value) =>\n+        value === \"\" || value === null\n+          ? \"Lmia status is required\"\n+          : \"\",\n+    ],\n+    // completion_time: [\n+    //   (value) =>\n+    //     value === \"\" || value === null \n+    //       ? \"Expected time of completion is required\"\n+    //       : \"\",\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n+  const onLmiaUpdateClick = async (event) => {\n+    event.preventDefault();\n+    if (validate() && props.job === \"yes\") {\n+      let data = {\n+        // completion_time: state.completion_time,\n+        lmia_status: state.lmia_status,\n+        job_id: jobId\n+      }\n+      try {\n+        let responseData = await AddJob(data);\n+        if (responseData.message === \"job data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+      } catch (err) {\n+        toast.error(\"Something went wrong\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+      }\n+    }\n+    if (validate()) {\n+      setLoading(true);\n+      try {\n+        const responseData = await AddLimia(state, employeeId, jobId);\n+        if (responseData.message === \"Data added successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+        if (responseData.message === \"Data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+      } catch (err) {\n+        console.log(err)\n+        setLoading(false)\n+      }\n+    } else {\n+      setLoading(false);\n+    }\n+\n+  };\n+  // END LIMIA VALIDATION\n+\n+\n+  return (\n+    <>\n+      <Modal\n+        show={props.show}\n+        size=\"lg\"\n+        aria-labelledby=\"contained-modal-title-vcenter\"\n+        centered\n+      >\n+        <button\n+          type=\"button\"\n+          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n+          data-dismiss=\"modal\"\n+          onClick={close}\n+        >\n+          <i className=\"fas fa-times\"></i>\n+        </button>\n+        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n+\n+          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n+          <LmiaTime lmia={state.lmia_status}\n+            job={props.job}\n+            location={location.pathname} />\n+          <form onSubmit={onLmiaUpdateClick}>\n+            {expandedStatus && (\n+              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n+              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n+              //     <div\n+              //       key={j}\n+              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n+              //         (item) =>\n+              //           item.lmia_substage === subStage\n+              //       )\n+              //         ? 'selected'\n+              //         : ''\n+              //         }`}\n+              //       onClick={() =>\n+              //         handleSubStageSelection(expandedStatus, subStage)\n+              //       }\n+              //     >\n+\n+              //       <input\n+              //         type=\"checkbox\"\n+              //         className='mx-2'\n+              //         checked={(selectedStatus || []).some(\n+              //           (item) =>\n+              //             // item.lmia_status === expandedStatus &&\n+              //             item.lmia_substage === subStage\n+              //         )}\n+              //         readOnly\n+              //       />{subStage}\n+              //     </div>\n+              //   ))}\n+              // </div>\n+              <LmiaSubStageSelector\n+                expandedStatus={expandedStatus}\n+                selectedStatus={selectedStatus}\n+                FilterJson={FilterJson}\n+                handleSubStageSelection={handleSubStageSelection}\n+                lmia_status={state.lmia_status}\n+              />\n+            )}\n+            <div className=\"form-group \">\n+              <label\n+                htmlFor=\"lmia_status\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Lmia status <span className=\"text-danger\">*</span>:\n+              </label>\n+              <select\n+                type={\"text\"}\n+                className={\n+                  errors.lmia_status\n+                    ? \"form-control text-capitalize border border-danger\"\n+                    : \"form-control text-capitalize\"\n+                }\n+                value={state.lmia_status || \"\"}\n+                onChange={(e) => {\n+                  setState({ ...state, lmia_status: e.target.value });\n+                  setExpandedStatus(e.target.value);\n+                }}\n+                id=\"lmia_status\"\n+                name=\"lmia_status\"\n+                multiple={false}\n+              >\n+                <option value={\"\"}>Select lmia status</option>\n+                {(FilterJson.lmia_status || []).map((status, i) => {\n+                  isExpanded = expandedStatus === status\n+                  return (\n+                    props.job === \"yes\" ? ( (\n+                      <option value={status} key={i}\n+                      >\n+\n+                        {status}\n+                      </option>\n+                    )) : (i > 2 && (\n+                      <option value={status} key={i}\n+                      >\n+                        {status}\n+                      </option>\n+                    ))\n+                  )\n+                })}\n+              </select>\n+              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n+              {errors.lmia_status && (\n+                <span\n+                  key={errors.lmia_status}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.lmia_status}\n+                </span>\n+              )}\n+            </div>\n+\n+            {/* <div className=\"form-group mt-5\">\n+              <label\n+                htmlFor=\"completion_time\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Expected time of completion<span className=\"text-danger\">*</span>:\n+              </label>\n+              <input\n+                type=\"date\"\n+                className={\n+                  errors.completion_time\n+                    ? \"form-control coustam_datepicker border border-danger\"\n+                    : \"form-control coustam_datepicker\"\n+                }\n+                value={moment(state.completion_time).format(\"DD-MM-YYYY\") || \"\"}\n+                onChange={onInputChange}\n+                id=\"completion_time\"\n+                name=\"completion_time\"\n+                onKeyDownCapture={(e) => e.preventDefault()}\n+                min={moment().format(\"DD-MM-YYYY\")}\n+              />\n+              ----ERROR MESSAGE FOR Admin Name----\n+              {errors.completion_time && (\n+                <span\n+                  key={errors.completion_time}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.completion_time}\n+                </span>\n+              )}\n+            </div> */}\n+            {/* {state.lmia_status === \"complete\" ? (\n+              <>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"posted\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Posted :\n+                  </label>\n+                  <select\n+                    type={\"text\"}\n+                    className={\n+                      errors.posted\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.posted}\n+                    onChange={onInputChange}\n+                    id=\"posted\"\n+                    name=\"posted\"\n+                    multiple={false}\n+                  >\n+                    <option value={\"\"}>Select lmia status</option>\n+                    <option value={\"Yes\"}>Yes</option>\n+                    <option value={\"No\"}>No</option>\n+                  </select>\n+                  ----ERROR MESSAGE FOR LIMA STATUS----\n+                  {errors.posted && (\n+                    <span\n+                      key={errors.posted}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"job_category_id\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Company <span className=\"text-danger\"> *</span> :\n+                  </label>\n+                  <div className=\"position-relative\">\n+                    <select\n+                      name=\"posted_company_id\"\n+                      value={state.posted_company_id}\n+                      onChange={onInputChange}\n+                      className={\n+                        errors.posted_company_id\n+                          ? \" form-control border border-danger position-relative overflow-hidden\"\n+                          : \" form-control position-relative overflow-hidden\"\n+                      }\n+                      placeholder=\"company name\"\n+                      id=\"posted_company_id\"\n+                    >\n+                      <option value={\"\"}>Select Company</option>\n+                      {(company || []).map((com) => (\n+                        <option key={com.company_id} value={com.company_id}>\n+                          {com.company_name}\n+                        </option>\n+                      ))}\n+                    </select>\n+                  </div>\n+                  ----ERROR MESSAGE FOR COMPANY----\n+                  {errors.posted_company_id && (\n+                    <span\n+                      key={errors.posted_company_id}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted_company_id}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Date of posting :\n+                  </label>\n+                  <input\n+                    type={\"date\"}\n+                    className={\n+                      errors.date_of_posting\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.date_of_posting}\n+                    onChange={onInputChange}\n+                    id=\"date_of_posting\"\n+                    name=\"date_of_posting\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.date_of_posting && (\n+                    <span\n+                      key={errors.date_of_posting}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.date_of_posting}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Designation\n+                  </label>\n+                  <input\n+                    type={\"text\"}\n+                    className={\n+                      errors.designation\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.designation}\n+                    onChange={onInputChange}\n+                    id=\"designation\"\n+                    name=\"designation\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.designation && (\n+                    <span\n+                      key={errors.designation}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.designation}\n+                    </span>\n+                  )}\n+                </div>\n+              </>\n+            ) : null} */}\n+            <div className=\"form-group text-center\">\n+              {loading === true ? (\n+                <button\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"button\"\n+                  disabled\n+                >\n+                  <span\n+                    className=\"spinner-border spinner-border-sm \"\n+                    role=\"status\"\n+                    aria-hidden=\"true\"\n+                  ></span>\n+                  <span className=\"sr-only\">Loading...</span>\n+                </button>\n+              ) : (\n+                <button\n+                  onClick={onLmiaUpdateClick}\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"submit\"\n+                >\n+                  Submit\n+                </button>\n+              )}\n+            </div>\n+          </form>\n+        </div>\n+      </Modal>\n+    </>\n+  );\n+}\n+\n+export default LmiaStatus;\n"
                },
                {
                    "date": 1693483484051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,22 +55,12 @@\n         (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n       )[0].id\n       if (props.job === \"yes\") {\n         /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          job_id: jobId,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n+       let DeleteRes =await deleteLmiaSubstageJob(id)\n       } else {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          lmia_id: props.resData.id,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n+        /*employee lima sub stages */\n+        let DeleteRes =await deleteLmiaSubstageEmployee(id)\n       }\n     } else {\n       setSelectedStatus([\n         ...selectedStatus,\n"
                },
                {
                    "date": 1693483506374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,535 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Modal } from \"react-bootstrap\";\n+import useValidation from \"../../common/useValidation\";\n+import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages ,deleteLmiaSubstageJob,deleteLmiaSubstageEmployee } from \"../../../api//api\";\n+import { toast } from \"react-toastify\";\n+import { useLocation } from \"react-router-dom\"\n+import \"react-toastify/dist/ReactToastify.css\";\n+import FilterJson from \"../../json/filterjson\";\n+import LmiaTime from \"../../common/lmiaTime\";\n+import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n+function LmiaStatus(props) {\n+  let [loading, setLoading] = useState(false);\n+  let [apiCall, setApiCall] = useState(false);\n+  const [selectedStatus, setSelectedStatus] = useState([]);\n+  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n+  let employeeId =\n+    props.resData === undefined ? null : props.resData.employee_id;\n+  let lmia_status = props.resData.lmia_status\n+  // let completion_time = props.resData.expected_time_of_completion\n+  let location = useLocation()\n+  let jobId = props.resData.job_id;\n+  // const [company] = useState([]);\n+  // eslint-disable-next-line\n+  let isExpanded = false\n+\n+  /*Function to get lima sub stage */\n+  const GetSubSTage = async () => {\n+    try {\n+      let Response\n+      if (props.job === \"yes\") {\n+        Response = await GetJobLimaSubStages(jobId, lmia_status)\n+      } else {\n+        Response = await GetLimaSubStages(props.resData.id)\n+      }\n+      setSelectedStatus(Response.data.data)\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  }\n+\n+  // Function to handle checkbox selection\n+  const handleSubStageSelection = async (status, subStage) => {\n+    const isSelected = selectedStatus.some(\n+      (item) => item.lmia_status === status && item.lmia_substage === subStage\n+    );\n+    let data;\n+    /*Condition to check the selected substages */\n+    if (isSelected) {\n+      setSelectedStatus(\n+        selectedStatus.filter(\n+          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n+        )\n+      );\n+      let id = selectedStatus.filter(\n+        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n+      )[0].id\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+       let DeleteRes =await deleteLmiaSubstageJob(id)\n+      } else {\n+        /*employee lima sub stages */\n+        let DeleteRes =await deleteLmiaSubstageEmployee(id)\n+      }\n+    } else {\n+      setSelectedStatus([\n+        ...selectedStatus,\n+        { status: status, subStage: subStage },\n+      ]);\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          job_id: jobId,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      } else {\n+        /*Employee lima sub stages */\n+        data = {\n+          lmia_id: props.resData.id,\n+          lmia_substage: subStage,\n+          lmia_status: status\n+        }\n+      }\n+    }\n+    try {\n+      let Response\n+      /*APi called */\n+      if (props.job === \"yes\") {\n+        Response = await AddUpdateJobLmiaSubStage(data)\n+      } else {\n+        Response = await AddUpdateEmployeeLmiaSubStage(data)\n+      }\n+      /*Removed sub stage response */\n+      if (Response.message === \"updated successfully\") {\n+        toast.success(\"Lmia Sub Stage Removed successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+      /*Added sub stage response */\n+      if (Response.message === 'insert successfully') {\n+        toast.success(\"Lmia Sub Stage Added successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        // if (status !== props.resData.lmia_status) {\n+        //   setState({ ...state, lmia_status: status })\n+        //   if (typeof onLmiaUpdateClick === 'function') {\n+        //     onLmiaUpdateClick(\"sub\");\n+        //   }\n+        // }\n+        setApiCall(true)\n+      }\n+    } catch (err) {\n+      console.log(err)\n+    }\n+  };\n+  // console.log(\"Sub Stages =>\", selectedStatus)\n+  /* Functionality to close the modal */\n+  const close = () => {\n+    setState({ ...state, lmia_status: \"\" });\n+    setErrors(\"\");\n+    setLoading(false);\n+    props.close();\n+  };\n+  // USER LIMIA UPDATE VALIDATION\n+  useEffect(() => {\n+    GetSubSTage()\n+    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n+    if (apiCall === true) {\n+      setApiCall(false)\n+    }\n+  }, [apiCall, lmia_status]);\n+\n+  useEffect(() => { }, [])\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    lmia_status: \"\",\n+    // completion_time: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    lmia_status: [\n+      (value) =>\n+        value === \"\" || value === null\n+          ? \"Lmia status is required\"\n+          : \"\",\n+    ],\n+    // completion_time: [\n+    //   (value) =>\n+    //     value === \"\" || value === null \n+    //       ? \"Expected time of completion is required\"\n+    //       : \"\",\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n+  const onLmiaUpdateClick = async (event) => {\n+    event.preventDefault();\n+    if (validate() && props.job === \"yes\") {\n+      let data = {\n+        // completion_time: state.completion_time,\n+        lmia_status: state.lmia_status,\n+        job_id: jobId\n+      }\n+      try {\n+        let responseData = await AddJob(data);\n+        if (responseData.message === \"job data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+      } catch (err) {\n+        toast.error(\"Something went wrong\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+      }\n+    }\n+    if (validate()) {\n+      setLoading(true);\n+      try {\n+        const responseData = await AddLimia(state, employeeId, jobId);\n+        if (responseData.message === \"Data added successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+        if (responseData.message === \"Data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true)\n+          close()\n+        }\n+      } catch (err) {\n+        console.log(err)\n+        setLoading(false)\n+      }\n+    } else {\n+      setLoading(false);\n+    }\n+\n+  };\n+  // END LIMIA VALIDATION\n+\n+\n+  return (\n+    <>\n+      <Modal\n+        show={props.show}\n+        size=\"lg\"\n+        aria-labelledby=\"contained-modal-title-vcenter\"\n+        centered\n+      >\n+        <button\n+          type=\"button\"\n+          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n+          data-dismiss=\"modal\"\n+          onClick={close}\n+        >\n+          <i className=\"fas fa-times\"></i>\n+        </button>\n+        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n+\n+          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n+          <LmiaTime lmia={state.lmia_status}\n+            job={props.job}\n+            location={location.pathname} />\n+          <form onSubmit={onLmiaUpdateClick}>\n+            {expandedStatus && (\n+              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n+              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n+              //     <div\n+              //       key={j}\n+              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n+              //         (item) =>\n+              //           item.lmia_substage === subStage\n+              //       )\n+              //         ? 'selected'\n+              //         : ''\n+              //         }`}\n+              //       onClick={() =>\n+              //         handleSubStageSelection(expandedStatus, subStage)\n+              //       }\n+              //     >\n+\n+              //       <input\n+              //         type=\"checkbox\"\n+              //         className='mx-2'\n+              //         checked={(selectedStatus || []).some(\n+              //           (item) =>\n+              //             // item.lmia_status === expandedStatus &&\n+              //             item.lmia_substage === subStage\n+              //         )}\n+              //         readOnly\n+              //       />{subStage}\n+              //     </div>\n+              //   ))}\n+              // </div>\n+              <LmiaSubStageSelector\n+                expandedStatus={expandedStatus}\n+                selectedStatus={selectedStatus}\n+                FilterJson={FilterJson}\n+                handleSubStageSelection={handleSubStageSelection}\n+                lmia_status={state.lmia_status}\n+              />\n+            )}\n+            <div className=\"form-group \">\n+              <label\n+                htmlFor=\"lmia_status\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Lmia status <span className=\"text-danger\">*</span>:\n+              </label>\n+              <select\n+                type={\"text\"}\n+                className={\n+                  errors.lmia_status\n+                    ? \"form-control text-capitalize border border-danger\"\n+                    : \"form-control text-capitalize\"\n+                }\n+                value={state.lmia_status || \"\"}\n+                onChange={(e) => {\n+                  setState({ ...state, lmia_status: e.target.value });\n+                  setExpandedStatus(e.target.value);\n+                }}\n+                id=\"lmia_status\"\n+                name=\"lmia_status\"\n+                multiple={false}\n+              >\n+                <option value={\"\"}>Select lmia status</option>\n+                {(FilterJson.lmia_status || []).map((status, i) => {\n+                  isExpanded = expandedStatus === status\n+                  return (\n+                    props.job === \"yes\" ? ( (\n+                      <option value={status} key={i}\n+                      >\n+\n+                        {status}\n+                      </option>\n+                    )) : (i > 2 && (\n+                      <option value={status} key={i}\n+                      >\n+                        {status}\n+                      </option>\n+                    ))\n+                  )\n+                })}\n+              </select>\n+              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n+              {errors.lmia_status && (\n+                <span\n+                  key={errors.lmia_status}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.lmia_status}\n+                </span>\n+              )}\n+            </div>\n+\n+            {/* <div className=\"form-group mt-5\">\n+              <label\n+                htmlFor=\"completion_time\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Expected time of completion<span className=\"text-danger\">*</span>:\n+              </label>\n+              <input\n+                type=\"date\"\n+                className={\n+                  errors.completion_time\n+                    ? \"form-control coustam_datepicker border border-danger\"\n+                    : \"form-control coustam_datepicker\"\n+                }\n+                value={moment(state.completion_time).format(\"DD-MM-YYYY\") || \"\"}\n+                onChange={onInputChange}\n+                id=\"completion_time\"\n+                name=\"completion_time\"\n+                onKeyDownCapture={(e) => e.preventDefault()}\n+                min={moment().format(\"DD-MM-YYYY\")}\n+              />\n+              ----ERROR MESSAGE FOR Admin Name----\n+              {errors.completion_time && (\n+                <span\n+                  key={errors.completion_time}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.completion_time}\n+                </span>\n+              )}\n+            </div> */}\n+            {/* {state.lmia_status === \"complete\" ? (\n+              <>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"posted\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Posted :\n+                  </label>\n+                  <select\n+                    type={\"text\"}\n+                    className={\n+                      errors.posted\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.posted}\n+                    onChange={onInputChange}\n+                    id=\"posted\"\n+                    name=\"posted\"\n+                    multiple={false}\n+                  >\n+                    <option value={\"\"}>Select lmia status</option>\n+                    <option value={\"Yes\"}>Yes</option>\n+                    <option value={\"No\"}>No</option>\n+                  </select>\n+                  ----ERROR MESSAGE FOR LIMA STATUS----\n+                  {errors.posted && (\n+                    <span\n+                      key={errors.posted}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"job_category_id\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Company <span className=\"text-danger\"> *</span> :\n+                  </label>\n+                  <div className=\"position-relative\">\n+                    <select\n+                      name=\"posted_company_id\"\n+                      value={state.posted_company_id}\n+                      onChange={onInputChange}\n+                      className={\n+                        errors.posted_company_id\n+                          ? \" form-control border border-danger position-relative overflow-hidden\"\n+                          : \" form-control position-relative overflow-hidden\"\n+                      }\n+                      placeholder=\"company name\"\n+                      id=\"posted_company_id\"\n+                    >\n+                      <option value={\"\"}>Select Company</option>\n+                      {(company || []).map((com) => (\n+                        <option key={com.company_id} value={com.company_id}>\n+                          {com.company_name}\n+                        </option>\n+                      ))}\n+                    </select>\n+                  </div>\n+                  ----ERROR MESSAGE FOR COMPANY----\n+                  {errors.posted_company_id && (\n+                    <span\n+                      key={errors.posted_company_id}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted_company_id}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Date of posting :\n+                  </label>\n+                  <input\n+                    type={\"date\"}\n+                    className={\n+                      errors.date_of_posting\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.date_of_posting}\n+                    onChange={onInputChange}\n+                    id=\"date_of_posting\"\n+                    name=\"date_of_posting\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.date_of_posting && (\n+                    <span\n+                      key={errors.date_of_posting}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.date_of_posting}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Designation\n+                  </label>\n+                  <input\n+                    type={\"text\"}\n+                    className={\n+                      errors.designation\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.designation}\n+                    onChange={onInputChange}\n+                    id=\"designation\"\n+                    name=\"designation\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.designation && (\n+                    <span\n+                      key={errors.designation}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.designation}\n+                    </span>\n+                  )}\n+                </div>\n+              </>\n+            ) : null} */}\n+            <div className=\"form-group text-center\">\n+              {loading === true ? (\n+                <button\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"button\"\n+                  disabled\n+                >\n+                  <span\n+                    className=\"spinner-border spinner-border-sm \"\n+                    role=\"status\"\n+                    aria-hidden=\"true\"\n+                  ></span>\n+                  <span className=\"sr-only\">Loading...</span>\n+                </button>\n+              ) : (\n+                <button\n+                  onClick={onLmiaUpdateClick}\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"submit\"\n+                >\n+                  Submit\n+                </button>\n+              )}\n+            </div>\n+          </form>\n+        </div>\n+      </Modal>\n+    </>\n+  );\n+}\n+\n+export default LmiaStatus;\n"
                },
                {
                    "date": 1693483680186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,1093 +56,23 @@\n       )[0].id\n       if (props.job === \"yes\") {\n         /*Job lima sub stages */\n        let DeleteRes =await deleteLmiaSubstageJob(id)\n-      } else {\n-        /*employee lima sub stages */\n-        let DeleteRes =await deleteLmiaSubstageEmployee(id)\n-      }\n-    } else {\n-      setSelectedStatus([\n-        ...selectedStatus,\n-        { status: status, subStage: subStage },\n-      ]);\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          job_id: jobId,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Employee lima sub stages */\n-        data = {\n-          lmia_id: props.resData.id,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      }\n-    }\n-    try {\n-      let Response\n-      /*APi called */\n-      if (props.job === \"yes\") {\n-        Response = await AddUpdateJobLmiaSubStage(data)\n-      } else {\n-        Response = await AddUpdateEmployeeLmiaSubStage(data)\n-      }\n-      /*Removed sub stage response */\n-      if (Response.message === \"updated successfully\") {\n+       if(DeleteRes.message === \"successfully deleted\"){\n         toast.success(\"Lmia Sub Stage Removed successfully\", {\n           position: toast.POSITION.TOP_RIGHT,\n           autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-      /*Added sub stage response */\n-      if (Response.message === 'insert successfully') {\n-        toast.success(\"Lmia Sub Stage Added successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  };\n-  // console.log(\"Sub Stages =>\", selectedStatus)\n-  /* Functionality to close the modal */\n-  const close = () => {\n-    setState({ ...state, lmia_status: \"\" });\n-    setErrors(\"\");\n-    setLoading(false);\n-    props.close();\n-  };\n-  // USER LIMIA UPDATE VALIDATION\n-  useEffect(() => {\n-    GetSubSTage()\n-    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n-    if (apiCall === true) {\n-      setApiCall(false)\n-    }\n-  }, [apiCall, lmia_status]);\n-\n-  useEffect(() => { }, [])\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    lmia_status: \"\",\n-    // completion_time: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    lmia_status: [\n-      (value) =>\n-        value === \"\" || value === null\n-          ? \"Lmia status is required\"\n-          : \"\",\n-    ],\n-    // completion_time: [\n-    //   (value) =>\n-    //     value === \"\" || value === null \n-    //       ? \"Expected time of completion is required\"\n-    //       : \"\",\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n-  const onLmiaUpdateClick = async (event) => {\n-    event.preventDefault();\n-    if (validate() && props.job === \"yes\") {\n-      let data = {\n-        // completion_time: state.completion_time,\n-        lmia_status: state.lmia_status,\n-        job_id: jobId\n-      }\n-      try {\n-        let responseData = await AddJob(data);\n-        if (responseData.message === \"job data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-      } catch (err) {\n-        toast.error(\"Something went wrong\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-      }\n-    }\n-    if (validate()) {\n-      setLoading(true);\n-      try {\n-        const responseData = await AddLimia(state, employeeId, jobId);\n-        if (responseData.message === \"Data added successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-        if (responseData.message === \"Data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-      } catch (err) {\n-        console.log(err)\n-        setLoading(false)\n-      }\n-    } else {\n-      setLoading(false);\n-    }\n-\n-  };\n-  // END LIMIA VALIDATION\n-\n-\n-  return (\n-    <>\n-      <Modal\n-        show={props.show}\n-        size=\"lg\"\n-        aria-labelledby=\"contained-modal-title-vcenter\"\n-        centered\n-      >\n-        <button\n-          type=\"button\"\n-          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n-          data-dismiss=\"modal\"\n-          onClick={close}\n-        >\n-          <i className=\"fas fa-times\"></i>\n-        </button>\n-        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n-\n-          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n-          <LmiaTime lmia={state.lmia_status}\n-            job={props.job}\n-            location={location.pathname} />\n-          <form onSubmit={onLmiaUpdateClick}>\n-            {expandedStatus && (\n-              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n-              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n-              //     <div\n-              //       key={j}\n-              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n-              //         (item) =>\n-              //           item.lmia_substage === subStage\n-              //       )\n-              //         ? 'selected'\n-              //         : ''\n-              //         }`}\n-              //       onClick={() =>\n-              //         handleSubStageSelection(expandedStatus, subStage)\n-              //       }\n-              //     >\n-\n-              //       <input\n-              //         type=\"checkbox\"\n-              //         className='mx-2'\n-              //         checked={(selectedStatus || []).some(\n-              //           (item) =>\n-              //             // item.lmia_status === expandedStatus &&\n-              //             item.lmia_substage === subStage\n-              //         )}\n-              //         readOnly\n-              //       />{subStage}\n-              //     </div>\n-              //   ))}\n-              // </div>\n-              <LmiaSubStageSelector\n-                expandedStatus={expandedStatus}\n-                selectedStatus={selectedStatus}\n-                FilterJson={FilterJson}\n-                handleSubStageSelection={handleSubStageSelection}\n-                lmia_status={state.lmia_status}\n-              />\n-            )}\n-            <div className=\"form-group \">\n-              <label\n-                htmlFor=\"lmia_status\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Lmia status <span className=\"text-danger\">*</span>:\n-              </label>\n-              <select\n-                type={\"text\"}\n-                className={\n-                  errors.lmia_status\n-                    ? \"form-control text-capitalize border border-danger\"\n-                    : \"form-control text-capitalize\"\n-                }\n-                value={state.lmia_status || \"\"}\n-                onChange={(e) => {\n-                  setState({ ...state, lmia_status: e.target.value });\n-                  setExpandedStatus(e.target.value);\n-                }}\n-                id=\"lmia_status\"\n-                name=\"lmia_status\"\n-                multiple={false}\n-              >\n-                <option value={\"\"}>Select lmia status</option>\n-                {(FilterJson.lmia_status || []).map((status, i) => {\n-                  isExpanded = expandedStatus === status\n-                  return (\n-                    props.job === \"yes\" ? ( (\n-                      <option value={status} key={i}\n-                      >\n-\n-                        {status}\n-                      </option>\n-                    )) : (i > 2 && (\n-                      <option value={status} key={i}\n-                      >\n-                        {status}\n-                      </option>\n-                    ))\n-                  )\n-                })}\n-              </select>\n-              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n-              {errors.lmia_status && (\n-                <span\n-                  key={errors.lmia_status}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.lmia_status}\n-                </span>\n-              )}\n-            </div>\n-\n-            {/* <div className=\"form-group mt-5\">\n-              <label\n-                htmlFor=\"completion_time\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Expected time of completion<span className=\"text-danger\">*</span>:\n-              </label>\n-              <input\n-                type=\"date\"\n-                className={\n-                  errors.completion_time\n-                    ? \"form-control coustam_datepicker border border-danger\"\n-                    : \"form-control coustam_datepicker\"\n-                }\n-                value={moment(state.completion_time).format(\"DD-MM-YYYY\") || \"\"}\n-                onChange={onInputChange}\n-                id=\"completion_time\"\n-                name=\"completion_time\"\n-                onKeyDownCapture={(e) => e.preventDefault()}\n-                min={moment().format(\"DD-MM-YYYY\")}\n-              />\n-              ----ERROR MESSAGE FOR Admin Name----\n-              {errors.completion_time && (\n-                <span\n-                  key={errors.completion_time}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.completion_time}\n-                </span>\n-              )}\n-            </div> */}\n-            {/* {state.lmia_status === \"complete\" ? (\n-              <>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"posted\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Posted :\n-                  </label>\n-                  <select\n-                    type={\"text\"}\n-                    className={\n-                      errors.posted\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.posted}\n-                    onChange={onInputChange}\n-                    id=\"posted\"\n-                    name=\"posted\"\n-                    multiple={false}\n-                  >\n-                    <option value={\"\"}>Select lmia status</option>\n-                    <option value={\"Yes\"}>Yes</option>\n-                    <option value={\"No\"}>No</option>\n-                  </select>\n-                  ----ERROR MESSAGE FOR LIMA STATUS----\n-                  {errors.posted && (\n-                    <span\n-                      key={errors.posted}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"job_category_id\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Company <span className=\"text-danger\"> *</span> :\n-                  </label>\n-                  <div className=\"position-relative\">\n-                    <select\n-                      name=\"posted_company_id\"\n-                      value={state.posted_company_id}\n-                      onChange={onInputChange}\n-                      className={\n-                        errors.posted_company_id\n-                          ? \" form-control border border-danger position-relative overflow-hidden\"\n-                          : \" form-control position-relative overflow-hidden\"\n-                      }\n-                      placeholder=\"company name\"\n-                      id=\"posted_company_id\"\n-                    >\n-                      <option value={\"\"}>Select Company</option>\n-                      {(company || []).map((com) => (\n-                        <option key={com.company_id} value={com.company_id}>\n-                          {com.company_name}\n-                        </option>\n-                      ))}\n-                    </select>\n-                  </div>\n-                  ----ERROR MESSAGE FOR COMPANY----\n-                  {errors.posted_company_id && (\n-                    <span\n-                      key={errors.posted_company_id}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted_company_id}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Date of posting :\n-                  </label>\n-                  <input\n-                    type={\"date\"}\n-                    className={\n-                      errors.date_of_posting\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.date_of_posting}\n-                    onChange={onInputChange}\n-                    id=\"date_of_posting\"\n-                    name=\"date_of_posting\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.date_of_posting && (\n-                    <span\n-                      key={errors.date_of_posting}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.date_of_posting}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Designation\n-                  </label>\n-                  <input\n-                    type={\"text\"}\n-                    className={\n-                      errors.designation\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.designation}\n-                    onChange={onInputChange}\n-                    id=\"designation\"\n-                    name=\"designation\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.designation && (\n-                    <span\n-                      key={errors.designation}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.designation}\n-                    </span>\n-                  )}\n-                </div>\n-              </>\n-            ) : null} */}\n-            <div className=\"form-group text-center\">\n-              {loading === true ? (\n-                <button\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"button\"\n-                  disabled\n-                >\n-                  <span\n-                    className=\"spinner-border spinner-border-sm \"\n-                    role=\"status\"\n-                    aria-hidden=\"true\"\n-                  ></span>\n-                  <span className=\"sr-only\">Loading...</span>\n-                </button>\n-              ) : (\n-                <button\n-                  onClick={onLmiaUpdateClick}\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"submit\"\n-                >\n-                  Submit\n-                </button>\n-              )}\n-            </div>\n-          </form>\n-        </div>\n-      </Modal>\n-    </>\n-  );\n-}\n-\n-export default LmiaStatus;\n-import React, { useEffect, useState } from \"react\";\n-import { Modal } from \"react-bootstrap\";\n-import useValidation from \"../../common/useValidation\";\n-import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n-import { toast } from \"react-toastify\";\n-import { useLocation } from \"react-router-dom\"\n-import \"react-toastify/dist/ReactToastify.css\";\n-import FilterJson from \"../../json/filterjson\";\n-import LmiaTime from \"../../common/lmiaTime\";\n-import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n-function LmiaStatus(props) {\n-  let [loading, setLoading] = useState(false);\n-  let [apiCall, setApiCall] = useState(false);\n-  const [selectedStatus, setSelectedStatus] = useState([]);\n-  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n-  let employeeId =\n-    props.resData === undefined ? null : props.resData.employee_id;\n-  let lmia_status = props.resData.lmia_status\n-  // let completion_time = props.resData.expected_time_of_completion\n-  let location = useLocation()\n-  let jobId = props.resData.job_id;\n-  // const [company] = useState([]);\n-  // eslint-disable-next-line\n-  let isExpanded = false\n-\n-  /*Function to get lima sub stage */\n-  const GetSubSTage = async () => {\n-    try {\n-      let Response\n-      if (props.job === \"yes\") {\n-        Response = await GetJobLimaSubStages(jobId, lmia_status)\n+       })\n       } else {\n-        Response = await GetLimaSubStages(props.resData.id)\n-      }\n-      setSelectedStatus(Response.data.data)\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  }\n-\n-  // Function to handle checkbox selection\n-  const handleSubStageSelection = async (status, subStage) => {\n-    const isSelected = selectedStatus.some(\n-      (item) => item.lmia_status === status && item.lmia_substage === subStage\n-    );\n-    let data;\n-    /*Condition to check the selected substages */\n-    if (isSelected) {\n-      setSelectedStatus(\n-        selectedStatus.filter(\n-          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n-        )\n-      );\n-      let id = selectedStatus.filter(\n-        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n-      )[0].id\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-       let DeleteRes =await deleteLmiaSubstageJob(id)\n-      } else {\n         /*employee lima sub stages */\n         let DeleteRes =await deleteLmiaSubstageEmployee(id)\n-      }\n-    } else {\n-      setSelectedStatus([\n-        ...selectedStatus,\n-        { status: status, subStage: subStage },\n-      ]);\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          job_id: jobId,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Employee lima sub stages */\n-        data = {\n-          lmia_id: props.resData.id,\n-          lmia_substage: subStage,\n-          lmia_status: status\n-        }\n-      }\n-    }\n-    try {\n-      let Response\n-      /*APi called */\n-      if (props.job === \"yes\") {\n-        Response = await AddUpdateJobLmiaSubStage(data)\n-      } else {\n-        Response = await AddUpdateEmployeeLmiaSubStage(data)\n-      }\n-      /*Removed sub stage response */\n-      if (Response.message === \"updated successfully\") {\n-        toast.success(\"Lmia Sub Stage Removed successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-      /*Added sub stage response */\n-      if (Response.message === 'insert successfully') {\n-        toast.success(\"Lmia Sub Stage Added successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  };\n-  // console.log(\"Sub Stages =>\", selectedStatus)\n-  /* Functionality to close the modal */\n-  const close = () => {\n-    setState({ ...state, lmia_status: \"\" });\n-    setErrors(\"\");\n-    setLoading(false);\n-    props.close();\n-  };\n-  // USER LIMIA UPDATE VALIDATION\n-  useEffect(() => {\n-    GetSubSTage()\n-    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n-    if (apiCall === true) {\n-      setApiCall(false)\n-    }\n-  }, [apiCall, lmia_status]);\n-\n-  useEffect(() => { }, [])\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    lmia_status: \"\",\n-    // completion_time: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    lmia_status: [\n-      (value) =>\n-        value === \"\" || value === null\n-          ? \"Lmia status is required\"\n-          : \"\",\n-    ],\n-    // completion_time: [\n-    //   (value) =>\n-    //     value === \"\" || value === null \n-    //       ? \"Expected time of completion is required\"\n-    //       : \"\",\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n-  const onLmiaUpdateClick = async (event) => {\n-    event.preventDefault();\n-    if (validate() && props.job === \"yes\") {\n-      let data = {\n-        // completion_time: state.completion_time,\n-        lmia_status: state.lmia_status,\n-        job_id: jobId\n-      }\n-      try {\n-        let responseData = await AddJob(data);\n-        if (responseData.message === \"job data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n+        if(DeleteRes.message === \"successfully deleted\"){\n+          toast.success(\"Lmia Sub Stage Removed successfully\", {\n             position: toast.POSITION.TOP_RIGHT,\n             autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-      } catch (err) {\n-        toast.error(\"Something went wrong\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n+         })\n       }\n-    }\n-    if (validate()) {\n-      setLoading(true);\n-      try {\n-        const responseData = await AddLimia(state, employeeId, jobId);\n-        if (responseData.message === \"Data added successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-        if (responseData.message === \"Data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true)\n-          close()\n-        }\n-      } catch (err) {\n-        console.log(err)\n-        setLoading(false)\n-      }\n     } else {\n-      setLoading(false);\n-    }\n-\n-  };\n-  // END LIMIA VALIDATION\n-\n-\n-  return (\n-    <>\n-      <Modal\n-        show={props.show}\n-        size=\"lg\"\n-        aria-labelledby=\"contained-modal-title-vcenter\"\n-        centered\n-      >\n-        <button\n-          type=\"button\"\n-          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n-          data-dismiss=\"modal\"\n-          onClick={close}\n-        >\n-          <i className=\"fas fa-times\"></i>\n-        </button>\n-        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n-\n-          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n-          <LmiaTime lmia={state.lmia_status}\n-            job={props.job}\n-            location={location.pathname} />\n-          <form onSubmit={onLmiaUpdateClick}>\n-            {expandedStatus && (\n-              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n-              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n-              //     <div\n-              //       key={j}\n-              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n-              //         (item) =>\n-              //           item.lmia_substage === subStage\n-              //       )\n-              //         ? 'selected'\n-              //         : ''\n-              //         }`}\n-              //       onClick={() =>\n-              //         handleSubStageSelection(expandedStatus, subStage)\n-              //       }\n-              //     >\n-\n-              //       <input\n-              //         type=\"checkbox\"\n-              //         className='mx-2'\n-              //         checked={(selectedStatus || []).some(\n-              //           (item) =>\n-              //             // item.lmia_status === expandedStatus &&\n-              //             item.lmia_substage === subStage\n-              //         )}\n-              //         readOnly\n-              //       />{subStage}\n-              //     </div>\n-              //   ))}\n-              // </div>\n-              <LmiaSubStageSelector\n-                expandedStatus={expandedStatus}\n-                selectedStatus={selectedStatus}\n-                FilterJson={FilterJson}\n-                handleSubStageSelection={handleSubStageSelection}\n-                lmia_status={state.lmia_status}\n-              />\n-            )}\n-            <div className=\"form-group \">\n-              <label\n-                htmlFor=\"lmia_status\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Lmia status <span className=\"text-danger\">*</span>:\n-              </label>\n-              <select\n-                type={\"text\"}\n-                className={\n-                  errors.lmia_status\n-                    ? \"form-control text-capitalize border border-danger\"\n-                    : \"form-control text-capitalize\"\n-                }\n-                value={state.lmia_status || \"\"}\n-                onChange={(e) => {\n-                  setState({ ...state, lmia_status: e.target.value });\n-                  setExpandedStatus(e.target.value);\n-                }}\n-                id=\"lmia_status\"\n-                name=\"lmia_status\"\n-                multiple={false}\n-              >\n-                <option value={\"\"}>Select lmia status</option>\n-                {(FilterJson.lmia_status || []).map((status, i) => {\n-                  isExpanded = expandedStatus === status\n-                  return (\n-                    props.job === \"yes\" ? ( (\n-                      <option value={status} key={i}\n-                      >\n-\n-                        {status}\n-                      </option>\n-                    )) : (i > 2 && (\n-                      <option value={status} key={i}\n-                      >\n-                        {status}\n-                      </option>\n-                    ))\n-                  )\n-                })}\n-              </select>\n-              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n-              {errors.lmia_status && (\n-                <span\n-                  key={errors.lmia_status}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.lmia_status}\n-                </span>\n-              )}\n-            </div>\n-\n-            {/* <div className=\"form-group mt-5\">\n-              <label\n-                htmlFor=\"completion_time\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Expected time of completion<span className=\"text-danger\">*</span>:\n-              </label>\n-              <input\n-                type=\"date\"\n-                className={\n-                  errors.completion_time\n-                    ? \"form-control coustam_datepicker border border-danger\"\n-                    : \"form-control coustam_datepicker\"\n-                }\n-                value={moment(state.completion_time).format(\"DD-MM-YYYY\") || \"\"}\n-                onChange={onInputChange}\n-                id=\"completion_time\"\n-                name=\"completion_time\"\n-                onKeyDownCapture={(e) => e.preventDefault()}\n-                min={moment().format(\"DD-MM-YYYY\")}\n-              />\n-              ----ERROR MESSAGE FOR Admin Name----\n-              {errors.completion_time && (\n-                <span\n-                  key={errors.completion_time}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.completion_time}\n-                </span>\n-              )}\n-            </div> */}\n-            {/* {state.lmia_status === \"complete\" ? (\n-              <>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"posted\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Posted :\n-                  </label>\n-                  <select\n-                    type={\"text\"}\n-                    className={\n-                      errors.posted\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.posted}\n-                    onChange={onInputChange}\n-                    id=\"posted\"\n-                    name=\"posted\"\n-                    multiple={false}\n-                  >\n-                    <option value={\"\"}>Select lmia status</option>\n-                    <option value={\"Yes\"}>Yes</option>\n-                    <option value={\"No\"}>No</option>\n-                  </select>\n-                  ----ERROR MESSAGE FOR LIMA STATUS----\n-                  {errors.posted && (\n-                    <span\n-                      key={errors.posted}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"job_category_id\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Company <span className=\"text-danger\"> *</span> :\n-                  </label>\n-                  <div className=\"position-relative\">\n-                    <select\n-                      name=\"posted_company_id\"\n-                      value={state.posted_company_id}\n-                      onChange={onInputChange}\n-                      className={\n-                        errors.posted_company_id\n-                          ? \" form-control border border-danger position-relative overflow-hidden\"\n-                          : \" form-control position-relative overflow-hidden\"\n-                      }\n-                      placeholder=\"company name\"\n-                      id=\"posted_company_id\"\n-                    >\n-                      <option value={\"\"}>Select Company</option>\n-                      {(company || []).map((com) => (\n-                        <option key={com.company_id} value={com.company_id}>\n-                          {com.company_name}\n-                        </option>\n-                      ))}\n-                    </select>\n-                  </div>\n-                  ----ERROR MESSAGE FOR COMPANY----\n-                  {errors.posted_company_id && (\n-                    <span\n-                      key={errors.posted_company_id}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted_company_id}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Date of posting :\n-                  </label>\n-                  <input\n-                    type={\"date\"}\n-                    className={\n-                      errors.date_of_posting\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.date_of_posting}\n-                    onChange={onInputChange}\n-                    id=\"date_of_posting\"\n-                    name=\"date_of_posting\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.date_of_posting && (\n-                    <span\n-                      key={errors.date_of_posting}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.date_of_posting}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Designation\n-                  </label>\n-                  <input\n-                    type={\"text\"}\n-                    className={\n-                      errors.designation\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.designation}\n-                    onChange={onInputChange}\n-                    id=\"designation\"\n-                    name=\"designation\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.designation && (\n-                    <span\n-                      key={errors.designation}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.designation}\n-                    </span>\n-                  )}\n-                </div>\n-              </>\n-            ) : null} */}\n-            <div className=\"form-group text-center\">\n-              {loading === true ? (\n-                <button\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"button\"\n-                  disabled\n-                >\n-                  <span\n-                    className=\"spinner-border spinner-border-sm \"\n-                    role=\"status\"\n-                    aria-hidden=\"true\"\n-                  ></span>\n-                  <span className=\"sr-only\">Loading...</span>\n-                </button>\n-              ) : (\n-                <button\n-                  onClick={onLmiaUpdateClick}\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"submit\"\n-                >\n-                  Submit\n-                </button>\n-              )}\n-            </div>\n-          </form>\n-        </div>\n-      </Modal>\n-    </>\n-  );\n-}\n-\n-export default LmiaStatus;\n-import React, { useEffect, useState } from \"react\";\n-import { Modal } from \"react-bootstrap\";\n-import useValidation from \"../../common/useValidation\";\n-import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\n-import { toast } from \"react-toastify\";\n-import { useLocation } from \"react-router-dom\"\n-import \"react-toastify/dist/ReactToastify.css\";\n-import FilterJson from \"../../json/filterjson\";\n-import LmiaTime from \"../../common/lmiaTime\";\n-import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n-function LmiaStatus(props) {\n-  let [loading, setLoading] = useState(false);\n-  let [apiCall, setApiCall] = useState(false);\n-  const [selectedStatus, setSelectedStatus] = useState([]);\n-  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n-  let employeeId =\n-    props.resData === undefined ? null : props.resData.employee_id;\n-  let lmia_status = props.resData.lmia_status\n-  // let completion_time = props.resData.expected_time_of_completion\n-  let location = useLocation()\n-  let jobId = props.resData.job_id;\n-  // const [company] = useState([]);\n-  // eslint-disable-next-line\n-  let isExpanded = false\n-\n-  /*Function to get lima sub stage */\n-  const GetSubSTage = async () => {\n-    try {\n-      let Response\n-      if (props.job === \"yes\") {\n-        Response = await GetJobLimaSubStages(jobId, lmia_status)\n-      } else {\n-        Response = await GetLimaSubStages(props.resData.id)\n-      }\n-      setSelectedStatus(Response.data.data)\n-    } catch (err) {\n-      console.log(err)\n-    }\n-  }\n-\n-  // Function to handle checkbox selection\n-  const handleSubStageSelection = async (status, subStage) => {\n-    const isSelected = selectedStatus.some(\n-      (item) => item.lmia_status === status && item.lmia_substage === subStage\n-    );\n-    let data;\n-    /*Condition to check the selected substages */\n-    if (isSelected) {\n-      setSelectedStatus(\n-        selectedStatus.filter(\n-          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n-        )\n-      );\n-      let id = selectedStatus.filter(\n-        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n-      )[0].id\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          job_id: jobId,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n-      } else {\n-        /*Job lima sub stages */\n-        data = {\n-          id: id,\n-          lmia_id: props.resData.id,\n-          lmia_substage: \"false\",\n-          lmia_status: status\n-        }\n-      }\n-    } else {\n       setSelectedStatus([\n         ...selectedStatus,\n         { status: status, subStage: subStage },\n       ]);\n@@ -1169,22 +99,8 @@\n         Response = await AddUpdateJobLmiaSubStage(data)\n       } else {\n         Response = await AddUpdateEmployeeLmiaSubStage(data)\n       }\n-      /*Removed sub stage response */\n-      if (Response.message === \"updated successfully\") {\n-        toast.success(\"Lmia Sub Stage Removed successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true)\n-      }\n       /*Added sub stage response */\n       if (Response.message === 'insert successfully') {\n         toast.success(\"Lmia Sub Stage Added successfully\", {\n           position: toast.POSITION.TOP_RIGHT,\n@@ -1359,8 +275,9 @@\n                 expandedStatus={expandedStatus}\n                 selectedStatus={selectedStatus}\n                 FilterJson={FilterJson}\n                 handleSubStageSelection={handleSubStageSelection}\n+                lmia_status={state.lmia_status}\n               />\n             )}\n             <div className=\"form-group \">\n               <label\n"
                },
                {
                    "date": 1693483762155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,20 +57,24 @@\n       if (props.job === \"yes\") {\n         /*Job lima sub stages */\n        let DeleteRes =await deleteLmiaSubstageJob(id)\n        if(DeleteRes.message === \"successfully deleted\"){\n-        toast.success(\"Lmia Sub Stage Removed successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-       })\n+          toast.success(\"Lmia Sub Stage Removed successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setApiCall(true)\n+        }\n       } else {\n         /*employee lima sub stages */\n         let DeleteRes =await deleteLmiaSubstageEmployee(id)\n         if(DeleteRes.message === \"successfully deleted\"){\n           toast.success(\"Lmia Sub Stage Removed successfully\", {\n             position: toast.POSITION.TOP_RIGHT,\n             autoClose: 1000,\n-         })\n+          });\n+          setApiCall(true)\n+        }\n       }\n     } else {\n       setSelectedStatus([\n         ...selectedStatus,\n@@ -99,8 +103,10 @@\n         Response = await AddUpdateJobLmiaSubStage(data)\n       } else {\n         Response = await AddUpdateEmployeeLmiaSubStage(data)\n       }\n+      /*Removed sub stage response */\n+      \n       /*Added sub stage response */\n       if (Response.message === 'insert successfully') {\n         toast.success(\"Lmia Sub Stage Added successfully\", {\n           position: toast.POSITION.TOP_RIGHT,\n"
                },
                {
                    "date": 1693484077914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,54 @@\n import React, { useEffect, useState } from \"react\";\n import { Modal } from \"react-bootstrap\";\n import useValidation from \"../../common/useValidation\";\n-import { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages ,deleteLmiaSubstageJob,deleteLmiaSubstageEmployee } from \"../../../api//api\";\n+import {\n+  AddLimia,\n+  AddJob,\n+  AddUpdateEmployeeLmiaSubStage,\n+  GetLimaSubStages,\n+  AddUpdateJobLmiaSubStage,\n+  GetJobLimaSubStages,\n+  deleteLmiaSubstageJob,\n+  deleteLmiaSubstageEmployee,\n+} from \"../../../api//api\";\n import { toast } from \"react-toastify\";\n-import { useLocation } from \"react-router-dom\"\n+import { useLocation } from \"react-router-dom\";\n import \"react-toastify/dist/ReactToastify.css\";\n import FilterJson from \"../../json/filterjson\";\n import LmiaTime from \"../../common/lmiaTime\";\n import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n function LmiaStatus(props) {\n   let [loading, setLoading] = useState(false);\n   let [apiCall, setApiCall] = useState(false);\n   const [selectedStatus, setSelectedStatus] = useState([]);\n-  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n+  const [expandedStatus, setExpandedStatus] = useState(\n+    props.resData.lmia_status\n+  );\n   let employeeId =\n     props.resData === undefined ? null : props.resData.employee_id;\n-  let lmia_status = props.resData.lmia_status\n+  let lmia_status = props.resData.lmia_status;\n   // let completion_time = props.resData.expected_time_of_completion\n-  let location = useLocation()\n+  let location = useLocation();\n   let jobId = props.resData.job_id;\n   // const [company] = useState([]);\n   // eslint-disable-next-line\n-  let isExpanded = false\n+  let isExpanded = false;\n \n   /*Function to get lima sub stage */\n   const GetSubSTage = async () => {\n     try {\n-      let Response\n+      let Response;\n       if (props.job === \"yes\") {\n-        Response = await GetJobLimaSubStages(jobId, lmia_status)\n+        Response = await GetJobLimaSubStages(jobId, lmia_status);\n       } else {\n-        Response = await GetLimaSubStages(props.resData.id)\n+        Response = await GetLimaSubStages(props.resData.id);\n       }\n-      setSelectedStatus(Response.data.data)\n+      setSelectedStatus(Response.data.data);\n     } catch (err) {\n-      console.log(err)\n+      console.log(err);\n     }\n-  }\n+  };\n \n   // Function to handle checkbox selection\n   const handleSubStageSelection = async (status, subStage) => {\n     const isSelected = selectedStatus.some(\n@@ -47,33 +58,34 @@\n     /*Condition to check the selected substages */\n     if (isSelected) {\n       setSelectedStatus(\n         selectedStatus.filter(\n-          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n+          (item) =>\n+            !(item.lmia_status === status && item.lmia_substage === subStage)\n         )\n       );\n       let id = selectedStatus.filter(\n-        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n-      )[0].id\n+        (item) => item.lmia_status === status && item.lmia_substage === subStage\n+      )[0].id;\n       if (props.job === \"yes\") {\n         /*Job lima sub stages */\n-       let DeleteRes =await deleteLmiaSubstageJob(id)\n-       if(DeleteRes.message === \"successfully deleted\"){\n+        let DeleteRes = await deleteLmiaSubstageJob(id);\n+        if (DeleteRes.message === \"successfully deleted\") {\n           toast.success(\"Lmia Sub Stage Removed successfully\", {\n             position: toast.POSITION.TOP_RIGHT,\n             autoClose: 1000,\n           });\n-          setApiCall(true)\n+          setApiCall(true);\n         }\n       } else {\n         /*employee lima sub stages */\n-        let DeleteRes =await deleteLmiaSubstageEmployee(id)\n-        if(DeleteRes.message === \"successfully deleted\"){\n+        let DeleteRes = await deleteLmiaSubstageEmployee(id);\n+        if (DeleteRes.message === \"successfully deleted\") {\n           toast.success(\"Lmia Sub Stage Removed successfully\", {\n             position: toast.POSITION.TOP_RIGHT,\n             autoClose: 1000,\n           });\n-          setApiCall(true)\n+          setApiCall(true);\n         }\n       }\n     } else {\n       setSelectedStatus([\n@@ -84,31 +96,31 @@\n         /*Job lima sub stages */\n         data = {\n           job_id: jobId,\n           lmia_substage: subStage,\n-          lmia_status: status\n-        }\n+          lmia_status: status,\n+        };\n       } else {\n         /*Employee lima sub stages */\n         data = {\n           lmia_id: props.resData.id,\n           lmia_substage: subStage,\n-          lmia_status: status\n-        }\n+          lmia_status: status,\n+        };\n       }\n     }\n     try {\n-      let Response\n+      let Response;\n       /*APi called */\n       if (props.job === \"yes\") {\n-        Response = await AddUpdateJobLmiaSubStage(data)\n+        Response = await AddUpdateJobLmiaSubStage(data);\n       } else {\n-        Response = await AddUpdateEmployeeLmiaSubStage(data)\n+        Response = await AddUpdateEmployeeLmiaSubStage(data);\n       }\n       /*Removed sub stage response */\n-      \n+\n       /*Added sub stage response */\n-      if (Response.message === 'insert successfully') {\n+      if (Response.message === \"insert successfully\" ||Response.message === \"updated successfully\") {\n         toast.success(\"Lmia Sub Stage Added successfully\", {\n           position: toast.POSITION.TOP_RIGHT,\n           autoClose: 1000,\n         });\n@@ -117,12 +129,12 @@\n         //   if (typeof onLmiaUpdateClick === 'function') {\n         //     onLmiaUpdateClick(\"sub\");\n         //   }\n         // }\n-        setApiCall(true)\n+        setApiCall(true);\n       }\n     } catch (err) {\n-      console.log(err)\n+      console.log(err);\n     }\n   };\n   // console.log(\"Sub Stages =>\", selectedStatus)\n   /* Functionality to close the modal */\n@@ -133,16 +145,19 @@\n     props.close();\n   };\n   // USER LIMIA UPDATE VALIDATION\n   useEffect(() => {\n-    GetSubSTage()\n-    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n+    GetSubSTage();\n+    setState({\n+      ...state,\n+      lmia_status: lmia_status /*, completion_time: completion_time*/,\n+    });\n     if (apiCall === true) {\n-      setApiCall(false)\n+      setApiCall(false);\n     }\n   }, [apiCall, lmia_status]);\n \n-  useEffect(() => { }, [])\n+  useEffect(() => {}, []);\n   // INITIAL STATE ASSIGNMENT\n   const initialFormState = {\n     lmia_status: \"\",\n     // completion_time: \"\",\n@@ -150,15 +165,13 @@\n   // VALIDATION CONDITIONS\n   const validators = {\n     lmia_status: [\n       (value) =>\n-        value === \"\" || value === null\n-          ? \"Lmia status is required\"\n-          : \"\",\n+        value === \"\" || value === null ? \"Lmia status is required\" : \"\",\n     ],\n     // completion_time: [\n     //   (value) =>\n-    //     value === \"\" || value === null \n+    //     value === \"\" || value === null\n     //       ? \"Expected time of completion is required\"\n     //       : \"\",\n     // ],\n   };\n@@ -172,19 +185,19 @@\n     if (validate() && props.job === \"yes\") {\n       let data = {\n         // completion_time: state.completion_time,\n         lmia_status: state.lmia_status,\n-        job_id: jobId\n-      }\n+        job_id: jobId,\n+      };\n       try {\n         let responseData = await AddJob(data);\n         if (responseData.message === \"job data updated successfully\") {\n           toast.success(\"Lmia Status Updated successfully\", {\n             position: toast.POSITION.TOP_RIGHT,\n             autoClose: 1000,\n           });\n-          props.setApiCall(true)\n-          close()\n+          props.setApiCall(true);\n+          close();\n         }\n       } catch (err) {\n         toast.error(\"Something went wrong\", {\n           position: toast.POSITION.TOP_RIGHT,\n@@ -200,31 +213,29 @@\n           toast.success(\"Lmia Status Updated successfully\", {\n             position: toast.POSITION.TOP_RIGHT,\n             autoClose: 1000,\n           });\n-          props.setApiCall(true)\n-          close()\n+          props.setApiCall(true);\n+          close();\n         }\n         if (responseData.message === \"Data updated successfully\") {\n           toast.success(\"Lmia Status Updated successfully\", {\n             position: toast.POSITION.TOP_RIGHT,\n             autoClose: 1000,\n           });\n-          props.setApiCall(true)\n-          close()\n+          props.setApiCall(true);\n+          close();\n         }\n       } catch (err) {\n-        console.log(err)\n-        setLoading(false)\n+        console.log(err);\n+        setLoading(false);\n       }\n     } else {\n       setLoading(false);\n     }\n-\n   };\n   // END LIMIA VALIDATION\n \n-\n   return (\n     <>\n       <Modal\n         show={props.show}\n@@ -240,13 +251,14 @@\n         >\n           <i className=\"fas fa-times\"></i>\n         </button>\n         <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n-\n           <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n-          <LmiaTime lmia={state.lmia_status}\n+          <LmiaTime\n+            lmia={state.lmia_status}\n             job={props.job}\n-            location={location.pathname} />\n+            location={location.pathname}\n+          />\n           <form onSubmit={onLmiaUpdateClick}>\n             {expandedStatus && (\n               // <div className='bg-white text-dark p-2 sub-stages-container row'>\n               //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n@@ -309,23 +321,20 @@\n                 multiple={false}\n               >\n                 <option value={\"\"}>Select lmia status</option>\n                 {(FilterJson.lmia_status || []).map((status, i) => {\n-                  isExpanded = expandedStatus === status\n-                  return (\n-                    props.job === \"yes\" ? ( (\n-                      <option value={status} key={i}\n-                      >\n-\n+                  isExpanded = expandedStatus === status;\n+                  return props.job === \"yes\" ? (\n+                    <option value={status} key={i}>\n+                      {status}\n+                    </option>\n+                  ) : (\n+                    i > 2 && (\n+                      <option value={status} key={i}>\n                         {status}\n                       </option>\n-                    )) : (i > 2 && (\n-                      <option value={status} key={i}\n-                      >\n-                        {status}\n-                      </option>\n-                    ))\n-                  )\n+                    )\n+                  );\n                 })}\n               </select>\n               {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n               {errors.lmia_status && (\n"
                },
                {
                    "date": 1693484149170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,540 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Modal } from \"react-bootstrap\";\n+import useValidation from \"../../common/useValidation\";\n+import {\n+  AddLimia,\n+  AddJob,\n+  AddUpdateEmployeeLmiaSubStage,\n+  GetLimaSubStages,\n+  AddUpdateJobLmiaSubStage,\n+  GetJobLimaSubStages,\n+  deleteLmiaSubstageJob,\n+  deleteLmiaSubstageEmployee,\n+} from \"../../../api//api\";\n+import { toast } from \"react-toastify\";\n+import { useLocation } from \"react-router-dom\";\n+import \"react-toastify/dist/ReactToastify.css\";\n+import FilterJson from \"../../json/filterjson\";\n+import LmiaTime from \"../../common/lmiaTime\";\n+import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n+function LmiaStatus(props) {\n+  let [loading, setLoading] = useState(false);\n+  let [apiCall, setApiCall] = useState(false);\n+  const [selectedStatus, setSelectedStatus] = useState([]);\n+  const [expandedStatus, setExpandedStatus] = useState(\n+    props.resData.lmia_status\n+  );\n+  let employeeId =\n+    props.resData === undefined ? null : props.resData.employee_id;\n+  let lmia_status = props.resData.lmia_status;\n+  // let completion_time = props.resData.expected_time_of_completion\n+  let location = useLocation();\n+  let jobId = props.resData.job_id;\n+  // const [company] = useState([]);\n+  // eslint-disable-next-line\n+  let isExpanded = false;\n+\n+  /*Function to get lima sub stage */\n+  const GetSubSTage = async () => {\n+    try {\n+      let Response;\n+      if (props.job === \"yes\") {\n+        Response = await GetJobLimaSubStages(jobId, lmia_status);\n+      } else {\n+        Response = await GetLimaSubStages(props.resData.id);\n+      }\n+      setSelectedStatus(Response.data.data);\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+\n+  // Function to handle checkbox selection\n+  const handleSubStageSelection = async (status, subStage) => {\n+    const isSelected = selectedStatus.some(\n+      (item) => item.lmia_status === status && item.lmia_substage === subStage\n+    );\n+    let data;\n+    /*Condition to check the selected substages */\n+    if (isSelected) {\n+      setSelectedStatus(\n+        selectedStatus.filter(\n+          (item) =>\n+            !(item.lmia_status === status && item.lmia_substage === subStage)\n+        )\n+      );\n+      let id = selectedStatus.filter(\n+        (item) => item.lmia_status === status && item.lmia_substage === subStage\n+      )[0].id;\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        let DeleteRes = await deleteLmiaSubstageJob(id);\n+        if (DeleteRes.message === \"successfully deleted\") {\n+          toast.success(\"Lmia Sub Stage Removed successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setApiCall(true);\n+        }\n+      } else {\n+        /*employee lima sub stages */\n+        let DeleteRes = await deleteLmiaSubstageEmployee(id);\n+        if (DeleteRes.message === \"successfully deleted\") {\n+          toast.success(\"Lmia Sub Stage Removed successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setApiCall(true);\n+        }\n+      }\n+    } else {\n+      setSelectedStatus([\n+        ...selectedStatus,\n+        { status: status, subStage: subStage },\n+      ]);\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          job_id: jobId,\n+          lmia_substage: subStage,\n+          lmia_status: status,\n+        };\n+      } else {\n+        /*Employee lima sub stages */\n+        data = {\n+          lmia_id: props.resData.id,\n+          lmia_substage: subStage,\n+          lmia_status: status,\n+        };\n+      }\n+    }\n+    try {\n+      let Response;\n+      /*APi called */\n+      if (props.job === \"yes\") {\n+        Response = await AddUpdateJobLmiaSubStage(data);\n+      } else {\n+        Response = await AddUpdateEmployeeLmiaSubStage(data);\n+      }\n+      /*Removed sub stage response */\n+\n+      /*Added sub stage response */\n+      if (Response.message === \"insert successfully\" ||Response.message === \"updated successfully\") {\n+        toast.success(\"Lmia Sub Stage Added successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // console.log(\"Sub Stages =>\", selectedStatus)\n+  /* Functionality to close the modal */\n+  const close = () => {\n+    setState({ ...state, lmia_status: \"\" });\n+    setErrors(\"\");\n+    setLoading(false);\n+    props.close();\n+  };\n+  // USER LIMIA UPDATE VALIDATION\n+  useEffect(() => {\n+    GetSubSTage();\n+    setState({\n+      ...state,\n+      lmia_status: lmia_status /*, completion_time: completion_time*/,\n+    });\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, lmia_status]);\n+\n+  useEffect(() => {}, []);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    lmia_status: \"\",\n+    // completion_time: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    lmia_status: [\n+      (value) =>\n+        value === \"\" || value === null ? \"Lmia status is required\" : \"\",\n+    ],\n+    // completion_time: [\n+    //   (value) =>\n+    //     value === \"\" || value === null\n+    //       ? \"Expected time of completion is required\"\n+    //       : \"\",\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n+  const onLmiaUpdateClick = async (event) => {\n+    event.preventDefault();\n+    if (validate() && props.job === \"yes\") {\n+      let data = {\n+        // completion_time: state.completion_time,\n+        lmia_status: state.lmia_status,\n+        job_id: jobId,\n+      };\n+      try {\n+        let responseData = await AddJob(data);\n+        if (responseData.message === \"job data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true);\n+          close();\n+        }\n+      } catch (err) {\n+        toast.error(\"Something went wrong\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+      }\n+    }\n+    if (validate()) {\n+      setLoading(true);\n+      try {\n+        const responseData = await AddLimia(state, employeeId, jobId);\n+        if (responseData.message === \"Data added successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true);\n+          close();\n+        }\n+        if (responseData.message === \"Data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true);\n+          close();\n+        }\n+      } catch (err) {\n+        console.log(err);\n+        setLoading(false);\n+      }\n+    } else {\n+      setLoading(false);\n+    }\n+  };\n+  // END LIMIA VALIDATION\n+\n+  return (\n+    <>\n+      <Modal\n+        show={props.show}\n+        size=\"lg\"\n+        aria-labelledby=\"contained-modal-title-vcenter\"\n+        centered\n+      >\n+        <button\n+          type=\"button\"\n+          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n+          data-dismiss=\"modal\"\n+          onClick={close}\n+        >\n+          <i className=\"fas fa-times\"></i>\n+        </button>\n+        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n+          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n+          <LmiaTime\n+            lmia={state.lmia_status}\n+            job={props.job}\n+            location={location.pathname}\n+          />\n+          <form onSubmit={onLmiaUpdateClick}>\n+            {expandedStatus && (\n+              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n+              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n+              //     <div\n+              //       key={j}\n+              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n+              //         (item) =>\n+              //           item.lmia_substage === subStage\n+              //       )\n+              //         ? 'selected'\n+              //         : ''\n+              //         }`}\n+              //       onClick={() =>\n+              //         handleSubStageSelection(expandedStatus, subStage)\n+              //       }\n+              //     >\n+\n+              //       <input\n+              //         type=\"checkbox\"\n+              //         className='mx-2'\n+              //         checked={(selectedStatus || []).some(\n+              //           (item) =>\n+              //             // item.lmia_status === expandedStatus &&\n+              //             item.lmia_substage === subStage\n+              //         )}\n+              //         readOnly\n+              //       />{subStage}\n+              //     </div>\n+              //   ))}\n+              // </div>\n+              <LmiaSubStageSelector\n+                expandedStatus={expandedStatus}\n+                selectedStatus={selectedStatus}\n+                FilterJson={FilterJson}\n+                handleSubStageSelection={handleSubStageSelection}\n+                lmia_status={state.lmia_status}\n+              />\n+            )}\n+            <div className=\"form-group \">\n+              <label\n+                htmlFor=\"lmia_status\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Lmia status <span className=\"text-danger\">*</span>:\n+              </label>\n+              <select\n+                type={\"text\"}\n+                className={\n+                  errors.lmia_status\n+                    ? \"form-control text-capitalize border border-danger\"\n+                    : \"form-control text-capitalize\"\n+                }\n+                value={state.lmia_status || \"\"}\n+                onChange={(e) => {\n+                  setState({ ...state, lmia_status: e.target.value });\n+                  setExpandedStatus(e.target.value);\n+                }}\n+                id=\"lmia_status\"\n+                name=\"lmia_status\"\n+                multiple={false}\n+              >\n+                <option value={\"\"}>Select lmia status</option>\n+                {(FilterJson.lmia_status || []).map((status, i) => {\n+                  isExpanded = expandedStatus === status;\n+                  return props.job === \"yes\" ? (\n+                    <option value={status} key={i}>\n+                      {status}\n+                    </option>\n+                  ) : (\n+                    i > 2 && (\n+                      <option value={status} key={i}>\n+                        {status}\n+                      </option>\n+                    )\n+                  );\n+                })}\n+              </select>\n+              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n+              {errors.lmia_status && (\n+                <span\n+                  key={errors.lmia_status}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.lmia_status}\n+                </span>\n+              )}\n+            </div>\n+\n+            {/* <div className=\"form-group mt-5\">\n+              <label\n+                htmlFor=\"completion_time\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Expected time of completion<span className=\"text-danger\">*</span>:\n+              </label>\n+              <input\n+                type=\"date\"\n+                className={\n+                  errors.completion_time\n+                    ? \"form-control coustam_datepicker border border-danger\"\n+                    : \"form-control coustam_datepicker\"\n+                }\n+                value={moment(state.completion_time).format(\"DD-MM-YYYY\") || \"\"}\n+                onChange={onInputChange}\n+                id=\"completion_time\"\n+                name=\"completion_time\"\n+                onKeyDownCapture={(e) => e.preventDefault()}\n+                min={moment().format(\"DD-MM-YYYY\")}\n+              />\n+              ----ERROR MESSAGE FOR Admin Name----\n+              {errors.completion_time && (\n+                <span\n+                  key={errors.completion_time}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.completion_time}\n+                </span>\n+              )}\n+            </div> */}\n+            {/* {state.lmia_status === \"complete\" ? (\n+              <>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"posted\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Posted :\n+                  </label>\n+                  <select\n+                    type={\"text\"}\n+                    className={\n+                      errors.posted\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.posted}\n+                    onChange={onInputChange}\n+                    id=\"posted\"\n+                    name=\"posted\"\n+                    multiple={false}\n+                  >\n+                    <option value={\"\"}>Select lmia status</option>\n+                    <option value={\"Yes\"}>Yes</option>\n+                    <option value={\"No\"}>No</option>\n+                  </select>\n+                  ----ERROR MESSAGE FOR LIMA STATUS----\n+                  {errors.posted && (\n+                    <span\n+                      key={errors.posted}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"job_category_id\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Company <span className=\"text-danger\"> *</span> :\n+                  </label>\n+                  <div className=\"position-relative\">\n+                    <select\n+                      name=\"posted_company_id\"\n+                      value={state.posted_company_id}\n+                      onChange={onInputChange}\n+                      className={\n+                        errors.posted_company_id\n+                          ? \" form-control border border-danger position-relative overflow-hidden\"\n+                          : \" form-control position-relative overflow-hidden\"\n+                      }\n+                      placeholder=\"company name\"\n+                      id=\"posted_company_id\"\n+                    >\n+                      <option value={\"\"}>Select Company</option>\n+                      {(company || []).map((com) => (\n+                        <option key={com.company_id} value={com.company_id}>\n+                          {com.company_name}\n+                        </option>\n+                      ))}\n+                    </select>\n+                  </div>\n+                  ----ERROR MESSAGE FOR COMPANY----\n+                  {errors.posted_company_id && (\n+                    <span\n+                      key={errors.posted_company_id}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted_company_id}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Date of posting :\n+                  </label>\n+                  <input\n+                    type={\"date\"}\n+                    className={\n+                      errors.date_of_posting\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.date_of_posting}\n+                    onChange={onInputChange}\n+                    id=\"date_of_posting\"\n+                    name=\"date_of_posting\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.date_of_posting && (\n+                    <span\n+                      key={errors.date_of_posting}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.date_of_posting}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Designation\n+                  </label>\n+                  <input\n+                    type={\"text\"}\n+                    className={\n+                      errors.designation\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.designation}\n+                    onChange={onInputChange}\n+                    id=\"designation\"\n+                    name=\"designation\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.designation && (\n+                    <span\n+                      key={errors.designation}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.designation}\n+                    </span>\n+                  )}\n+                </div>\n+              </>\n+            ) : null} */}\n+            <div className=\"form-group text-center\">\n+              {loading === true ? (\n+                <button\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"button\"\n+                  disabled\n+                >\n+                  <span\n+                    className=\"spinner-border spinner-border-sm \"\n+                    role=\"status\"\n+                    aria-hidden=\"true\"\n+                  ></span>\n+                  <span className=\"sr-only\">Loading...</span>\n+                </button>\n+              ) : (\n+                <button\n+                  onClick={onLmiaUpdateClick}\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"submit\"\n+                >\n+                  Submit\n+                </button>\n+              )}\n+            </div>\n+          </form>\n+        </div>\n+      </Modal>\n+    </>\n+  );\n+}\n+\n+export default LmiaStatus;\n"
                },
                {
                    "date": 1693486845662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,10 +115,8 @@\n         Response = await AddUpdateJobLmiaSubStage(data);\n       } else {\n         Response = await AddUpdateEmployeeLmiaSubStage(data);\n       }\n-      /*Removed sub stage response */\n-\n       /*Added sub stage response */\n       if (Response.message === \"insert successfully\" ||Response.message === \"updated successfully\") {\n         toast.success(\"Lmia Sub Stage Added successfully\", {\n           position: toast.POSITION.TOP_RIGHT,\n@@ -192,9 +190,9 @@\n           props.setApiCall(true);\n           close();\n         }\n       } catch (err) {\n-        toast.error(\"Something went wrong\", {\n+       console.log(err) {\n           position: toast.POSITION.TOP_RIGHT,\n           autoClose: 1000,\n         });\n       }\n@@ -537,550 +535,4 @@\n   );\n }\n \n export default LmiaStatus;\n-import React, { useEffect, useState } from \"react\";\n-import { Modal } from \"react-bootstrap\";\n-import useValidation from \"../../common/useValidation\";\n-import {\n-  AddLimia,\n-  AddJob,\n-  AddUpdateEmployeeLmiaSubStage,\n-  GetLimaSubStages,\n-  AddUpdateJobLmiaSubStage,\n-  GetJobLimaSubStages,\n-  deleteLmiaSubstageJob,\n-  deleteLmiaSubstageEmployee,\n-} from \"../../../api//api\";\n-import { toast } from \"react-toastify\";\n-import { useLocation } from \"react-router-dom\";\n-import \"react-toastify/dist/ReactToastify.css\";\n-import FilterJson from \"../../json/filterjson\";\n-import LmiaTime from \"../../common/lmiaTime\";\n-import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n-function LmiaStatus(props) {\n-  let [loading, setLoading] = useState(false);\n-  let [apiCall, setApiCall] = useState(false);\n-  const [selectedStatus, setSelectedStatus] = useState([]);\n-  const [expandedStatus, setExpandedStatus] = useState(\n-    props.resData.lmia_status\n-  );\n-  let employeeId =\n-    props.resData === undefined ? null : props.resData.employee_id;\n-  let lmia_status = props.resData.lmia_status;\n-  // let completion_time = props.resData.expected_time_of_completion\n-  let location = useLocation();\n-  let jobId = props.resData.job_id;\n-  // const [company] = useState([]);\n-  // eslint-disable-next-line\n-  let isExpanded = false;\n-\n-  /*Function to get lima sub stage */\n-  const GetSubSTage = async () => {\n-    try {\n-      let Response;\n-      if (props.job === \"yes\") {\n-        Response = await GetJobLimaSubStages(jobId, lmia_status);\n-      } else {\n-        Response = await GetLimaSubStages(props.resData.id);\n-      }\n-      setSelectedStatus(Response.data.data);\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-\n-  // Function to handle checkbox selection\n-  const handleSubStageSelection = async (status, subStage) => {\n-    const isSelected = selectedStatus.some(\n-      (item) => item.lmia_status === status && item.lmia_substage === subStage\n-    );\n-    let data;\n-    /*Condition to check the selected substages */\n-    if (isSelected) {\n-      setSelectedStatus(\n-        selectedStatus.filter(\n-          (item) =>\n-            !(item.lmia_status === status && item.lmia_substage === subStage)\n-        )\n-      );\n-      let id = selectedStatus.filter(\n-        (item) => item.lmia_status === status && item.lmia_substage === subStage\n-      )[0].id;\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        let DeleteRes = await deleteLmiaSubstageJob(id);\n-        if (DeleteRes.message === \"successfully deleted\") {\n-          toast.success(\"Lmia Sub Stage Removed successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          setApiCall(true);\n-        }\n-      } else {\n-        /*employee lima sub stages */\n-        let DeleteRes = await deleteLmiaSubstageEmployee(id);\n-        if (DeleteRes.message === \"successfully deleted\") {\n-          toast.success(\"Lmia Sub Stage Removed successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          setApiCall(true);\n-        }\n-      }\n-    } else {\n-      setSelectedStatus([\n-        ...selectedStatus,\n-        { status: status, subStage: subStage },\n-      ]);\n-      if (props.job === \"yes\") {\n-        /*Job lima sub stages */\n-        data = {\n-          job_id: jobId,\n-          lmia_substage: subStage,\n-          lmia_status: status,\n-        };\n-      } else {\n-        /*Employee lima sub stages */\n-        data = {\n-          lmia_id: props.resData.id,\n-          lmia_substage: subStage,\n-          lmia_status: status,\n-        };\n-      }\n-    }\n-    try {\n-      let Response;\n-      /*APi called */\n-      if (props.job === \"yes\") {\n-        Response = await AddUpdateJobLmiaSubStage(data);\n-      } else {\n-        Response = await AddUpdateEmployeeLmiaSubStage(data);\n-      }\n-      /*Removed sub stage response */\n-\n-      /*Added sub stage response */\n-      if (Response.message === \"insert successfully\" ||Response.message === \"updated successfully\") {\n-        toast.success(\"Lmia Sub Stage Added successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        // if (status !== props.resData.lmia_status) {\n-        //   setState({ ...state, lmia_status: status })\n-        //   if (typeof onLmiaUpdateClick === 'function') {\n-        //     onLmiaUpdateClick(\"sub\");\n-        //   }\n-        // }\n-        setApiCall(true);\n-      }\n-    } catch (err) {\n-      console.log(err);\n-    }\n-  };\n-  // console.log(\"Sub Stages =>\", selectedStatus)\n-  /* Functionality to close the modal */\n-  const close = () => {\n-    setState({ ...state, lmia_status: \"\" });\n-    setErrors(\"\");\n-    setLoading(false);\n-    props.close();\n-  };\n-  // USER LIMIA UPDATE VALIDATION\n-  useEffect(() => {\n-    GetSubSTage();\n-    setState({\n-      ...state,\n-      lmia_status: lmia_status /*, completion_time: completion_time*/,\n-    });\n-    if (apiCall === true) {\n-      setApiCall(false);\n-    }\n-  }, [apiCall, lmia_status]);\n-\n-  useEffect(() => {}, []);\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    lmia_status: \"\",\n-    // completion_time: \"\",\n-  };\n-  // VALIDATION CONDITIONS\n-  const validators = {\n-    lmia_status: [\n-      (value) =>\n-        value === \"\" || value === null ? \"Lmia status is required\" : \"\",\n-    ],\n-    // completion_time: [\n-    //   (value) =>\n-    //     value === \"\" || value === null\n-    //       ? \"Expected time of completion is required\"\n-    //       : \"\",\n-    // ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n-  const onLmiaUpdateClick = async (event) => {\n-    event.preventDefault();\n-    if (validate() && props.job === \"yes\") {\n-      let data = {\n-        // completion_time: state.completion_time,\n-        lmia_status: state.lmia_status,\n-        job_id: jobId,\n-      };\n-      try {\n-        let responseData = await AddJob(data);\n-        if (responseData.message === \"job data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true);\n-          close();\n-        }\n-      } catch (err) {\n-        toast.error(\"Something went wrong\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-      }\n-    }\n-    if (validate()) {\n-      setLoading(true);\n-      try {\n-        const responseData = await AddLimia(state, employeeId, jobId);\n-        if (responseData.message === \"Data added successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true);\n-          close();\n-        }\n-        if (responseData.message === \"Data updated successfully\") {\n-          toast.success(\"Lmia Status Updated successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          props.setApiCall(true);\n-          close();\n-        }\n-      } catch (err) {\n-        console.log(err);\n-        setLoading(false);\n-      }\n-    } else {\n-      setLoading(false);\n-    }\n-  };\n-  // END LIMIA VALIDATION\n-\n-  return (\n-    <>\n-      <Modal\n-        show={props.show}\n-        size=\"lg\"\n-        aria-labelledby=\"contained-modal-title-vcenter\"\n-        centered\n-      >\n-        <button\n-          type=\"button\"\n-          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n-          data-dismiss=\"modal\"\n-          onClick={close}\n-        >\n-          <i className=\"fas fa-times\"></i>\n-        </button>\n-        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n-          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n-          <LmiaTime\n-            lmia={state.lmia_status}\n-            job={props.job}\n-            location={location.pathname}\n-          />\n-          <form onSubmit={onLmiaUpdateClick}>\n-            {expandedStatus && (\n-              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n-              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n-              //     <div\n-              //       key={j}\n-              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n-              //         (item) =>\n-              //           item.lmia_substage === subStage\n-              //       )\n-              //         ? 'selected'\n-              //         : ''\n-              //         }`}\n-              //       onClick={() =>\n-              //         handleSubStageSelection(expandedStatus, subStage)\n-              //       }\n-              //     >\n-\n-              //       <input\n-              //         type=\"checkbox\"\n-              //         className='mx-2'\n-              //         checked={(selectedStatus || []).some(\n-              //           (item) =>\n-              //             // item.lmia_status === expandedStatus &&\n-              //             item.lmia_substage === subStage\n-              //         )}\n-              //         readOnly\n-              //       />{subStage}\n-              //     </div>\n-              //   ))}\n-              // </div>\n-              <LmiaSubStageSelector\n-                expandedStatus={expandedStatus}\n-                selectedStatus={selectedStatus}\n-                FilterJson={FilterJson}\n-                handleSubStageSelection={handleSubStageSelection}\n-                lmia_status={state.lmia_status}\n-              />\n-            )}\n-            <div className=\"form-group \">\n-              <label\n-                htmlFor=\"lmia_status\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Lmia status <span className=\"text-danger\">*</span>:\n-              </label>\n-              <select\n-                type={\"text\"}\n-                className={\n-                  errors.lmia_status\n-                    ? \"form-control text-capitalize border border-danger\"\n-                    : \"form-control text-capitalize\"\n-                }\n-                value={state.lmia_status || \"\"}\n-                onChange={(e) => {\n-                  setState({ ...state, lmia_status: e.target.value });\n-                  setExpandedStatus(e.target.value);\n-                }}\n-                id=\"lmia_status\"\n-                name=\"lmia_status\"\n-                multiple={false}\n-              >\n-                <option value={\"\"}>Select lmia status</option>\n-                {(FilterJson.lmia_status || []).map((status, i) => {\n-                  isExpanded = expandedStatus === status;\n-                  return props.job === \"yes\" ? (\n-                    <option value={status} key={i}>\n-                      {status}\n-                    </option>\n-                  ) : (\n-                    i > 2 && (\n-                      <option value={status} key={i}>\n-                        {status}\n-                      </option>\n-                    )\n-                  );\n-                })}\n-              </select>\n-              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n-              {errors.lmia_status && (\n-                <span\n-                  key={errors.lmia_status}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.lmia_status}\n-                </span>\n-              )}\n-            </div>\n-\n-            {/* <div className=\"form-group mt-5\">\n-              <label\n-                htmlFor=\"completion_time\"\n-                className=\"font-size-4 text-black-2  line-height-reset\"\n-              >\n-                Expected time of completion<span className=\"text-danger\">*</span>:\n-              </label>\n-              <input\n-                type=\"date\"\n-                className={\n-                  errors.completion_time\n-                    ? \"form-control coustam_datepicker border border-danger\"\n-                    : \"form-control coustam_datepicker\"\n-                }\n-                value={moment(state.completion_time).format(\"DD-MM-YYYY\") || \"\"}\n-                onChange={onInputChange}\n-                id=\"completion_time\"\n-                name=\"completion_time\"\n-                onKeyDownCapture={(e) => e.preventDefault()}\n-                min={moment().format(\"DD-MM-YYYY\")}\n-              />\n-              ----ERROR MESSAGE FOR Admin Name----\n-              {errors.completion_time && (\n-                <span\n-                  key={errors.completion_time}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.completion_time}\n-                </span>\n-              )}\n-            </div> */}\n-            {/* {state.lmia_status === \"complete\" ? (\n-              <>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"posted\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Posted :\n-                  </label>\n-                  <select\n-                    type={\"text\"}\n-                    className={\n-                      errors.posted\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.posted}\n-                    onChange={onInputChange}\n-                    id=\"posted\"\n-                    name=\"posted\"\n-                    multiple={false}\n-                  >\n-                    <option value={\"\"}>Select lmia status</option>\n-                    <option value={\"Yes\"}>Yes</option>\n-                    <option value={\"No\"}>No</option>\n-                  </select>\n-                  ----ERROR MESSAGE FOR LIMA STATUS----\n-                  {errors.posted && (\n-                    <span\n-                      key={errors.posted}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group\">\n-                  <label\n-                    htmlFor=\"job_category_id\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Company <span className=\"text-danger\"> *</span> :\n-                  </label>\n-                  <div className=\"position-relative\">\n-                    <select\n-                      name=\"posted_company_id\"\n-                      value={state.posted_company_id}\n-                      onChange={onInputChange}\n-                      className={\n-                        errors.posted_company_id\n-                          ? \" form-control border border-danger position-relative overflow-hidden\"\n-                          : \" form-control position-relative overflow-hidden\"\n-                      }\n-                      placeholder=\"company name\"\n-                      id=\"posted_company_id\"\n-                    >\n-                      <option value={\"\"}>Select Company</option>\n-                      {(company || []).map((com) => (\n-                        <option key={com.company_id} value={com.company_id}>\n-                          {com.company_name}\n-                        </option>\n-                      ))}\n-                    </select>\n-                  </div>\n-                  ----ERROR MESSAGE FOR COMPANY----\n-                  {errors.posted_company_id && (\n-                    <span\n-                      key={errors.posted_company_id}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.posted_company_id}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Date of posting :\n-                  </label>\n-                  <input\n-                    type={\"date\"}\n-                    className={\n-                      errors.date_of_posting\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.date_of_posting}\n-                    onChange={onInputChange}\n-                    id=\"date_of_posting\"\n-                    name=\"date_of_posting\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.date_of_posting && (\n-                    <span\n-                      key={errors.date_of_posting}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.date_of_posting}\n-                    </span>\n-                  )}\n-                </div>\n-                <div className=\"form-group \">\n-                  <label\n-                    htmlFor=\"date_of_posting\"\n-                    className=\"font-size-4 text-black-2  line-height-reset\"\n-                  >\n-                    Designation\n-                  </label>\n-                  <input\n-                    type={\"text\"}\n-                    className={\n-                      errors.designation\n-                        ? \"form-control border border-danger\"\n-                        : \"form-control\"\n-                    }\n-                    value={state.designation}\n-                    onChange={onInputChange}\n-                    id=\"designation\"\n-                    name=\"designation\"\n-                  />\n-                  ----ERROR MESSAGE FOR COMPANY NAME----\n-                  {errors.designation && (\n-                    <span\n-                      key={errors.designation}\n-                      className=\"text-danger font-size-3\"\n-                    >\n-                      {errors.designation}\n-                    </span>\n-                  )}\n-                </div>\n-              </>\n-            ) : null} */}\n-            <div className=\"form-group text-center\">\n-              {loading === true ? (\n-                <button\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"button\"\n-                  disabled\n-                >\n-                  <span\n-                    className=\"spinner-border spinner-border-sm \"\n-                    role=\"status\"\n-                    aria-hidden=\"true\"\n-                  ></span>\n-                  <span className=\"sr-only\">Loading...</span>\n-                </button>\n-              ) : (\n-                <button\n-                  onClick={onLmiaUpdateClick}\n-                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n-                  type=\"submit\"\n-                >\n-                  Submit\n-                </button>\n-              )}\n-            </div>\n-          </form>\n-        </div>\n-      </Modal>\n-    </>\n-  );\n-}\n-\n-export default LmiaStatus;\n"
                },
                {
                    "date": 1693486958591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,12 +117,9 @@\n         Response = await AddUpdateEmployeeLmiaSubStage(data);\n       }\n       /*Added sub stage response */\n       if (Response.message === \"insert successfully\" ||Response.message === \"updated successfully\") {\n-        toast.success(\"Lmia Sub Stage Added successfully\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n+        toast.success(\"Lmia Sub Stage Added successfully\", \n         setApiCall(true);\n       }\n     } catch (err) {\n       console.log(err);\n@@ -190,12 +187,9 @@\n           props.setApiCall(true);\n           close();\n         }\n       } catch (err) {\n-       console.log(err) {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n+       console.log(err) \n       }\n     }\n     if (validate()) {\n       setLoading(true);\n"
                },
                {
                    "date": 1693487142304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,535 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Modal } from \"react-bootstrap\";\n+import useValidation from \"../../common/useValidation\";\n+import {\n+  AddLimia,\n+  AddJob,\n+  AddUpdateEmployeeLmiaSubStage,\n+  GetLimaSubStages,\n+  AddUpdateJobLmiaSubStage,\n+  GetJobLimaSubStages,\n+  deleteLmiaSubstageJob,\n+  deleteLmiaSubstageEmployee,\n+} from \"../../../api//api\";\n+import { toast } from \"react-toastify\";\n+import { useLocation } from \"react-router-dom\";\n+import \"react-toastify/dist/ReactToastify.css\";\n+import FilterJson from \"../../json/filterjson\";\n+import LmiaTime from \"../../common/lmiaTime\";\n+import LmiaSubStageSelector from \"../../common/lmiaSubStage\";\n+function LmiaStatus(props) {\n+  let [loading, setLoading] = useState(false);\n+  let [apiCall, setApiCall] = useState(false);\n+  const [selectedStatus, setSelectedStatus] = useState([]);\n+  const [expandedStatus, setExpandedStatus] = useState(\n+    props.resData.lmia_status\n+  );\n+  let employeeId =\n+    props.resData === undefined ? null : props.resData.employee_id;\n+  let lmia_status = props.resData.lmia_status;\n+  // let completion_time = props.resData.expected_time_of_completion\n+  let location = useLocation();\n+  let jobId = props.resData.job_id;\n+  // const [company] = useState([]);\n+  // eslint-disable-next-line\n+  let isExpanded = false;\n+\n+  /*Function to get lima sub stage */\n+  const GetSubSTage = async () => {\n+    try {\n+      let Response;\n+      if (props.job === \"yes\") {\n+        Response = await GetJobLimaSubStages(jobId, lmia_status);\n+      } else {\n+        Response = await GetLimaSubStages(props.resData.id);\n+      }\n+      setSelectedStatus(Response.data.data);\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+\n+  // Function to handle checkbox selection\n+  const handleSubStageSelection = async (status, subStage) => {\n+    const isSelected = selectedStatus.some(\n+      (item) => item.lmia_status === status && item.lmia_substage === subStage\n+    );\n+    let data;\n+    /*Condition to check the selected substages */\n+    if (isSelected) {\n+      setSelectedStatus(\n+        selectedStatus.filter(\n+          (item) =>\n+            !(item.lmia_status === status && item.lmia_substage === subStage)\n+        )\n+      );\n+      let id = selectedStatus.filter(\n+        (item) => item.lmia_status === status && item.lmia_substage === subStage\n+      )[0].id;\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        let DeleteRes = await deleteLmiaSubstageJob(id);\n+        if (DeleteRes.message === \"successfully deleted\") {\n+          toast.success(\"Lmia Sub Stage Removed successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setApiCall(true);\n+        }\n+      } else {\n+        /*employee lima sub stages */\n+        let DeleteRes = await deleteLmiaSubstageEmployee(id);\n+        if (DeleteRes.message === \"successfully deleted\") {\n+          toast.success(\"Lmia Sub Stage Removed successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setApiCall(true);\n+        }\n+      }\n+    } else {\n+      setSelectedStatus([\n+        ...selectedStatus,\n+        { status: status, subStage: subStage },\n+      ]);\n+      if (props.job === \"yes\") {\n+        /*Job lima sub stages */\n+        data = {\n+          job_id: jobId,\n+          lmia_substage: subStage,\n+          lmia_status: status,\n+        };\n+      } else {\n+        /*Employee lima sub stages */\n+        data = {\n+          lmia_id: props.resData.id,\n+          lmia_substage: subStage,\n+          lmia_status: status,\n+        };\n+      }\n+    }\n+    try {\n+      let Response;\n+      /*APi called */\n+      if (props.job === \"yes\") {\n+        Response = await AddUpdateJobLmiaSubStage(data);\n+      } else {\n+        Response = await AddUpdateEmployeeLmiaSubStage(data);\n+      }\n+      /*Added sub stage response */\n+      if (Response.message === \"insert successfully\" ||Response.message === \"updated successfully\") {\n+        toast.success(\"Lmia Sub Stage Added successfully\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        setApiCall(true);\n+      }\n+    } catch (err) {\n+      console.log(err);\n+    }\n+  };\n+  // console.log(\"Sub Stages =>\", selectedStatus)\n+  /* Functionality to close the modal */\n+  const close = () => {\n+    setState({ ...state, lmia_status: \"\" });\n+    setErrors(\"\");\n+    setLoading(false);\n+    props.close();\n+  };\n+  // USER LIMIA UPDATE VALIDATION\n+  useEffect(() => {\n+    GetSubSTage();\n+    setState({\n+      ...state,\n+      lmia_status: lmia_status /*, completion_time: completion_time*/,\n+    });\n+    if (apiCall === true) {\n+      setApiCall(false);\n+    }\n+  }, [apiCall, lmia_status]);\n+\n+  useEffect(() => {}, []);\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    lmia_status: \"\",\n+    // completion_time: \"\",\n+  };\n+  // VALIDATION CONDITIONS\n+  const validators = {\n+    lmia_status: [\n+      (value) =>\n+        value === \"\" || value === null ? \"Lmia status is required\" : \"\",\n+    ],\n+    // completion_time: [\n+    //   (value) =>\n+    //     value === \"\" || value === null\n+    //       ? \"Expected time of completion is required\"\n+    //       : \"\",\n+    // ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n+  const onLmiaUpdateClick = async (event) => {\n+    event.preventDefault();\n+    if (validate() && props.job === \"yes\") {\n+      let data = {\n+        // completion_time: state.completion_time,\n+        lmia_status: state.lmia_status,\n+        job_id: jobId,\n+      };\n+      try {\n+        let responseData = await AddJob(data);\n+        if (responseData.message === \"job data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true);\n+          close();\n+        }\n+      } catch (err) {\n+       console.log(err) \n+      }\n+    }\n+    if (validate()) {\n+      setLoading(true);\n+      try {\n+        const responseData = await AddLimia(state, employeeId, jobId);\n+        if (responseData.message === \"Data added successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true);\n+          close();\n+        }\n+        if (responseData.message === \"Data updated successfully\") {\n+          toast.success(\"Lmia Status Updated successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          props.setApiCall(true);\n+          close();\n+        }\n+      } catch (err) {\n+        console.log(err);\n+        setLoading(false);\n+      }\n+    } else {\n+      setLoading(false);\n+    }\n+  };\n+  // END LIMIA VALIDATION\n+\n+  return (\n+    <>\n+      <Modal\n+        show={props.show}\n+        size=\"lg\"\n+        aria-labelledby=\"contained-modal-title-vcenter\"\n+        centered\n+      >\n+        <button\n+          type=\"button\"\n+          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n+          data-dismiss=\"modal\"\n+          onClick={close}\n+        >\n+          <i className=\"fas fa-times\"></i>\n+        </button>\n+        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n+          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n+          <LmiaTime\n+            lmia={state.lmia_status}\n+            job={props.job}\n+            location={location.pathname}\n+          />\n+          <form onSubmit={onLmiaUpdateClick}>\n+            {expandedStatus && (\n+              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n+              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n+              //     <div\n+              //       key={j}\n+              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n+              //         (item) =>\n+              //           item.lmia_substage === subStage\n+              //       )\n+              //         ? 'selected'\n+              //         : ''\n+              //         }`}\n+              //       onClick={() =>\n+              //         handleSubStageSelection(expandedStatus, subStage)\n+              //       }\n+              //     >\n+\n+              //       <input\n+              //         type=\"checkbox\"\n+              //         className='mx-2'\n+              //         checked={(selectedStatus || []).some(\n+              //           (item) =>\n+              //             // item.lmia_status === expandedStatus &&\n+              //             item.lmia_substage === subStage\n+              //         )}\n+              //         readOnly\n+              //       />{subStage}\n+              //     </div>\n+              //   ))}\n+              // </div>\n+              <LmiaSubStageSelector\n+                expandedStatus={expandedStatus}\n+                selectedStatus={selectedStatus}\n+                FilterJson={FilterJson}\n+                handleSubStageSelection={handleSubStageSelection}\n+                lmia_status={state.lmia_status}\n+              />\n+            )}\n+            <div className=\"form-group \">\n+              <label\n+                htmlFor=\"lmia_status\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Lmia status <span className=\"text-danger\">*</span>:\n+              </label>\n+              <select\n+                type={\"text\"}\n+                className={\n+                  errors.lmia_status\n+                    ? \"form-control text-capitalize border border-danger\"\n+                    : \"form-control text-capitalize\"\n+                }\n+                value={state.lmia_status || \"\"}\n+                onChange={(e) => {\n+                  setState({ ...state, lmia_status: e.target.value });\n+                  setExpandedStatus(e.target.value);\n+                }}\n+                id=\"lmia_status\"\n+                name=\"lmia_status\"\n+                multiple={false}\n+              >\n+                <option value={\"\"}>Select lmia status</option>\n+                {(FilterJson.lmia_status || []).map((status, i) => {\n+                  isExpanded = expandedStatus === status;\n+                  return props.job === \"yes\" ? (\n+                    <option value={status} key={i}>\n+                      {status}\n+                    </option>\n+                  ) : (\n+                    i > 2 && (\n+                      <option value={status} key={i}>\n+                        {status}\n+                      </option>\n+                    )\n+                  );\n+                })}\n+              </select>\n+              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n+              {errors.lmia_status && (\n+                <span\n+                  key={errors.lmia_status}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.lmia_status}\n+                </span>\n+              )}\n+            </div>\n+\n+            {/* <div className=\"form-group mt-5\">\n+              <label\n+                htmlFor=\"completion_time\"\n+                className=\"font-size-4 text-black-2  line-height-reset\"\n+              >\n+                Expected time of completion<span className=\"text-danger\">*</span>:\n+              </label>\n+              <input\n+                type=\"date\"\n+                className={\n+                  errors.completion_time\n+                    ? \"form-control coustam_datepicker border border-danger\"\n+                    : \"form-control coustam_datepicker\"\n+                }\n+                value={moment(state.completion_time).format(\"DD-MM-YYYY\") || \"\"}\n+                onChange={onInputChange}\n+                id=\"completion_time\"\n+                name=\"completion_time\"\n+                onKeyDownCapture={(e) => e.preventDefault()}\n+                min={moment().format(\"DD-MM-YYYY\")}\n+              />\n+              ----ERROR MESSAGE FOR Admin Name----\n+              {errors.completion_time && (\n+                <span\n+                  key={errors.completion_time}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.completion_time}\n+                </span>\n+              )}\n+            </div> */}\n+            {/* {state.lmia_status === \"complete\" ? (\n+              <>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"posted\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Posted :\n+                  </label>\n+                  <select\n+                    type={\"text\"}\n+                    className={\n+                      errors.posted\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.posted}\n+                    onChange={onInputChange}\n+                    id=\"posted\"\n+                    name=\"posted\"\n+                    multiple={false}\n+                  >\n+                    <option value={\"\"}>Select lmia status</option>\n+                    <option value={\"Yes\"}>Yes</option>\n+                    <option value={\"No\"}>No</option>\n+                  </select>\n+                  ----ERROR MESSAGE FOR LIMA STATUS----\n+                  {errors.posted && (\n+                    <span\n+                      key={errors.posted}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group\">\n+                  <label\n+                    htmlFor=\"job_category_id\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Company <span className=\"text-danger\"> *</span> :\n+                  </label>\n+                  <div className=\"position-relative\">\n+                    <select\n+                      name=\"posted_company_id\"\n+                      value={state.posted_company_id}\n+                      onChange={onInputChange}\n+                      className={\n+                        errors.posted_company_id\n+                          ? \" form-control border border-danger position-relative overflow-hidden\"\n+                          : \" form-control position-relative overflow-hidden\"\n+                      }\n+                      placeholder=\"company name\"\n+                      id=\"posted_company_id\"\n+                    >\n+                      <option value={\"\"}>Select Company</option>\n+                      {(company || []).map((com) => (\n+                        <option key={com.company_id} value={com.company_id}>\n+                          {com.company_name}\n+                        </option>\n+                      ))}\n+                    </select>\n+                  </div>\n+                  ----ERROR MESSAGE FOR COMPANY----\n+                  {errors.posted_company_id && (\n+                    <span\n+                      key={errors.posted_company_id}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.posted_company_id}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Date of posting :\n+                  </label>\n+                  <input\n+                    type={\"date\"}\n+                    className={\n+                      errors.date_of_posting\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.date_of_posting}\n+                    onChange={onInputChange}\n+                    id=\"date_of_posting\"\n+                    name=\"date_of_posting\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.date_of_posting && (\n+                    <span\n+                      key={errors.date_of_posting}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.date_of_posting}\n+                    </span>\n+                  )}\n+                </div>\n+                <div className=\"form-group \">\n+                  <label\n+                    htmlFor=\"date_of_posting\"\n+                    className=\"font-size-4 text-black-2  line-height-reset\"\n+                  >\n+                    Designation\n+                  </label>\n+                  <input\n+                    type={\"text\"}\n+                    className={\n+                      errors.designation\n+                        ? \"form-control border border-danger\"\n+                        : \"form-control\"\n+                    }\n+                    value={state.designation}\n+                    onChange={onInputChange}\n+                    id=\"designation\"\n+                    name=\"designation\"\n+                  />\n+                  ----ERROR MESSAGE FOR COMPANY NAME----\n+                  {errors.designation && (\n+                    <span\n+                      key={errors.designation}\n+                      className=\"text-danger font-size-3\"\n+                    >\n+                      {errors.designation}\n+                    </span>\n+                  )}\n+                </div>\n+              </>\n+            ) : null} */}\n+            <div className=\"form-group text-center\">\n+              {loading === true ? (\n+                <button\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"button\"\n+                  disabled\n+                >\n+                  <span\n+                    className=\"spinner-border spinner-border-sm \"\n+                    role=\"status\"\n+                    aria-hidden=\"true\"\n+                  ></span>\n+                  <span className=\"sr-only\">Loading...</span>\n+                </button>\n+              ) : (\n+                <button\n+                  onClick={onLmiaUpdateClick}\n+                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n+                  type=\"submit\"\n+                >\n+                  Submit\n+                </button>\n+              )}\n+            </div>\n+          </form>\n+        </div>\n+      </Modal>\n+    </>\n+  );\n+}\n+\n+export default LmiaStatus;\n"
                }
            ],
            "date": 1692954318165,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport useValidation from \"../../common/useValidation\";\nimport { AddLimia, AddJob, AddUpdateEmployeeLmiaSubStage, GetLimaSubStages, AddUpdateJobLmiaSubStage, GetJobLimaSubStages } from \"../../../api//api\";\nimport { toast } from \"react-toastify\";\nimport { useLocation } from \"react-router-dom\"\nimport \"react-toastify/dist/ReactToastify.css\";\nimport FilterJson from \"../../json/filterjson\";\nimport LmiaTime from \"../../common/lmiaTime\";\nimport LmiaSubStageSelector from \"../../common/lmiaSubStage\";\nfunction LmiaStatus(props) {\n  let [loading, setLoading] = useState(false);\n  let [apiCall, setApiCall] = useState(false);\n  const [selectedStatus, setSelectedStatus] = useState([]);\n  const [expandedStatus, setExpandedStatus] = useState(props.resData.lmia_status);\n  let employeeId =\n    props.resData === undefined ? null : props.resData.employee_id;\n  let lmia_status = props.resData.lmia_status\n  // let completion_time = props.resData.expected_time_of_completion\n  let location = useLocation()\n  let jobId = props.resData.job_id;\n  // const [company] = useState([]);\n  // eslint-disable-next-line\n  let isExpanded = false\n\n  /*Function to get lima sub stage */\n  const GetSubSTage = async () => {\n    try {\n      let Response\n      if (props.job === \"yes\") {\n        Response = await GetJobLimaSubStages(jobId, lmia_status)\n      } else {\n        Response = await GetLimaSubStages(props.resData.id)\n      }\n      setSelectedStatus(Response.data.data)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  // Function to handle checkbox selection\n  const handleSubStageSelection = async (status, subStage) => {\n    const isSelected = selectedStatus.some(\n      (item) => item.lmia_status === status && item.lmia_substage === subStage\n    );\n    let data;\n    /*Condition to check the selected substages */\n    if (isSelected) {\n      setSelectedStatus(\n        selectedStatus.filter(\n          (item) => !(item.lmia_status === status && item.lmia_substage === subStage)\n        )\n      );\n      let id = selectedStatus.filter(\n        (item) => (item.lmia_status === status && item.lmia_substage === subStage)\n      )[0].id\n      if (props.job === \"yes\") {\n        /*Job lima sub stages */\n        data = {\n          id: id,\n          job_id: jobId,\n          lmia_substage: \"false\",\n          lmia_status: status\n        }\n      } else {\n        /*Job lima sub stages */\n        data = {\n          id: id,\n          lmia_id: props.resData.id,\n          lmia_substage: \"false\",\n          lmia_status: status\n        }\n      }\n    } else {\n      setSelectedStatus([\n        ...selectedStatus,\n        { status: status, subStage: subStage },\n      ]);\n      if (props.job === \"yes\") {\n        /*Job lima sub stages */\n        data = {\n          job_id: jobId,\n          lmia_substage: subStage,\n          lmia_status: status\n        }\n      } else {\n        /*Employee lima sub stages */\n        data = {\n          lmia_id: props.resData.id,\n          lmia_substage: subStage,\n          lmia_status: status\n        }\n      }\n    }\n    try {\n      let Response\n      /*APi called */\n      if (props.job === \"yes\") {\n        Response = await AddUpdateJobLmiaSubStage(data)\n      } else {\n        Response = await AddUpdateEmployeeLmiaSubStage(data)\n      }\n      /*Removed sub stage response */\n      if (Response.message === \"updated successfully\") {\n        toast.success(\"Lmia Sub Stage Removed successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        // if (status !== props.resData.lmia_status) {\n        //   setState({ ...state, lmia_status: status })\n        //   if (typeof onLmiaUpdateClick === 'function') {\n        //     onLmiaUpdateClick(\"sub\");\n        //   }\n        // }\n        setApiCall(true)\n      }\n      /*Added sub stage response */\n      if (Response.message === 'insert successfully') {\n        toast.success(\"Lmia Sub Stage Added successfully\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        // if (status !== props.resData.lmia_status) {\n        //   setState({ ...state, lmia_status: status })\n        //   if (typeof onLmiaUpdateClick === 'function') {\n        //     onLmiaUpdateClick(\"sub\");\n        //   }\n        // }\n        setApiCall(true)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  };\n  // console.log(\"Sub Stages =>\", selectedStatus)\n  /* Functionality to close the modal */\n  const close = () => {\n    setState({ ...state, lmia_status: \"\" });\n    setErrors(\"\");\n    setLoading(false);\n    props.close();\n  };\n  // USER LIMIA UPDATE VALIDATION\n  useEffect(() => {\n    GetSubSTage()\n    setState({ ...state, lmia_status: lmia_status/*, completion_time: completion_time*/ });\n    if (apiCall === true) {\n      setApiCall(false)\n    }\n  }, [apiCall, lmia_status]);\n\n  useEffect(() => { }, [])\n  // INITIAL STATE ASSIGNMENT\n  const initialFormState = {\n    lmia_status: \"\",\n    // completion_time: \"\",\n  };\n  // VALIDATION CONDITIONS\n  const validators = {\n    lmia_status: [\n      (value) =>\n        value === \"\" || value === null\n          ? \"Lmia status is required\"\n          : \"\",\n    ],\n    // completion_time: [\n    //   (value) =>\n    //     value === \"\" || value === null \n    //       ? \"Expected time of completion is required\"\n    //       : \"\",\n    // ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState, setErrors, /*onInputChange,*/ errors, validate } =\n    useValidation(initialFormState, validators);\n\n  // USER LIMIA UPDATE FILTER SUBMIT BUTTON\n  const onLmiaUpdateClick = async (event) => {\n    event.preventDefault();\n    if (validate() && props.job === \"yes\") {\n      let data = {\n        // completion_time: state.completion_time,\n        lmia_status: state.lmia_status,\n        job_id: jobId\n      }\n      try {\n        let responseData = await AddJob(data);\n        if (responseData.message === \"job data updated successfully\") {\n          toast.success(\"Lmia Status Updated successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          props.setApiCall(true)\n            close()\n        }\n      } catch (err) {\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n      }\n    }\n    if (validate()) {\n      setLoading(true);\n      try {\n        const responseData = await AddLimia(state, employeeId, jobId);\n        if (responseData.message === \"Data added successfully\") {\n          toast.success(\"Lmia Status Updated successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          props.setApiCall(true)\n            close()\n        }\n        if (responseData.message === \"Data updated successfully\") {\n          toast.success(\"Lmia Status Updated successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          props.setApiCall(true)\n            close()\n        }\n      } catch (err) {\n        toast.error(\"Something went wrong\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        setLoading(false)\n      }\n    } else {\n      setLoading(false);\n    }\n\n  };\n  // END LIMIA VALIDATION\n\n\n  return (\n    <>\n      <Modal\n        show={props.show}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <button\n          type=\"button\"\n          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n          data-dismiss=\"modal\"\n          onClick={close}\n        >\n          <i className=\"fas fa-times\"></i>\n        </button>\n        <div className=\"bg-white rounded h-100 px-11 pt-7 overflow-y-hidden\">\n\n          <h5 className=\"text-center pt-2 mb-7\">LMIA status</h5>\n          <LmiaTime lmia={state.lmia_status}\n            job={props.job}\n            location={location.pathname} />\n          <form onSubmit={onLmiaUpdateClick}>\n            {expandedStatus && (\n              // <div className='bg-white text-dark p-2 sub-stages-container row'>\n              //   {(FilterJson.lima_sub_stages[expandedStatus] || []).map((subStage, j) => (\n              //     <div\n              //       key={j}\n              //       className={`sub-stage col-6 text-capitalize ${(selectedStatus || []).some(\n              //         (item) =>\n              //           item.lmia_substage === subStage\n              //       )\n              //         ? 'selected'\n              //         : ''\n              //         }`}\n              //       onClick={() =>\n              //         handleSubStageSelection(expandedStatus, subStage)\n              //       }\n              //     >\n\n              //       <input\n              //         type=\"checkbox\"\n              //         className='mx-2'\n              //         checked={(selectedStatus || []).some(\n              //           (item) =>\n              //             // item.lmia_status === expandedStatus &&\n              //             item.lmia_substage === subStage\n              //         )}\n              //         readOnly\n              //       />{subStage}\n              //     </div>\n              //   ))}\n              // </div>\n              <LmiaSubStageSelector\n              expandedStatus={expandedStatus}\n              selectedStatus={selectedStatus}\n              FilterJson={FilterJson}\n              handleSubStageSelection={handleSubStageSelection}\n            />\n            )}\n            <div className=\"form-group \">\n              <label\n                htmlFor=\"lmia_status\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                Lmia status <span className=\"text-danger\">*</span>:\n              </label>\n              <select\n                type={\"text\"}\n                className={\n                  errors.lmia_status\n                    ? \"form-control text-capitalize border border-danger\"\n                    : \"form-control text-capitalize\"\n                }\n                value={state.lmia_status || \"\"}\n                onChange={(e) => {\n                  setState({ ...state, lmia_status: e.target.value });\n                  setExpandedStatus(e.target.value);\n                }}\n                id=\"lmia_status\"\n                name=\"lmia_status\"\n                multiple={false}\n              >\n                <option value={\"\"}>Select lmia status</option>\n                {(FilterJson.lmia_status || []).map((status, i) => {\n                  isExpanded = expandedStatus === status\n                  return (\n                    props.job === \"yes\" ? (i <= 2 && (\n                      <option value={status} key={i}\n                      >\n\n                        {status}\n                      </option>\n                    )) : (i > 2 && (\n                      <option value={status} key={i}\n                      >\n                        {status}\n                      </option>\n                    ))\n                  )\n                })}\n              </select>\n              {/*----ERROR MESSAGE FOR LIMA STATUS----*/}\n              {errors.lmia_status && (\n                <span\n                  key={errors.lmia_status}\n                  className=\"text-danger font-size-3\"\n                >\n                  {errors.lmia_status}\n                </span>\n              )}\n            </div>\n\n            {/* <div className=\"form-group mt-5\">\n              <label\n                htmlFor=\"completion_time\"\n                className=\"font-size-4 text-black-2  line-height-reset\"\n              >\n                Expected time of completion<span className=\"text-danger\">*</span>:\n              </label>\n              <input\n                type=\"date\"\n                className={\n                  errors.completion_time\n                    ? \"form-control coustam_datepicker border border-danger\"\n                    : \"form-control coustam_datepicker\"\n                }\n                value={moment(state.completion_time).format(\"YYYY-MM-DD\") || \"\"}\n                onChange={onInputChange}\n                id=\"completion_time\"\n                name=\"completion_time\"\n                onKeyDownCapture={(e) => e.preventDefault()}\n                min={moment().format(\"YYYY-MM-DD\")}\n              />\n              ----ERROR MESSAGE FOR Admin Name----\n              {errors.completion_time && (\n                <span\n                  key={errors.completion_time}\n                  className=\"text-danger font-size-3\"\n                >\n                  {errors.completion_time}\n                </span>\n              )}\n            </div> */}\n            {/* {state.lmia_status === \"complete\" ? (\n              <>\n                <div className=\"form-group\">\n                  <label\n                    htmlFor=\"posted\"\n                    className=\"font-size-4 text-black-2  line-height-reset\"\n                  >\n                    Posted :\n                  </label>\n                  <select\n                    type={\"text\"}\n                    className={\n                      errors.posted\n                        ? \"form-control border border-danger\"\n                        : \"form-control\"\n                    }\n                    value={state.posted}\n                    onChange={onInputChange}\n                    id=\"posted\"\n                    name=\"posted\"\n                    multiple={false}\n                  >\n                    <option value={\"\"}>Select lmia status</option>\n                    <option value={\"Yes\"}>Yes</option>\n                    <option value={\"No\"}>No</option>\n                  </select>\n                  ----ERROR MESSAGE FOR LIMA STATUS----\n                  {errors.posted && (\n                    <span\n                      key={errors.posted}\n                      className=\"text-danger font-size-3\"\n                    >\n                      {errors.posted}\n                    </span>\n                  )}\n                </div>\n                <div className=\"form-group\">\n                  <label\n                    htmlFor=\"job_category_id\"\n                    className=\"font-size-4 text-black-2  line-height-reset\"\n                  >\n                    Company <span className=\"text-danger\"> *</span> :\n                  </label>\n                  <div className=\"position-relative\">\n                    <select\n                      name=\"posted_company_id\"\n                      value={state.posted_company_id}\n                      onChange={onInputChange}\n                      className={\n                        errors.posted_company_id\n                          ? \" form-control border border-danger position-relative overflow-hidden\"\n                          : \" form-control position-relative overflow-hidden\"\n                      }\n                      placeholder=\"company name\"\n                      id=\"posted_company_id\"\n                    >\n                      <option value={\"\"}>Select Company</option>\n                      {(company || []).map((com) => (\n                        <option key={com.company_id} value={com.company_id}>\n                          {com.company_name}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  ----ERROR MESSAGE FOR COMPANY----\n                  {errors.posted_company_id && (\n                    <span\n                      key={errors.posted_company_id}\n                      className=\"text-danger font-size-3\"\n                    >\n                      {errors.posted_company_id}\n                    </span>\n                  )}\n                </div>\n                <div className=\"form-group \">\n                  <label\n                    htmlFor=\"date_of_posting\"\n                    className=\"font-size-4 text-black-2  line-height-reset\"\n                  >\n                    Date of posting :\n                  </label>\n                  <input\n                    type={\"date\"}\n                    className={\n                      errors.date_of_posting\n                        ? \"form-control border border-danger\"\n                        : \"form-control\"\n                    }\n                    value={state.date_of_posting}\n                    onChange={onInputChange}\n                    id=\"date_of_posting\"\n                    name=\"date_of_posting\"\n                  />\n                  ----ERROR MESSAGE FOR COMPANY NAME----\n                  {errors.date_of_posting && (\n                    <span\n                      key={errors.date_of_posting}\n                      className=\"text-danger font-size-3\"\n                    >\n                      {errors.date_of_posting}\n                    </span>\n                  )}\n                </div>\n                <div className=\"form-group \">\n                  <label\n                    htmlFor=\"date_of_posting\"\n                    className=\"font-size-4 text-black-2  line-height-reset\"\n                  >\n                    Designation\n                  </label>\n                  <input\n                    type={\"text\"}\n                    className={\n                      errors.designation\n                        ? \"form-control border border-danger\"\n                        : \"form-control\"\n                    }\n                    value={state.designation}\n                    onChange={onInputChange}\n                    id=\"designation\"\n                    name=\"designation\"\n                  />\n                  ----ERROR MESSAGE FOR COMPANY NAME----\n                  {errors.designation && (\n                    <span\n                      key={errors.designation}\n                      className=\"text-danger font-size-3\"\n                    >\n                      {errors.designation}\n                    </span>\n                  )}\n                </div>\n              </>\n            ) : null} */}\n            <div className=\"form-group text-center\">\n              {loading === true ? (\n                <button\n                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                  type=\"button\"\n                  disabled\n                >\n                  <span\n                    className=\"spinner-border spinner-border-sm \"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                  ></span>\n                  <span className=\"sr-only\">Loading...</span>\n                </button>\n              ) : (\n                <button\n                  onClick={onLmiaUpdateClick}\n                  className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              )}\n            </div>\n          </form>\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nexport default LmiaStatus;\n"
        }
    ]
}