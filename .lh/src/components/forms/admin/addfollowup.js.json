{
    "sourceFile": "src/components/forms/admin/addfollowup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713876054082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713876054082,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\nimport useValidation from \"../../common/useValidation\";\n// import { Modal } from \"react-bootstrap\";\nimport {/* getSingleFollowup*/getAllUsersFollowUpData, AddAllUserFollowup /*AddFollowup*/ } from \"../../../api/api\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Link } from \"react-router-dom\";\nimport TextEditor from \"../../common/TextEditor\";\n\nfunction Addfollowup(props) {\n  let [response, setResponseData] = useState([]);\n  let [loading, setLoading] = useState(false);\n  /* Shorting states */\n  const [columnName, setcolumnName] = useState(\"next_followup_date\");\n  const [sortOrder, setSortOrder] = useState(\"ASC\");\n  // let employId = props.employee_id;\n  let user_type = localStorage.getItem(\"userType\");\n  let adminId = localStorage.getItem(\"admin_id\")\n  let adminType = localStorage.getItem(\"admin_type\")\n  // USER FOLLOW UP PROFILE UPDATE VALIDATION\n\n  /* Function to get the Response data*/\n  const ResponseData = async () => {\n    try {\n      /*only for employee*/\n      // const userData = await getSingleFollowup(\n      //   props.employee_id !== \"\" ? props.employee_id : null,\n      //   columnName,\n      //   sortOrder\n      //   // props.job_id\n      // );\n      /*For All user*/\n      const userData = await getAllUsersFollowUpData(props.userId, props.userType, columnName, sortOrder)\n      if (\n        userData.data === null ||\n        userData.data === undefined ||\n        userData.data === \"undefined\" ||\n        userData.data === \"\" ||\n        userData.data.length === 0\n        // ||\n        // props.employee_id === \"\" ||\n        // props.employee_id === undefined\n      ) {\n        setResponseData([]);\n      } else {\n        setResponseData(userData.data.data);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  /*Render function to get the Response*/\n  useEffect(() => {\n    // if (props.userId === undefined || !props.userId/*|| props.job_id === undefined*/) {\n    // } else {\n    ResponseData();\n    // }\n    // eslint-disable-next-line\n  }, [props, sortOrder]);\n\n  // INITIAL STATE ASSIGNMENT\n  const initialFormState = {\n    /*only for employee*/\n    // remark: \"\",\n    // next_followup_date: \"\",\n    // subject: \"\",\n    // employee_id: employId,\n    // status: \"\",\n    // For all user\n    \"admin_id\": adminId,\n    \"user_id\": props.userId,\n    \"user_type\": props.userType,\n    \"remark\": \"\",\n    \"next_date\": \"\",\n    \"subject\": \"\",\n    \"status\": \"\",\n    \"assigned_by_id\": props.assigned_by_id,\n    \"assigned_by_type\": adminType\n  };\n  // VALIDATION CONDITIONS\n  const validators = {\n    subject: [\n      (value) =>\n        value === \"\" || value === null || value.trim() === \"\"\n          ? \"subject required\"\n          : value.length < 2\n            ? \"subjectz should have 2 or more letters.\"\n            : \"\",\n    ],\n    remark: [\n      (value) =>\n        value === \"\" || value === null || value.trim() === \"\"\n          ? \"Discription required\"\n          : value.length < 2\n            ? \"Discription should have 2 or more letters.\"\n            : \"\",\n    ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState, onInputChange, errors, setErrors, validate } =\n    useValidation(initialFormState, validators);\n\n  /* Functionality to close the modal */\n  const close = () => {\n    setState(initialFormState);\n    setErrors(\"\");\n    setLoading(false);\n    // props.close();\n  };\n\n  // USER FOLLOW UP PROFILE UPDATE SUBMIT BUTTON\n  const onAminFollowClick = async (event) => {\n    event.preventDefault();\n    if (validate()) {\n      setLoading(true);\n      if (!props.assigned_by_id) {\n        toast.error(\"Please assign the admin first!\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 2000,\n        });\n        setLoading(false);\n        setState(initialFormState);\n      } else {\n        try {\n          /*only for employee*/\n          // let responseData = await AddFollowup(state);\n          /*For all user*/\n          let responseData = await AddAllUserFollowup(state);\n          if (responseData.message === \"follow up updated successfully\") {\n            toast.success(\"Followup Updated successfully\", {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            });\n            props.setApiCall(true);\n            return close();\n          }\n        } catch (err) {\n          console.log(err);\n          setLoading(false);\n        }\n      }\n    } else {\n      setLoading(false);\n    }\n  };\n  // END USER FOLLOW UP PROFILE UPDATE VALIDATION\n  const moment = require(\"moment\");\n  /*Sorting Function */\n  const handleSort = (columnName) => {\n    setSortOrder(sortOrder === \"DESC\" ? \"ASC\" : \"DESC\");\n    setcolumnName(columnName);\n    // setCurrentPage(1);\n  };\n  return (\n    <>\n      <ToastContainer />\n      {/* <Modal\n        show={props.show}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      > \n        <button\n          type=\"button\"\n          className=\"circle-32 btn-reset bg-white pos-abs-tr mt-md-n6 mr-lg-n6 focus-reset z-index-supper \"\n          data-dismiss=\"modal\"\n          onClick={close}\n        >\n          <i className=\"fas fa-times\"></i>\n        </button>*/}\n\n      {/* <h5 className=\"text-center pt-2 mb-7\">Follow Ups</h5> */}\n      {props.userId !== \"\" ? (\n        <div className=\"bg-white rounded h-100vh px-11 py-7 overflow-y-hidden\">\n          <div className=\"row\">\n            <div\n              className={`activity_container pr-10 ${user_type === \"admin\" ? \"col-md-8 border-right\" : \"col-md-12\"\n                }`}\n            >\n              {/* {console.log(response)} */}\n              {response.length === 0 || !response ? (\n                <div className=\"single_note mb-5\">\n                  <div className=\"d-flex justify-content-center\">\n                    <p className=\"text-italic font-size-3 m-0\">No Data Found</p>\n                  </div>\n                </div>\n              ) : (\n                (response || []).map((res) => (\n                  <div className=\"single_note mb-5\" key={res.id}>\n                    <div className=\"card p-2\">\n                      <div className=\"m-0 d-flex justify-content-between align-items-center\">\n                        <b className=\"font-size-4 font-weight-bold text-dark\">\n                          {res.subject}\n                        </b>\n                        <i className=\"font-size-2\">\n                          Created on:\n                          {moment(res.created_at).format(\n                            \"Do MMM YYYY, h:mm:ss a\"\n                          )}\n                        </i>\n                      </div>\n                      <p className=\"font-size-4 m-0\">\n                        <div\n                          dangerouslySetInnerHTML={{\n                            __html: res.remark,\n                          }}\n                        /></p>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n            <div\n              className={\n                user_type === \"admin\" ? \"px-10 py-5 col-md-4\" : \"d-none\"\n              }\n            >\n              <form>\n                <div className=\"form-group col px-0 pr-3\">\n                  <label\n                    htmlFor=\"subject\"\n                    className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n                  >\n                    Subject: <span className=\"text-danger\">*</span>\n                  </label>\n                  <div className=\"position-relative\">\n                    <input\n                      maxLength={60}\n                      name=\"subject\"\n                      value={state.subject || \"\"}\n                      onChange={onInputChange}\n                      type=\"text\"\n                      className={\n                        errors.subject\n                          ? \"form-control border border-danger\"\n                          : \"form-control\"\n                      }\n                      placeholder=\"subject\"\n                      id=\"subject\"\n                    />\n                  </div>\n                  {/*----ERROR MESSAGE FOR name----*/}\n                  {errors.subject && (\n                    <span\n                      key={errors.subject}\n                      className=\"text-danger font-size-3\"\n                    >\n                      {errors.subject}\n                    </span>\n                  )}\n                </div>\n                <div className=\"form-group col px-0 pr-3\">\n                  <label\n                    htmlFor=\"subject\"\n                    className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n                  >\n                    Status:\n                  </label>\n                  <div className=\"position-relative\">\n                    <select\n                      name=\"status\"\n                      value={state.status || \"\"}\n                      onChange={onInputChange}\n                      type=\"text\"\n                      className={\n                        errors.status\n                          ? \"form-control border border-danger\"\n                          : \"form-control\"\n                      }\n                      placeholder=\"status\"\n                      id=\"status\"\n                    >\n                      <option value={\"\"}>Select Status</option>\n                      <option value={0}>Normal</option>\n                      <option value={1}>Private</option>\n                    </select>\n                  </div>\n                  {/*----ERROR MESSAGE FOR name----*/}\n                  {errors.status && (\n                    <span\n                      key={errors.status}\n                      className=\"text-danger font-size-3\"\n                    >\n                      {errors.status}\n                    </span>\n                  )}\n                </div>\n                <div className=\"form-group col px-0 pr-3\">\n                  <label\n                    htmlFor=\"remark\"\n                    className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n                  >\n                    Add New Note: <span className=\"text-danger\">*</span>\n                  </label>\n                  <div className=\"position-relative\">\n                    <div\n                      className={\n                        errors.remark\n                          ? \"border border-danger rounded overflow-hidden\"\n                          : \"border rounded overflow-hidden\"\n                      }\n                    >\n                      <TextEditor\n                        setState={setState}\n                        state={state}\n                        page={\"FollowUp\"} />\n                      {/* <textarea\n                        name=\"remark\"\n                        value={state.remark}\n                        onChange={onInputChange}\n                        rows={8}\n                        style={{ height: \"140px\" }}\n                        className={\n                          errors.remark\n                            ? \"form-control border border-danger\"\n                            : \"form-control\"\n                        }\n                        id=\"remark\"\n                        placeholder=\"Add Note here\"\n                      ></textarea> */}\n                    </div>\n                    {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n                    {errors.remark && (\n                      <span\n                        key={errors.remark}\n                        className=\"text-danger font-size-3\"\n                      >\n                        {errors.remark}\n                      </span>\n                    )}\n                  </div>\n                </div>\n                <div className=\"form-group col px-0 pr-3\">\n                  <label\n                    htmlFor=\"next_followup_date\"\n                    className=\"font-size-4 text-black-2 font-weight-semibold line-height-reset\"\n                  >\n                    Next Date :\n                  </label>\n                  <div className=\"position-relative\">\n                    <input\n                      type=\"date\"\n                      placeholder=\"Next followup date\"\n                      id=\"next_followup_date\"\n                      name=\"next_followup_date\"\n                      min={moment().format(\"DD-MM-YYYY\")}\n                      value={state.next_followup_date}\n                      onChange={onInputChange}\n                      onKeyDownCapture={(e) => e.preventDefault()}\n                      className={\n                        errors.next_followup_date\n                          ? \"form-control coustam_datepicker border border-danger\"\n                          : \"form-control coustam_datepicker\"\n                      }\n                    />\n                    {/*----ERROR MESSAGE FOR next_followup_date----*/}\n                    {errors.next_followup_date && (\n                      <span\n                        key={errors.next_followup_date}\n                        className=\"text-danger font-size-3\"\n                      >\n                        {errors.next_followup_date}\n                      </span>\n                    )}\n                  </div>\n                </div>\n                <div className=\"form-group text-center\">\n                  {loading === true ? (\n                    <button\n                      className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                      type=\"button\"\n                      disabled\n                    >\n                      <span\n                        className=\"spinner-border spinner-border-sm \"\n                        role=\"status\"\n                        aria-hidden=\"true\"\n                      ></span>\n                      <span className=\"sr-only\">Loading...</span>\n                    </button>\n                  ) : (\n                    <button\n                      onClick={(e) => onAminFollowClick(e)}\n                      className=\"btn btn-primary btn-small w-25 rounded-5 text-uppercase\"\n                      type=\"button\"\n                    >\n                      Submit\n                    </button>\n                  )}\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"table-responsive main_table_div\">\n          <table className=\"table table-striped main_data_table\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                  className=\" border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"employee_name\");\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Description\"\n                  >\n                    Name\n                  </Link>\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\" border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"subject\");\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Description\"\n                  >\n                    Subject\n                  </Link>\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\" border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"remark\");\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Description\"\n                  >\n                    Note\n                  </Link>\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\" border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"created_at\");\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Description\"\n                  >\n                    Added date\n                  </Link>\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\" border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"next_followup_date\");\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Description\"\n                  >\n                    Next Date\n                  </Link>\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\" border-0 font-size-4 font-weight-normal\"\n                >\n                  <Link\n                    to={\"\"}\n                    onClick={() => {\n                      handleSort(\"status\");\n                    }}\n                    className=\"text-gray\"\n                    title=\"Sort by Description\"\n                  >\n                    Status\n                  </Link>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                response.map((item) => item.status === \"1\") ?\n                  (response || []).map(\n                    (res) =>\n                      res.status === \"1\" && (\n                        <tr key={res.id}>\n                          <td>\n                            <Link\n                              className=\"d-flex align-items-center\"\n                              to={`/${res.user_id}`}\n                            >\n                              <div className=\"d-flex profile_box gx-2\">\n                                <div className=\"media  align-items-center\">\n                                  <div className=\"circle-30 mx-auto overflow-hidden\">\n                                    <img\n                                      src={\n                                        res.profile_photo === \"\" ||\n                                          res.profile_photo === null ||\n                                          res.profile_photo === undefined\n                                          ? \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png\"\n                                          : res.profile_photo\n                                      }\n                                      alt=\"\"\n                                      className=\"w-100\"\n                                    />\n                                  </div>\n                                </div>\n                                <div className=\" mb-0\">\n                                  {res.name === \"\" ||\n                                    res.name === \"null\" ||\n                                    res.name === null ||\n                                    res.name === undefined ? (\n                                    <p className=\"font-size-3 mb-0\">N/A</p>\n                                  ) : (\n                                    <p\n                                      className=\"m-0 text-black-2 font-weight-bold text-capitalize text-truncate\"\n                                      title={res.name}\n                                    >\n                                      {res.name}\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                            </Link>\n                          </td>\n                          <td>\n                            {res.subject === \"\" ||\n                              res.subject === \"null\" ||\n                              res.subject === null ||\n                              res.subject === undefined ? (\n                              <p className=\"font-size-3 mb-0\">N/A</p>\n                            ) : (\n                              <p\n                                className=\"m-0 text-black-2 font-weight-bold text-capitalize text-truncate\"\n                                title={res.subject}\n                              >\n                                {res.subject}\n                              </p>\n                            )}\n                          </td>\n                          <td>\n                            {res.remark === \"\" ||\n                              res.remark === \"null\" ||\n                              res.remark === null ||\n                              res.remark === undefined ? (\n                              <p className=\"font-size-3 mb-0\">N/A</p>\n                            ) : (\n                              <p className=\"m-0 text-black-2 font-weight-bold text-capitalize  text-truncate\"\n                                dangerouslySetInnerHTML={{\n                                  __html: res.remark\n                                }} />\n\n                            )}\n                          </td>\n                          <td>\n                            {res.created_at === \"\" ||\n                              res.created_at === \"null\" ||\n                              res.created_at === null ||\n                              res.created_at === undefined ? (\n                              <p className=\"font-size-3 mb-0\">N/A</p>\n                            ) : (\n                              <small>{moment(res.created_at).calendar()}</small>\n                            )}\n                          </td>\n                          <td>\n                            {res.next_followup_date === \"\" ||\n                              res.next_followup_date === \"null\" ||\n                              res.next_followup_date === null ||\n                              res.next_followup_date === undefined ? (\n                              <p className=\"font-size-3 mb-0\">N/A</p>\n                            ) : (\n                              <small>\n                                {moment(res.next_followup_date).format(\"MMM Do YY\")}\n                              </small>\n                            )}\n                          </td>\n                          <td>\n                            {res.status === \"\" ||\n                              res.status === \"null\" ||\n                              res.status === null ||\n                              res.status === undefined ? (\n                              <p className=\"font-size-3 mb-0\"></p>\n                            ) : (\n                              <small>{res.status === \"1\" ? \"Private\" : \"\"}</small>\n                            )}\n                          </td>\n                        </tr>\n                      )\n\n                  ) : <tr className=\"text-center\">\n                    <th colSpan={6}>No data found</th>\n                  </tr>}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {/* </Modal> */}\n    </>\n  );\n}\n\nexport default Addfollowup;\n"
        }
    ]
}