{
    "sourceFile": "src/components/forms/user/sendMailForm.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1709010748278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709011323584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import useValidation from \"../../common/useValidation\";\n import { SendEmail } from \"../../../api/api\";\n import { toast } from \"react-toastify\";\n import { AiOutlineCloudUpload } from \"react-icons/ai\";\n-import { CKEditor } from \"ckeditor4-react\";\n function SendMailForm({ email, setApiCall }) {\n   const [loading, setLoading] = useState(false);\n   const [fileBase, setFileBase] = useState(\"\");\n   const [fileNames, setFileNames] = useState([]);\n@@ -304,18 +303,9 @@\n                     ? \"border border-danger rounded overflow-hidden\"\n                     : \"border rounded overflow-hidden\"\n                 }\n               >\n-                <CKEditor\n-                      type={\"classic\"}\n-                      name={\"description\"}\n-                      id={\"description\"}\n-                      data={state.description}\n-                      value={state.description}\n-                      onChange={onInputChange}\n-                      initData=\"Add Note here\"\n-                    />\n-                {/* <textarea\n+                <textarea\n                   name=\"description\"\n                   value={state.description}\n                   onChange={onInputChange}\n                   rows={8}\n@@ -326,9 +316,9 @@\n                       : \"form-control\"\n                   }\n                   id=\"description\"\n                   placeholder=\"Add Note here\"\n-                ></textarea> */}\n+                ></textarea>\n               </div>\n               {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n               {errors.description && (\n                 <span\n"
                },
                {
                    "date": 1709537205513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { /*useEffect,*/ useState } from \"react\";\n+import useValidation from \"../../common/useValidation\";\n+import { SendEmail } from \"../../../api/api\";\n+import { toast } from \"react-toastify\";\n+import { AiOutlineCloudUpload } from \"react-icons/ai\";\n+function SendMailForm({ email, setApiCall }) {\n+  const [loading, setLoading] = useState(false);\n+  const [fileBase, setFileBase] = useState(\"\");\n+  const [fileNames, setFileNames] = useState([]);\n+  let AdminEmail = localStorage.getItem(\"admin_email\");\n+  /*Render function to get the Response*/\n+  // useEffect(() => {\n+  // }, []);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    subject: \"\",\n+    description: \"\",\n+    email: email,\n+    adminemail: AdminEmail,\n+  };\n+\n+  /*Validation */\n+  let validators = {\n+    subject: [\n+      (value) =>\n+        value === \"\" || value.trim() === \"\"\n+          ? \"Subject is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Subject can not have a number.\"\n+            : value.length < 2\n+              ? \"Subject should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    description: [\n+      (value) =>\n+        value === \"\" || value.trim() === \"\"\n+          ? \"Description is required\"\n+          : // : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          // ? \"Description can not have a number.\"\n+          value.length < 5\n+            ? \"Description should have 2 or more letters\"\n+            : // : /[^A-Za-z 0-9]/g.test(value)\n+            // ? \"Cannot use special character \"\n+            \"\",\n+    ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, onInputChange, errors, setErrors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  /*On change fnction to upload bulk document in 1 array*/\n+  // const handleBulkFileChange = async (event) => {\n+  //   const files = event.target.files;\n+\n+  //   // Check the number of files selected\n+  //   if (files.length > 15) {\n+  //     toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+  //       position: toast.POSITION.TOP_RIGHT,\n+  //       autoClose: 1000,\n+  //     });\n+  //     return;\n+  //   }\n+\n+  //   // Continue with file validation and processing\n+  //   const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+  //   const maxSize = 1024 * 10000; // 10 MB\n+\n+  //   const newFileBase = { ...fileBase };\n+  //   const newFileNames = [];\n+\n+  //   for (let i = 0; i < files.length; i++) {\n+  //     const file = files[i];\n+\n+  //     // Check file type\n+  //     const fileType = `.${file.name.split(\".\").pop()}`;\n+  //     if (!allowedTypes.includes(fileType.toLowerCase())) {\n+  //       toast.error(\n+  //         `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+  //         {\n+  //           position: toast.POSITION.TOP_RIGHT,\n+  //           autoClose: 1000,\n+  //         }\n+  //       );\n+  //       return;\n+  //     }\n+\n+  //     // Check file size\n+  //     if (file.size > maxSize) {\n+  //       toast.error(\n+  //         `Document size can't be more than 8 MB for file '${file.name}'`,\n+  //         {\n+  //           position: toast.POSITION.TOP_RIGHT,\n+  //           autoClose: 1000,\n+  //         }\n+  //       );\n+  //       return;\n+  //     }\n+\n+  //     // Read file as data URL\n+  //     const reader = new FileReader();\n+  //     reader.onload = () => {\n+  //       const base64Data = reader.result;\n+  //       const base64Name = file.name.replace(/ /g, \"_\");\n+  //       newFileBase[base64Name] = base64Data;\n+  //       newFileNames.push(base64Name);\n+  //       setFileBase(newFileBase);\n+  //       setFileNames(newFileNames);\n+  //     };\n+  //     reader.readAsDataURL(file);\n+  //   }\n+  // };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = { ...fileBase };\n+      const fileNameList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name;\n+        fileList[DocRealName] = DocFile;\n+        fileNameList.push(DocRealName);\n+      }\n+      console.log(fileList, fileNameList);\n+      setFileBase(fileList);\n+      setFileNames(fileNameList);\n+      // Store the object of files\n+    }\n+  };\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...fileBase };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setFileBase(newFileBase);\n+    setFileNames(newFileNames);\n+  };\n+\n+  /*Function to sent email*/\n+  const onContactusClick = async () => {\n+    console.log(fileBase);\n+    if (validate()) {\n+      try {\n+        setLoading(true);\n+        let Response = await SendEmail(state, fileBase);\n+        setLoading(false);\n+        if (Response.message === \"email sent successfully\") {\n+          toast.success(\"Email sent successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setLoading(false);\n+          setState(initialFormState);\n+          // setFileBase(\"\");\n+          setFileNames([]);\n+          setErrors(\"\");\n+          setApiCall(true);\n+        }\n+        if (Response.message === \"Failed !\") {\n+          toast.error(\"Something went wrong\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setLoading(false);\n+          setState(initialFormState);\n+          setErrors(\"\");\n+          // setFileBase(\"\");\n+          setFileNames([]);\n+        }\n+        if (Response.message === \"Fields must not be empty!\") {\n+          toast.error(\"Something went wrong\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setLoading(false);\n+          setState(initialFormState);\n+          setErrors(\"\");\n+          // setFileBase(\"\");\n+          setFileNames([]);\n+        }\n+      } catch (err) {\n+        console.log(err);\n+        setLoading(false);\n+        // setFileBase(\"\");\n+        setFileNames([]);\n+        setErrors(\"\");\n+        setState(initialFormState);\n+      }\n+    }\n+  };\n+  return (\n+    <div>\n+      <form>\n+        <div className=\"row pt-1\">\n+          <div className=\"mb-2 col-12\">\n+            <label\n+              htmlFor=\"subject\"\n+              className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n+            >\n+              Subject: <span className=\"text-danger\">*</span>\n+            </label>\n+            <div className=\"position-relative\">\n+              <input\n+                maxLength={100}\n+                name=\"subject\"\n+                value={state.subject || \"\"}\n+                onChange={onInputChange}\n+                type=\"text\"\n+                className={\n+                  errors.subject\n+                    ? \"form-control border border-danger\"\n+                    : \"form-control\"\n+                }\n+                placeholder=\"subject\"\n+                id=\"subject\"\n+              />\n+            </div>\n+            {/*----ERROR MESSAGE FOR name----*/}\n+            {errors.subject && (\n+              <span key={errors.subject} className=\"text-danger font-size-3\">\n+                {errors.subject}\n+              </span>\n+            )}\n+          </div>\n+          <div className=\"mb-2 col-12\">\n+            <label\n+              htmlFor=\"description\"\n+              className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n+            >\n+              Description: <span className=\"text-danger\">*</span>\n+            </label>\n+            <div className=\"position-relative\">\n+              <div\n+                className={\n+                  errors.description\n+                    ? \"border border-danger rounded overflow-hidden\"\n+                    : \"border rounded overflow-hidden\"\n+                }\n+              >\n+                {/* <textarea\n+                  name=\"description\"\n+                  value={state.description}\n+                  onChange={onInputChange}\n+                  rows={8}\n+                  style={{ height: \"140px\" }}\n+                  className={\n+                    errors.description\n+                      ? \"form-control border border-danger\"\n+                      : \"form-control\"\n+                  }\n+                  id=\"description\"\n+                  placeholder=\"Add Note here\"\n+                ></textarea> */}\n+                <TextEditor\n+                  state={state}\n+                  setState={setState}\n+                  name={\"description\"}// has same variable as description\n+                />\n+              </div>\n+              {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n+              {errors.description && (\n+                <span\n+                  key={errors.description}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.description}\n+                </span>\n+              )}\n+            </div>\n+          </div>\n+          <div className=\"mail-file-attachments\">\n+            {fileNames.map((fileName) => (\n+              <div key={fileName} className=\"mail-file-attachment\">\n+                <p>{fileName}</p>\n+                <button\n+                  type=\"button\"\n+                  className=\"mail-remove-file\"\n+                  onClick={() => handleRemoveFile(fileName)}\n+                >\n+                  X\n+                </button>\n+              </div>\n+            ))}\n+          </div>\n+          <div className=\"mb-2 col-12\">\n+            <label className=\"btn btn-secondary \">\n+              <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\n+              <input\n+                type=\"file\"\n+                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n+                style={{ display: \"none\" }}\n+                onChange={(e) => {\n+                  handleBulkFileChange(e);\n+                }}\n+                placeholder=\"Attach file\"\n+                multiple\n+              />\n+              Attach Files\n+            </label>\n+          </div>\n+          <div className=\"mb-2 col-12 text-center\">\n+            {loading === true ? (\n+              <button\n+                className=\"btn btn-primary btn-small w-100 rounded-5 text-uppercase \"\n+                type=\"button\"\n+                disabled\n+              >\n+                <span\n+                  className=\"spinner-border spinner-border-sm \"\n+                  role=\"status\"\n+                  aria-hidden=\"true\"\n+                ></span>\n+                <span className=\"sr-only\">Loading...</span>\n+              </button>\n+            ) : (\n+              <button\n+                onClick={(e) => onContactusClick(e)}\n+                className=\"btn btn-primary btn-small rounded-5 text-uppercase w-100\"\n+                type=\"button\"\n+              >\n+                Submit\n+              </button>\n+            )}\n+          </div>\n+        </div>\n+      </form>\n+    </div>\n+  );\n+}\n+\n+export default SendMailForm;\n"
                },
                {
                    "date": 1709537212247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import useValidation from \"../../common/useValidation\";\n import { SendEmail } from \"../../../api/api\";\n import { toast } from \"react-toastify\";\n import { AiOutlineCloudUpload } from \"react-icons/ai\";\n+import TextEditor from \"../../common/TextEditor\";\n function SendMailForm({ email, setApiCall }) {\n   const [loading, setLoading] = useState(false);\n   const [fileBase, setFileBase] = useState(\"\");\n   const [fileNames, setFileNames] = useState([]);\n@@ -394,397 +395,4 @@\n   );\n }\n \n export default SendMailForm;\n-import React, { /*useEffect,*/ useState } from \"react\";\n-import useValidation from \"../../common/useValidation\";\n-import { SendEmail } from \"../../../api/api\";\n-import { toast } from \"react-toastify\";\n-import { AiOutlineCloudUpload } from \"react-icons/ai\";\n-function SendMailForm({ email, setApiCall }) {\n-  const [loading, setLoading] = useState(false);\n-  const [fileBase, setFileBase] = useState(\"\");\n-  const [fileNames, setFileNames] = useState([]);\n-  let AdminEmail = localStorage.getItem(\"admin_email\");\n-  /*Render function to get the Response*/\n-  // useEffect(() => {\n-  // }, []);\n-\n-  // INITIAL STATE ASSIGNMENT\n-  const initialFormState = {\n-    subject: \"\",\n-    description: \"\",\n-    email: email,\n-    adminemail: AdminEmail,\n-  };\n-\n-  /*Validation */\n-  let validators = {\n-    subject: [\n-      (value) =>\n-        value === \"\" || value.trim() === \"\"\n-          ? \"Subject is required\"\n-          : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          ? \"Subject can not have a number.\"\n-          : value.length < 2\n-          ? \"Subject should have 2 or more letters\"\n-          : /[^A-Za-z 0-9]/g.test(value)\n-          ? \"Cannot use special character \"\n-          : \"\",\n-    ],\n-    description: [\n-      (value) =>\n-        value === \"\" || value.trim() === \"\"\n-          ? \"Description is required\"\n-          : // : /[-]?\\d+(\\.\\d+)?/.test(value)\n-          // ? \"Description can not have a number.\"\n-          value.length < 5\n-          ? \"Description should have 2 or more letters\"\n-          : // : /[^A-Za-z 0-9]/g.test(value)\n-            // ? \"Cannot use special character \"\n-            \"\",\n-    ],\n-  };\n-  // CUSTOM VALIDATIONS IMPORT\n-  const { state, setState, onInputChange, errors, setErrors, validate } =\n-    useValidation(initialFormState, validators);\n-\n-  /*On change fnction to upload bulk document in 1 array*/\n-  // const handleBulkFileChange = async (event) => {\n-  //   const files = event.target.files;\n-\n-  //   // Check the number of files selected\n-  //   if (files.length > 15) {\n-  //     toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-  //       position: toast.POSITION.TOP_RIGHT,\n-  //       autoClose: 1000,\n-  //     });\n-  //     return;\n-  //   }\n-\n-  //   // Continue with file validation and processing\n-  //   const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-  //   const maxSize = 1024 * 10000; // 10 MB\n-\n-  //   const newFileBase = { ...fileBase };\n-  //   const newFileNames = [];\n-\n-  //   for (let i = 0; i < files.length; i++) {\n-  //     const file = files[i];\n-\n-  //     // Check file type\n-  //     const fileType = `.${file.name.split(\".\").pop()}`;\n-  //     if (!allowedTypes.includes(fileType.toLowerCase())) {\n-  //       toast.error(\n-  //         `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-  //         {\n-  //           position: toast.POSITION.TOP_RIGHT,\n-  //           autoClose: 1000,\n-  //         }\n-  //       );\n-  //       return;\n-  //     }\n-\n-  //     // Check file size\n-  //     if (file.size > maxSize) {\n-  //       toast.error(\n-  //         `Document size can't be more than 8 MB for file '${file.name}'`,\n-  //         {\n-  //           position: toast.POSITION.TOP_RIGHT,\n-  //           autoClose: 1000,\n-  //         }\n-  //       );\n-  //       return;\n-  //     }\n-\n-  //     // Read file as data URL\n-  //     const reader = new FileReader();\n-  //     reader.onload = () => {\n-  //       const base64Data = reader.result;\n-  //       const base64Name = file.name.replace(/ /g, \"_\");\n-  //       newFileBase[base64Name] = base64Data;\n-  //       newFileNames.push(base64Name);\n-  //       setFileBase(newFileBase);\n-  //       setFileNames(newFileNames);\n-  //     };\n-  //     reader.readAsDataURL(file);\n-  //   }\n-  // };\n-  /*Function to convert file to base64 */\n-  const convertToBase64 = (file) => {\n-    return new Promise((resolve, reject) => {\n-      const fileReader = new FileReader();\n-      fileReader.addEventListener(\"load\", () => {\n-        resolve({ base64: fileReader.result });\n-      });\n-      fileReader.readAsDataURL(file);\n-      fileReader.onerror = (error) => {\n-        reject(error);\n-      };\n-    });\n-  };\n-  const handleBulkFileChange = async (event, id) => {\n-    const files = event.target.files;\n-    {\n-      // Check the number of files selected\n-      if (files.length > 15) {\n-        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n-          position: toast.POSITION.TOP_RIGHT,\n-          autoClose: 1000,\n-        });\n-        return;\n-      }\n-\n-      // Continue with file validation and processing\n-      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n-      const maxSize = 1024 * 8000; // 8 MB\n-\n-      const fileList = { ...fileBase };\n-      const fileNameList = [];\n-      let DocRealName;\n-      for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-\n-        // Check file type\n-        const fileType = `.${file.name.split(\".\").pop()}`;\n-        if (!allowedTypes.includes(fileType.toLowerCase())) {\n-          toast.error(\n-            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Check file size\n-        if (file.size > maxSize) {\n-          toast.error(\n-            `Document size can't be more than 8 MB for file '${file.name}'`,\n-            {\n-              position: toast.POSITION.TOP_RIGHT,\n-              autoClose: 1000,\n-            }\n-          );\n-          return;\n-        }\n-\n-        // Read file as data URL\n-        const reader = new FileReader();\n-        reader.readAsDataURL(file);\n-        const encoded = await convertToBase64(file);\n-        const base64Name = encoded.base64;\n-\n-        // Construct file object with base64 data\n-        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n-          base64Name.split(\";\")[1]\n-        }`;\n-\n-        // Use DocRealName as the key for DocFile\n-        DocRealName = file.name;\n-        fileList[DocRealName] = DocFile;\n-        fileNameList.push(DocRealName);\n-      }\n-      console.log(fileList, fileNameList);\n-      setFileBase(fileList);\n-      setFileNames(fileNameList);\n-      // Store the object of files\n-    }\n-  };\n-  //Function to Remove any attechment\n-  const handleRemoveFile = (fileName) => {\n-    const newFileBase = { ...fileBase };\n-    const newFileNames = fileNames.filter((name) => name !== fileName);\n-    delete newFileBase[fileName];\n-    setFileBase(newFileBase);\n-    setFileNames(newFileNames);\n-  };\n-\n-  /*Function to sent email*/\n-  const onContactusClick = async () => {\n-    console.log(fileBase);\n-    if (validate()) {\n-      try {\n-        setLoading(true);\n-        let Response = await SendEmail(state, fileBase);\n-        setLoading(false);\n-        if (Response.message === \"email sent successfully\") {\n-          toast.success(\"Email sent successfully\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          setLoading(false);\n-          setState(initialFormState);\n-          // setFileBase(\"\");\n-          setFileNames([]);\n-          setErrors(\"\");\n-          setApiCall(true);\n-        }\n-        if (Response.message === \"Failed !\") {\n-          toast.error(\"Something went wrong\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          setLoading(false);\n-          setState(initialFormState);\n-          setErrors(\"\");\n-          // setFileBase(\"\");\n-          setFileNames([]);\n-        }\n-        if (Response.message === \"Fields must not be empty!\") {\n-          toast.error(\"Something went wrong\", {\n-            position: toast.POSITION.TOP_RIGHT,\n-            autoClose: 1000,\n-          });\n-          setLoading(false);\n-          setState(initialFormState);\n-          setErrors(\"\");\n-          // setFileBase(\"\");\n-          setFileNames([]);\n-        }\n-      } catch (err) {\n-        console.log(err);\n-        setLoading(false);\n-        // setFileBase(\"\");\n-        setFileNames([]);\n-        setErrors(\"\");\n-        setState(initialFormState);\n-      }\n-    }\n-  };\n-  return (\n-    <div>\n-      <form>\n-        <div className=\"row pt-1\">\n-          <div className=\"mb-2 col-12\">\n-            <label\n-              htmlFor=\"subject\"\n-              className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n-            >\n-              Subject: <span className=\"text-danger\">*</span>\n-            </label>\n-            <div className=\"position-relative\">\n-              <input\n-                maxLength={100}\n-                name=\"subject\"\n-                value={state.subject || \"\"}\n-                onChange={onInputChange}\n-                type=\"text\"\n-                className={\n-                  errors.subject\n-                    ? \"form-control border border-danger\"\n-                    : \"form-control\"\n-                }\n-                placeholder=\"subject\"\n-                id=\"subject\"\n-              />\n-            </div>\n-            {/*----ERROR MESSAGE FOR name----*/}\n-            {errors.subject && (\n-              <span key={errors.subject} className=\"text-danger font-size-3\">\n-                {errors.subject}\n-              </span>\n-            )}\n-          </div>\n-          <div className=\"mb-2 col-12\">\n-            <label\n-              htmlFor=\"description\"\n-              className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n-            >\n-              Description: <span className=\"text-danger\">*</span>\n-            </label>\n-            <div className=\"position-relative\">\n-              <div\n-                className={\n-                  errors.description\n-                    ? \"border border-danger rounded overflow-hidden\"\n-                    : \"border rounded overflow-hidden\"\n-                }\n-              >\n-                <textarea\n-                  name=\"description\"\n-                  value={state.description}\n-                  onChange={onInputChange}\n-                  rows={8}\n-                  style={{ height: \"140px\" }}\n-                  className={\n-                    errors.description\n-                      ? \"form-control border border-danger\"\n-                      : \"form-control\"\n-                  }\n-                  id=\"description\"\n-                  placeholder=\"Add Note here\"\n-                ></textarea>\n-              </div>\n-              {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n-              {errors.description && (\n-                <span\n-                  key={errors.description}\n-                  className=\"text-danger font-size-3\"\n-                >\n-                  {errors.description}\n-                </span>\n-              )}\n-            </div>\n-          </div>\n-          <div className=\"mail-file-attachments\">\n-            {fileNames.map((fileName) => (\n-              <div key={fileName} className=\"mail-file-attachment\">\n-                <p>{fileName}</p>\n-                <button\n-                  type=\"button\"\n-                  className=\"mail-remove-file\"\n-                  onClick={() => handleRemoveFile(fileName)}\n-                >\n-                  X\n-                </button>\n-              </div>\n-            ))}\n-          </div>\n-          <div className=\"mb-2 col-12\">\n-            <label className=\"btn btn-secondary \">\n-              <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\n-              <input\n-                type=\"file\"\n-                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n-                style={{ display: \"none\" }}\n-                onChange={(e) => {\n-                  handleBulkFileChange(e);\n-                }}\n-                placeholder=\"Attach file\"\n-                multiple\n-              />\n-              Attach Files\n-            </label>\n-          </div>\n-          <div className=\"mb-2 col-12 text-center\">\n-            {loading === true ? (\n-              <button\n-                className=\"btn btn-primary btn-small w-100 rounded-5 text-uppercase \"\n-                type=\"button\"\n-                disabled\n-              >\n-                <span\n-                  className=\"spinner-border spinner-border-sm \"\n-                  role=\"status\"\n-                  aria-hidden=\"true\"\n-                ></span>\n-                <span className=\"sr-only\">Loading...</span>\n-              </button>\n-            ) : (\n-              <button\n-                onClick={(e) => onContactusClick(e)}\n-                className=\"btn btn-primary btn-small rounded-5 text-uppercase w-100\"\n-                type=\"button\"\n-              >\n-                Submit\n-              </button>\n-            )}\n-          </div>\n-        </div>\n-      </form>\n-    </div>\n-  );\n-}\n-\n-export default SendMailForm;\n"
                },
                {
                    "date": 1709545311471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n                 ></textarea> */}\n                 <TextEditor\n                   state={state}\n                   setState={setState}\n-                  name={\"description\"}// has same variable as description\n+                  Page={\"description\"}// has same variable as description\n                 />\n               </div>\n               {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n               {errors.description && (\n"
                },
                {
                    "date": 1710313137216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,398 @@\n+import React, { /*useEffect,*/ useState } from \"react\";\n+import useValidation from \"../../common/useValidation\";\n+import { SendEmail } from \"../../../api/api\";\n+import { toast } from \"react-toastify\";\n+import { AiOutlineCloudUpload } from \"react-icons/ai\";\n+import TextEditor from \"../../common/TextEditor\";\n+function SendMailForm({ email, setApiCall }) {\n+  const [loading, setLoading] = useState(false);\n+  const [fileBase, setFileBase] = useState(\"\");\n+  const [fileNames, setFileNames] = useState([]);\n+  let AdminEmail = localStorage.getItem(\"admin_email\");\n+  /*Render function to get the Response*/\n+  // useEffect(() => {\n+  // }, []);\n+\n+  // INITIAL STATE ASSIGNMENT\n+  const initialFormState = {\n+    subject: \"\",\n+    description: \"\",\n+    email: email,\n+    adminemail: AdminEmail,\n+  };\n+\n+  /*Validation */\n+  let validators = {\n+    subject: [\n+      (value) =>\n+        value === \"\" || value.trim() === \"\"\n+          ? \"Subject is required\"\n+          : /[-]?\\d+(\\.\\d+)?/.test(value)\n+            ? \"Subject can not have a number.\"\n+            : value.length < 2\n+              ? \"Subject should have 2 or more letters\"\n+              : /[^A-Za-z 0-9]/g.test(value)\n+                ? \"Cannot use special character \"\n+                : \"\",\n+    ],\n+    description: [\n+      (value) =>\n+        value === \"\" || value.trim() === \"\"\n+          ? \"Description is required\"\n+          : // : /[-]?\\d+(\\.\\d+)?/.test(value)\n+          // ? \"Description can not have a number.\"\n+          value.length < 5\n+            ? \"Description should have 2 or more letters\"\n+            : // : /[^A-Za-z 0-9]/g.test(value)\n+            // ? \"Cannot use special character \"\n+            \"\",\n+    ],\n+  };\n+  // CUSTOM VALIDATIONS IMPORT\n+  const { state, setState, onInputChange, errors, setErrors, validate } =\n+    useValidation(initialFormState, validators);\n+\n+  /*On change fnction to upload bulk document in 1 array*/\n+  // const handleBulkFileChange = async (event) => {\n+  //   const files = event.target.files;\n+\n+  //   // Check the number of files selected\n+  //   if (files.length > 15) {\n+  //     toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+  //       position: toast.POSITION.TOP_RIGHT,\n+  //       autoClose: 1000,\n+  //     });\n+  //     return;\n+  //   }\n+\n+  //   // Continue with file validation and processing\n+  //   const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+  //   const maxSize = 1024 * 10000; // 10 MB\n+\n+  //   const newFileBase = { ...fileBase };\n+  //   const newFileNames = [];\n+\n+  //   for (let i = 0; i < files.length; i++) {\n+  //     const file = files[i];\n+\n+  //     // Check file type\n+  //     const fileType = `.${file.name.split(\".\").pop()}`;\n+  //     if (!allowedTypes.includes(fileType.toLowerCase())) {\n+  //       toast.error(\n+  //         `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+  //         {\n+  //           position: toast.POSITION.TOP_RIGHT,\n+  //           autoClose: 1000,\n+  //         }\n+  //       );\n+  //       return;\n+  //     }\n+\n+  //     // Check file size\n+  //     if (file.size > maxSize) {\n+  //       toast.error(\n+  //         `Document size can't be more than 8 MB for file '${file.name}'`,\n+  //         {\n+  //           position: toast.POSITION.TOP_RIGHT,\n+  //           autoClose: 1000,\n+  //         }\n+  //       );\n+  //       return;\n+  //     }\n+\n+  //     // Read file as data URL\n+  //     const reader = new FileReader();\n+  //     reader.onload = () => {\n+  //       const base64Data = reader.result;\n+  //       const base64Name = file.name.replace(/ /g, \"_\");\n+  //       newFileBase[base64Name] = base64Data;\n+  //       newFileNames.push(base64Name);\n+  //       setFileBase(newFileBase);\n+  //       setFileNames(newFileNames);\n+  //     };\n+  //     reader.readAsDataURL(file);\n+  //   }\n+  // };\n+  /*Function to convert file to base64 */\n+  const convertToBase64 = (file) => {\n+    return new Promise((resolve, reject) => {\n+      const fileReader = new FileReader();\n+      fileReader.addEventListener(\"load\", () => {\n+        resolve({ base64: fileReader.result });\n+      });\n+      fileReader.readAsDataURL(file);\n+      fileReader.onerror = (error) => {\n+        reject(error);\n+      };\n+    });\n+  };\n+  const handleBulkFileChange = async (event, id) => {\n+    const files = event.target.files;\n+    {\n+      // Check the number of files selected\n+      if (files.length > 15) {\n+        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n+          position: toast.POSITION.TOP_RIGHT,\n+          autoClose: 1000,\n+        });\n+        return;\n+      }\n+\n+      // Continue with file validation and processing\n+      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n+      const maxSize = 1024 * 8000; // 8 MB\n+\n+      const fileList = { ...fileBase };\n+      const fileNameList = [];\n+      let DocRealName;\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+\n+        // Check file type\n+        const fileType = `.${file.name.split(\".\").pop()}`;\n+        if (!allowedTypes.includes(fileType.toLowerCase())) {\n+          toast.error(\n+            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Check file size\n+        if (file.size > maxSize) {\n+          toast.error(\n+            `Document size can't be more than 8 MB for file '${file.name}'`,\n+            {\n+              position: toast.POSITION.TOP_RIGHT,\n+              autoClose: 1000,\n+            }\n+          );\n+          return;\n+        }\n+\n+        // Read file as data URL\n+        const reader = new FileReader();\n+        reader.readAsDataURL(file);\n+        const encoded = await convertToBase64(file);\n+        const base64Name = encoded.base64;\n+\n+        // Construct file object with base64 data\n+        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${base64Name.split(\";\")[1]\n+          }`;\n+\n+        // Use DocRealName as the key for DocFile\n+        DocRealName = file.name;\n+        fileList[DocRealName] = DocFile;\n+        fileNameList.push(DocRealName);\n+      }\n+      // console.log(fileList, fileNameList);\n+      setFileBase(fileList);\n+      setFileNames(fileNameList);\n+      // Store the object of files\n+    }\n+  };\n+  //Function to Remove any attechment\n+  const handleRemoveFile = (fileName) => {\n+    const newFileBase = { ...fileBase };\n+    const newFileNames = fileNames.filter((name) => name !== fileName);\n+    delete newFileBase[fileName];\n+    setFileBase(newFileBase);\n+    setFileNames(newFileNames);\n+  };\n+\n+  /*Function to sent email*/\n+  const onContactusClick = async () => {\n+    // console.log(fileBase);\n+    if (validate()) {\n+      try {\n+        setLoading(true);\n+        let Response = await SendEmail(state, fileBase);\n+        setLoading(false);\n+        if (Response.message === \"email sent successfully\") {\n+          toast.success(\"Email sent successfully\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setLoading(false);\n+          setState(initialFormState);\n+          // setFileBase(\"\");\n+          setFileNames([]);\n+          setErrors(\"\");\n+          setApiCall(true);\n+        }\n+        if (Response.message === \"Failed !\") {\n+          toast.error(\"Something went wrong\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setLoading(false);\n+          setState(initialFormState);\n+          setErrors(\"\");\n+          // setFileBase(\"\");\n+          setFileNames([]);\n+        }\n+        if (Response.message === \"Fields must not be empty!\") {\n+          toast.error(\"Something went wrong\", {\n+            position: toast.POSITION.TOP_RIGHT,\n+            autoClose: 1000,\n+          });\n+          setLoading(false);\n+          setState(initialFormState);\n+          setErrors(\"\");\n+          // setFileBase(\"\");\n+          setFileNames([]);\n+        }\n+      } catch (err) {\n+        console.log(err);\n+        setLoading(false);\n+        // setFileBase(\"\");\n+        setFileNames([]);\n+        setErrors(\"\");\n+        setState(initialFormState);\n+      }\n+    }\n+  };\n+  return (\n+    <div>\n+      <form>\n+        <div className=\"row pt-1\">\n+          <div className=\"mb-2 col-12\">\n+            <label\n+              htmlFor=\"subject\"\n+              className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n+            >\n+              Subject: <span className=\"text-danger\">*</span>\n+            </label>\n+            <div className=\"position-relative\">\n+              <input\n+                maxLength={100}\n+                name=\"subject\"\n+                value={state.subject || \"\"}\n+                onChange={onInputChange}\n+                type=\"text\"\n+                className={\n+                  errors.subject\n+                    ? \"form-control border border-danger\"\n+                    : \"form-control\"\n+                }\n+                placeholder=\"subject\"\n+                id=\"subject\"\n+              />\n+            </div>\n+            {/*----ERROR MESSAGE FOR name----*/}\n+            {errors.subject && (\n+              <span key={errors.subject} className=\"text-danger font-size-3\">\n+                {errors.subject}\n+              </span>\n+            )}\n+          </div>\n+          <div className=\"mb-2 col-12\">\n+            <label\n+              htmlFor=\"description\"\n+              className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n+            >\n+              Description: <span className=\"text-danger\">*</span>\n+            </label>\n+            <div className=\"position-relative\">\n+              <div\n+                className={\n+                  errors.description\n+                    ? \"border border-danger rounded overflow-hidden\"\n+                    : \"border rounded overflow-hidden\"\n+                }\n+              >\n+                {/* <textarea\n+                  name=\"description\"\n+                  value={state.description}\n+                  onChange={onInputChange}\n+                  rows={8}\n+                  style={{ height: \"140px\" }}\n+                  className={\n+                    errors.description\n+                      ? \"form-control border border-danger\"\n+                      : \"form-control\"\n+                  }\n+                  id=\"description\"\n+                  placeholder=\"Add Note here\"\n+                ></textarea> */}\n+                <TextEditor\n+                  state={state}\n+                  setState={setState}\n+                  page={\"description\"}// has same variable as description\n+                />\n+              </div>\n+              {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n+              {errors.description && (\n+                <span\n+                  key={errors.description}\n+                  className=\"text-danger font-size-3\"\n+                >\n+                  {errors.description}\n+                </span>\n+              )}\n+            </div>\n+          </div>\n+          <div className=\"mail-file-attachments\">\n+            {fileNames.map((fileName) => (\n+              <div key={fileName} className=\"mail-file-attachment\">\n+                <p>{fileName}</p>\n+                <button\n+                  type=\"button\"\n+                  className=\"mail-remove-file\"\n+                  onClick={() => handleRemoveFile(fileName)}\n+                >\n+                  X\n+                </button>\n+              </div>\n+            ))}\n+          </div>\n+          <div className=\"mb-2 col-12\">\n+            <label className=\"btn btn-secondary \">\n+              <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\n+              <input\n+                type=\"file\"\n+                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n+                style={{ display: \"none\" }}\n+                onChange={(e) => {\n+                  handleBulkFileChange(e);\n+                }}\n+                placeholder=\"Attach file\"\n+                multiple\n+              />\n+              Attach Files\n+            </label>\n+          </div>\n+          <div className=\"mb-2 col-12 text-center\">\n+            {loading === true ? (\n+              <button\n+                className=\"btn btn-primary btn-small w-100 rounded-5 text-uppercase \"\n+                type=\"button\"\n+                disabled\n+              >\n+                <span\n+                  className=\"spinner-border spinner-border-sm \"\n+                  role=\"status\"\n+                  aria-hidden=\"true\"\n+                ></span>\n+                <span className=\"sr-only\">Loading...</span>\n+              </button>\n+            ) : (\n+              <button\n+                onClick={(e) => onContactusClick(e)}\n+                className=\"btn btn-primary btn-small rounded-5 text-uppercase w-100\"\n+                type=\"button\"\n+              >\n+                Submit\n+              </button>\n+            )}\n+          </div>\n+        </div>\n+      </form>\n+    </div>\n+  );\n+}\n+\n+export default SendMailForm;\n"
                }
            ],
            "date": 1709010748278,
            "name": "Commit-0",
            "content": "import React, { /*useEffect,*/ useState } from \"react\";\nimport useValidation from \"../../common/useValidation\";\nimport { SendEmail } from \"../../../api/api\";\nimport { toast } from \"react-toastify\";\nimport { AiOutlineCloudUpload } from \"react-icons/ai\";\nimport { CKEditor } from \"ckeditor4-react\";\nfunction SendMailForm({ email, setApiCall }) {\n  const [loading, setLoading] = useState(false);\n  const [fileBase, setFileBase] = useState(\"\");\n  const [fileNames, setFileNames] = useState([]);\n  let AdminEmail = localStorage.getItem(\"admin_email\");\n  /*Render function to get the Response*/\n  // useEffect(() => {\n  // }, []);\n\n  // INITIAL STATE ASSIGNMENT\n  const initialFormState = {\n    subject: \"\",\n    description: \"\",\n    email: email,\n    adminemail: AdminEmail,\n  };\n\n  /*Validation */\n  let validators = {\n    subject: [\n      (value) =>\n        value === \"\" || value.trim() === \"\"\n          ? \"Subject is required\"\n          : /[-]?\\d+(\\.\\d+)?/.test(value)\n          ? \"Subject can not have a number.\"\n          : value.length < 2\n          ? \"Subject should have 2 or more letters\"\n          : /[^A-Za-z 0-9]/g.test(value)\n          ? \"Cannot use special character \"\n          : \"\",\n    ],\n    description: [\n      (value) =>\n        value === \"\" || value.trim() === \"\"\n          ? \"Description is required\"\n          : // : /[-]?\\d+(\\.\\d+)?/.test(value)\n          // ? \"Description can not have a number.\"\n          value.length < 5\n          ? \"Description should have 2 or more letters\"\n          : // : /[^A-Za-z 0-9]/g.test(value)\n            // ? \"Cannot use special character \"\n            \"\",\n    ],\n  };\n  // CUSTOM VALIDATIONS IMPORT\n  const { state, setState, onInputChange, errors, setErrors, validate } =\n    useValidation(initialFormState, validators);\n\n  /*On change fnction to upload bulk document in 1 array*/\n  // const handleBulkFileChange = async (event) => {\n  //   const files = event.target.files;\n\n  //   // Check the number of files selected\n  //   if (files.length > 15) {\n  //     toast.error(\"You can only upload a maximum of 15 files at a time\", {\n  //       position: toast.POSITION.TOP_RIGHT,\n  //       autoClose: 1000,\n  //     });\n  //     return;\n  //   }\n\n  //   // Continue with file validation and processing\n  //   const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n  //   const maxSize = 1024 * 10000; // 10 MB\n\n  //   const newFileBase = { ...fileBase };\n  //   const newFileNames = [];\n\n  //   for (let i = 0; i < files.length; i++) {\n  //     const file = files[i];\n\n  //     // Check file type\n  //     const fileType = `.${file.name.split(\".\").pop()}`;\n  //     if (!allowedTypes.includes(fileType.toLowerCase())) {\n  //       toast.error(\n  //         `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n  //         {\n  //           position: toast.POSITION.TOP_RIGHT,\n  //           autoClose: 1000,\n  //         }\n  //       );\n  //       return;\n  //     }\n\n  //     // Check file size\n  //     if (file.size > maxSize) {\n  //       toast.error(\n  //         `Document size can't be more than 8 MB for file '${file.name}'`,\n  //         {\n  //           position: toast.POSITION.TOP_RIGHT,\n  //           autoClose: 1000,\n  //         }\n  //       );\n  //       return;\n  //     }\n\n  //     // Read file as data URL\n  //     const reader = new FileReader();\n  //     reader.onload = () => {\n  //       const base64Data = reader.result;\n  //       const base64Name = file.name.replace(/ /g, \"_\");\n  //       newFileBase[base64Name] = base64Data;\n  //       newFileNames.push(base64Name);\n  //       setFileBase(newFileBase);\n  //       setFileNames(newFileNames);\n  //     };\n  //     reader.readAsDataURL(file);\n  //   }\n  // };\n  /*Function to convert file to base64 */\n  const convertToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.addEventListener(\"load\", () => {\n        resolve({ base64: fileReader.result });\n      });\n      fileReader.readAsDataURL(file);\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n  const handleBulkFileChange = async (event, id) => {\n    const files = event.target.files;\n    {\n      // Check the number of files selected\n      if (files.length > 15) {\n        toast.error(\"You can only upload a maximum of 15 files at a time\", {\n          position: toast.POSITION.TOP_RIGHT,\n          autoClose: 1000,\n        });\n        return;\n      }\n\n      // Continue with file validation and processing\n      const allowedTypes = [\".pdf\", \".doc\", \".docx\", \".jpg\", \".jpeg\", \".png\"];\n      const maxSize = 1024 * 8000; // 8 MB\n\n      const fileList = { ...fileBase };\n      const fileNameList = [];\n      let DocRealName;\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n\n        // Check file type\n        const fileType = `.${file.name.split(\".\").pop()}`;\n        if (!allowedTypes.includes(fileType.toLowerCase())) {\n          toast.error(\n            `Invalid document type for file '${file.name}'. Allowed types: PDF, DOC, DOCX, JPG, JPEG, PNG`,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            }\n          );\n          return;\n        }\n\n        // Check file size\n        if (file.size > maxSize) {\n          toast.error(\n            `Document size can't be more than 8 MB for file '${file.name}'`,\n            {\n              position: toast.POSITION.TOP_RIGHT,\n              autoClose: 1000,\n            }\n          );\n          return;\n        }\n\n        // Read file as data URL\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        const encoded = await convertToBase64(file);\n        const base64Name = encoded.base64;\n\n        // Construct file object with base64 data\n        const DocFile = `data:/${base64Name.split(\";\")[0].split(\"/\")[1]};${\n          base64Name.split(\";\")[1]\n        }`;\n\n        // Use DocRealName as the key for DocFile\n        DocRealName = file.name;\n        fileList[DocRealName] = DocFile;\n        fileNameList.push(DocRealName);\n      }\n      console.log(fileList, fileNameList);\n      setFileBase(fileList);\n      setFileNames(fileNameList);\n      // Store the object of files\n    }\n  };\n  //Function to Remove any attechment\n  const handleRemoveFile = (fileName) => {\n    const newFileBase = { ...fileBase };\n    const newFileNames = fileNames.filter((name) => name !== fileName);\n    delete newFileBase[fileName];\n    setFileBase(newFileBase);\n    setFileNames(newFileNames);\n  };\n\n  /*Function to sent email*/\n  const onContactusClick = async () => {\n    console.log(fileBase);\n    if (validate()) {\n      try {\n        setLoading(true);\n        let Response = await SendEmail(state, fileBase);\n        setLoading(false);\n        if (Response.message === \"email sent successfully\") {\n          toast.success(\"Email sent successfully\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          setLoading(false);\n          setState(initialFormState);\n          // setFileBase(\"\");\n          setFileNames([]);\n          setErrors(\"\");\n          setApiCall(true);\n        }\n        if (Response.message === \"Failed !\") {\n          toast.error(\"Something went wrong\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          setLoading(false);\n          setState(initialFormState);\n          setErrors(\"\");\n          // setFileBase(\"\");\n          setFileNames([]);\n        }\n        if (Response.message === \"Fields must not be empty!\") {\n          toast.error(\"Something went wrong\", {\n            position: toast.POSITION.TOP_RIGHT,\n            autoClose: 1000,\n          });\n          setLoading(false);\n          setState(initialFormState);\n          setErrors(\"\");\n          // setFileBase(\"\");\n          setFileNames([]);\n        }\n      } catch (err) {\n        console.log(err);\n        setLoading(false);\n        // setFileBase(\"\");\n        setFileNames([]);\n        setErrors(\"\");\n        setState(initialFormState);\n      }\n    }\n  };\n  return (\n    <div>\n      <form>\n        <div className=\"row pt-1\">\n          <div className=\"mb-2 col-12\">\n            <label\n              htmlFor=\"subject\"\n              className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n            >\n              Subject: <span className=\"text-danger\">*</span>\n            </label>\n            <div className=\"position-relative\">\n              <input\n                maxLength={100}\n                name=\"subject\"\n                value={state.subject || \"\"}\n                onChange={onInputChange}\n                type=\"text\"\n                className={\n                  errors.subject\n                    ? \"form-control border border-danger\"\n                    : \"form-control\"\n                }\n                placeholder=\"subject\"\n                id=\"subject\"\n              />\n            </div>\n            {/*----ERROR MESSAGE FOR name----*/}\n            {errors.subject && (\n              <span key={errors.subject} className=\"text-danger font-size-3\">\n                {errors.subject}\n              </span>\n            )}\n          </div>\n          <div className=\"mb-2 col-12\">\n            <label\n              htmlFor=\"description\"\n              className=\"font-size-3 text-black-2 font-weight-semibold line-height-reset mb-0\"\n            >\n              Description: <span className=\"text-danger\">*</span>\n            </label>\n            <div className=\"position-relative\">\n              <div\n                className={\n                  errors.description\n                    ? \"border border-danger rounded overflow-hidden\"\n                    : \"border rounded overflow-hidden\"\n                }\n              >\n                <CKEditor\n                      type={\"classic\"}\n                      name={\"description\"}\n                      id={\"description\"}\n                      data={state.description}\n                      value={state.description}\n                      onChange={onInputChange}\n                      initData=\"Add Note here\"\n                    />\n                {/* <textarea\n                  name=\"description\"\n                  value={state.description}\n                  onChange={onInputChange}\n                  rows={8}\n                  style={{ height: \"140px\" }}\n                  className={\n                    errors.description\n                      ? \"form-control border border-danger\"\n                      : \"form-control\"\n                  }\n                  id=\"description\"\n                  placeholder=\"Add Note here\"\n                ></textarea> */}\n              </div>\n              {/*----ERROR MESSAGE FOR DESRIPTION----*/}\n              {errors.description && (\n                <span\n                  key={errors.description}\n                  className=\"text-danger font-size-3\"\n                >\n                  {errors.description}\n                </span>\n              )}\n            </div>\n          </div>\n          <div className=\"mail-file-attachments\">\n            {fileNames.map((fileName) => (\n              <div key={fileName} className=\"mail-file-attachment\">\n                <p>{fileName}</p>\n                <button\n                  type=\"button\"\n                  className=\"mail-remove-file\"\n                  onClick={() => handleRemoveFile(fileName)}\n                >\n                  X\n                </button>\n              </div>\n            ))}\n          </div>\n          <div className=\"mb-2 col-12\">\n            <label className=\"btn btn-secondary \">\n              <AiOutlineCloudUpload className=\"font-size-3 mr-2\" />\n              <input\n                type=\"file\"\n                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                style={{ display: \"none\" }}\n                onChange={(e) => {\n                  handleBulkFileChange(e);\n                }}\n                placeholder=\"Attach file\"\n                multiple\n              />\n              Attach Files\n            </label>\n          </div>\n          <div className=\"mb-2 col-12 text-center\">\n            {loading === true ? (\n              <button\n                className=\"btn btn-primary btn-small w-100 rounded-5 text-uppercase \"\n                type=\"button\"\n                disabled\n              >\n                <span\n                  className=\"spinner-border spinner-border-sm \"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                ></span>\n                <span className=\"sr-only\">Loading...</span>\n              </button>\n            ) : (\n              <button\n                onClick={(e) => onContactusClick(e)}\n                className=\"btn btn-primary btn-small rounded-5 text-uppercase w-100\"\n                type=\"button\"\n              >\n                Submit\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendMailForm;\n"
        }
    ]
}