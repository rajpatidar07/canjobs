{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (Promise, PromiseArray, tryConvertToPromise, apiRejection) {\n  var util = require(\"./util\");\n  var isObject = util.isObject;\n  var es5 = require(\"./es5\");\n  var Es6Map;\n  if (typeof Map === \"function\") Es6Map = Map;\n  var mapToEntries = function () {\n    var index = 0;\n    var size = 0;\n    function extractEntry(value, key) {\n      this[index] = value;\n      this[index + size] = key;\n      index++;\n    }\n    return function mapToEntries(map) {\n      size = map.size;\n      index = 0;\n      var ret = new Array(map.size * 2);\n      map.forEach(extractEntry, ret);\n      return ret;\n    };\n  }();\n  var entriesToMap = function entriesToMap(entries) {\n    var ret = new Es6Map();\n    var length = entries.length / 2 | 0;\n    for (var i = 0; i < length; ++i) {\n      var key = entries[length + i];\n      var value = entries[i];\n      ret.set(key, value);\n    }\n    return ret;\n  };\n  function PropertiesPromiseArray(obj) {\n    var isMap = false;\n    var entries;\n    if (Es6Map !== undefined && obj instanceof Es6Map) {\n      entries = mapToEntries(obj);\n      isMap = true;\n    } else {\n      var keys = es5.keys(obj);\n      var len = keys.length;\n      entries = new Array(len * 2);\n      for (var i = 0; i < len; ++i) {\n        var key = keys[i];\n        entries[i] = obj[key];\n        entries[i + len] = key;\n      }\n    }\n    this.constructor$(entries);\n    this._isMap = isMap;\n    this._init$(undefined, -3);\n  }\n  util.inherits(PropertiesPromiseArray, PromiseArray);\n  PropertiesPromiseArray.prototype._init = function () {};\n  PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {\n    this._values[index] = value;\n    var totalResolved = ++this._totalResolved;\n    if (totalResolved >= this._length) {\n      var val;\n      if (this._isMap) {\n        val = entriesToMap(this._values);\n      } else {\n        val = {};\n        var keyOffset = this.length();\n        for (var i = 0, len = this.length(); i < len; ++i) {\n          val[this._values[i + keyOffset]] = this._values[i];\n        }\n      }\n      this._resolve(val);\n      return true;\n    }\n    return false;\n  };\n  PropertiesPromiseArray.prototype.shouldCopyValues = function () {\n    return false;\n  };\n  PropertiesPromiseArray.prototype.getActualLength = function (len) {\n    return len >> 1;\n  };\n  function props(promises) {\n    var ret;\n    var castValue = tryConvertToPromise(promises);\n    if (!isObject(castValue)) {\n      return apiRejection(\"cannot await properties of a non-object\\n\\n    See http://goo.gl/MqrFmX\\n\");\n    } else if (castValue instanceof Promise) {\n      ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined);\n    } else {\n      ret = new PropertiesPromiseArray(castValue).promise();\n    }\n    if (castValue instanceof Promise) {\n      ret._propagateFrom(castValue, 2);\n    }\n    return ret;\n  }\n  Promise.prototype.props = function () {\n    return props(this);\n  };\n  Promise.props = function (promises) {\n    return props(promises);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}