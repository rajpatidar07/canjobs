{"ast":null,"code":"var _objectSpread = require(\"C:\\\\Users\\\\dell2\\\\Desktop\\\\canjobs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\dell2\\\\Desktop\\\\canjobs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\dell2\\\\Desktop\\\\canjobs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n/**\n * TinyMCE version 6.8.0 (2023-11-22)\n */\n\n(function () {\n  'use strict';\n\n  var global$5 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n  var hasProto = function hasProto(v, constructor, predicate) {\n    var _a;\n    if (predicate(v, constructor.prototype)) {\n      return true;\n    } else {\n      return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n    }\n  };\n  var typeOf = function typeOf(x) {\n    var t = typeof x;\n    if (x === null) {\n      return 'null';\n    } else if (t === 'object' && Array.isArray(x)) {\n      return 'array';\n    } else if (t === 'object' && hasProto(x, String, function (o, proto) {\n      return proto.isPrototypeOf(o);\n    })) {\n      return 'string';\n    } else {\n      return t;\n    }\n  };\n  var isType = function isType(type) {\n    return function (value) {\n      return typeOf(value) === type;\n    };\n  };\n  var isSimpleType = function isSimpleType(type) {\n    return function (value) {\n      return typeof value === type;\n    };\n  };\n  var eq = function eq(t) {\n    return function (a) {\n      return t === a;\n    };\n  };\n  var isString = isType('string');\n  var isObject = isType('object');\n  var isArray = isType('array');\n  var isNull = eq(null);\n  var isBoolean = isSimpleType('boolean');\n  var isNullable = function isNullable(a) {\n    return a === null || a === undefined;\n  };\n  var isNonNullable = function isNonNullable(a) {\n    return !isNullable(a);\n  };\n  var isFunction = isSimpleType('function');\n  var isArrayOf = function isArrayOf(value, pred) {\n    if (isArray(value)) {\n      for (var i = 0, len = value.length; i < len; ++i) {\n        if (!pred(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n  var noop = function noop() {};\n  var constant = function constant(value) {\n    return function () {\n      return value;\n    };\n  };\n  var tripleEquals = function tripleEquals(a, b) {\n    return a === b;\n  };\n  var Optional = /*#__PURE__*/function () {\n    function Optional(tag, value) {\n      _classCallCheck(this, Optional);\n      this.tag = tag;\n      this.value = value;\n    }\n    _createClass(Optional, [{\n      key: \"fold\",\n      value: function fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n    }, {\n      key: \"isSome\",\n      value: function isSome() {\n        return this.tag;\n      }\n    }, {\n      key: \"isNone\",\n      value: function isNone() {\n        return !this.tag;\n      }\n    }, {\n      key: \"map\",\n      value: function map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n    }, {\n      key: \"bind\",\n      value: function bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n    }, {\n      key: \"exists\",\n      value: function exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n    }, {\n      key: \"forall\",\n      value: function forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n    }, {\n      key: \"filter\",\n      value: function filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n    }, {\n      key: \"getOr\",\n      value: function getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n    }, {\n      key: \"or\",\n      value: function or(replacement) {\n        return this.tag ? this : replacement;\n      }\n    }, {\n      key: \"getOrThunk\",\n      value: function getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n    }, {\n      key: \"orThunk\",\n      value: function orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n    }, {\n      key: \"getOrDie\",\n      value: function getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n    }, {\n      key: \"getOrNull\",\n      value: function getOrNull() {\n        return this.tag ? this.value : null;\n      }\n    }, {\n      key: \"getOrUndefined\",\n      value: function getOrUndefined() {\n        return this.value;\n      }\n    }, {\n      key: \"each\",\n      value: function each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray() {\n        return this.tag ? [this.value] : [];\n      }\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return this.tag ? \"some(\".concat(this.value, \")\") : 'none()';\n      }\n    }], [{\n      key: \"some\",\n      value: function some(value) {\n        return new Optional(true, value);\n      }\n    }, {\n      key: \"none\",\n      value: function none() {\n        return Optional.singletonNone;\n      }\n    }, {\n      key: \"from\",\n      value: function from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n    }]);\n    return Optional;\n  }();\n  Optional.singletonNone = new Optional(false);\n  var nativeIndexOf = Array.prototype.indexOf;\n  var nativePush = Array.prototype.push;\n  var rawIndexOf = function rawIndexOf(ts, t) {\n    return nativeIndexOf.call(ts, t);\n  };\n  var contains = function contains(xs, x) {\n    return rawIndexOf(xs, x) > -1;\n  };\n  var map = function map(xs, f) {\n    var len = xs.length;\n    var r = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var x = xs[i];\n      r[i] = f(x, i);\n    }\n    return r;\n  };\n  var each$1 = function each$1(xs, f) {\n    for (var i = 0, len = xs.length; i < len; i++) {\n      var x = xs[i];\n      f(x, i);\n    }\n  };\n  var foldl = function foldl(xs, f, acc) {\n    each$1(xs, function (x, i) {\n      acc = f(acc, x, i);\n    });\n    return acc;\n  };\n  var flatten = function flatten(xs) {\n    var r = [];\n    for (var i = 0, len = xs.length; i < len; ++i) {\n      if (!isArray(xs[i])) {\n        throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n      }\n      nativePush.apply(r, xs[i]);\n    }\n    return r;\n  };\n  var bind = function bind(xs, f) {\n    return flatten(map(xs, f));\n  };\n  var findMap = function findMap(arr, f) {\n    for (var i = 0; i < arr.length; i++) {\n      var r = f(arr[i], i);\n      if (r.isSome()) {\n        return r;\n      }\n    }\n    return Optional.none();\n  };\n  var is = function is(lhs, rhs) {\n    var comparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : tripleEquals;\n    return lhs.exists(function (left) {\n      return comparator(left, rhs);\n    });\n  };\n  var cat = function cat(arr) {\n    var r = [];\n    var push = function push(x) {\n      r.push(x);\n    };\n    for (var i = 0; i < arr.length; i++) {\n      arr[i].each(push);\n    }\n    return r;\n  };\n  var someIf = function someIf(b, a) {\n    return b ? Optional.some(a) : Optional.none();\n  };\n  var option = function option(name) {\n    return function (editor) {\n      return editor.options.get(name);\n    };\n  };\n  var register$1 = function register$1(editor) {\n    var registerOption = editor.options.register;\n    registerOption('link_assume_external_targets', {\n      processor: function processor(value) {\n        var valid = isString(value) || isBoolean(value);\n        if (valid) {\n          if (value === true) {\n            return {\n              value: 1,\n              valid: valid\n            };\n          } else if (value === 'http' || value === 'https') {\n            return {\n              value: value,\n              valid: valid\n            };\n          } else {\n            return {\n              value: 0,\n              valid: valid\n            };\n          }\n        } else {\n          return {\n            valid: false,\n            message: 'Must be a string or a boolean.'\n          };\n        }\n      },\n      default: false\n    });\n    registerOption('link_context_toolbar', {\n      processor: 'boolean',\n      default: false\n    });\n    registerOption('link_list', {\n      processor: function processor(value) {\n        return isString(value) || isFunction(value) || isArrayOf(value, isObject);\n      }\n    });\n    registerOption('link_default_target', {\n      processor: 'string'\n    });\n    registerOption('link_default_protocol', {\n      processor: 'string',\n      default: 'https'\n    });\n    registerOption('link_target_list', {\n      processor: function processor(value) {\n        return isBoolean(value) || isArrayOf(value, isObject);\n      },\n      default: true\n    });\n    registerOption('link_rel_list', {\n      processor: 'object[]',\n      default: []\n    });\n    registerOption('link_class_list', {\n      processor: 'object[]',\n      default: []\n    });\n    registerOption('link_title', {\n      processor: 'boolean',\n      default: true\n    });\n    registerOption('allow_unsafe_link_target', {\n      processor: 'boolean',\n      default: false\n    });\n    registerOption('link_quicklink', {\n      processor: 'boolean',\n      default: false\n    });\n  };\n  var assumeExternalTargets = option('link_assume_external_targets');\n  var hasContextToolbar = option('link_context_toolbar');\n  var getLinkList = option('link_list');\n  var getDefaultLinkTarget = option('link_default_target');\n  var getDefaultLinkProtocol = option('link_default_protocol');\n  var getTargetList = option('link_target_list');\n  var getRelList = option('link_rel_list');\n  var getLinkClassList = option('link_class_list');\n  var shouldShowLinkTitle = option('link_title');\n  var allowUnsafeLinkTarget = option('allow_unsafe_link_target');\n  var useQuickLink = option('link_quicklink');\n  var global$4 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n  var getValue = function getValue(item) {\n    return isString(item.value) ? item.value : '';\n  };\n  var getText = function getText(item) {\n    if (isString(item.text)) {\n      return item.text;\n    } else if (isString(item.title)) {\n      return item.title;\n    } else {\n      return '';\n    }\n  };\n  var sanitizeList = function sanitizeList(list, extractValue) {\n    var out = [];\n    global$4.each(list, function (item) {\n      var text = getText(item);\n      if (item.menu !== undefined) {\n        var items = sanitizeList(item.menu, extractValue);\n        out.push({\n          text: text,\n          items: items\n        });\n      } else {\n        var value = extractValue(item);\n        out.push({\n          text: text,\n          value: value\n        });\n      }\n    });\n    return out;\n  };\n  var sanitizeWith = function sanitizeWith() {\n    var extracter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getValue;\n    return function (list) {\n      return Optional.from(list).map(function (list) {\n        return sanitizeList(list, extracter);\n      });\n    };\n  };\n  var sanitize = function sanitize(list) {\n    return sanitizeWith(getValue)(list);\n  };\n  var createUi = function createUi(name, label) {\n    return function (items) {\n      return {\n        name: name,\n        type: 'listbox',\n        label: label,\n        items: items\n      };\n    };\n  };\n  var ListOptions = {\n    sanitize: sanitize,\n    sanitizeWith: sanitizeWith,\n    createUi: createUi,\n    getValue: getValue\n  };\n  var keys = Object.keys;\n  var hasOwnProperty = Object.hasOwnProperty;\n  var each = function each(obj, f) {\n    var props = keys(obj);\n    for (var k = 0, len = props.length; k < len; k++) {\n      var i = props[k];\n      var x = obj[i];\n      f(x, i);\n    }\n  };\n  var objAcc = function objAcc(r) {\n    return function (x, i) {\n      r[i] = x;\n    };\n  };\n  var internalFilter = function internalFilter(obj, pred, onTrue, onFalse) {\n    each(obj, function (x, i) {\n      (pred(x, i) ? onTrue : onFalse)(x, i);\n    });\n  };\n  var filter = function filter(obj, pred) {\n    var t = {};\n    internalFilter(obj, pred, objAcc(t), noop);\n    return t;\n  };\n  var has = function has(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n  var hasNonNullableKey = function hasNonNullableKey(obj, key) {\n    return has(obj, key) && obj[key] !== undefined && obj[key] !== null;\n  };\n  var global$3 = tinymce.util.Tools.resolve('tinymce.dom.TreeWalker');\n  var global$2 = tinymce.util.Tools.resolve('tinymce.util.URI');\n  var isAnchor = function isAnchor(elm) {\n    return isNonNullable(elm) && elm.nodeName.toLowerCase() === 'a';\n  };\n  var isLink = function isLink(elm) {\n    return isAnchor(elm) && !!getHref(elm);\n  };\n  var collectNodesInRange = function collectNodesInRange(rng, predicate) {\n    if (rng.collapsed) {\n      return [];\n    } else {\n      var contents = rng.cloneContents();\n      var firstChild = contents.firstChild;\n      var walker = new global$3(firstChild, contents);\n      var elements = [];\n      var current = firstChild;\n      do {\n        if (predicate(current)) {\n          elements.push(current);\n        }\n      } while (current = walker.next());\n      return elements;\n    }\n  };\n  var hasProtocol = function hasProtocol(url) {\n    return /^\\w+:/i.test(url);\n  };\n  var getHref = function getHref(elm) {\n    var _a, _b;\n    return (_b = (_a = elm.getAttribute('data-mce-href')) !== null && _a !== void 0 ? _a : elm.getAttribute('href')) !== null && _b !== void 0 ? _b : '';\n  };\n  var applyRelTargetRules = function applyRelTargetRules(rel, isUnsafe) {\n    var rules = ['noopener'];\n    var rels = rel ? rel.split(/\\s+/) : [];\n    var toString = function toString(rels) {\n      return global$4.trim(rels.sort().join(' '));\n    };\n    var addTargetRules = function addTargetRules(rels) {\n      rels = removeTargetRules(rels);\n      return rels.length > 0 ? rels.concat(rules) : rules;\n    };\n    var removeTargetRules = function removeTargetRules(rels) {\n      return rels.filter(function (val) {\n        return global$4.inArray(rules, val) === -1;\n      });\n    };\n    var newRels = isUnsafe ? addTargetRules(rels) : removeTargetRules(rels);\n    return newRels.length > 0 ? toString(newRels) : '';\n  };\n  var trimCaretContainers = function trimCaretContainers(text) {\n    return text.replace(/\\uFEFF/g, '');\n  };\n  var getAnchorElement = function getAnchorElement(editor, selectedElm) {\n    selectedElm = selectedElm || getLinksInSelection(editor.selection.getRng())[0] || editor.selection.getNode();\n    if (isImageFigure(selectedElm)) {\n      return Optional.from(editor.dom.select('a[href]', selectedElm)[0]);\n    } else {\n      return Optional.from(editor.dom.getParent(selectedElm, 'a[href]'));\n    }\n  };\n  var isInAnchor = function isInAnchor(editor, selectedElm) {\n    return getAnchorElement(editor, selectedElm).isSome();\n  };\n  var getAnchorText = function getAnchorText(selection, anchorElm) {\n    var text = anchorElm.fold(function () {\n      return selection.getContent({\n        format: 'text'\n      });\n    }, function (anchorElm) {\n      return anchorElm.innerText || anchorElm.textContent || '';\n    });\n    return trimCaretContainers(text);\n  };\n  var getLinksInSelection = function getLinksInSelection(rng) {\n    return collectNodesInRange(rng, isLink);\n  };\n  var getLinks$1 = function getLinks$1(elements) {\n    return global$4.grep(elements, isLink);\n  };\n  var hasLinks = function hasLinks(elements) {\n    return getLinks$1(elements).length > 0;\n  };\n  var hasLinksInSelection = function hasLinksInSelection(rng) {\n    return getLinksInSelection(rng).length > 0;\n  };\n  var isOnlyTextSelected = function isOnlyTextSelected(editor) {\n    var inlineTextElements = editor.schema.getTextInlineElements();\n    var isElement = function isElement(elm) {\n      return elm.nodeType === 1 && !isAnchor(elm) && !has(inlineTextElements, elm.nodeName.toLowerCase());\n    };\n    var isInBlockAnchor = getAnchorElement(editor).exists(function (anchor) {\n      return anchor.hasAttribute('data-mce-block');\n    });\n    if (isInBlockAnchor) {\n      return false;\n    }\n    var rng = editor.selection.getRng();\n    if (!rng.collapsed) {\n      var elements = collectNodesInRange(rng, isElement);\n      return elements.length === 0;\n    } else {\n      return true;\n    }\n  };\n  var isImageFigure = function isImageFigure(elm) {\n    return isNonNullable(elm) && elm.nodeName === 'FIGURE' && /\\bimage\\b/i.test(elm.className);\n  };\n  var getLinkAttrs = function getLinkAttrs(data) {\n    var attrs = ['title', 'rel', 'class', 'target'];\n    return foldl(attrs, function (acc, key) {\n      data[key].each(function (value) {\n        acc[key] = value.length > 0 ? value : null;\n      });\n      return acc;\n    }, {\n      href: data.href\n    });\n  };\n  var handleExternalTargets = function handleExternalTargets(href, assumeExternalTargets) {\n    if ((assumeExternalTargets === 'http' || assumeExternalTargets === 'https') && !hasProtocol(href)) {\n      return assumeExternalTargets + '://' + href;\n    }\n    return href;\n  };\n  var applyLinkOverrides = function applyLinkOverrides(editor, linkAttrs) {\n    var newLinkAttrs = _objectSpread({}, linkAttrs);\n    if (getRelList(editor).length === 0 && !allowUnsafeLinkTarget(editor)) {\n      var newRel = applyRelTargetRules(newLinkAttrs.rel, newLinkAttrs.target === '_blank');\n      newLinkAttrs.rel = newRel ? newRel : null;\n    }\n    if (Optional.from(newLinkAttrs.target).isNone() && getTargetList(editor) === false) {\n      newLinkAttrs.target = getDefaultLinkTarget(editor);\n    }\n    newLinkAttrs.href = handleExternalTargets(newLinkAttrs.href, assumeExternalTargets(editor));\n    return newLinkAttrs;\n  };\n  var updateLink = function updateLink(editor, anchorElm, text, linkAttrs) {\n    text.each(function (text) {\n      if (has(anchorElm, 'innerText')) {\n        anchorElm.innerText = text;\n      } else {\n        anchorElm.textContent = text;\n      }\n    });\n    editor.dom.setAttribs(anchorElm, linkAttrs);\n    editor.selection.select(anchorElm);\n  };\n  var createLink = function createLink(editor, selectedElm, text, linkAttrs) {\n    var dom = editor.dom;\n    if (isImageFigure(selectedElm)) {\n      linkImageFigure(dom, selectedElm, linkAttrs);\n    } else {\n      text.fold(function () {\n        editor.execCommand('mceInsertLink', false, linkAttrs);\n      }, function (text) {\n        editor.insertContent(dom.createHTML('a', linkAttrs, dom.encode(text)));\n      });\n    }\n  };\n  var linkDomMutation = function linkDomMutation(editor, attachState, data) {\n    var selectedElm = editor.selection.getNode();\n    var anchorElm = getAnchorElement(editor, selectedElm);\n    var linkAttrs = applyLinkOverrides(editor, getLinkAttrs(data));\n    editor.undoManager.transact(function () {\n      if (data.href === attachState.href) {\n        attachState.attach();\n      }\n      anchorElm.fold(function () {\n        createLink(editor, selectedElm, data.text, linkAttrs);\n      }, function (elm) {\n        editor.focus();\n        updateLink(editor, elm, data.text, linkAttrs);\n      });\n    });\n  };\n  var unlinkSelection = function unlinkSelection(editor) {\n    var dom = editor.dom,\n      selection = editor.selection;\n    var bookmark = selection.getBookmark();\n    var rng = selection.getRng().cloneRange();\n    var startAnchorElm = dom.getParent(rng.startContainer, 'a[href]', editor.getBody());\n    var endAnchorElm = dom.getParent(rng.endContainer, 'a[href]', editor.getBody());\n    if (startAnchorElm) {\n      rng.setStartBefore(startAnchorElm);\n    }\n    if (endAnchorElm) {\n      rng.setEndAfter(endAnchorElm);\n    }\n    selection.setRng(rng);\n    editor.execCommand('unlink');\n    selection.moveToBookmark(bookmark);\n  };\n  var unlinkDomMutation = function unlinkDomMutation(editor) {\n    editor.undoManager.transact(function () {\n      var node = editor.selection.getNode();\n      if (isImageFigure(node)) {\n        unlinkImageFigure(editor, node);\n      } else {\n        unlinkSelection(editor);\n      }\n      editor.focus();\n    });\n  };\n  var unwrapOptions = function unwrapOptions(data) {\n    var cls = data.class,\n      href = data.href,\n      rel = data.rel,\n      target = data.target,\n      text = data.text,\n      title = data.title;\n    return filter({\n      class: cls.getOrNull(),\n      href: href,\n      rel: rel.getOrNull(),\n      target: target.getOrNull(),\n      text: text.getOrNull(),\n      title: title.getOrNull()\n    }, function (v, _k) {\n      return isNull(v) === false;\n    });\n  };\n  var sanitizeData = function sanitizeData(editor, data) {\n    var getOption = editor.options.get;\n    var uriOptions = {\n      allow_html_data_urls: getOption('allow_html_data_urls'),\n      allow_script_urls: getOption('allow_script_urls'),\n      allow_svg_data_urls: getOption('allow_svg_data_urls')\n    };\n    var href = data.href;\n    return _objectSpread({}, data, {\n      href: global$2.isDomSafe(href, 'a', uriOptions) ? href : ''\n    });\n  };\n  var link = function link(editor, attachState, data) {\n    var sanitizedData = sanitizeData(editor, data);\n    editor.hasPlugin('rtc', true) ? editor.execCommand('createlink', false, unwrapOptions(sanitizedData)) : linkDomMutation(editor, attachState, sanitizedData);\n  };\n  var unlink = function unlink(editor) {\n    editor.hasPlugin('rtc', true) ? editor.execCommand('unlink') : unlinkDomMutation(editor);\n  };\n  var unlinkImageFigure = function unlinkImageFigure(editor, fig) {\n    var _a;\n    var img = editor.dom.select('img', fig)[0];\n    if (img) {\n      var a = editor.dom.getParents(img, 'a[href]', fig)[0];\n      if (a) {\n        (_a = a.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(img, a);\n        editor.dom.remove(a);\n      }\n    }\n  };\n  var linkImageFigure = function linkImageFigure(dom, fig, attrs) {\n    var _a;\n    var img = dom.select('img', fig)[0];\n    if (img) {\n      var a = dom.create('a', attrs);\n      (_a = img.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(a, img);\n      a.appendChild(img);\n    }\n  };\n  var isListGroup = function isListGroup(item) {\n    return hasNonNullableKey(item, 'items');\n  };\n  var findTextByValue = function findTextByValue(value, catalog) {\n    return findMap(catalog, function (item) {\n      if (isListGroup(item)) {\n        return findTextByValue(value, item.items);\n      } else {\n        return someIf(item.value === value, item);\n      }\n    });\n  };\n  var getDelta = function getDelta(persistentText, fieldName, catalog, data) {\n    var value = data[fieldName];\n    var hasPersistentText = persistentText.length > 0;\n    return value !== undefined ? findTextByValue(value, catalog).map(function (i) {\n      return {\n        url: {\n          value: i.value,\n          meta: {\n            text: hasPersistentText ? persistentText : i.text,\n            attach: noop\n          }\n        },\n        text: hasPersistentText ? persistentText : i.text\n      };\n    }) : Optional.none();\n  };\n  var findCatalog = function findCatalog(catalogs, fieldName) {\n    if (fieldName === 'link') {\n      return catalogs.link;\n    } else if (fieldName === 'anchor') {\n      return catalogs.anchor;\n    } else {\n      return Optional.none();\n    }\n  };\n  var init = function init(initialData, linkCatalog) {\n    var persistentData = {\n      text: initialData.text,\n      title: initialData.title\n    };\n    var getTitleFromUrlChange = function getTitleFromUrlChange(url) {\n      var _a;\n      return someIf(persistentData.title.length <= 0, Optional.from((_a = url.meta) === null || _a === void 0 ? void 0 : _a.title).getOr(''));\n    };\n    var getTextFromUrlChange = function getTextFromUrlChange(url) {\n      var _a;\n      return someIf(persistentData.text.length <= 0, Optional.from((_a = url.meta) === null || _a === void 0 ? void 0 : _a.text).getOr(url.value));\n    };\n    var onUrlChange = function onUrlChange(data) {\n      var text = getTextFromUrlChange(data.url);\n      var title = getTitleFromUrlChange(data.url);\n      if (text.isSome() || title.isSome()) {\n        return Optional.some(_objectSpread({}, text.map(function (text) {\n          return {\n            text: text\n          };\n        }).getOr({}), title.map(function (title) {\n          return {\n            title: title\n          };\n        }).getOr({})));\n      } else {\n        return Optional.none();\n      }\n    };\n    var onCatalogChange = function onCatalogChange(data, change) {\n      var catalog = findCatalog(linkCatalog, change).getOr([]);\n      return getDelta(persistentData.text, change, catalog, data);\n    };\n    var onChange = function onChange(getData, change) {\n      var name = change.name;\n      if (name === 'url') {\n        return onUrlChange(getData());\n      } else if (contains(['anchor', 'link'], name)) {\n        return onCatalogChange(getData(), name);\n      } else if (name === 'text' || name === 'title') {\n        persistentData[name] = getData()[name];\n        return Optional.none();\n      } else {\n        return Optional.none();\n      }\n    };\n    return {\n      onChange: onChange\n    };\n  };\n  var DialogChanges = {\n    init: init,\n    getDelta: getDelta\n  };\n  var global$1 = tinymce.util.Tools.resolve('tinymce.util.Delay');\n  var delayedConfirm = function delayedConfirm(editor, message, callback) {\n    var rng = editor.selection.getRng();\n    global$1.setEditorTimeout(editor, function () {\n      editor.windowManager.confirm(message, function (state) {\n        editor.selection.setRng(rng);\n        callback(state);\n      });\n    });\n  };\n  var tryEmailTransform = function tryEmailTransform(data) {\n    var url = data.href;\n    var suggestMailTo = url.indexOf('@') > 0 && url.indexOf('/') === -1 && url.indexOf('mailto:') === -1;\n    return suggestMailTo ? Optional.some({\n      message: 'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?',\n      preprocess: function preprocess(oldData) {\n        return _objectSpread({}, oldData, {\n          href: 'mailto:' + url\n        });\n      }\n    }) : Optional.none();\n  };\n  var tryProtocolTransform = function tryProtocolTransform(assumeExternalTargets, defaultLinkProtocol) {\n    return function (data) {\n      var url = data.href;\n      var suggestProtocol = assumeExternalTargets === 1 && !hasProtocol(url) || assumeExternalTargets === 0 && /^\\s*www(\\.|\\d\\.)/i.test(url);\n      return suggestProtocol ? Optional.some({\n        message: \"The URL you entered seems to be an external link. Do you want to add the required \".concat(defaultLinkProtocol, \":// prefix?\"),\n        preprocess: function preprocess(oldData) {\n          return _objectSpread({}, oldData, {\n            href: defaultLinkProtocol + '://' + url\n          });\n        }\n      }) : Optional.none();\n    };\n  };\n  var preprocess = function preprocess(editor, data) {\n    return findMap([tryEmailTransform, tryProtocolTransform(assumeExternalTargets(editor), getDefaultLinkProtocol(editor))], function (f) {\n      return f(data);\n    }).fold(function () {\n      return Promise.resolve(data);\n    }, function (transform) {\n      return new Promise(function (callback) {\n        delayedConfirm(editor, transform.message, function (state) {\n          callback(state ? transform.preprocess(data) : data);\n        });\n      });\n    });\n  };\n  var DialogConfirms = {\n    preprocess: preprocess\n  };\n  var getAnchors = function getAnchors(editor) {\n    var anchorNodes = editor.dom.select('a:not([href])');\n    var anchors = bind(anchorNodes, function (anchor) {\n      var id = anchor.name || anchor.id;\n      return id ? [{\n        text: id,\n        value: '#' + id\n      }] : [];\n    });\n    return anchors.length > 0 ? Optional.some([{\n      text: 'None',\n      value: ''\n    }].concat(anchors)) : Optional.none();\n  };\n  var AnchorListOptions = {\n    getAnchors: getAnchors\n  };\n  var getClasses = function getClasses(editor) {\n    var list = getLinkClassList(editor);\n    if (list.length > 0) {\n      return ListOptions.sanitize(list);\n    }\n    return Optional.none();\n  };\n  var ClassListOptions = {\n    getClasses: getClasses\n  };\n  var parseJson = function parseJson(text) {\n    try {\n      return Optional.some(JSON.parse(text));\n    } catch (err) {\n      return Optional.none();\n    }\n  };\n  var getLinks = function getLinks(editor) {\n    var extractor = function extractor(item) {\n      return editor.convertURL(item.value || item.url || '', 'href');\n    };\n    var linkList = getLinkList(editor);\n    return new Promise(function (resolve) {\n      if (isString(linkList)) {\n        fetch(linkList).then(function (res) {\n          return res.ok ? res.text().then(parseJson) : Promise.reject();\n        }).then(resolve, function () {\n          return resolve(Optional.none());\n        });\n      } else if (isFunction(linkList)) {\n        linkList(function (output) {\n          return resolve(Optional.some(output));\n        });\n      } else {\n        resolve(Optional.from(linkList));\n      }\n    }).then(function (optItems) {\n      return optItems.bind(ListOptions.sanitizeWith(extractor)).map(function (items) {\n        if (items.length > 0) {\n          var noneItem = [{\n            text: 'None',\n            value: ''\n          }];\n          return noneItem.concat(items);\n        } else {\n          return items;\n        }\n      });\n    });\n  };\n  var LinkListOptions = {\n    getLinks: getLinks\n  };\n  var getRels = function getRels(editor, initialTarget) {\n    var list = getRelList(editor);\n    if (list.length > 0) {\n      var isTargetBlank = is(initialTarget, '_blank');\n      var enforceSafe = allowUnsafeLinkTarget(editor) === false;\n      var safeRelExtractor = function safeRelExtractor(item) {\n        return applyRelTargetRules(ListOptions.getValue(item), isTargetBlank);\n      };\n      var sanitizer = enforceSafe ? ListOptions.sanitizeWith(safeRelExtractor) : ListOptions.sanitize;\n      return sanitizer(list);\n    }\n    return Optional.none();\n  };\n  var RelOptions = {\n    getRels: getRels\n  };\n  var fallbacks = [{\n    text: 'Current window',\n    value: ''\n  }, {\n    text: 'New window',\n    value: '_blank'\n  }];\n  var getTargets = function getTargets(editor) {\n    var list = getTargetList(editor);\n    if (isArray(list)) {\n      return ListOptions.sanitize(list).orThunk(function () {\n        return Optional.some(fallbacks);\n      });\n    } else if (list === false) {\n      return Optional.none();\n    }\n    return Optional.some(fallbacks);\n  };\n  var TargetOptions = {\n    getTargets: getTargets\n  };\n  var nonEmptyAttr = function nonEmptyAttr(dom, elem, name) {\n    var val = dom.getAttrib(elem, name);\n    return val !== null && val.length > 0 ? Optional.some(val) : Optional.none();\n  };\n  var extractFromAnchor = function extractFromAnchor(editor, anchor) {\n    var dom = editor.dom;\n    var onlyText = isOnlyTextSelected(editor);\n    var text = onlyText ? Optional.some(getAnchorText(editor.selection, anchor)) : Optional.none();\n    var url = anchor.bind(function (anchorElm) {\n      return Optional.from(dom.getAttrib(anchorElm, 'href'));\n    });\n    var target = anchor.bind(function (anchorElm) {\n      return Optional.from(dom.getAttrib(anchorElm, 'target'));\n    });\n    var rel = anchor.bind(function (anchorElm) {\n      return nonEmptyAttr(dom, anchorElm, 'rel');\n    });\n    var linkClass = anchor.bind(function (anchorElm) {\n      return nonEmptyAttr(dom, anchorElm, 'class');\n    });\n    var title = anchor.bind(function (anchorElm) {\n      return nonEmptyAttr(dom, anchorElm, 'title');\n    });\n    return {\n      url: url,\n      text: text,\n      title: title,\n      target: target,\n      rel: rel,\n      linkClass: linkClass\n    };\n  };\n  var collect = function collect(editor, linkNode) {\n    return LinkListOptions.getLinks(editor).then(function (links) {\n      var anchor = extractFromAnchor(editor, linkNode);\n      return {\n        anchor: anchor,\n        catalogs: {\n          targets: TargetOptions.getTargets(editor),\n          rels: RelOptions.getRels(editor, anchor.target),\n          classes: ClassListOptions.getClasses(editor),\n          anchor: AnchorListOptions.getAnchors(editor),\n          link: links\n        },\n        optNode: linkNode,\n        flags: {\n          titleEnabled: shouldShowLinkTitle(editor)\n        }\n      };\n    });\n  };\n  var DialogInfo = {\n    collect: collect\n  };\n  var handleSubmit = function handleSubmit(editor, info) {\n    return function (api) {\n      var data = api.getData();\n      if (!data.url.value) {\n        unlink(editor);\n        api.close();\n        return;\n      }\n      var getChangedValue = function getChangedValue(key) {\n        return Optional.from(data[key]).filter(function (value) {\n          return !is(info.anchor[key], value);\n        });\n      };\n      var changedData = {\n        href: data.url.value,\n        text: getChangedValue('text'),\n        target: getChangedValue('target'),\n        rel: getChangedValue('rel'),\n        class: getChangedValue('linkClass'),\n        title: getChangedValue('title')\n      };\n      var attachState = {\n        href: data.url.value,\n        attach: data.url.meta !== undefined && data.url.meta.attach ? data.url.meta.attach : noop\n      };\n      DialogConfirms.preprocess(editor, changedData).then(function (pData) {\n        link(editor, attachState, pData);\n      });\n      api.close();\n    };\n  };\n  var collectData = function collectData(editor) {\n    var anchorNode = getAnchorElement(editor);\n    return DialogInfo.collect(editor, anchorNode);\n  };\n  var getInitialData = function getInitialData(info, defaultTarget) {\n    var anchor = info.anchor;\n    var url = anchor.url.getOr('');\n    return {\n      url: {\n        value: url,\n        meta: {\n          original: {\n            value: url\n          }\n        }\n      },\n      text: anchor.text.getOr(''),\n      title: anchor.title.getOr(''),\n      anchor: url,\n      link: url,\n      rel: anchor.rel.getOr(''),\n      target: anchor.target.or(defaultTarget).getOr(''),\n      linkClass: anchor.linkClass.getOr('')\n    };\n  };\n  var makeDialog = function makeDialog(settings, onSubmit, editor) {\n    var urlInput = [{\n      name: 'url',\n      type: 'urlinput',\n      filetype: 'file',\n      label: 'URL',\n      picker_text: 'Browse links'\n    }];\n    var displayText = settings.anchor.text.map(function () {\n      return {\n        name: 'text',\n        type: 'input',\n        label: 'Text to display'\n      };\n    }).toArray();\n    var titleText = settings.flags.titleEnabled ? [{\n      name: 'title',\n      type: 'input',\n      label: 'Title'\n    }] : [];\n    var defaultTarget = Optional.from(getDefaultLinkTarget(editor));\n    var initialData = getInitialData(settings, defaultTarget);\n    var catalogs = settings.catalogs;\n    var dialogDelta = DialogChanges.init(initialData, catalogs);\n    var body = {\n      type: 'panel',\n      items: flatten([urlInput, displayText, titleText, cat([catalogs.anchor.map(ListOptions.createUi('anchor', 'Anchors')), catalogs.rels.map(ListOptions.createUi('rel', 'Rel')), catalogs.targets.map(ListOptions.createUi('target', 'Open link in...')), catalogs.link.map(ListOptions.createUi('link', 'Link list')), catalogs.classes.map(ListOptions.createUi('linkClass', 'Class'))])])\n    };\n    return {\n      title: 'Insert/Edit Link',\n      size: 'normal',\n      body: body,\n      buttons: [{\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      }, {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }],\n      initialData: initialData,\n      onChange: function onChange(api, _ref) {\n        var name = _ref.name;\n        dialogDelta.onChange(api.getData, {\n          name: name\n        }).each(function (newData) {\n          api.setData(newData);\n        });\n      },\n      onSubmit: onSubmit\n    };\n  };\n  var open$1 = function open$1(editor) {\n    var data = collectData(editor);\n    data.then(function (info) {\n      var onSubmit = handleSubmit(editor, info);\n      return makeDialog(info, onSubmit, editor);\n    }).then(function (spec) {\n      editor.windowManager.open(spec);\n    });\n  };\n  var register = function register(editor) {\n    editor.addCommand('mceLink', function (_ui, value) {\n      if ((value === null || value === void 0 ? void 0 : value.dialog) === true || !useQuickLink(editor)) {\n        open$1(editor);\n      } else {\n        editor.dispatch('contexttoolbar-show', {\n          toolbarKey: 'quicklink'\n        });\n      }\n    });\n  };\n  var global = tinymce.util.Tools.resolve('tinymce.util.VK');\n  var appendClickRemove = function appendClickRemove(link, evt) {\n    document.body.appendChild(link);\n    link.dispatchEvent(evt);\n    document.body.removeChild(link);\n  };\n  var open = function open(url) {\n    var link = document.createElement('a');\n    link.target = '_blank';\n    link.href = url;\n    link.rel = 'noreferrer noopener';\n    var evt = document.createEvent('MouseEvents');\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n    appendClickRemove(link, evt);\n  };\n  var getLink = function getLink(editor, elm) {\n    return editor.dom.getParent(elm, 'a[href]');\n  };\n  var getSelectedLink = function getSelectedLink(editor) {\n    return getLink(editor, editor.selection.getStart());\n  };\n  var hasOnlyAltModifier = function hasOnlyAltModifier(e) {\n    return e.altKey === true && e.shiftKey === false && e.ctrlKey === false && e.metaKey === false;\n  };\n  var gotoLink = function gotoLink(editor, a) {\n    if (a) {\n      var href = getHref(a);\n      if (/^#/.test(href)) {\n        var targetEl = editor.dom.select(href);\n        if (targetEl.length) {\n          editor.selection.scrollIntoView(targetEl[0], true);\n        }\n      } else {\n        open(a.href);\n      }\n    }\n  };\n  var openDialog = function openDialog(editor) {\n    return function () {\n      editor.execCommand('mceLink', false, {\n        dialog: true\n      });\n    };\n  };\n  var gotoSelectedLink = function gotoSelectedLink(editor) {\n    return function () {\n      gotoLink(editor, getSelectedLink(editor));\n    };\n  };\n  var setupGotoLinks = function setupGotoLinks(editor) {\n    editor.on('click', function (e) {\n      var link = getLink(editor, e.target);\n      if (link && global.metaKeyPressed(e)) {\n        e.preventDefault();\n        gotoLink(editor, link);\n      }\n    });\n    editor.on('keydown', function (e) {\n      if (!e.isDefaultPrevented() && e.keyCode === 13 && hasOnlyAltModifier(e)) {\n        var _link = getSelectedLink(editor);\n        if (_link) {\n          e.preventDefault();\n          gotoLink(editor, _link);\n        }\n      }\n    });\n  };\n  var toggleState = function toggleState(editor, toggler) {\n    editor.on('NodeChange', toggler);\n    return function () {\n      return editor.off('NodeChange', toggler);\n    };\n  };\n  var toggleLinkState = function toggleLinkState(editor) {\n    return function (api) {\n      var updateState = function updateState() {\n        api.setActive(!editor.mode.isReadOnly() && isInAnchor(editor, editor.selection.getNode()));\n        api.setEnabled(editor.selection.isEditable());\n      };\n      updateState();\n      return toggleState(editor, updateState);\n    };\n  };\n  var toggleLinkMenuState = function toggleLinkMenuState(editor) {\n    return function (api) {\n      var updateState = function updateState() {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      updateState();\n      return toggleState(editor, updateState);\n    };\n  };\n  var hasExactlyOneLinkInSelection = function hasExactlyOneLinkInSelection(editor) {\n    var links = editor.selection.isCollapsed() ? getLinks$1(editor.dom.getParents(editor.selection.getStart())) : getLinksInSelection(editor.selection.getRng());\n    return links.length === 1;\n  };\n  var toggleGotoLinkState = function toggleGotoLinkState(editor) {\n    return function (api) {\n      var updateState = function updateState() {\n        return api.setEnabled(hasExactlyOneLinkInSelection(editor));\n      };\n      updateState();\n      return toggleState(editor, updateState);\n    };\n  };\n  var toggleUnlinkState = function toggleUnlinkState(editor) {\n    return function (api) {\n      var hasLinks$1 = function hasLinks$1(parents) {\n        return hasLinks(parents) || hasLinksInSelection(editor.selection.getRng());\n      };\n      var parents = editor.dom.getParents(editor.selection.getStart());\n      var updateEnabled = function updateEnabled(parents) {\n        api.setEnabled(hasLinks$1(parents) && editor.selection.isEditable());\n      };\n      updateEnabled(parents);\n      return toggleState(editor, function (e) {\n        return updateEnabled(e.parents);\n      });\n    };\n  };\n  var setup = function setup(editor) {\n    editor.addShortcut('Meta+K', '', function () {\n      editor.execCommand('mceLink');\n    });\n  };\n  var setupButtons = function setupButtons(editor) {\n    editor.ui.registry.addToggleButton('link', {\n      icon: 'link',\n      tooltip: 'Insert/edit link',\n      onAction: openDialog(editor),\n      onSetup: toggleLinkState(editor)\n    });\n    editor.ui.registry.addButton('openlink', {\n      icon: 'new-tab',\n      tooltip: 'Open link',\n      onAction: gotoSelectedLink(editor),\n      onSetup: toggleGotoLinkState(editor)\n    });\n    editor.ui.registry.addButton('unlink', {\n      icon: 'unlink',\n      tooltip: 'Remove link',\n      onAction: function onAction() {\n        return unlink(editor);\n      },\n      onSetup: toggleUnlinkState(editor)\n    });\n  };\n  var setupMenuItems = function setupMenuItems(editor) {\n    editor.ui.registry.addMenuItem('openlink', {\n      text: 'Open link',\n      icon: 'new-tab',\n      onAction: gotoSelectedLink(editor),\n      onSetup: toggleGotoLinkState(editor)\n    });\n    editor.ui.registry.addMenuItem('link', {\n      icon: 'link',\n      text: 'Link...',\n      shortcut: 'Meta+K',\n      onSetup: toggleLinkMenuState(editor),\n      onAction: openDialog(editor)\n    });\n    editor.ui.registry.addMenuItem('unlink', {\n      icon: 'unlink',\n      text: 'Remove link',\n      onAction: function onAction() {\n        return unlink(editor);\n      },\n      onSetup: toggleUnlinkState(editor)\n    });\n  };\n  var setupContextMenu = function setupContextMenu(editor) {\n    var inLink = 'link unlink openlink';\n    var noLink = 'link';\n    editor.ui.registry.addContextMenu('link', {\n      update: function update(element) {\n        var isEditable = editor.dom.isEditable(element);\n        if (!isEditable) {\n          return '';\n        }\n        return hasLinks(editor.dom.getParents(element, 'a')) ? inLink : noLink;\n      }\n    });\n  };\n  var setupContextToolbars = function setupContextToolbars(editor) {\n    var collapseSelectionToEnd = function collapseSelectionToEnd(editor) {\n      editor.selection.collapse(false);\n    };\n    var onSetupLink = function onSetupLink(buttonApi) {\n      var node = editor.selection.getNode();\n      buttonApi.setEnabled(isInAnchor(editor, node));\n      return noop;\n    };\n    var getLinkText = function getLinkText(value) {\n      var anchor = getAnchorElement(editor);\n      var onlyText = isOnlyTextSelected(editor);\n      if (anchor.isNone() && onlyText) {\n        var text = getAnchorText(editor.selection, anchor);\n        return someIf(text.length === 0, value);\n      } else {\n        return Optional.none();\n      }\n    };\n    editor.ui.registry.addContextForm('quicklink', {\n      launch: {\n        type: 'contextformtogglebutton',\n        icon: 'link',\n        tooltip: 'Link',\n        onSetup: toggleLinkState(editor)\n      },\n      label: 'Link',\n      predicate: function predicate(node) {\n        return hasContextToolbar(editor) && isInAnchor(editor, node);\n      },\n      initValue: function initValue() {\n        var elm = getAnchorElement(editor);\n        return elm.fold(constant(''), getHref);\n      },\n      commands: [{\n        type: 'contextformtogglebutton',\n        icon: 'link',\n        tooltip: 'Link',\n        primary: true,\n        onSetup: function onSetup(buttonApi) {\n          var node = editor.selection.getNode();\n          buttonApi.setActive(isInAnchor(editor, node));\n          return toggleLinkState(editor)(buttonApi);\n        },\n        onAction: function onAction(formApi) {\n          var value = formApi.getValue();\n          var text = getLinkText(value);\n          var attachState = {\n            href: value,\n            attach: noop\n          };\n          link(editor, attachState, {\n            href: value,\n            text: text,\n            title: Optional.none(),\n            rel: Optional.none(),\n            target: Optional.none(),\n            class: Optional.none()\n          });\n          collapseSelectionToEnd(editor);\n          formApi.hide();\n        }\n      }, {\n        type: 'contextformbutton',\n        icon: 'unlink',\n        tooltip: 'Remove link',\n        onSetup: onSetupLink,\n        onAction: function onAction(formApi) {\n          unlink(editor);\n          formApi.hide();\n        }\n      }, {\n        type: 'contextformbutton',\n        icon: 'new-tab',\n        tooltip: 'Open link',\n        onSetup: onSetupLink,\n        onAction: function onAction(formApi) {\n          gotoSelectedLink(editor)();\n          formApi.hide();\n        }\n      }]\n    });\n  };\n  var Plugin = function Plugin() {\n    global$5.add('link', function (editor) {\n      register$1(editor);\n      setupButtons(editor);\n      setupMenuItems(editor);\n      setupContextMenu(editor);\n      setupContextToolbars(editor);\n      setupGotoLinks(editor);\n      register(editor);\n      setup(editor);\n    });\n  };\n  Plugin();\n})();","map":null,"metadata":{},"sourceType":"script"}