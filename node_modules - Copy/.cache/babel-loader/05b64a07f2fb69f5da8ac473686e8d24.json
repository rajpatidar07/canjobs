{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\dell2\\\\Desktop\\\\canjobs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIMGElementState;\nvar _react = require(\"react\");\nvar _reactNative = require(\"react-native\");\nvar _defaultInitialImageDimensions = _interopRequireDefault(require(\"./defaultInitialImageDimensions\"));\nvar _useIMGNormalizedSource = _interopRequireDefault(require(\"./useIMGNormalizedSource\"));\nvar _useImageConcreteDimensions = _interopRequireDefault(require(\"./useImageConcreteDimensions\"));\nvar _getIMGState = require(\"./getIMGState\");\nvar _useImageSpecifiedDimensions = _interopRequireDefault(require(\"./useImageSpecifiedDimensions\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getImageSizeAsync(_ref) {\n  var uri = _ref.uri,\n    headers = _ref.headers;\n  return new Promise(function (onsuccess, onerror) {\n    var onImageDimensionsSuccess = function onImageDimensionsSuccess(width, height) {\n      return onsuccess({\n        width: width,\n        height: height\n      });\n    };\n    if (headers) {\n      _reactNative.Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      _reactNative.Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\nfunction useImageNaturalDimensions(props) {\n  var source = props.source,\n    cachedNaturalDimensions = props.cachedNaturalDimensions;\n  var _ref2 = (0, _react.useState)(cachedNaturalDimensions || null),\n    _ref3 = _slicedToArray(_ref2, 2),\n    naturalDimensions = _ref3[0],\n    setNaturalDimensions = _ref3[1];\n  var _ref4 = cachedNaturalDimensions || {},\n    cachedNaturalWidth = _ref4.width,\n    cachedNaturalHeight = _ref4.height;\n  var _ref5 = (0, _react.useState)(null),\n    _ref6 = _slicedToArray(_ref5, 2),\n    error = _ref6[0],\n    setError = _ref6[1];\n  (0, _react.useEffect)(function resetOnURIChange() {\n    setNaturalDimensions(cachedNaturalWidth != null && cachedNaturalHeight != null ? {\n      width: cachedNaturalWidth,\n      height: cachedNaturalHeight\n    } : null);\n    setError(null);\n  }, [cachedNaturalHeight, cachedNaturalWidth, source.uri]);\n  return {\n    onNaturalDimensions: setNaturalDimensions,\n    onError: setError,\n    naturalDimensions: naturalDimensions,\n    error: error\n  };\n}\nfunction useFetchedNaturalDimensions(props) {\n  var source = props.source,\n    cachedNaturalDimensions = props.cachedNaturalDimensions;\n  var _useImageNaturalDimen = useImageNaturalDimensions(props),\n    error = _useImageNaturalDimen.error,\n    naturalDimensions = _useImageNaturalDimen.naturalDimensions,\n    onError = _useImageNaturalDimen.onError,\n    onNaturalDimensions = _useImageNaturalDimen.onNaturalDimensions;\n  var hasCachedDimensions = !!cachedNaturalDimensions;\n  (0, _react.useEffect)(function fetchPhysicalDimensions() {\n    var cancelled = false;\n    if (source.uri && !hasCachedDimensions) {\n      getImageSizeAsync({\n        uri: source.uri,\n        headers: source.headers\n      }).then(function (dimensions) {\n        return !cancelled && onNaturalDimensions(dimensions);\n      }).catch(function (e) {\n        return !cancelled && onError(e || {});\n      });\n      return function () {\n        cancelled = true;\n      };\n    }\n  }, [source.uri, source.headers, onNaturalDimensions, onError, hasCachedDimensions]);\n  return {\n    naturalDimensions: naturalDimensions,\n    error: error,\n    onError: onError,\n    onNaturalDimensions: onNaturalDimensions\n  };\n}\n/**\n * This hook will compute concrete dimensions from image natural dimensions and\n * constraints. It will fetch the image and get its dimensions.\n *\n * @remarks If you know the dimensions beforehand, use\n * {@link useIMGElementStateWithCache} instead to save a network request and\n * prevent a layout shift.\n */\n\nfunction useIMGElementState(props) {\n  var alt = props.alt,\n    altColor = props.altColor,\n    source = props.source,\n    contentWidth = props.contentWidth,\n    computeMaxWidth = props.computeMaxWidth,\n    objectFit = props.objectFit,\n    _props$initialDimensi = props.initialDimensions,\n    initialDimensions = _props$initialDimensi === void 0 ? _defaultInitialImageDimensions.default : _props$initialDimensi,\n    cachedNaturalDimensions = props.cachedNaturalDimensions;\n  var _ref7 = (0, _useImageSpecifiedDimensions.default)(props),\n    flatStyle = _ref7.flatStyle,\n    specifiedDimensions = _ref7.specifiedDimensions;\n  var nomalizedSource = (0, _useIMGNormalizedSource.default)({\n    specifiedDimensions: specifiedDimensions,\n    source: source\n  });\n  var _useFetchedNaturalDim = useFetchedNaturalDimensions({\n      source: nomalizedSource,\n      specifiedDimensions: specifiedDimensions,\n      cachedNaturalDimensions: cachedNaturalDimensions\n    }),\n    naturalDimensions = _useFetchedNaturalDim.naturalDimensions,\n    onError = _useFetchedNaturalDim.onError,\n    error = _useFetchedNaturalDim.error;\n  var concreteDimensions = (0, _useImageConcreteDimensions.default)({\n    flatStyle: flatStyle,\n    naturalDimensions: naturalDimensions,\n    specifiedDimensions: specifiedDimensions,\n    computeMaxWidth: computeMaxWidth,\n    contentWidth: contentWidth\n  });\n  return (0, _getIMGState.getIMGState)({\n    error: error,\n    alt: alt,\n    altColor: altColor,\n    concreteDimensions: concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions: initialDimensions,\n    objectFit: objectFit,\n    onError: onError,\n    source: nomalizedSource\n  });\n}","map":null,"metadata":{},"sourceType":"script"}