{"ast":null,"code":"'use strict';\n\nmodule.exports = function (obj) {\n  if (typeof obj === 'string') {\n    return camelCase(obj);\n  }\n  return walk(obj);\n};\nfunction walk(obj) {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n  if (isDate(obj) || isRegex(obj)) {\n    return obj;\n  }\n  if (isArray(obj)) {\n    return map(obj, walk);\n  }\n  return reduce(objectKeys(obj), function (acc, key) {\n    var camel = camelCase(key);\n    acc[camel] = walk(obj[key]);\n    return acc;\n  }, {});\n}\nfunction camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n}\nvar isArray = Array.isArray || function (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\nvar isDate = function isDate(obj) {\n  return Object.prototype.toString.call(obj) === '[object Date]';\n};\nvar isRegex = function isRegex(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\nvar has = Object.prototype.hasOwnProperty;\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\nfunction map(xs, f) {\n  if (xs.map) {\n    return xs.map(f);\n  }\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\nfunction reduce(xs, f, acc) {\n  if (xs.reduce) {\n    return xs.reduce(f, acc);\n  }\n  for (var i = 0; i < xs.length; i++) {\n    acc = f(acc, xs[i], i);\n  }\n  return acc;\n}","map":null,"metadata":{},"sourceType":"script"}