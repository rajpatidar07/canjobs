{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _createClass = require(\"C:\\\\Users\\\\dell2\\\\Desktop\\\\canjobs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\dell2\\\\Desktop\\\\canjobs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.books_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nvar googleapis_common_1 = require(\"googleapis-common\");\nvar books_v1;\n(function (books_v1) {\n  /**\n   * Books API\n   *\n   * The Google Books API allows clients to access the Google Books repository.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const books = google.books('v1');\n   * ```\n   */\n  var Books = function Books(options, google) {\n    _classCallCheck(this, Books);\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.bookshelves = new Resource$Bookshelves(this.context);\n    this.cloudloading = new Resource$Cloudloading(this.context);\n    this.dictionary = new Resource$Dictionary(this.context);\n    this.familysharing = new Resource$Familysharing(this.context);\n    this.layers = new Resource$Layers(this.context);\n    this.myconfig = new Resource$Myconfig(this.context);\n    this.mylibrary = new Resource$Mylibrary(this.context);\n    this.notification = new Resource$Notification(this.context);\n    this.onboarding = new Resource$Onboarding(this.context);\n    this.personalizedstream = new Resource$Personalizedstream(this.context);\n    this.promooffer = new Resource$Promooffer(this.context);\n    this.series = new Resource$Series(this.context);\n    this.volumes = new Resource$Volumes(this.context);\n  };\n  books_v1.Books = Books;\n  var Resource$Bookshelves = /*#__PURE__*/function () {\n    function Resource$Bookshelves(context) {\n      _classCallCheck(this, Resource$Bookshelves);\n      this.context = context;\n      this.volumes = new Resource$Bookshelves$Volumes(this.context);\n    }\n    _createClass(Resource$Bookshelves, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId', 'shelf'],\n          pathParams: ['shelf', 'userId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId'],\n          pathParams: ['userId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Bookshelves;\n  }();\n  books_v1.Resource$Bookshelves = Resource$Bookshelves;\n  var Resource$Bookshelves$Volumes = /*#__PURE__*/function () {\n    function Resource$Bookshelves$Volumes(context) {\n      _classCallCheck(this, Resource$Bookshelves$Volumes);\n      this.context = context;\n    }\n    _createClass(Resource$Bookshelves$Volumes, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userId', 'shelf'],\n          pathParams: ['shelf', 'userId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Bookshelves$Volumes;\n  }();\n  books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n  var Resource$Cloudloading = /*#__PURE__*/function () {\n    function Resource$Cloudloading(context) {\n      _classCallCheck(this, Resource$Cloudloading);\n      this.context = context;\n    }\n    _createClass(Resource$Cloudloading, [{\n      key: \"addBook\",\n      value: function addBook(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"deleteBook\",\n      value: function deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"updateBook\",\n      value: function updateBook(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Cloudloading;\n  }();\n  books_v1.Resource$Cloudloading = Resource$Cloudloading;\n  var Resource$Dictionary = /*#__PURE__*/function () {\n    function Resource$Dictionary(context) {\n      _classCallCheck(this, Resource$Dictionary);\n      this.context = context;\n    }\n    _createClass(Resource$Dictionary, [{\n      key: \"listOfflineMetadata\",\n      value: function listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['cpksver'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Dictionary;\n  }();\n  books_v1.Resource$Dictionary = Resource$Dictionary;\n  var Resource$Familysharing = /*#__PURE__*/function () {\n    function Resource$Familysharing(context) {\n      _classCallCheck(this, Resource$Familysharing);\n      this.context = context;\n    }\n    _createClass(Resource$Familysharing, [{\n      key: \"getFamilyInfo\",\n      value: function getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"share\",\n      value: function share(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"unshare\",\n      value: function unshare(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Familysharing;\n  }();\n  books_v1.Resource$Familysharing = Resource$Familysharing;\n  var Resource$Layers = /*#__PURE__*/function () {\n    function Resource$Layers(context) {\n      _classCallCheck(this, Resource$Layers);\n      this.context = context;\n      this.annotationData = new Resource$Layers$Annotationdata(this.context);\n      this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n    }\n    _createClass(Resource$Layers, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'summaryId'],\n          pathParams: ['summaryId', 'volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Layers;\n  }();\n  books_v1.Resource$Layers = Resource$Layers;\n  var Resource$Layers$Annotationdata = /*#__PURE__*/function () {\n    function Resource$Layers$Annotationdata(context) {\n      _classCallCheck(this, Resource$Layers$Annotationdata);\n      this.context = context;\n    }\n    _createClass(Resource$Layers$Annotationdata, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'layerId', 'annotationDataId', 'contentVersion'],\n          pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n          pathParams: ['layerId', 'volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Layers$Annotationdata;\n  }();\n  books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n  var Resource$Layers$Volumeannotations = /*#__PURE__*/function () {\n    function Resource$Layers$Volumeannotations(context) {\n      _classCallCheck(this, Resource$Layers$Volumeannotations);\n      this.context = context;\n    }\n    _createClass(Resource$Layers$Volumeannotations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'layerId', 'annotationId'],\n          pathParams: ['annotationId', 'layerId', 'volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n          pathParams: ['layerId', 'volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Layers$Volumeannotations;\n  }();\n  books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n  var Resource$Myconfig = /*#__PURE__*/function () {\n    function Resource$Myconfig(context) {\n      _classCallCheck(this, Resource$Myconfig);\n      this.context = context;\n    }\n    _createClass(Resource$Myconfig, [{\n      key: \"getUserSettings\",\n      value: function getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"releaseDownloadAccess\",\n      value: function releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['cpksver', 'volumeIds'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"requestAccess\",\n      value: function requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['cpksver', 'nonce', 'source', 'volumeId'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"syncVolumeLicenses\",\n      value: function syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['cpksver', 'nonce', 'source'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"updateUserSettings\",\n      value: function updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Myconfig;\n  }();\n  books_v1.Resource$Myconfig = Resource$Myconfig;\n  var Resource$Mylibrary = function Resource$Mylibrary(context) {\n    _classCallCheck(this, Resource$Mylibrary);\n    this.context = context;\n    this.annotations = new Resource$Mylibrary$Annotations(this.context);\n    this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n    this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n  };\n  books_v1.Resource$Mylibrary = Resource$Mylibrary;\n  var Resource$Mylibrary$Annotations = /*#__PURE__*/function () {\n    function Resource$Mylibrary$Annotations(context) {\n      _classCallCheck(this, Resource$Mylibrary$Annotations);\n      this.context = context;\n    }\n    _createClass(Resource$Mylibrary$Annotations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['annotationId'],\n          pathParams: ['annotationId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"summary\",\n      value: function summary(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['layerIds', 'volumeId'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['annotationId'],\n          pathParams: ['annotationId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Mylibrary$Annotations;\n  }();\n  books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n  var Resource$Mylibrary$Bookshelves = /*#__PURE__*/function () {\n    function Resource$Mylibrary$Bookshelves(context) {\n      _classCallCheck(this, Resource$Mylibrary$Bookshelves);\n      this.context = context;\n      this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n    }\n    _createClass(Resource$Mylibrary$Bookshelves, [{\n      key: \"addVolume\",\n      value: function addVolume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['shelf', 'volumeId'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"clearVolumes\",\n      value: function clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['shelf'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['shelf'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"moveVolume\",\n      value: function moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"removeVolume\",\n      value: function removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['shelf', 'volumeId'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Mylibrary$Bookshelves;\n  }();\n  books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n  var Resource$Mylibrary$Bookshelves$Volumes = /*#__PURE__*/function () {\n    function Resource$Mylibrary$Bookshelves$Volumes(context) {\n      _classCallCheck(this, Resource$Mylibrary$Bookshelves$Volumes);\n      this.context = context;\n    }\n    _createClass(Resource$Mylibrary$Bookshelves$Volumes, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['shelf'],\n          pathParams: ['shelf'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Mylibrary$Bookshelves$Volumes;\n  }();\n  books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n  var Resource$Mylibrary$Readingpositions = /*#__PURE__*/function () {\n    function Resource$Mylibrary$Readingpositions(context) {\n      _classCallCheck(this, Resource$Mylibrary$Readingpositions);\n      this.context = context;\n    }\n    _createClass(Resource$Mylibrary$Readingpositions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"setPosition\",\n      value: function setPosition(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId', 'position', 'timestamp'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Mylibrary$Readingpositions;\n  }();\n  books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n  var Resource$Notification = /*#__PURE__*/function () {\n    function Resource$Notification(context) {\n      _classCallCheck(this, Resource$Notification);\n      this.context = context;\n    }\n    _createClass(Resource$Notification, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['notification_id'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Notification;\n  }();\n  books_v1.Resource$Notification = Resource$Notification;\n  var Resource$Onboarding = /*#__PURE__*/function () {\n    function Resource$Onboarding(context) {\n      _classCallCheck(this, Resource$Onboarding);\n      this.context = context;\n    }\n    _createClass(Resource$Onboarding, [{\n      key: \"listCategories\",\n      value: function listCategories(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"listCategoryVolumes\",\n      value: function listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Onboarding;\n  }();\n  books_v1.Resource$Onboarding = Resource$Onboarding;\n  var Resource$Personalizedstream = /*#__PURE__*/function () {\n    function Resource$Personalizedstream(context) {\n      _classCallCheck(this, Resource$Personalizedstream);\n      this.context = context;\n    }\n    _createClass(Resource$Personalizedstream, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Personalizedstream;\n  }();\n  books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n  var Resource$Promooffer = /*#__PURE__*/function () {\n    function Resource$Promooffer(context) {\n      _classCallCheck(this, Resource$Promooffer);\n      this.context = context;\n    }\n    _createClass(Resource$Promooffer, [{\n      key: \"accept\",\n      value: function accept(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"dismiss\",\n      value: function dismiss(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Promooffer;\n  }();\n  books_v1.Resource$Promooffer = Resource$Promooffer;\n  var Resource$Series = /*#__PURE__*/function () {\n    function Resource$Series(context) {\n      _classCallCheck(this, Resource$Series);\n      this.context = context;\n      this.membership = new Resource$Series$Membership(this.context);\n    }\n    _createClass(Resource$Series, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['series_id'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Series;\n  }();\n  books_v1.Resource$Series = Resource$Series;\n  var Resource$Series$Membership = /*#__PURE__*/function () {\n    function Resource$Series$Membership(context) {\n      _classCallCheck(this, Resource$Series$Membership);\n      this.context = context;\n    }\n    _createClass(Resource$Series$Membership, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['series_id'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Series$Membership;\n  }();\n  books_v1.Resource$Series$Membership = Resource$Series$Membership;\n  var Resource$Volumes = /*#__PURE__*/function () {\n    function Resource$Volumes(context) {\n      _classCallCheck(this, Resource$Volumes);\n      this.context = context;\n      this.associated = new Resource$Volumes$Associated(this.context);\n      this.mybooks = new Resource$Volumes$Mybooks(this.context);\n      this.recommended = new Resource$Volumes$Recommended(this.context);\n      this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n    }\n    _createClass(Resource$Volumes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['q'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Volumes;\n  }();\n  books_v1.Resource$Volumes = Resource$Volumes;\n  var Resource$Volumes$Associated = /*#__PURE__*/function () {\n    function Resource$Volumes$Associated(context) {\n      _classCallCheck(this, Resource$Volumes$Associated);\n      this.context = context;\n    }\n    _createClass(Resource$Volumes$Associated, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['volumeId'],\n          pathParams: ['volumeId'],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Volumes$Associated;\n  }();\n  books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n  var Resource$Volumes$Mybooks = /*#__PURE__*/function () {\n    function Resource$Volumes$Mybooks(context) {\n      _classCallCheck(this, Resource$Volumes$Mybooks);\n      this.context = context;\n    }\n    _createClass(Resource$Volumes$Mybooks, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Volumes$Mybooks;\n  }();\n  books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n  var Resource$Volumes$Recommended = /*#__PURE__*/function () {\n    function Resource$Volumes$Recommended(context) {\n      _classCallCheck(this, Resource$Volumes$Recommended);\n      this.context = context;\n    }\n    _createClass(Resource$Volumes$Recommended, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }, {\n      key: \"rate\",\n      value: function rate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['rating', 'volumeId'],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Volumes$Recommended;\n  }();\n  books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n  var Resource$Volumes$Useruploaded = /*#__PURE__*/function () {\n    function Resource$Volumes$Useruploaded(context) {\n      _classCallCheck(this, Resource$Volumes$Useruploaded);\n      this.context = context;\n    }\n    _createClass(Resource$Volumes$Useruploaded, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n        var rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n        if (callback) {\n          (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n        } else {\n          return (0, googleapis_common_1.createAPIRequest)(parameters);\n        }\n      }\n    }]);\n    return Resource$Volumes$Useruploaded;\n  }();\n  books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 || (exports.books_v1 = books_v1 = {}));","map":null,"metadata":{},"sourceType":"script"}