{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\dell2\\\\Desktop\\\\canjobs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _domutils = require(\"domutils\");\nvar _HTMLContentModel = _interopRequireDefault(require(\"./HTMLContentModel\"));\nvar _HTMLElementModel = _interopRequireDefault(require(\"./HTMLElementModel\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar UA_ANCHOR_COL = '#245dc1';\nvar UA_GRAY = '#CCC';\nvar UA_MARGIN_HZ = 30;\nvar bigMarginTopBottomStyle = {\n  marginTop: '1em',\n  marginBottom: '1em'\n};\nvar shortMarginTopBottomStyle = {\n  marginTop: '.5em',\n  marginBottom: '.5em'\n};\nvar lineThroughStyle = {\n  textDecorationLine: 'line-through'\n};\nvar italicStyle = {\n  fontStyle: 'italic'\n};\nvar monoStyle = {\n  fontFamily: 'monospace'\n};\nvar boldStyle = {\n  fontWeight: 'bold'\n};\nvar spacedBlockStyle = _objectSpread({}, bigMarginTopBottomStyle, {\n  marginLeft: UA_MARGIN_HZ,\n  marginRight: UA_MARGIN_HZ\n});\nvar anchorStyle = {\n  color: UA_ANCHOR_COL,\n  textDecorationLine: 'underline',\n  textDecorationColor: UA_ANCHOR_COL\n};\nvar leftBorderQuoteStyle = {\n  borderLeftWidth: 2,\n  borderLeftColor: UA_GRAY\n};\nvar dottedUnderlineStyle = {\n  textDecorationLine: 'underline',\n  textDecorationStyle: 'dotted'\n};\nvar solidUnderlineStyle = {\n  textDecorationLine: 'underline',\n  textDecorationStyle: 'solid'\n}; // TODO, support directional styles\n\nvar listStyles = _objectSpread({}, bigMarginTopBottomStyle, {\n  paddingLeft: 30\n});\nvar preStyles = _objectSpread({\n  whiteSpace: 'pre'\n}, monoStyle, bigMarginTopBottomStyle);\nfunction headerStyle(fontSize, marginSize) {\n  return _objectSpread({\n    fontSize: fontSize,\n    marginTop: marginSize,\n    marginBottom: marginSize\n  }, boldStyle);\n}\nvar getReactNativePropsForHeading = function getReactNativePropsForHeading(_ref) {\n  var domNode = _ref.domNode;\n  var textLabel = (0, _domutils.textContent)(domNode);\n  return {\n    native: {\n      accessible: true,\n      accessibilityLabel: textLabel,\n      accessibilityRole: 'header'\n    }\n  };\n};\nvar getReactNativePropsWithHref = function getReactNativePropsWithHref(_ref2) {\n  var attributes = _ref2.attributes;\n  if (typeof attributes.href === 'string' && attributes.href.length > 0) {\n    return {\n      native: {\n        accessible: true,\n        accessibilityRole: 'link'\n      }\n    };\n  }\n};\nvar sectioningModelMap = {\n  address: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'address',\n    mixedUAStyles: italicStyle\n  }),\n  article: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'article'\n  }),\n  aside: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'aside'\n  }),\n  body: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'body'\n  }),\n  footer: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'footer'\n  }),\n  h1: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'h1',\n    mixedUAStyles: headerStyle('2em', '.67em'),\n    getReactNativeProps: getReactNativePropsForHeading\n  }),\n  h2: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'h2',\n    mixedUAStyles: headerStyle('1.5em', '.83em'),\n    getReactNativeProps: getReactNativePropsForHeading\n  }),\n  h3: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'h3',\n    mixedUAStyles: headerStyle('1.17em', '1em'),\n    getReactNativeProps: getReactNativePropsForHeading\n  }),\n  h4: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'h4',\n    mixedUAStyles: headerStyle('1em', '1.33em'),\n    getReactNativeProps: getReactNativePropsForHeading\n  }),\n  h5: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'h5',\n    mixedUAStyles: headerStyle('.83em', '1.67em'),\n    getReactNativeProps: getReactNativePropsForHeading\n  }),\n  h6: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'h6',\n    mixedUAStyles: headerStyle('.67em', '2.33em'),\n    getReactNativeProps: getReactNativePropsForHeading\n  }),\n  header: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'header'\n  }),\n  hgroup: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'hgroup'\n  }),\n  nav: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'nav'\n  }),\n  section: _HTMLElementModel.default.fromNativeModel({\n    category: 'sectioning',\n    tagName: 'section'\n  })\n};\nvar unsupportedModelMap = {\n  area: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'area',\n    category: 'untranslatable',\n    isVoid: true,\n    getReactNativeProps: getReactNativePropsWithHref\n  }),\n  map: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'map',\n    category: 'untranslatable'\n  })\n};\nvar attribsModelMap = {\n  accesskey: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'accesskey',\n    category: 'untranslatable'\n  }),\n  caption: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'caption',\n    category: 'untranslatable'\n  }),\n  col: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'col',\n    category: 'untranslatable',\n    isVoid: true\n  }),\n  colgroup: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'colgroup',\n    category: 'untranslatable'\n  }),\n  datalist: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'datalist',\n    category: 'untranslatable'\n  }),\n  source: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'source',\n    category: 'untranslatable',\n    isVoid: true\n  }),\n  track: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'track',\n    category: 'untranslatable',\n    isVoid: true\n  }),\n  optgroup: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'optgroup',\n    category: 'untranslatable'\n  }),\n  option: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'option',\n    category: 'untranslatable'\n  }),\n  param: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'param',\n    category: 'untranslatable',\n    isVoid: true\n  })\n};\nvar interactiveModelMap = {\n  button: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'button',\n    category: 'interactive',\n    reactNativeProps: {\n      native: {\n        accessibilityRole: 'button'\n      }\n    }\n  }),\n  fieldset: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'fieldset',\n    category: 'interactive'\n  }),\n  form: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'form',\n    category: 'interactive'\n  }),\n  input: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'input',\n    category: 'interactive',\n    isVoid: true\n  }),\n  label: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'label',\n    category: 'interactive'\n  }),\n  legend: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'legend',\n    category: 'interactive'\n  }),\n  meter: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'meter',\n    category: 'interactive'\n  }),\n  progress: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'progress',\n    category: 'interactive'\n  }),\n  select: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'select',\n    category: 'interactive',\n    reactNativeProps: {\n      native: {\n        accessible: true,\n        accessibilityRole: 'combobox'\n      }\n    }\n  }),\n  details: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'details',\n    category: 'interactive'\n  }),\n  dialog: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'dialog',\n    category: 'interactive'\n  }),\n  output: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'output',\n    category: 'interactive'\n  }),\n  summary: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'summary',\n    category: 'interactive'\n  }),\n  textarea: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'textarea',\n    category: 'interactive'\n  })\n};\nvar metadataModelMap = {\n  base: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'base',\n    category: 'untranslatable',\n    isVoid: true\n  }),\n  head: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'head',\n    category: 'untranslatable',\n    isOpaque: true\n  }),\n  link: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'link',\n    category: 'untranslatable',\n    isVoid: true\n  }),\n  meta: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'meta',\n    category: 'untranslatable',\n    isVoid: true\n  }),\n  title: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'title',\n    category: 'untranslatable'\n  })\n};\nvar untranslatableModelMap = _objectSpread({}, attribsModelMap, interactiveModelMap, unsupportedModelMap, metadataModelMap);\nvar groupingModelMap = {\n  blockquote: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'blockquote',\n    category: 'grouping',\n    getMixedUAStyles: function getMixedUAStyles(_ref3) {\n      var attributes = _ref3.attributes;\n      if (attributes.type === 'cite') {\n        return leftBorderQuoteStyle;\n      }\n    },\n    mixedUAStyles: spacedBlockStyle\n  }),\n  dd: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'dd',\n    category: 'grouping',\n    mixedUAStyles: {\n      marginLeft: UA_MARGIN_HZ\n    }\n  }),\n  div: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'div',\n    category: 'grouping'\n  }),\n  dl: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'dl',\n    category: 'grouping',\n    mixedUAStyles: bigMarginTopBottomStyle\n  }),\n  dt: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'dt',\n    category: 'grouping',\n    mixedUAStyles: boldStyle\n  }),\n  figcaption: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'figcaption',\n    category: 'grouping',\n    mixedUAStyles: _objectSpread({}, italicStyle, {\n      textAlign: 'center'\n    })\n  }),\n  figure: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'figure',\n    category: 'grouping',\n    mixedUAStyles: spacedBlockStyle\n  }),\n  hr: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'hr',\n    category: 'grouping',\n    mixedUAStyles: _objectSpread({\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      height: 1,\n      width: '100%',\n      backgroundColor: UA_GRAY\n    }, shortMarginTopBottomStyle)\n  }),\n  li: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'li',\n    category: 'grouping'\n  }),\n  main: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'main',\n    category: 'grouping'\n  }),\n  menu: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'menu',\n    category: 'grouping'\n  }),\n  ol: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'ol',\n    category: 'grouping',\n    mixedUAStyles: listStyles,\n    setMarkersForTNode: function setMarkersForTNode(targetMarkers, parentMarkers) {\n      targetMarkers.olNestLevel = parentMarkers.olNestLevel + 1;\n    }\n  }),\n  p: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'p',\n    category: 'grouping',\n    mixedUAStyles: bigMarginTopBottomStyle\n  }),\n  pre: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'pre',\n    category: 'grouping',\n    mixedUAStyles: preStyles\n  }),\n  xmp: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'xmp',\n    category: 'grouping',\n    mixedUAStyles: preStyles\n  }),\n  listing: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'listing',\n    category: 'grouping',\n    mixedUAStyles: preStyles\n  }),\n  plaintext: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'plaintext',\n    category: 'grouping',\n    mixedUAStyles: preStyles\n  }),\n  ul: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'ul',\n    category: 'grouping',\n    mixedUAStyles: listStyles,\n    setMarkersForTNode: function setMarkersForTNode(targetMarkers, parentMarkers) {\n      targetMarkers.ulNestLevel = parentMarkers.ulNestLevel + 1;\n    }\n  }),\n  dir: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'dir',\n    category: 'grouping',\n    mixedUAStyles: listStyles\n  })\n};\nvar tabularModelMap = {\n  table: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'table',\n    category: 'tabular'\n  }),\n  tbody: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'tbody',\n    category: 'tabular'\n  }),\n  td: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'td',\n    category: 'tabular',\n    mixedUAStyles: {\n      padding: 2,\n      flex: 1\n    }\n  }),\n  tfoot: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'tfoot',\n    category: 'tabular'\n  }),\n  th: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'th',\n    category: 'tabular',\n    mixedUAStyles: {\n      padding: 2,\n      flex: 1,\n      fontWeight: 'bold'\n    }\n  }),\n  thead: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'thead',\n    category: 'tabular'\n  }),\n  tr: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'tr',\n    category: 'tabular',\n    mixedUAStyles: {\n      flexDirection: 'row',\n      flexWrap: 'nowrap'\n    }\n  })\n}; // These emnbedded should be rendered by default.\n\nvar renderedEmbeddedModelMap = {\n  img: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'img',\n    category: 'embedded',\n    isVoid: true,\n    getReactNativeProps: function getReactNativeProps(_ref4, props) {\n      var attributes = _ref4.attributes;\n      // see https://w3c.github.io/html-aria/#el-img\n      var label = attributes['aria-label'] || attributes.alt;\n      if (label && (!(props !== null && props !== void 0 && props.view) || props.view.accessibilityRole !== 'none')) {\n        return {\n          native: {\n            accessibilityLabel: label,\n            accessibilityRole: 'image'\n          }\n        };\n      }\n      return {\n        native: {\n          accessibilityRole: 'none'\n        }\n      };\n    }\n  }).extend({\n    contentModel: _HTMLContentModel.default.block\n  }),\n  picture: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'picture',\n    category: 'embedded',\n    isOpaque: false,\n    isVoid: false // allows source and img\n  }).extend({\n    contentModel: _HTMLContentModel.default.block\n  })\n}; // Embedded elements content model is \"none\" by default.\n\nvar emptyEmbeddedModelMap = {\n  audio: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'audio',\n    category: 'embedded',\n    isVoid: false // allows tracks\n  }),\n\n  canvas: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'canvas',\n    category: 'embedded',\n    isVoid: false // allows specific content\n  }),\n\n  embed: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'embed',\n    category: 'embedded',\n    isVoid: true\n  }),\n  iframe: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'iframe',\n    category: 'embedded',\n    isVoid: true\n  }),\n  math: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'math',\n    category: 'embedded',\n    isVoid: false,\n    // allows mathml elems\n    isOpaque: true\n  }),\n  object: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'object',\n    category: 'embedded',\n    isVoid: false // allows params\n  }),\n\n  svg: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'svg',\n    category: 'embedded',\n    isVoid: false,\n    // allows svg elems\n    isOpaque: true,\n    getReactNativeProps: function getReactNativeProps(_ref5) {\n      var attributes = _ref5.attributes;\n      if (attributes['aria-label']) {\n        return {\n          native: {\n            accessibilityLabel: attributes['aria-label'],\n            accessibilityRole: 'image'\n          }\n        };\n      }\n      return {\n        native: {\n          accessibilityRole: 'none'\n        }\n      };\n    }\n  }),\n  video: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'video',\n    category: 'embedded',\n    isVoid: false // allows source, tracks + transparent\n  })\n};\n\nvar editsModelMap = {\n  ins: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'ins',\n    category: 'edits',\n    mixedUAStyles: solidUnderlineStyle,\n    setMarkersForTNode: function setMarkersForTNode(targetMarkers) {\n      targetMarkers.edits = 'ins';\n    }\n  }),\n  del: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'del',\n    category: 'edits',\n    mixedUAStyles: lineThroughStyle,\n    setMarkersForTNode: function setMarkersForTNode(targetMarkers) {\n      targetMarkers.edits = 'del';\n    }\n  })\n};\nvar textLevelModelMap = {\n  em: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'em',\n    category: 'textual',\n    mixedUAStyles: italicStyle\n  }),\n  strong: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'strong',\n    category: 'textual',\n    mixedUAStyles: boldStyle\n  }),\n  small: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'small',\n    category: 'textual',\n    mixedUAStyles: {\n      fontSize: 'smaller'\n    }\n  }),\n  big: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'big',\n    category: 'textual',\n    mixedUAStyles: {\n      fontSize: 'larger'\n    }\n  }),\n  s: _HTMLElementModel.default.fromNativeModel({\n    tagName: 's',\n    category: 'textual',\n    mixedUAStyles: lineThroughStyle\n  }),\n  strike: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'strike',\n    category: 'textual',\n    mixedUAStyles: lineThroughStyle\n  }),\n  cite: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'cite',\n    category: 'textual',\n    mixedUAStyles: italicStyle\n  }),\n  q: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'q',\n    category: 'textual' // default style, content: \"open,close-quote\"\n  }),\n\n  dfn: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'dfn',\n    category: 'textual',\n    mixedUAStyles: italicStyle\n  }),\n  abbr: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'abbr',\n    category: 'textual',\n    mixedUAStyles: dottedUnderlineStyle\n  }),\n  acronym: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'acronym',\n    category: 'textual',\n    mixedUAStyles: dottedUnderlineStyle\n  }),\n  ruby: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'ruby',\n    category: 'textual'\n  }),\n  rt: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'rt',\n    category: 'textual'\n  }),\n  rp: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'rp',\n    category: 'textual'\n  }),\n  data: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'data',\n    category: 'textual'\n  }),\n  time: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'time',\n    category: 'textual'\n  }),\n  code: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'code',\n    category: 'textual',\n    mixedUAStyles: monoStyle\n  }),\n  tt: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'tt',\n    category: 'textual',\n    mixedUAStyles: monoStyle\n  }),\n  var: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'var',\n    category: 'textual',\n    mixedUAStyles: italicStyle\n  }),\n  samp: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'samp',\n    category: 'textual',\n    mixedUAStyles: monoStyle\n  }),\n  kbd: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'kbd',\n    category: 'textual',\n    mixedUAStyles: monoStyle\n  }),\n  sub: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'sub',\n    category: 'textual',\n    mixedUAStyles: {\n      textAlignVertical: 'bottom',\n      fontSize: 'smaller'\n    }\n  }),\n  sup: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'sup',\n    category: 'textual',\n    mixedUAStyles: {\n      textAlignVertical: 'top',\n      fontSize: 'smaller'\n    }\n  }),\n  i: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'i',\n    category: 'textual',\n    mixedUAStyles: italicStyle\n  }),\n  b: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'b',\n    category: 'textual',\n    mixedUAStyles: boldStyle\n  }),\n  u: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'u',\n    category: 'textual',\n    mixedUAStyles: solidUnderlineStyle\n  }),\n  mark: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'mark',\n    category: 'textual',\n    mixedUAStyles: {\n      backgroundColor: 'yellow',\n      color: 'black'\n    }\n  }),\n  bdi: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'bdi',\n    category: 'textual' // unicode-bidi: isolate;\n  }),\n\n  bdo: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'bdo',\n    category: 'textual' //  unicode-bidi: isolate-override;\n  }),\n\n  span: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'span',\n    category: 'textual'\n  }),\n  br: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'br',\n    category: 'textual',\n    isVoid: true\n  }),\n  wbr: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'wbr',\n    category: 'textual',\n    isVoid: true\n  })\n};\nvar defaultHTMLElementModels = _objectSpread({\n  a: _HTMLElementModel.default.fromNativeModel({\n    tagName: 'a',\n    category: 'anchor',\n    getMixedUAStyles: function getMixedUAStyles(_ref6) {\n      var attributes = _ref6.attributes;\n      if (typeof attributes.href === 'string') {\n        return anchorStyle;\n      }\n    },\n    getReactNativeProps: getReactNativePropsWithHref,\n    setMarkersForTNode: function setMarkersForTNode(targetMarkers) {\n      targetMarkers.anchor = true;\n    }\n  })\n}, textLevelModelMap, editsModelMap, renderedEmbeddedModelMap, emptyEmbeddedModelMap, tabularModelMap, groupingModelMap, sectioningModelMap, interactiveModelMap, untranslatableModelMap);\nvar _default = defaultHTMLElementModels;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}