{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:\\\\Users\\\\dell2\\\\Desktop\\\\canjobs\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _TStyles = require(\"../styles/TStyles\");\nvar _markersPrototype = _interopRequireDefault(require(\"./markersPrototype\"));\nvar _tnodeSnapshot = _interopRequireDefault(require(\"./tnodeSnapshot\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction updateNodeIndexes(node, i) {\n  node.nodeIndex = i;\n}\nvar emptyAttrs = Object.freeze({});\nvar emptyClasses = Object.freeze([]);\nfunction findNativeRole(ariaRole) {\n  if (ariaRole === 'img') {\n    return 'image';\n  }\n  if (ariaRole === 'heading') {\n    return 'header';\n  }\n  if (ariaRole === 'dialog') {\n    return 'alert';\n  }\n  if (ariaRole === 'presentation') {\n    return 'none';\n  }\n  if (ariaRole === 'button' || ariaRole === 'switch' || ariaRole === 'checkbox' || ariaRole === 'radio' || ariaRole === 'radiogroup' || ariaRole === 'link' || ariaRole === 'search') {\n    return ariaRole;\n  }\n}\nfunction setMarkersFromAttributes(targetMarkers, _parentMarkers, _ref) {\n  var attributes = _ref.attributes;\n  if ('dir' in attributes) {\n    targetMarkers.direction = attributes.dir;\n  }\n  if ('lang' in attributes) {\n    targetMarkers.lang = attributes.lang;\n  }\n}\nfunction transformPropsDefinitionsToSwitch(definition) {\n  if (!definition) {\n    return null;\n  }\n  return {\n    text: _objectSpread({}, definition.native, definition.text),\n    view: _objectSpread({}, definition.native, definition.view)\n  };\n}\nfunction mergeSwitches(prev, next) {\n  if (!prev) {\n    return next;\n  }\n  if (!next) {\n    return prev;\n  }\n  return {\n    text: _objectSpread({}, prev.text, next.text),\n    view: _objectSpread({}, prev.view, next.view)\n  };\n}\nvar prototype = {\n  children: Object.freeze([]),\n  init: Object.freeze({}),\n  classes: Object.freeze([]),\n  styles: Object.freeze(_TStyles.TStyles.empty()),\n  markers: _markersPrototype.default,\n  __nodeIndex: null,\n  __trimmedLeft: false,\n  __trimmedRight: false,\n  __nativeProps: false,\n  __nativeStyles: false,\n  __webStyles: false,\n  __generateNativePropsFromTNode: function __generateNativePropsFromTNode() {\n    var ret = null;\n    if (this.styles.webTextFlow.userSelect) {\n      ret = mergeSwitches(ret, {\n        text: {\n          selectable: this.styles.webTextFlow.userSelect !== 'none'\n        }\n      });\n    }\n    if (this.attributes['aria-label']) {\n      var accessibilityProps = {\n        accessibilityLabel: this.attributes['aria-label']\n      };\n      ret = mergeSwitches(ret, {\n        view: accessibilityProps,\n        text: accessibilityProps\n      });\n    }\n    if (this.attributes.role) {\n      var role = this.attributes.role;\n      var accessibilityRole = findNativeRole(role);\n      if (accessibilityRole) {\n        var _accessibilityProps = {\n          accessibilityRole: accessibilityRole\n        };\n        ret = mergeSwitches(ret, {\n          view: _accessibilityProps,\n          text: _accessibilityProps\n        });\n      }\n    }\n    return ret;\n  },\n  __generateDynamicNativePropsFromModel: function __generateDynamicNativePropsFromModel(autoGeneratedProps) {\n    var elm = this.elementModel;\n    if (!elm || !elm.getReactNativeProps) {\n      return null;\n    }\n    return transformPropsDefinitionsToSwitch(elm.getReactNativeProps(this, autoGeneratedProps, this.domNode) || null);\n  },\n  get attributes() {\n    var _this$domNode;\n    return ((_this$domNode = this.domNode) === null || _this$domNode === void 0 ? void 0 : _this$domNode.attribs) || emptyAttrs;\n  },\n  get hasWhiteSpaceCollapsingEnabled() {\n    return typeof this.styles.webTextFlow.whiteSpace === 'string' ? this.styles.webTextFlow.whiteSpace === 'normal' : true;\n  },\n  get contentModel() {\n    var _this$elementModel;\n    return ((_this$elementModel = this.elementModel) === null || _this$elementModel === void 0 ? void 0 : _this$elementModel.contentModel) || null;\n  },\n  get parentStyles() {\n    var _this$parent;\n    return this.init.parentStyles || ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.styles) || null;\n  },\n  get id() {\n    return this.attributes.id || null;\n  },\n  get domNode() {\n    return this.init.domNode || null;\n  },\n  get elementModel() {\n    return this.init.elementModel;\n  },\n  get tagName() {\n    var _this$init$domNode;\n    return ((_this$init$domNode = this.init.domNode) === null || _this$init$domNode === void 0 ? void 0 : _this$init$domNode.name) || null;\n  },\n  get parent() {\n    return this.init.parent || null;\n  },\n  get nodeIndex() {\n    if (this.__nodeIndex === null) {\n      this.__nodeIndex = this.init.nodeIndex || 0;\n    }\n    return this.__nodeIndex;\n  },\n  get isUnregistered() {\n    return this.init.isUnregistered || false;\n  },\n  set nodeIndex(nodeIndex) {\n    this.__nodeIndex = nodeIndex;\n  },\n  bindChildren: function bindChildren(children) {\n    var shouldUpdateNodeIndexes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    //@ts-ignore\n    this.children = children;\n    if (shouldUpdateNodeIndexes) {\n      children.forEach(updateNodeIndexes);\n    }\n  },\n  cloneInitParams: function cloneInitParams(partial) {\n    return Object.assign({}, this.init, partial);\n  },\n  isCollapsibleLeft: function isCollapsibleLeft() {\n    if (this.children.length) {\n      return this.hasWhiteSpaceCollapsingEnabled && this.children[0].isCollapsibleLeft();\n    }\n    return false;\n  },\n  isCollapsibleRight: function isCollapsibleRight() {\n    if (this.children.length) {\n      return this.hasWhiteSpaceCollapsingEnabled && this.children[this.children.length - 1].isCollapsibleRight();\n    }\n    return false;\n  },\n  isEmpty: function isEmpty() {\n    return false;\n  },\n  trimLeft: function trimLeft() {\n    if (!this.__trimmedLeft && this.children.length) {\n      var firstChild = this.children[0];\n      firstChild.trimLeft();\n      if (firstChild.isEmpty()) {\n        //@ts-ignore\n        this.children.splice(0, 1);\n      }\n      this.__trimmedLeft = true;\n    }\n  },\n  trimRight: function trimRight() {\n    if (!this.__trimmedRight && this.children.length) {\n      var lastChild = this.children[this.children.length - 1];\n      lastChild.trimRight();\n      if (lastChild.isEmpty()) {\n        //@ts-ignore\n        this.children.splice(-1, 1);\n      }\n      this.__trimmedRight = true;\n    }\n  },\n  matchContentModel: function matchContentModel() {\n    return false;\n  },\n  spliceChildren: function spliceChildren(indexesToSplice) {\n    var offset = 0;\n    var _iterator = _createForOfIteratorHelper(indexesToSplice),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var i = _step.value;\n        //@ts-ignore\n        this.children.splice(i - offset, 1);\n        offset += 1;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  },\n  collapse: function collapse() {\n    this.collapseChildren();\n    this.bindChildren(this.children, true);\n  },\n  getNativeStyles: function getNativeStyles() {\n    if (this.__nativeStyles === false) {\n      this.__nativeStyles = _objectSpread({}, this.styles.nativeBlockFlow, this.styles.nativeBlockRet, this.styles.nativeTextFlow, this.styles.nativeTextRet);\n    }\n    return this.__nativeStyles;\n  },\n  getWebStyles: function getWebStyles() {\n    if (this.__webStyles === false) {\n      this.__webStyles = _objectSpread({}, this.styles.webTextFlow, this.styles.webBlockRet);\n    }\n    return this.__webStyles;\n  },\n  collapseChildren: function collapseChildren() {\n    return;\n  },\n  snapshot: function snapshot() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _options$withStyles = options.withStyles,\n      withStyles = _options$withStyles === void 0 ? false : _options$withStyles,\n      _options$withNodeInde = options.withNodeIndex,\n      withNodeIndex = _options$withNodeInde === void 0 ? false : _options$withNodeInde;\n    return (0, _tnodeSnapshot.default)(this, {\n      withStyles: withStyles,\n      withNodeIndex: withNodeIndex\n    });\n  },\n  hasClass: function hasClass(className) {\n    return this.classes.indexOf(className) > -1;\n  },\n  toString: function toString() {\n    return this.snapshot();\n  },\n  setMarkers: function setMarkers(targetMarkers, parentMarkers) {\n    var _this$elementModel2, _this$init$context$se, _this$init$context;\n    if ((_this$elementModel2 = this.elementModel) !== null && _this$elementModel2 !== void 0 && _this$elementModel2.setMarkersForTNode) {\n      this.elementModel.setMarkersForTNode(targetMarkers, parentMarkers, this);\n    }\n    setMarkersFromAttributes(targetMarkers, parentMarkers, this);\n    (_this$init$context$se = (_this$init$context = this.init.context).setMarkersForTNode) === null || _this$init$context$se === void 0 ? void 0 : _this$init$context$se.call(_this$init$context, targetMarkers, parentMarkers, this);\n  },\n  getReactNativeProps: function getReactNativeProps() {\n    if (this.__nativeProps === false) {\n      var _this$elementModel3;\n      var staticFromModel = transformPropsDefinitionsToSwitch((_this$elementModel3 = this.elementModel) === null || _this$elementModel3 === void 0 ? void 0 : _this$elementModel3.reactNativeProps);\n      var dynamicFromAttrs = this.__generateNativePropsFromTNode();\n      var autoGeneratedProps = mergeSwitches(staticFromModel, dynamicFromAttrs);\n      var dynamicFromModel = this.__generateDynamicNativePropsFromModel(autoGeneratedProps);\n      this.__nativeProps = mergeSwitches(autoGeneratedProps, dynamicFromModel);\n    }\n    return this.__nativeProps;\n  },\n  initialize: function initialize(init) {\n    var _this$attributes$clas;\n    this.init = init;\n    this.classes = ((_this$attributes$clas = this.attributes.class) === null || _this$attributes$clas === void 0 ? void 0 : _this$attributes$clas.split(/\\s+/)) || emptyClasses;\n    var parentMarkers = init.parent ? init.parent.markers : _markersPrototype.default.extend();\n    this.markers = parentMarkers.extend();\n    this.setMarkers(this.markers, parentMarkers, this); // Avoid very long prototype chains by assigning parent to current\n    // when current has no own properties\n\n    if (Object.keys(this.markers).length === 0) {\n      this.markers = parentMarkers;\n    }\n    this.styles = init.styles || init.context.stylesMerger.buildStyles(this.attributes.style, this.parentStyles || null, this);\n  }\n};\nvar TNodeCtor = function TNode(type, displayName, extraAccessors) {\n  this.type = type;\n  this.displayName = displayName;\n  extraAccessors && Object.defineProperties(this, extraAccessors);\n};\nTNodeCtor.prototype = prototype;\nvar _default = TNodeCtor;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}